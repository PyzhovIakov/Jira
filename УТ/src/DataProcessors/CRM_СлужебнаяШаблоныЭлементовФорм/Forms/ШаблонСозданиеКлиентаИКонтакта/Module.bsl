#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоКонтакт") Тогда
		ЗаполнятьКлиентаИКонтакт = Ложь;
	Иначе
		ЗаполнятьКлиентаИКонтакт = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКлиента");
		ДополнительныеПараметры.Вставить("Объект", Клиент_Объект);
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
		
	Если ЗаполнятьКлиентаИКонтакт Тогда
		
		Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
			CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
			CRM_Модуль.ДополнитьРеквизитыФормыДляСозданияКонтрагента(ЭтотОбъект);
		КонецЕсли;
		
		ИницилизироватьДанныеКлиента();
		
		ВидПартнераКомпания = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
		ВидПартнераЧастноеЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
		
		Параметры.Свойство("Ответственный", Клиент_Объект.ОсновнойМенеджер);
		
		Если Параметры.Свойство("ПотенциальныйКлиент") И ЗначениеЗаполнено(Параметры["ПотенциальныйКлиент"]) Тогда
			ПотенциальныйКлиент = Параметры.ПотенциальныйКлиент;
			ЗаполнитьКлиентаИзПотенциального(Параметры["ПотенциальныйКлиент"]);
		Иначе	
			НастройкаКлиент_ОбъектЮрФизЛицо = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.Клиент_ОбъектЮрФизЛицо",
				 "МастерРегистрации",
				 Неопределено);
			Если НастройкаКлиент_ОбъектЮрФизЛицо = Неопределено Тогда
				Клиент_Объект.ЮрФизЛицо = ВидПартнераЧастноеЛицо;
			Иначе
				Клиент_Объект.ЮрФизЛицо = НастройкаКлиент_ОбъектЮрФизЛицо;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("КлиентВладелец") Тогда
			ЗначениеВРеквизитФормы(Параметры.КлиентВладелец.ПолучитьОбъект(), "Клиент_Объект");
			Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
		КонецЕсли;
		
		CRM_РазрешитьСозданиеИнтересаБезКЛ = (РольДоступна("ПолныеПрава")
			 ИЛИ РольДоступна("CRM_РазрешитьСозданиеИнтересаБезКЛ"));
			 
	Иначе // Выбрать существующего Клиента в родительской форме и заполнять только Контакт
		
		ПотенциальныйКлиент = Параметры.ПотенциальныйКлиент;
		ЗаполнитьКлиентаИзПотенциального(Параметры["ПотенциальныйКлиент"], Истина);
		Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
		
	КонецЕсли;		 
	
	ИдентификаторФормыСтрокой = "_" + СтрЗаменить(Строка(УникальныйИдентификатор), "-", "_");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) Экспорт // АПК:78 - исключить из проверки.
	
	Если ЗаполнятьКлиентаИКонтакт Тогда
		CRM_ЗаписатьВсеТипыОтношений();
		СформироватьТипОтношенийПредставление();
	КонецЕсли;
	
	Клиент_ОбъектЮрФизЛицоПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ШаблоныЭлементовФорм
&НаКлиенте
Функция ОписаниеФормы(ИмяГруппы = "") Экспорт // АПК:78 - исключить из проверки.
	Возврат ОписаниеФормыНаСервере(ИмяГруппы);
КонецФункции	

&НаСервере
Функция ОписаниеФормыНаСервере(ИмяГруппы)
	
	Если ИмяГруппы <> "" Тогда
		Группа = Элементы.Найти(ИмяГруппы);
	Иначе
		Группа = Неопределено;
	КонецЕсли;
	Возврат CRM_ШаблоныЭлементовФорм.ОписаниеФормы(ЭтотОбъект, Группа);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхКлиента

&НаСервере
Процедура ИзменитьСоставРеквизитов()
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	Если ОбщиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЭлементов = Обработки.CRM_МастерРегистрацииОбращения.СответствиеЭлементовМастераИИнтереса();
	Для каждого НастройкаГруппы Из ОбщиеНастройки Цикл
		Если НастройкаГруппы.Ключ = "Клиент" ИЛИ НастройкаГруппы.Ключ = "Контакт" Тогда
			Для каждого НастройкаЭлемента Из НастройкаГруппы.Значение Цикл
				Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("Строка") Тогда
					ИмяЭлемента = "";
					Если НЕ СоответствиеЭлементов.Свойство(НастройкаЭлемента.Значение, ИмяЭлемента) Тогда
						ИмяЭлемента = НастройкаЭлемента.Значение;
					КонецЕсли;
					Элемент = Элементы.Найти(ИмяЭлемента);
				Иначе
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
						 И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
						ОписанияДР = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
							 НастройкаЭлемента.Значение));
						Если ОписанияДР.Количество() > 0 Тогда
							Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = НастройкаЭлемента.Пометка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура РазложитьДопРеквизитыПоКолонкам(МассивОбъектов)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		Для каждого ОбъектДопРеквизитов Из МассивОбъектов Цикл
			ГруппаДопРеквизитов = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения);
			Если ГруппаДопРеквизитов <> Неопределено Тогда
				ГруппаЛев = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Левая");
				ГруппаПрав = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Правая");
				Если ГруппаЛев <> Неопределено И ГруппаПрав <> Неопределено Тогда
					Левая = Истина;
					Для каждого ДопРеквизит Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
						ДопЭлемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ДопРеквизит);
						Если ДопЭлемент <> Неопределено 
							И (ДопЭлемент.Родитель = ГруппаДопРеквизитов ИЛИ ДопЭлемент.Родитель.Родитель = ГруппаДопРеквизитов) Тогда
							ДопЭлемент.Видимость = Ложь;
							Элементы.Переместить(ДопЭлемент, ?(Левая, ГруппаЛев, ГруппаПрав));
							Левая = Не Левая;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлиентаИзПотенциального(ПотенциальныйКлиент, НеПроверятьОрганизацию = Ложь)
	
	Если ЗначениеЗаполнено(ПотенциальныйКлиент.Организация) Или НеПроверятьОрганизацию Тогда
		
		Клиент_Объект.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
		Клиент_Объект.Наименование = ПотенциальныйКлиент.Организация;
		Клиент_Объект.НаименованиеПолное = ПотенциальныйКлиент.Организация;
		Контакт_Объект.Наименование = ПотенциальныйКлиент.Наименование;
		
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" 
			 	+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	Иначе
		Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Клиент_Объект.Наименование = ПотенциальныйКлиент.Наименование;
		Клиент_Объект.НаименованиеПолное = ПотенциальныйКлиент.Наименование;
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" 
			 	+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Клиент_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.Партнеры.ПустаяСсылка());
			Клиент_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Клиент_Мессенджер.Видимость = Истина;
			Элементы.Клиент_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	КонецЕсли;
	
	Должность = ПотенциальныйКлиент.Должность;
	Клиент_Объект.БизнесРегион = ПотенциальныйКлиент.БизнесРегион;
	Клиент_Объект.CRM_ОсновнаяОтрасль = ПотенциальныйКлиент.Отрасль;
	Клиент_Объект.Комментарий = ПотенциальныйКлиент.Комментарий;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТипОтношенийПредставление()
	
	CRM_ТипыОтношений = "";
	ТипКлиент = Ложь;
	ТипПоставщик = Ложь;
	ТипКонкурент = Ложь;
	ТипПрочиеОтношения = Ложь;
	
	Для Каждого Строка Из Клиент_Объект.CRM_ТипыОтношений Цикл
		ТипКлиент = ТипКлиент ИЛИ Строка.ТипОтношений.Клиент;
		ТипПоставщик = ТипПоставщик ИЛИ Строка.ТипОтношений.Поставщик;
		ТипКонкурент = ТипКонкурент ИЛИ Строка.ТипОтношений.Конкурент;
		ТипПрочиеОтношения = ТипПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения;
		
		CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	Клиент_Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	Клиент_Объект.Клиент = ТипКлиент;
	Клиент_Объект.Поставщик = ТипПоставщик;
	Клиент_Объект.Конкурент = ТипКонкурент;
	Клиент_Объект.ПрочиеОтношения = ТипПрочиеОтношения;
	
КонецПроцедуры

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Клиент_Объект.CRM_ТипыОтношений.Очистить();
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаСервере
Процедура ИницилизироватьДанныеКлиента()

	ВыбранныеТипы = Новый Массив;
	
	ОсновнойТипОтношенийСКлиентом = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипОтношенийСКлиентом");
	Если ЗначениеЗаполнено(ОсновнойТипОтношенийСКлиентом) Тогда
		ВыбранныеТипы.Добавить(ОсновнойТипОтношенийСКлиентом);
	Иначе
		ВыбранныеТипы.Добавить(Справочники.CRM_ТипыОтношений.Покупатель);
	КонецЕсли;
	
	Справочники.CRM_ТипыОтношений.ЗаполнитьСписокОтношений(CRM_ВсеТипыОтношений, ВыбранныеТипы);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаОтмена(Команда)
	
	Результат = Новый Структура("ИдентификаторФормыСтрокой", ИдентификаторФормыСтрокой);
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Результат);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеКлиентаКонтакта()
	
	Отказ = Ложь;
	
	ДополнительныеПоля = Новый Массив;
	
	Если (Элементы.ГруппаРеквизитыКлиента.Видимость Или Элементы.ГруппаРеквизитыКонтакта.Видимость) 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПоискДублей_НайденыДубли") 
		И Не РольДоступна("ПолныеПрава") Тогда
		
		Если ЭтотОбъект["ПоискДублей_НайденыДублиКлиенты"] 
			И Константы.CRM_ЗапретитьВводНовогоКлиентаПриНайденныхСовпадениях.Получить() Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли клиента!
				|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
		КонецЕсли;
		Если ЭтотОбъект["ПоискДублей_НайденыДублиКонтакты"] 
			И Константы.CRM_ЗапретитьВводНовогоКонтактаПриНайденныхСовпадениях.Получить() Тогда
		
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли контактного лица!
				|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Клиент_Объект.Наименование) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено наименование клиента'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Объект.Наименование", , Отказ);
		КонецЕсли;
		
		ПроверитьЗаполнениеИНН(Отказ);
		
		Если Клиент_Объект.ЮрФизЛицо <> Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ДополнительныеПоля.Добавить("Клиент_Телефон");
			ДополнительныеПоля.Добавить("Клиент_Email");
			Если Элементы.Клиент_МобТелефон.Видимость Тогда
				ДополнительныеПоля.Добавить("Клиент_МобТелефон");
			КонецЕсли;
		КонецЕсли;
		Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
			CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
			CRM_Модуль.ПроверитьЗаполнениеКонтрагента(ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		Если НЕ CRM_РазрешитьСозданиеИнтересаБезКЛ Тогда
			
			ЮрЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
			
			Если НЕ ЗначениеЗаполнено(Контакт_Объект.Наименование) И ЮрЛицо Тогда
				ТекстСообщения = НСтр("ru='Не заполнено наименование контакта'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт_Объект.Наименование", , Отказ);
			КонецЕсли;
			
			ПроверятьЗаполнениеКИ = ЗначениеЗаполнено(Контакт_Объект.Наименование)
									ИЛИ ЮрЛицо;
			
			Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ")
				И ПроверятьЗаполнениеКИ Тогда
				ДополнительныеПоля.Добавить("Контакт_Email");
				ДополнительныеПоля.Добавить("Контакт_Телефон");
				Если Элементы.Контакт_МобТелефон.Видимость Тогда
					ДополнительныеПоля.Добавить("Контакт_МобТелефон");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ДополнительныеПоля <> Неопределено Тогда
		
		НетЗаполненных = Истина;
		Для Каждого Поле Из ДополнительныеПоля Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[Элементы[Поле].ПутьКДанным]) Тогда
				НетЗаполненных = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НетЗаполненных Тогда
			Для Каждого Поле Из ДополнительныеПоля Цикл
				Если Элементы[Поле].Видимость Тогда
					ТекстСообщения = НСтр("ru='Не заполнена контактная информация';en='Contact information not filled'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Элементы[Поле].ПутьКДанным, , Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеИНН(Отказ)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Контрагент_Объект") Тогда
			Модуль_ОбщегоНазначенияУТКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияУТКлиентСервер");
			ЭтоЮрЛицо = Модуль_ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо);
		Иначе
			ЭтоЮрЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		КонецЕсли;
		
		МодульПартнерыИКонтрагенты = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
		УпрощенныйВводДоступен = МодульПартнерыИКонтрагенты.УпрощенныйВводДоступен();
		
		Если ЭтоЮрЛицо И Не УпрощенныйВводДоступен
			И Не ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
			
			Если ПустаяСтрока(Клиент_ИНН) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указано значение ИНН';
					|en = 'TIN value is not specified'"), , "Клиент_ИНН", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	МассивИсключений = Новый Массив;
	ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеРеквизиты;
	ОписаниеОбъекта = Неопределено;
	
	Если ЗначениеЗаполнено(Клиент_Объект.Ссылка) Или Не Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		// Не будет создан клиент
		ОписаниеОбъекта = Клиент_Объект;
	КонецЕсли;
	
	Если ПустаяСтрока(Контакт_Объект.Наименование) Или ЗначениеЗаполнено(Контакт_Объект.Ссылка)
		Или Не Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		// Не будет создан контакт
		ОписаниеОбъекта = Контакт_Объект;
	КонецЕсли;
	
	Если ОписаниеОбъекта <> Неопределено Тогда
		Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
		
		КлючНазначения = Неопределено;
		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
			ОписаниеОбъекта, КлючНазначения);
		
		УправлениеСвойствамиСлужебный.ЗаполнитьНаборыСДополнительнымиРеквизитами(
			НаборыСвойствОбъекта,
			Свойства_НаборыДополнительныхРеквизитовОбъекта);
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
			Свойства_НаборыДополнительныхРеквизитовОбъекта,
			ВидСвойств);
		Для Каждого ТекСвойство Из ОписаниеСвойств Цикл
			МассивИсключений.Добавить(ТекСвойство.Свойство);
		КонецЦикла;
	КонецЕсли;
	
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, , МассивИсключений);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаЗаписать(Команда)

	Если НЕ ПроверитьЗаполнениеКлиентаКонтакта() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКлиентаЗавершение", ЭтотОбъект);
	НайтиДубли(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт

	Результат = Новый Структура("ИдентификаторФормыСтрокой", ИдентификаторФормыСтрокой);
	
	Если НайденыДубли Тогда
		Если НЕ ЗначениеЗаполнено(ДубльКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У выбранного дубля контактного лица не указан клиент-владелец!'"));
		Иначе
			Если Не ЗначениеЗаполнено(ДубльКонтакт) Тогда
				ДубльКонтакт = СоздатьКонтактНаСервере(ДубльКлиент);
			КонецЕсли;
			ЗаписатьПотенциальногоКлиента(ДубльКлиент, ДубльКонтакт);
			Результат.Вставить("Данные", Новый Структура("Клиент, Контакт", ДубльКлиент, ДубльКонтакт));
		КонецЕсли;
	Иначе
		Если ЗаполнятьКлиентаИКонтакт Тогда
			Результат.Вставить("Данные", СоздатьКлиентаИКонтактНаСервере());
		Иначе
			Если НЕ ЗначениеЗаполнено(ПереданныйКлиент) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран клиент!'"));
			Иначе
				Результат.Вставить("Данные", СоздатьТолькоКонтактНаСервере());
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения)
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!';
			|en='Search attributes in the settings of the service functions are not set!'"));
	КонецЕсли;
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование",		Клиент_Объект.Наименование);
	СтруктураОбъекта.Вставить("НаименованиеПолное",	Клиент_Объект.НаименованиеПолное) ;
	СтруктураОбъекта.Вставить("ИНН",				Клиент_ИНН);
	Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
		СтруктураОбъекта.Вставить("Адрес", Клиент_Адрес);
	КонецЕсли;
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	Если НЕ ПустаяСтрока(Контакт_Телефон) Тогда
		СтруктураОбъекта.Вставить("Контакт_Телефон", Контакт_Телефон);
		ТелефонДляПоиска	= Контакт_Телефон;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Клиент_Телефон) Тогда
		СтруктураОбъекта.Вставить("Телефон", Клиент_Телефон);
		Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(ТелефонДляПоиска) Тогда
			ТелефонДляПоиска	= Клиент_Телефон;
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контакт_Email) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", Контакт_Email);
		EmailДляПоиска	= Контакт_Email;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Клиент_Email) Тогда
		СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Клиент_Email);
		Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(EmailДляПоиска) Тогда
			EmailДляПоиска	= Клиент_Email;
		КонецЕсли;
	КонецЕсли;
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы, ЭтотОбъект);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе 
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект,
			 ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиНайденыЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Перейти" ИЛИ РезультатЗакрытия.Результат = "Продолжить" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ДубльКлиент = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						ДубльКонтакт = РезультатЗакрытия.Объект;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						ДубльКлиент = РезультатЗакрытия.Объект;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДубльКлиент) Или ЗначениеЗаполнено(ДубльКонтакт) Тогда
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
						Возврат;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли (ТипЗнч(РезультатЗакрытия) = Тип("КодВозвратаДиалога")) 
		И (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
КонецПроцедуры

&НаСервере
// Функция создает Структуру реквизитов для поиска партнеров.
//
Функция СоздатьСтруктуруПоиска()
	СтруктураПоиска = Новый Структура;
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если НЕ (РеквизитыПоиска = Неопределено) Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПоиска;
КонецФункции

&НаКлиенте
Процедура Клиент_ОбъектЮрФизЛицоПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Клиент_ОбъектЮрФизЛицоПриИзмененииСервер();
	
	ФизЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	
	Если Элемент <> Неопределено И СохранятьНастройкуЮрФизЛиц Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.Клиент_ОбъектЮрФизЛицо",
			 "МастерРегистрации",
			 Клиент_Объект.ЮрФизЛицо);
	КонецЕсли;
	
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектДатаРождения, "Видимость", 
		(CRM_ШаблоныЭлементовФормКлиент.СвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектДатаРождения, "Видимость") И ФизЛицо));
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектПол, "Видимость", 
		(CRM_ШаблоныЭлементовФормКлиент.СвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектПол, "Видимость") И ФизЛицо));
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_МобТелефон,
		 "Видимость",
		 ФизЛицо);
	
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ЮрАдрес, "Видимость", 
		(CRM_ШаблоныЭлементовФормКлиент.СвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ЮрАдрес, "Видимость") И ФизЛицо));
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектCRM_КПП, "Видимость", 
		(CRM_ШаблоныЭлементовФормКлиент.СвойствоЭлемента(ЭтотОбъект, Элементы.Клиент_ОбъектCRM_КПП, "Видимость") И ФизЛицо));
	
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект,
		 Элементы.ГруппаРеквизитыКонтакта, "Видимость",
		 Истина);
	
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект,
		 Элементы.Контакт_ОбъектНаименование, "АвтоОтметкаНезаполненного",
		 НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ
		 ИЛИ ФизЛицо));
	CRM_ШаблоныЭлементовФормКлиент.УстановитьСвойствоЭлемента(ЭтотОбъект,
		 Элементы.Контакт_ОбъектНаименование, "ОтметкаНезаполненного",
		(НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо) И НЕ ЗначениеЗаполнено(Контакт_Объект.Наименование)));
	
	Если Элемент <> Неопределено Тогда
		Если ФизЛицо Тогда // с юр лица на физ лицо
			
			Клиент_Email = Контакт_Email;
			Клиент_Телефон = Контакт_Телефон;
			Клиент_МобТелефон = Контакт_МобТелефон;
			Клиент_Мессенджер = Контакт_Мессенджер;
			
			Контакт_Email = "";
			Контакт_Телефон = "";
			Контакт_МобТелефон = "";
			Контакт_Мессенджер = "";
			
		Иначе // с физ лица на юр лицо
			
			Контакт_Объект.Наименование = Клиент_Объект.Наименование;
			Контакт_Email = Клиент_Email;
			Контакт_Телефон = Клиент_Телефон;
			Контакт_МобТелефон = Клиент_МобТелефон;
			Контакт_Мессенджер = Клиент_Мессенджер;
			Контакт_МессенджерВид = Клиент_МессенджерВид;
			
			Клиент_Email = "";
			Клиент_Телефон = "";
			Клиент_МобТелефон = "";
			Клиент_Мессенджер = "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Клиент_ОбъектЮрФизЛицоПриИзмененииСервер()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	Если ЗаполнятьКлиентаИКонтакт Тогда
		Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
			CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
			CRM_Модуль.ЮрФизЛицоПриИзменении(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Клиент_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено';en='The field ""TIN"" is empty'"));
		CRM_ШаблоныЭлементовФормКлиент.УстановитьТекущийЭлемент(ЭтотОбъект, Элементы.Клиент_ОбъектCRM_ИНН);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Клиент_Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?';en='Refill current attributes?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов"
"необходимо подключиться к Интернет-поддержке пользователей."
"Подключиться сейчас?';en='Fill in details of counterparty automatically"
"it is necessary to connect to user Internet support."
"Connect now?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	CRM_ШаблоныЭлементовФормКлиент.АктуализироватьДанныеФормы(ВладелецФормы, ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		СведенияКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(СведенияКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СведенияКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		РеквизитыКонтрагента = СведенияКонтрагента.ЕГРЮЛ;
		Если РеквизитыКонтрагента = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'"), Клиент_ИНН);
			Возврат;
		КонецЕсли;
		
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Клиент_Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			Клиент_ЮрАдрес = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			Клиент_ЮрАдресЗначение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("КПП") И ЗначениеЗаполнено(РеквизитыКонтрагента.КПП) Тогда
			Клиент_КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Контакт_Объект.Наименование) 
			И РеквизитыКонтрагента.Свойство("Руководители")
			И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители) Тогда
			Контакт_Объект.Наименование = РеквизитыКонтрагента.Руководители[0].Представление;
			Контакт_Объект.CRM_Должность =
				Справочники.CRM_Должности.НайтиПоНаименованию(РеквизитыКонтрагента.Руководители[0].Должность);
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("НаименованиеСокращенное")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.НаименованиеСокращенное) Тогда
			CRM_Контрагент_НаименованиеСокращенное = РеквизитыКонтрагента.НаименованиеСокращенное;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер")
		 И ЗначениеЗаполнено(РеквизитыКонтрагента.РегистрационныйНомер) Тогда
		Клиент_ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Клиент_Телефон) 
		И РеквизитыКонтрагента.Свойство("Телефон")
		И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		Клиент_Телефон = РеквизитыКонтрагента.Телефон.Представление;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		РеквизитыКонтрагента.Свойство("КПП", Клиент_Объект["CRM_КПП"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ТипОтношенийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	CRM_ШаблоныЭлементовФормКлиент.ПоказатьВсплывающуюГруппу(ЭтотОбъект, Элементы.ГруппаВсеТипыОтношений);
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура Клиент_ОбъектCRM_ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Клиент_ИНН) Тогда
		ЭтоЮрЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Клиент_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_ИНН");
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПриИзменении(Элемент)
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		Если Не ИмяКлиентаИзСписка Тогда
			
			ФИО_Темп = Клиент_Объект.Наименование;
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ",", "");
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ".", "");
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ";", "");
			
			ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			
			Клиент_Объект.CRM_Фамилия = ПервоеСлово;
			Клиент_Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			Клиент_Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			
			Если Не ЗначениеЗаполнено(Клиент_Объект.Пол) Тогда
				Клиент_Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Клиент_Объект.CRM_Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.Наименование, Элемент);
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Клиент_Объект.ОсновнойМенеджер,
			 "ПравоваяФормаКлиентаПоУмолчанию");
		Клиент_Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" , СокрЛП(Клиент_Объект.Наименование),
			СокрЛП(ПравоваяФорма) + " """ + СокрЛП(Клиент_Объект.Наименование) + """");
	Иначе
		Клиент_Объект.НаименованиеПолное = СокрЛП(Клиент_Объект.Наименование);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Не ИмяКлиентаИзСписка Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.ЗагрузитьЗначения(CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект));	
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКлиентаИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ОбъектНаименованиеПриИзменении(Элемент)
	
	ВыполнитьПоискДублейПоЗначению(Контакт_Объект.Наименование, Элемент);
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПолноеПриИзменении(Элемент)
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.НаименованиеПолное, Элемент);
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если CRM_ШаблоныЭлементовФормКлиент.СкрытаВсплывающаяГруппа(ЭтотОбъект, Элементы.ГруппаВсеТипыОтношений) Тогда
		CRM_ШаблоныЭлементовФормКлиент.УстановитьТекущийЭлемент(ЭтотОбъект,
			 Элементы.Клиент_ОбъектCRM_ТипОтношенийПредставление);
		CRM_ЗаписатьВсеТипыОтношений();
		СформироватьТипОтношенийПредставление();
		CRM_ШаблоныЭлементовФормКлиент.АктуализироватьДанныеФормы(ВладелецФормы, ЭтотОбъект);
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

#КонецОбласти

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)
	
	ИмяЭлемента = ?(СтрНайти(Поле.Имя, ИдентификаторФормыСтрокой) > 0, СтрЗаменить(Поле.Имя,
		 ИдентификаторФормыСтрокой, ""),
		 Поле.Имя);
	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяЭлемента, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, // АПК:78 - исключить из проверки.
	 СтандартнаяОбработка) Экспорт
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		 Поле,
		 СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКлиента

&НаСервере
Функция СоздатьКлиентаНаСервере()
	
	Если ЗначениеЗаполнено(Клиент_Объект.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Телефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_МобТелефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Мессенджер) Тогда
		Если Клиент_МессенджерВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				 Клиент_МессенджерВид, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Клиент_МессенджерВид);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
				 Клиент_Мессенджер,
				 Клиент_МессенджерВид);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ,
			 Клиент_МессенджерВид,
			 Клиент_МессенджерВид.Тип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ТипКИ = ВидКИ.Тип;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, Клиент_АдресЗначение, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_ЮрАдрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
		ТипКИ = ВидКИ.Тип;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, Клиент_ЮрАдресЗначение, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Клиент_Объект);
		КонецЕсли;
	КонецЕсли;

	Для каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ИНН") Тогда
		Клиент_Объект["CRM_ИНН"] = Клиент_ИНН;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_КПП") Тогда
		Клиент_Объект["CRM_КПП"] = Клиент_КПП;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ОГРН") Тогда
		Клиент_Объект["CRM_ОГРН"] = Клиент_ОГРН;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Клиент_Объект.ОсновнойМенеджер) Тогда
		Клиент_Объект.ОсновнойМенеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Клиент_Объект.CRM_Автор = Пользователи.ТекущийПользователь();
	
	НовыйКлиент = РеквизитФормыВЗначение("Клиент_Объект");
	НовыйКлиент.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйКлиент.Записать();
	
	ЗначениеВРеквизитФормы(НовыйКлиент, "Клиент_Объект");
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.СоздатьКонтрагентаПриСозданииПартнера(ЭтотОбъект, НовыйКлиент.Ссылка);
	КонецЕсли;
	
	Возврат НовыйКлиент.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьКонтактНаСервере(ПереданныйКлиент = Неопределено)
	
	Если ПустаяСтрока(Контакт_Объект.Наименование) ИЛИ ЗначениеЗаполнено(Контакт_Объект.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураФИО = ПолучитьСтруктуруФИОНаСервере(Контакт_Объект.Наименование);
	ЗаполнитьЗначенияСвойств(Контакт_Объект, СтруктураФИО);
	
	Если ЗначениеЗаполнено(ПереданныйКлиент) Тогда
		Контакт_Объект.Владелец = ПереданныйКлиент;
	Иначе
		Контакт_Объект.Владелец = Клиент_Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_МобТелефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Мессенджер) Тогда
		Если Контакт_МессенджерВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				 Контакт_МессенджерВид, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Контакт_МессенджерВид);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
				 Контакт_Мессенджер,
				 Контакт_МессенджерВид);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ,
			 Контакт_МессенджерВид,
			 Контакт_МессенджерВид.Тип);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Контакт_Объект);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контакт_Объект.ДатаРождения) Тогда
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица'"),
			 Истина);
		Если НЕ (ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.ПустаяСсылка()) Тогда
			НовСтрока = Контакт_Объект.CRM_КлючевыеСобытия.Добавить();
			НовСтрока.ВидСобытия = ВидСобытия;
			НовСтрока.ДатаСобытия = Контакт_Объект.ДатаРождения;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Статус) Тогда
		НовСтрока = Контакт_Объект.CRM_Статусы.Добавить();
		НовСтрока.Статус = Контакт_Статус;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ИНН") Тогда
		Клиент_Объект["CRM_ИНН"] = Клиент_ИНН;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_КПП") Тогда
		Клиент_Объект["CRM_КПП"] = Клиент_КПП;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ОГРН") Тогда
		Клиент_Объект["CRM_ОГРН"] = Клиент_ОГРН;
	КонецЕсли;
	
	НовыйКонтакт = РеквизитФормыВЗначение("Контакт_Объект");
	НовыйКонтакт.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	НовыйКонтакт.Автор = Пользователи.ТекущийПользователь();
	НовыйКонтакт.Записать();
	
	Если ЗначениеЗаполнено(Клиент_Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Клиент_Объект.CRM_ОсновноеКонтактноеЛицо) Тогда
		ПартнерОбъект = РеквизитФормыВЗначение("Клиент_Объект");
		ПартнерОбъект.CRM_ОсновноеКонтактноеЛицо = НовыйКонтакт.Ссылка;
		ПартнерОбъект.Записать();
	КонецЕсли;
	
	Возврат НовыйКонтакт.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПотенциальногоКлиента(НовыйКлиент, НовыйКонтакт)
	
	ПКОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
	ПКОбъект.Партнер = НовыйКлиент;
	ПКОбъект.КонтактноеЛицо = НовыйКонтакт;
	ПКОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция СоздатьКлиентаИКонтактНаСервере()
	
	Клиент = Неопределено;
	Контакт = Неопределено;
	
	Если Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		Клиент = СоздатьКлиентаНаСервере();
	КонецЕсли;
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		Контакт = СоздатьКонтактНаСервере();
	КонецЕсли;
	
	ЗаписатьПотенциальногоКлиента(Клиент, Контакт);
	
	Возврат Новый Структура("Клиент, Контакт", Клиент, Контакт);
	
КонецФункции

&НаСервере
Функция СоздатьТолькоКонтактНаСервере()
	
	Контакт = Неопределено;
	
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		Контакт = СоздатьКонтактНаСервере(ПереданныйКлиент);
	КонецЕсли;
	
	ЗаписатьПотенциальногоКлиента(ПереданныйКлиент, Контакт);
		
	Возврат Новый Структура("Клиент, Контакт", ПереданныйКлиент, Контакт);
	
КонецФункции

&НаКлиенте
Процедура КлиентКонтакт_КИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура;
	Если Элемент.Имя = "Клиент_Адрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера"));
	ИначеЕсли Элемент.Имя = "Клиент_ЮрАдрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ЮрАдрес"));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Представление", ЭтотОбъект[Элемент.Имя]);
	ПараметрыОткрытия.Вставить("Значение", ЭтотОбъект[Элемент.Имя + "Значение"]);
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения", Элемент.Имя);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения] = РезультатЗакрытия.Представление;
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения + "Значение"] = РезультатЗакрытия.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Телефон);
	Клиент_Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Телефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Клиент_МобТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_МобТелефон);
	Клиент_МобТелефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
		 "");
	
	ВыполнитьПоискДублейПоЗначению(Клиент_МобТелефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
	Контакт_Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
	
	ВыполнитьПоискДублейПоЗначению(Контакт_Телефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Контакт_МобТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_МобТелефон);
	Контакт_МобТелефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
		 "");
	
	ВыполнитьПоискДублейПоЗначению(Контакт_МобТелефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры
								
&НаКлиенте
Процедура Клиент_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Контакт_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Контакт_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры
								
&НаКлиенте
Процедура Клиент_АдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Адрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ЮрАдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_ЮрАдрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	CRM_ШаблоныЭлементовФормКлиент.ОбновитьЭлементыФормы(ВладелецФормы, Элемент.Родитель.Имя);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруФИОНаСервере(НаименованиеТекущее)
	
	СтруктураФИО = Новый Структура("CRM_Фамилия, CRM_Имя, CRM_Отчество");
	
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее,
		СтруктураФИО.CRM_Фамилия, СтруктураФИО.CRM_Имя, СтруктураФИО.CRM_Отчество);
	
	Возврат СтруктураФИО;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент) Экспорт // АПК:78 - исключить из проверки.
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		
		МассивОбъектовСДопРеквизитами = Новый Массив;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКлиента");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", Клиент_Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКонтакта");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", Контакт_Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, МассивОбъектовСДопРеквизитами);
		
		РазложитьДопРеквизитыПоКолонкам(МассивОбъектовСДопРеквизитами);
		ИзменитьСоставРеквизитов();
	КонецЕсли;
	// +CRM
	CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, // АПК:78 - исключить из проверки.
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено) Экспорт
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ШаблоныЭлементов_ТрансляцияВызовов

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда, Метод) Экспорт // АПК:78 - исключить из проверки.
	Если СтрНачинаетсяС(Команда.Имя, "ЗаполнитьПоИНН") Тогда
		ЗаполнитьПоИНН(Команда);
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "СоздатьНовогоКлиентаЗаписать") Тогда 
		СоздатьКлиентаЗаписать(Команда);
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "СоздатьНовогоКлиентаОтмена") Тогда 
		СоздатьКлиентаОтмена(Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент, Метод) Экспорт // АПК:78 - исключить из проверки.
	
	Если Метод = "Клиент_ОбъектНаименованиеПриИзменении" Тогда
		Клиент_ОбъектНаименованиеПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_ОбъектCRM_ИННПриИзменении" Тогда 
		Клиент_ОбъектCRM_ИННПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_ОбъектНаименованиеПолноеПриИзменении" Тогда 
		Клиент_ОбъектНаименованиеПолноеПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_ТелефонПриИзменении" Тогда 
		Клиент_ТелефонПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_МобТелефонПриИзменении" Тогда 
		Клиент_МобТелефонПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_EmailПриИзменении" Тогда 
		Клиент_EmailПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_АдресПриИзменении" Тогда 
		Клиент_АдресПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_ЮрАдресПриИзменении" Тогда 
		Клиент_ЮрАдресПриИзменении(Элемент);
	ИначеЕсли Метод = "Контакт_ОбъектНаименованиеПриИзменении" Тогда 
		Контакт_ОбъектНаименованиеПриИзменении(Элемент);
	ИначеЕсли Метод = "Контакт_EmailПриИзменении" Тогда 
		Контакт_EmailПриИзменении(Элемент);
	ИначеЕсли Метод = "Контакт_ТелефонПриИзменении" Тогда 
		Контакт_ТелефонПриИзменении(Элемент);
	ИначеЕсли Метод = "Контакт_МобТелефонПриИзменении" Тогда 
		Контакт_МобТелефонПриИзменении(Элемент);
	ИначеЕсли Метод = "Клиент_ОбъектЮрФизЛицоПриИзменении" Тогда 
		Клиент_ОбъектЮрФизЛицоПриИзменении(Элемент);
	ИначеЕсли Метод = "Подключаемый_ПриИзмененииДополнительногоРеквизита" Тогда 
		Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В методе Подключаемый_ШаблоныЭлементов_ПриИзменении не указано действие - '") 
			+ Метод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, // АПК:78 - исключить из проверки.
	СтандартнаяОбработка, Метод) Экспорт
	
	Если Метод = "Клиент_ОбъектНаименованиеНачалоВыбора" Тогда
		Клиент_ОбъектНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	ИначеЕсли Метод = "Клиент_ОбъектCRM_ТипОтношенийПредставлениеНачалоВыбора" Тогда 
		Клиент_ОбъектCRM_ТипОтношенийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	ИначеЕсли Метод = "КлиентКонтакт_КИНачалоВыбора" Тогда 
		КлиентКонтакт_КИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В методе Подключаемый_ШаблоныЭлементов_НачалоВыбора не указано действие - '") 
			+ Метод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, // АПК:78 - исключить из проверки.
	 СтандартнаяОбработка,
	 Метод) Экспорт
	
	Если Метод = "Клиент_ОбъектНаименованиеОбработкаВыбора" Тогда
		Клиент_ОбъектНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В методе Подключаемый_ШаблоныЭлементов_НачалоВыбора не указано действие - '") 
			+ Метод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_Выбор(Элемент, ВыбраннаяСтрока, Поле, // АПК:78 - исключить из проверки.
	СтандартнаяОбработка, Метод) Экспорт
	
	Если Метод = "Подключаемый_ТаблицаРезультатовВыбор" Тогда
		Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В методе Подключаемый_ШаблоныЭлементов_НачалоВыбора не указано действие - '") 
			+ Метод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
