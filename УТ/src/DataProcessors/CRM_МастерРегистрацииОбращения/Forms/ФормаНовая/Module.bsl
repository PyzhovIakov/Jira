
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбрабатыватьАктивизациюПоиска;

&НаКлиенте
Перем ОтветственныйДоИзменения;

&НаКлиенте
Перем ВыведеныТоварыИУслуги;

// +CRM_Модуль
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания
// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// +CRM_Модуль
	УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен();
	// -CRM_Модуль
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Принятие обращения""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		Если МодульУправлениеДоступом.ИспользоватьОграниченияДоступа() Тогда
			ВключеныОграниченияДоступа = Не Пользователи.ЭтоПолноправныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
	СпособПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.СпособПоиска",
		 "МастерРегистрации",
		 1);
	ПоискПоПочтовомуДомену = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.ПоискПоПочтовомуДомену",
		 "МастерРегистрации",
		 Ложь);
	
	КоличествоПолейПоиска = 1;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Параметры.Свойство("ИсточникОткрытияМастера") Тогда
		ИсточникОткрытияМастера = Параметры.ИсточникОткрытияМастера;
	КонецЕсли;
	
	ДоступныКарты = Истина;
	ДоступноОбращение = Истина;
	ОпределенКлиент = Ложь;
	
	ИспользоватьТипыУслуг = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг");
	ИспользоватьПоддержку = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	Элементы.ТипОбращения.Видимость = ИспользоватьПоддержку;
	ЭтоПоддержка = Ложь;
	
	Если ИспользоватьПоддержку Тогда
		
		ДанныеВыбора = Справочники.CRM_ТипыОбращений.ПолучитьДанныеВыбора(Новый Структура);
		Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
			НовыйЭлемент = Элементы.ТипОбращения.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементДанных);
		КонецЦикла;
		
		ПереданТипОбращенияПоддержки = Параметры.Свойство("ТипОбращения") И ЗначениеЗаполнено(Параметры.ТипОбращения)
										И ТипЗнч(Параметры.ТипОбращения) = Тип("СправочникСсылка.CRM_ТипыОбращений")
										И Параметры.ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес;
						
		Если ПереданТипОбращенияПоддержки Тогда
			УстановитьЗначениеТипОбращения(Параметры.ТипОбращения);
		КонецЕсли;
		
		Если Параметры.Свойство("НеОбновлятьТипОбращения") Тогда
			НеОбновлятьТипОбращения = Параметры.НеОбновлятьТипОбращения;
		КонецЕсли;
		
		Элементы.РежимФильтраПоИнтересам.Заголовок = НСтр("ru = 'Интересы и обращения'");
		Элементы.ИнтересыКлиентаИнтерес.Заголовок = НСтр("ru = 'Интерес, Обращение'");
		
	КонецЕсли;	
	
	ОсновнойВидТелефонаКонтакта = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
	ПоказыватьМобильныйТелефон =
		(ОсновнойВидТелефонаКонтакта <> Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	
	РежимФильтраПоИнтересам = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.РежимФильтраПоИнтересам",
		 "МастерРегистрации",
		 "");
	Если НЕ ЗначениеЗаполнено(РежимФильтраПоИнтересам) Тогда
		РежимФильтраПоИнтересам = РежимФильтраПоИнтересамАктивные();
	КонецЕсли;
	Элементы.ИнтересыКлиентаЗавершен.Видимость = НетОтбораПоАктивнымИнтересам(РежимФильтраПоИнтересам);
	
	ПараметрыЗапросов = CRM_ПоискКонтактов.ПараметрыЗапросов();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Клиент", Неопределено, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Контакт", Неопределено, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента,
		 "НадписьПотенциальногоКлиента", ПараметрыЗапросов.НадписьПотенциальногоКлиента,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента,
																		"НетОтбораПоАктивнымИнтересам",
																		НетОтбораПоАктивнымИнтересам(РежимФильтраПоИнтересам),
																		Истина);
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Интерес.Валюта = ВалютаУправленческогоУчета;
	УсловияПоиска = Новый Массив;
	КэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
	КэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
	
	Если Параметры.Свойство("ПисьмоВходящее") Тогда
		
		Заявка = ПолучитьЗаявку(Параметры.ПисьмоВходящее);
		ПисьмоВходящее = Параметры.ПисьмоВходящее;
		Если Не ЗначениеЗаполнено(Заявка) Тогда
			Обращение = ПисьмоВходящее;
			Интерес.Тема = Параметры.ПисьмоВходящее.Тема;
			КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.ЭлектроннаяПочта;
			ИсточникОбращения = Обращение.УчетнаяЗапись;
		Иначе
			Обращение = Заявка;
			Интерес.Тема = Заявка.Тема;
			КаналОбращения = Заявка.КаналПервичногоИнтереса;
			ИсточникОбращения = Заявка.ИсточникПервичногоИнтереса;
		КонецЕсли;
		
		Интерес.Описание = Обращение.Комментарий;
		
		КонтактОбращения = ПисьмоВходящее.ОтправительКонтакт;
		
		Если ЗначениеЗаполнено(КонтактОбращения) И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", КонтактОбращения);
			Интерес.Партнер = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КонтактОбращения);
			Интерес.КонтактноеЛицо = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			
			ОрганизацияОбращения = ?(ЗначениеЗаполнено(КонтактОбращения.Организация),
				 КонтактОбращения.Организация,
				 КонтактОбращения.Наименование);
			Интерес.ПотенциальныйКлиент = КонтактОбращения;
			Интерес.КонтактноеЛицо = КонтактОбращения.КонтактноеЛицо;
			Интерес.Партнер = КонтактОбращения.Партнер;
			
		КонецЕсли;
		
		ФИООбращения = "";
		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(
			ПисьмоВходящее.ОтправительПредставление, Ложь);
		Если ДанныеОтправителя.Количество() > 0 Тогда
			ФИООбращения = ДанныеОтправителя[0].Представление;
		Иначе
			ФИООбращения = ПисьмоВходящее.ОтправительПредставление;
		КонецЕсли;
		
		НаборЗаписейИсточники = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписейИсточники.Отбор.Сделка.Установить(Обращение);
		НаборЗаписейИсточники.Прочитать();
		Если НаборЗаписейИсточники.Количество() > 0 Тогда
			Канал = НаборЗаписейИсточники[0].КаналПервичногоИнтереса;
			Источник = НаборЗаписейИсточники[0].ИсточникПервичногоИнтереса;
		КонецЕсли;
		
		СформироватьКэши(ФИООбращения, "", "", ПисьмоВходящее.ОтправительАдрес, "");
		
		УсловияПоиска.Добавить(КэшПоиска.Email);
		ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, КэшПоиска.Email, УсловияПоиска);
		ДобавитьПолеПоискаПоПараметру("Email", КэшЗаполнения.Email);
		
		// +Отображение содержимого параметра-основания для МПО.
		Элементы.ДекорацияРаскрытьЗначение.Видимость = Истина;
		СодержимоеОснованияHTML = ПрочитатьТекстПисьмаHTML(ПисьмоВходящее);
		// -Отображение содержимого параметра-основания для МПО.
		
	ИначеЕсли Параметры.Свойство("ПисьмоИсходящее") Тогда
		
		Обращение = Параметры.ПисьмоИсходящее;
		Интерес.Тема = Параметры.ПисьмоИсходящее.Тема;
		
		Интерес.Описание = Обращение.Комментарий;
		
		ФИООбращения = "";
		ОтправительАдрес = "";
		ДанныеПолучателя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Обращение.СписокПолучателейПисьма,
			Ложь);
		Если ЗначениеЗаполнено(Обращение.CRM_ОтправительКонтакт) Тогда
			ФИООбращения = Обращение.CRM_ОтправительКонтакт.Наименование;
		ИначеЕсли ДанныеПолучателя.Количество() > 0 Тогда
			ФИООбращения = ДанныеПолучателя[0].Представление;
		КонецЕсли;
		Если ПустаяСтрока(Обращение.CRM_ОтправительАдрес) Тогда
			Если ДанныеПолучателя.Количество() > 0 Тогда
				ОтправительАдрес = ДанныеПолучателя[0].Адрес;
			КонецЕсли;
		Иначе
			ОтправительАдрес = Обращение.CRM_ОтправительАдрес;
		КонецЕсли;
		
		НаборЗаписейИсточники = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписейИсточники.Отбор.Сделка.Установить(Обращение);
		НаборЗаписейИсточники.Прочитать();
		Если НаборЗаписейИсточники.Количество() > 0 Тогда
			Канал = НаборЗаписейИсточники[0].КаналПервичногоИнтереса;
			Источник = НаборЗаписейИсточники[0].ИсточникПервичногоИнтереса;
		КонецЕсли;
		
		СформироватьКэши(ФИООбращения, "", "", ОтправительАдрес, "");
		
		УсловияПоиска.Добавить(КэшПоиска.Email);
		ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, КэшПоиска.Email, УсловияПоиска);
		ДобавитьПолеПоискаПоПараметру("Email", КэшЗаполнения.Email);
		
		КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.ЭлектроннаяПочта;
		ИсточникОбращения = Обращение.УчетнаяЗапись;
		
		// +Отображение содержимого параметра-основания для МПО.
		Элементы.ДекорацияРаскрытьЗначение.Видимость = Истина;
		СодержимоеОснованияHTML = ПрочитатьТекстПисьмаHTML(Обращение);
		// -Отображение содержимого параметра-основания для МПО.
	ИначеЕсли Параметры.Свойство("Телемаркетинг") Тогда
		
		Обращение = Параметры.Телемаркетинг;
		Интерес.Тема = Обращение.Тема;
		
		КлиентОбращения = Неопределено;
		КонтактОбращения = Неопределено;
		ТелефонОбращения = "";
		ФИООбращения = "";
		
		Параметры.ЗначенияЗаполнения.Свойство("Партнер", КлиентОбращения);
		Параметры.ЗначенияЗаполнения.Свойство("КонтактноеЛицо", КонтактОбращения);
		Параметры.ЗначенияЗаполнения.Свойство("Телефон", ТелефонОбращения);
		Параметры.ЗначенияЗаполнения.Свойство("КлиентСтрокой", ФИООбращения);
		
		СформироватьКэши(ФИООбращения, "", ТелефонОбращения, "", "");
		
		Если ЗначениеЗаполнено(КонтактОбращения) Тогда
			
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КонтактОбращения);
			Интерес.КонтактноеЛицо = КонтактОбращения;
			ОпределенКлиент = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(КлиентОбращения) Тогда
			
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", КлиентОбращения);
			Интерес.Партнер = КонтактОбращения;
			
		ИначеЕсли ЗначениеЗаполнено(ТелефонОбращения) Тогда
			
			УсловияПоиска.Добавить(КэшПоиска.Телефон);
			ДобавитьПолеПоискаПоПараметру("Телефон", КэшЗаполнения.Телефон);
			
		ИначеЕсли ЗначениеЗаполнено(ФИООбращения) Тогда
			
			УсловияПоиска.Добавить(КэшПоиска.ФИО);
			ДобавитьПолеПоискаПоПараметру("ФИО", КэшЗаполнения.ФИО);
			
		КонецЕсли;
		
		Канал = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_Телемаркетинг;
		Источник = Обращение;
		
		КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Телефония;
		ИсточникОбращения = Обращение.ВидВзаимодействия;
		
	ИначеЕсли Параметры.Свойство("СообщениеМессенджера") Или Параметры.Свойство("Диалог") Тогда
		
		Если Параметры.Свойство("СообщениеМессенджера") Тогда
			Обращение = Параметры.СообщениеМессенджера.Диалог;
		Иначе
			Обращение = Параметры.Диалог;
		КонецЕсли;
		Попытка
			Элементы.ИДАккаунта.Заголовок = Обращение.УчетнаяЗапись.ТипМессенджера;
		Исключение
			Элементы.ИДАккаунта.Заголовок = НСтр("ru='Не определен';en='Not Stated'");
		КонецПопытки;
		
		КонтактОбращения = Обращение.Контакт;
		
		Если ЗначениеЗаполнено(КонтактОбращения) И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", КонтактОбращения);
			Интерес.Партнер = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КонтактОбращения);
			Интерес.КонтактноеЛицо = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			
			ОрганизацияОбращения = ?(ЗначениеЗаполнено(КонтактОбращения.Организация),
				КонтактОбращения.Организация, КонтактОбращения.Наименование);
			Интерес.ПотенциальныйКлиент = КонтактОбращения;
			Интерес.КонтактноеЛицо = КонтактОбращения.КонтактноеЛицо;
			Интерес.Партнер = КонтактОбращения.Партнер;
			
		КонецЕсли;
		
		ФИООбращения = Обращение.КонтактПредставление;
		Если CRM_РаботаСМессенджерамиСерверПовтИсп.ТипКИМессенджера(Обращение.УчетнаяЗапись) = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонОбращения = CRM_РаботаСМессенджерамиСерверПовтИсп.ПредставлениеКонтактнойИнформацииПользователя(Обращение.УчетнаяЗапись,
				 Обращение.ID_Пользователя);
			СформироватьКэши("", "", ТелефонОбращения, "", "");
			УсловияПоиска.Добавить(КэшПоиска.Телефон);
			ДобавитьПолеПоискаПоПараметру("Телефон", ТелефонОбращения);
		Иначе
			URLОбращения = CRM_РаботаСМессенджерамиСерверПовтИсп.ПредставлениеКонтактнойИнформацииПользователя(Обращение.УчетнаяЗапись,
				 Обращение.ID_Пользователя);
			СформироватьКэши(ФИООбращения, "", "", "", URLОбращения);
			УсловияПоиска.Добавить(КэшПоиска.URL);
			ДобавитьПолеПоискаПоПараметру("URL", КэшЗаполнения.URL);
		КонецЕсли;
		
		КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Мессенджер;
		ИсточникОбращения = Обращение.УчетнаяЗапись;
		
		// +Отображение содержимого параметра-основания для МПО.
		Элементы.ДекорацияРаскрытьЗначение.Видимость = Истина;
		
		ИнициализироватьДокументHTMLМессенджера();
		// -Отображение содержимого параметра-основания для МПО.
	ИначеЕсли Параметры.Свойство("Заявка") Тогда
		
		Обращение = Параметры.Заявка;
		Интерес.Тема = Обращение.Тема;
		
		Интерес.Описание = Обращение.Комментарий;
		
		ФИООбращения = Обращение.Наименование;
		ОрганизацияОбращения = Обращение.Организация;
		ТелефонОбращения = Обращение.Телефон;
		EmailОбращения = Обращение.ЭлектроннаяПочта;
		КонтактОбращения = Обращение.Контакт;
		
		Если ЗначениеЗаполнено(КонтактОбращения) И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", КонтактОбращения);
			Интерес.Партнер = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КонтактОбращения);
			Интерес.КонтактноеЛицо = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") 
			И Не ЗначениеЗаполнено(Обращение.Организация) Тогда
			
			ОрганизацияОбращения = ?(ЗначениеЗаполнено(КонтактОбращения.Организация),
				КонтактОбращения.Организация, КонтактОбращения.Наименование);
			Интерес.ПотенциальныйКлиент = КонтактОбращения;
			Интерес.КонтактноеЛицо = КонтактОбращения.КонтактноеЛицо;
			Интерес.Партнер = КонтактОбращения.Партнер;
		КонецЕсли;
		
		СформироватьКэши(ФИООбращения, ОрганизацияОбращения, ТелефонОбращения, EmailОбращения, "");
		
		Если ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			УсловияПоиска.Добавить(КэшПоиска.Организация);
			ДобавитьПолеПоискаПоПараметру("Организация", ОрганизацияОбращения);
		КонецЕсли;
		Если ЗначениеЗаполнено(КэшПоиска.Телефон) Тогда
			УсловияПоиска.Добавить(КэшПоиска.Телефон);
			ДобавитьПолеПоискаПоПараметру("Телефон", ТелефонОбращения);
		КонецЕсли;
		Если ЗначениеЗаполнено(КэшПоиска.Email) Тогда
			УсловияПоиска.Добавить(КэшПоиска.Email);
			ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, КэшПоиска.Email, УсловияПоиска);
			ДобавитьПолеПоискаПоПараметру("Email", КэшЗаполнения.Email);
		КонецЕсли;
		
		Канал = Обращение.КаналПервичногоИнтереса;
		Источник = Обращение.ИсточникПервичногоИнтереса;
		
		КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Заявка;
		ИсточникОбращения = Обращение.ИсточникПолучения;
	ИначеЕсли Параметры.Свойство("Взаимодействие") Тогда
		
		Если Параметры.ДанныеВзаимодействия.Свойство("ДокументОснование")
			И ТипЗнч(Параметры.ДанныеВзаимодействия.ДокументОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			
			Обращение = Параметры.ДанныеВзаимодействия.ДокументОснование;
			Обращение_Взаимодействие = Параметры.Взаимодействие;
			Канал = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_Телемаркетинг;
			Источник = Обращение;
		Иначе
			Обращение = Параметры.Взаимодействие;
		КонецЕсли;
		Интерес.Тема = Параметры.ДанныеВзаимодействия.Тема;
		
		СформироватьКэши("", "", "", "", "");
		
		Если ЗначениеЗаполнено(Параметры.ДанныеВзаимодействия.Партнер) Тогда
			
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", Параметры.ДанныеВзаимодействия.Партнер);
			Интерес.Партнер = Параметры.ДанныеВзаимодействия.Партнер;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДанныеВзаимодействия.КонтактноеЛицо) Тогда
			
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", Параметры.ДанныеВзаимодействия.КонтактноеЛицо);
			Интерес.КонтактноеЛицо = Параметры.ДанныеВзаимодействия.КонтактноеЛицо;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДанныеВзаимодействия.ПотенциальныйКлиент) Тогда
			
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", Параметры.ДанныеВзаимодействия.Партнер);
			Интерес.Партнер = Параметры.ДанныеВзаимодействия.Партнер;
			
		КонецЕсли;
		Если Обращение.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
			
			КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Взаимодействие;
			ИсточникОбращения = Обращение.ВидВзаимодействия;
			
		ИначеЕсли Параметры.ДанныеВзаимодействия.Свойство("ДокументОснование")
			И ТипЗнч(Параметры.ДанныеВзаимодействия.ДокументОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			
			КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Телефония;
			ИсточникОбращения = Обращение.ВидВзаимодействия;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ТелефонныйЗвонок") Тогда
		
		ТелефонныйЗвонок = Параметры.ТелефонныйЗвонок;
		Заявка = ТелефонныйЗвонок.ВзаимодействиеОснование;
		Если Не ЗначениеЗаполнено(Заявка) Или ТипЗнч(Заявка) <> Тип("ДокументСсылка.CRM_Заявка") Тогда
			Обращение = ТелефонныйЗвонок;
			КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Телефония;
			ИсточникОбращения = ПолучитьНомерТелефонаОбращения(ТелефонныйЗвонок);
		Иначе
			Обращение = Заявка;
			КаналОбращения = Заявка.КаналПервичногоИнтереса;
			ИсточникОбращения = Заявка.ИсточникПервичногоИнтереса;
		КонецЕсли;
		
		Интерес.Описание = Обращение.Комментарий;
		
		КонтактОбращения = ТелефонныйЗвонок.АбонентКонтакт;
		
		Если ЗначениеЗаполнено(КонтактОбращения) И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", КонтактОбращения);
			Интерес.Партнер = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КонтактОбращения);
			Интерес.КонтактноеЛицо = КонтактОбращения;
		ИначеЕсли ЗначениеЗаполнено(КонтактОбращения)
			И ТипЗнч(КонтактОбращения) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			
			ОрганизацияОбращения = ?(ЗначениеЗаполнено(КонтактОбращения.Организация),
				КонтактОбращения.Организация, КонтактОбращения.Наименование);
			Интерес.ПотенциальныйКлиент = КонтактОбращения;
			Интерес.КонтактноеЛицо = КонтактОбращения.КонтактноеЛицо;
			Интерес.Партнер = КонтактОбращения.Партнер;
			
		КонецЕсли;
		
		ТелефонОбращения = "";
		Параметры.Свойство("НомерТелефона", ТелефонОбращения);
		
		Если ЗначениеЗаполнено(ТелефонОбращения) Тогда
			СформироватьКэши("", "", ТелефонОбращения, "", "");
			УсловияПоиска.Добавить(КэшПоиска.Телефон);
			ДобавитьПолеПоискаПоПараметру("Телефон", ТелефонОбращения);
		ИначеЕсли ЗначениеЗаполнено(ТелефонныйЗвонок.АбонентКонтакт) Тогда
			КлиентОбращения = ТелефонныйЗвонок.АбонентКонтакт;
			СформироватьКэши("", КлиентОбращения, ТелефонОбращения, "", "");
			УсловияПоиска.Добавить(КэшПоиска.Организация);
			ДобавитьПолеПоискаПоПараметру("Организация", КлиентОбращения);
		КонецЕсли;
		
		Если Параметры.Свойство("сфпСтруктураВнешнихДанных") Тогда
			ДанныеCoMagic = РазобратьДанныеCoMagic(Параметры.сфпСтруктураВнешнихДанных);
			Интерес.Описание = Интерес.Описание + 
				?(ЗначениеЗаполнено(Интерес.Описание), Символы.ПС, "") + ДанныеCoMagic.Текст;
			Канал = ДанныеCoMagic.Канал;
			Источник = ДанныеCoMagic.Источник;
			
		Иначе
			НаборЗаписейИсточники = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
			НаборЗаписейИсточники.Отбор.Сделка.Установить(Обращение);
			НаборЗаписейИсточники.Прочитать();
			Если НаборЗаписейИсточники.Количество() > 0 Тогда
				Канал = НаборЗаписейИсточники[0].КаналПервичногоИнтереса;
				Источник = НаборЗаписейИсточники[0].ИсточникПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		
		// Если ЗначениеЗаполнено(КлиентОбращения) Тогда
		//	
		//	ЗаполнитьРезультатыПоискаПоПараметру("Контакт", КлиентОбращения);
		//	
		//КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Партнер") Тогда
		
		ДоступныКарты = Ложь;
		ДоступноОбращение = Ложь;
		
		Если ЗначениеЗаполнено(Параметры.Партнер) Тогда
			ЗаполнитьРезультатыПоискаПоПараметру("Клиент", Параметры.Партнер);
			Интерес.Партнер = Параметры.Партнер;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ПотенциальныйКлиент") Тогда
		
		ФИООбращения = Параметры.Наименование;
		ОрганизацияОбращения = Параметры.Наименование;
		СформироватьКэши(ФИООбращения, ФИООбращения, "", "", "");
		
		Если ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			УсловияПоиска.Добавить(КэшПоиска.Организация);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Основание") Тогда
		Обращение = Параметры.Основание;
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда	
		
			УстановитьЗначениеТипУслуги(Обращение.ТипУслуги);
			СценарийПродажи = Обращение.СостояниеИнтереса.Родитель;
			
			ДоступныКарты = Ложь;
			ДоступноОбращение = Ложь;
			
			ЗаполнитьРезультатыПоискаПоПараметру("Интерес", Обращение);
			
			ОпределенКлиент = Истина;
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СформироватьКэши("", "", "", "", "");

			Если ЗначениеЗаполнено(Параметры.Основание.CRM_КонтактноеЛицо) Тогда
				
				ЗаполнитьРезультатыПоискаПоПараметру("Контакт", Параметры.Основание.CRM_КонтактноеЛицо);
				Интерес.КонтактноеЛицо = Параметры.Основание.CRM_КонтактноеЛицо;
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.Основание.CRM_Партнер) Тогда
				
				ЗаполнитьРезультатыПоискаПоПараметру("Клиент", Параметры.Основание.CRM_Партнер);
				Интерес.Партнер = Параметры.Основание.CRM_Партнер;
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.Основание.БизнесПроцесс)
				 И ЗначениеЗаполнено(Параметры.Основание.БизнесПроцесс.КонтактноеЛицо) Тогда	
				
				ЗаполнитьРезультатыПоискаПоПараметру("Контакт", Параметры.Основание.БизнесПроцесс.КонтактноеЛицо);
				Интерес.КонтактноеЛицо = Параметры.Основание.БизнесПроцесс.КонтактноеЛицо;
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.Основание.БизнесПроцесс)
				 И ЗначениеЗаполнено(Параметры.Основание.БизнесПроцесс.Партнер) Тогда	
				
				ЗаполнитьРезультатыПоискаПоПараметру("Клиент", Параметры.Основание.БизнесПроцесс.Партнер);
				Интерес.Партнер = Параметры.Основание.БизнесПроцесс.Партнер;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступноОбращение") Тогда
		ДоступноОбращение = Параметры.ДоступноОбращение;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипУслуги") Тогда
		УстановитьЗначениеТипУслуги(Параметры.ТипУслуги);
		Если Параметры.Свойство("НеОбновлятьТипУслуги") Тогда
			НеОбновлятьТипУслуги = Параметры.НеОбновлятьТипУслуги;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Сценарий") Тогда
		СценарийПродажи = Параметры.Сценарий;
		Если ИспользоватьТипыУслуг Тогда
			Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_СостоянияИнтересов")
				И НЕ ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
				Если СценарийПродажи.ТипыУслуг.Количество() = 1 Тогда
					Интерес.ТипУслуги = СценарийПродажи.ТипыУслуг[0].ТипУслуги;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоКаналу();
	
	// Проверка возможности отклонить лид.
	ЭтоЛид = Ложь;
	Если ЗначениеЗаполнено(Обращение) Тогда
		ЭтоЛид = РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Обращение);
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ЭтоЛид = Истина;
	КонецЕсли;
	Элементы.Отклонить.Видимость = ЭтоЛид;
	
	// Заполнение состояния лида+
	Если ЗначениеЗаполнено(Обращение) Тогда
		Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Обращение) Тогда
			СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Обращение);
			Если СтруктураСостоянияЛида = Неопределено
				ИЛИ СтруктураСостоянияЛида.Состояние = Справочники.CRM_СостоянияЛидов.Новый Тогда
				Элементы.ГруппаОбращение.Видимость = Ложь;
			Иначе
				Элементы.ГруппаОбращение.Видимость = Истина;
				
				Обращение_Состояние = СтруктураСостоянияЛида.Состояние;
				Если Обращение_Состояние = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
					Обращение_ПричинаОтклонения = СтруктураСостоянияЛида.ПричинаОтклонения;
					Обращение_КомментарийСостояния = СтруктураСостоянияЛида.Комментарий;
				Иначе
					Обращение_СконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
					Элементы.Обращение_ПричинаОтклонения.Видимость = Ложь;
					Элементы.Обращение_КомментарийСостояния.Видимость = Ложь;
				КонецЕсли;
				
				Элементы.Обращение_СконвертированВОбъект.Видимость = ЗначениеЗаполнено(Обращение_СконвертированВОбъект);
				ОбновитьДанныеОбработкиОбращения(СтруктураСостоянияЛида.ДатаОбработки,
					 СтруктураСостоянияЛида.ОтветственныйЗаОбработку);
				
			КонецЕсли;
		Иначе
			Элементы.ГруппаОбращение.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Заполнение состояния лида-
	
	СтруктураЗаголовка = ЗаголовокОбращения(Обращение);
	Если ЗначениеЗаполнено(СтруктураЗаголовка.ТекстЗаголовка) Тогда
		Элементы.ДекорацияЗаголовокОбращение.Заголовок = СтруктураЗаголовка.ТекстЗаголовка;
		Элементы.ДекорацияКартинкаОбращение.Картинка = СтруктураЗаголовка.Картинка;
	КонецЕсли;
	
	Если Не ДоступноОбращение Тогда
		Элементы.ГруппаСвязатьСИнтересом.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьВариантыНазначенияОтветственного();
	ЗаполнитьОтветственного(ЭтотОбъект);
	
	Интерес.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация",
		Интерес.Ответственный);
	Если Параметры.Свойство("Проект") Тогда
		Интерес.Проект = Параметры.Проект;
	Иначе
		Интерес.Проект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект", Интерес.Ответственный);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
		УстановитьЗначениеТипУслуги(ПолучитьТипУслугиПользователя(Интерес.Ответственный, Истина));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипОбращения) Тогда
		УстановитьЗначениеТипОбращения(ПолучитьТипОбращенияПользователя(Интерес.Ответственный, Истина));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипОбращения) Тогда
		Если ИсточникОткрытияМастера = CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений() Тогда
			УстановитьЗначениеТипОбращения(Справочники.CRM_ТипыОбращений.Обращение);
		Иначе
			УстановитьЗначениеТипОбращения(Справочники.CRM_ТипыОбращений.Интерес);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПоддержка = ЗначениеЗаполнено(ТипОбращения)
		 И ТипОбращения <> ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес")
					ИЛИ НЕ ЗначениеЗаполнено(ТипОбращения)
						 И ИсточникОткрытияМастера = CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений();
	
	Если ЭтоПоддержка Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru = 'Создать обращение'");
	КонецЕсли;
	Элементы.ГруппаУровеньПоддержки.Видимость = ЭтоПоддержка;
	Элементы.Тема.АвтоОтметкаНезаполненного = ЭтоПоддержка;
	Элементы.Тема.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Интерес.Тема) И ЭтоПоддержка;

	ОбновитьЗаголовок();
	
	// +Модели машинного обучения
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения") Тогда
		Помощник_Использовать = Помощник_ПроверитьИспользование();
		Если Помощник_Использовать Тогда
			Элементы.ГруппаПомощник.Видимость = Истина;

			ОписаниеОшибкиСервисы = "";
			СервисыДоступны = CRM_ЛицензированиеЭкспортныеМетоды.ПроверитьПодключениеКОтраслевымСервисам(ОписаниеОшибкиСервисы);
			Если СервисыДоступны Тогда
				Помощник_ОбновитьСостояние();
			Иначе
				Элементы.СтраницаПомощник.Видимость = Ложь;
				Элементы.СтраницаПредупреждение.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// -Модели машинного обучения
	
	Если Не ЗначениеЗаполнено(СценарийПродажи) Тогда
		СценарийПродажи = ПолучитьСценарийПользователя(Интерес.Ответственный, Истина);
		НастроитьФормуПоСценариюПродаж(ЭтотОбъект);
	КонецЕсли;
	
	Если ОпределенКлиент Тогда
		ЗаблокироватьСтрокуПоиска();
		НастроитьФормуПослеПоиска();
	Иначе
		ВыполнитьПоискНаСервере(УсловияПоиска);
	КонецЕсли;
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.ДополнитьРеквизитыФормыДляСозданияКонтрагента(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		МассивОбъектовСДопРеквизитами = Новый Массив;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКлиента");
		ДополнительныеПараметры.Вставить("Объект", Интерес.Партнер);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКонтакта");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпКонтакт);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРекизитовПК");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпПотенциальныйКлиент);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ТемпИнтерес.ТипОбращения = ТипОбращения;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДопРеквизитыИнтереса");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпИнтерес);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры.Вставить("МассивОбъектов", МассивОбъектовСДопРеквизитами);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		РазложитьДопРеквизитыПоКолонкам(МассивОбъектовСДопРеквизитами);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	ИзменитьСоставРеквизитов();
	
	НастроитьРолевуюАдресацию(ЭтотОбъект, РолеваяАдресацияРазрешена(СценарийПродажи));
	ОбновитьОжидаемуюДатуПродажи(Интерес, СценарийПродажи);
	
	Если Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить() Тогда
		ЭлементКанал = Элементы.Найти("Канал");
		Если ЭлементКанал <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Канал) Тогда
				ЭлементКанал.ОтметкаНезаполненного = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПК Тогда
		РежимВводаНовогоКлиента = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.РежимВводаНовогоКлиента",
			"МастерРегистрации", 1);
	Иначе
		РежимВводаНовогоКлиента = 0;
	КонецЕсли;
	
	ОткрыватьИнтерес = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.ОткрыватьИнтерес",
		"МастерРегистрации", Ложь);
	ОткрыватьИнтересОбращение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.ОткрыватьИнтересОбращение",
		"МастерРегистрации", Ложь);
	СоздаватьЗадачуПриСвязывании = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.СоздаватьЗадачуПриСвязывании",
		"МастерРегистрации", Истина);
	
	CRM_РазрешитьСозданиеИнтересаБезКЛ = (РольДоступна("ПолныеПрава")
		Или РольДоступна("CRM_РазрешитьСозданиеИнтересаБезКЛ"));
	
	ВыбранныеТипы = Новый Массив;
	
	ОсновнойТипОтношенийСКлиентом = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипОтношенийСКлиентом");
	Если ЗначениеЗаполнено(ОсновнойТипОтношенийСКлиентом) Тогда
		ВыбранныеТипы.Добавить(ОсновнойТипОтношенийСКлиентом);
	Иначе
		ВыбранныеТипы.Добавить(Справочники.CRM_ТипыОтношений.Покупатель);
	КонецЕсли;
	
	Справочники.CRM_ТипыОтношений.ЗаполнитьСписокОтношений(CRM_ВсеТипыОтношений, ВыбранныеТипы);
	
	ДоступноИзменениеПартнеров = ПравоДоступа("Редактирование", Метаданные.Справочники.Партнеры);
	РезультатыПоискаПредыдущиеДанныеИдентификатор = -2;
	
	КонтактнаяИнформацяКлиентаИзменитьОтметкиНезаполненного();
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	КонтактнаяИнформацяПотенциальногоКлиентаИзменитьОтметкиНезаполненного();
	
	ИнициализироватьТаймерТрудозатрат();
	
	ИнициализироватьТоварыИУслуги();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	Если ЗначениеЗаполнено(ТипОбращения) И ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
		ПоказатьСкрытьКомандуТоварыИУслуги(Истина);
	Иначе
		ПоказатьСкрытьКомандуТоварыИУслуги(Ложь);
	КонецЕсли;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыведеныТоварыИУслуги = Ложь;
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	CRM_ЗаписатьВсеТипыОтношений();
	СформироватьТипОтношенийПредставление();
	
	// +СофтФон
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпВерсияПанели, "3.0.3.120") >= 0 Тогда
			сфпВиднаКолонкаСтатусов = Истина;
		Иначе
			сфпВиднаКолонкаСтатусов = Ложь;
			Элементы.сфпСтатус.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	сфпВидимостьИДоступностьГруппыСофтфон();
	// -СофтФон
	
	Элементы.СоздатьКлиента.Видимость = ДоступноИзменениеПартнеров;
	Элементы.СоздатьКонтакт1.Видимость = Ложь;
	
	// Переключение интерфейса ввода на Клиента
	Если ДоступноИзменениеПартнеров И РежимВводаНовогоКлиента = 0 Тогда
		СоздатьКлиента(Неопределено);
	КонецЕсли;
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	УстановитьТекущуюСтрокуРезультатыПоиска();
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.МастерРегистрацииОбращения.ДлительностьСценариев.ВремяРегистрацииОбращения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура);
		ТекстВопроса = НСтр("ru='Введенные данные будут потеряны. Закрыть?';en='Input data will be lost. Close?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе	
		Оповестить("ЛентаСобытий_Обновить");
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.МастерРегистрацииОбращения.ДлительностьСценариев.ВремяРегистрацииОбращения");
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
			И (ИсточникВыбора.ИмяФормы = "ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги"
				 Или ИсточникВыбора.ИмяФормы = "Справочник.РолиИсполнителей.Форма.ФормаВыбора") Тогда
		
		ВыбранПользователь = (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи"));
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) 
			И (ВыбранПользователь Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей")) Тогда
			
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
				ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
				ПоказатьПредупреждение(, ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ОбрабатыватьАктивизациюПоиска = Ложь;
			Интерес.Ответственный = ВыбранноеЗначение;
			
			Если ВыбранПользователь Тогда
				
				ТипУслугиОтв = ПолучитьТипУслугиПользователя(Интерес.Ответственный);
				Если ЗначениеЗаполнено(ТипУслугиОтв) Тогда
					УстановитьЗначениеТипУслуги(ТипУслугиОтв);
				КонецЕсли;
				
				ОбновитьТипОбращения(Интерес.Ответственный);
				
			КонецЕсли;
			
			ИзменениеОтветственного = Истина;
			ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
			ИзменениеОтветственного = Ложь;
			
			ЗаполнитьПроверяемыеРеквизитыИнтереса();
		КонецЕсли;
		
	// +CRM_Модуль
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.Форма" Тогда 
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		ОбновитьЗаголовокГруппыТовары();
		
	// -CRM_Модуль
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, ИсточникОповещения)
	
	Если (ИмяСобытия = "ЗаполнитьОснованиеОбращения")
		И (ТипЗнч(Параметр) = Тип("ДокументСсылка.ТелефонныйЗвонок"))
		И (Обращение = Параметр) Тогда
		сфпВидимостьИДоступностьГруппыСофтфон();
	КонецЕсли;
	
	Если ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		Если Параметр = ПотенциальныйКлиентПриАктивизацииСтроки Тогда
			Если ВыполнитьПоискНаСервереПоДаннымПК() Тогда
				НастроитьЗаполнитьПоНайденнымДанным();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектыПереопределеныСПК" Тогда
		Если Параметр.ПК = ПотенциальныйКлиентПриАктивизацииСтроки Тогда
			ВыполнитьПоиск(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеОформленияМессенджера" И ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		Если Параметр <> СодержимоеОснования_НастройкаОформленияМессенджера Тогда
			ИнициализироватьДокументHTMLМессенджера();
			СодержимоеОснования_НастройкаОформленияМессенджера = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	// +Софтфон
	Если (ИмяСобытия = "СофтФон_КонецРазговора") 
		И (Параметр.Звонок <> Неопределено) И (Параметр.Звонок = Обращение) Тогда
		ТекущийЭлемент = Элементы.сфпПодтвердитьПеревод;
		
		Если Элементы.сфпПереводЗвонка.Видимость Тогда
			Элементы.сфпПереводЗвонка.Доступность = Ложь;
		КонецЕсли;
		Если Элементы.сфпПодтвердитьПеревод.Доступность Тогда
			Элементы.сфпПодтвердитьПеревод.Доступность = Ложь;
		КонецЕсли;
		Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
		сфпУдержаниеЗвонка = Ложь;
	ИначеЕсли ИмяСобытия = "сфпПерезаполнитьСтатусыЛиний" Тогда		
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				сфпСтатус = сфпКартинкаСтатуса(СтатусЛинии);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Обращение Тогда
			// Заполняем документ данными из CoMagic
			ДанныеCoMagic = РазобратьДанныеCoMagic(Параметр.СтруктураCoMagic);
			Интерес.Описание = Интерес.Описание + 
				?(ЗначениеЗаполнено(Интерес.Описание), Символы.ПС, "") + ДанныеCoMagic.Текст;
			Канал = ДанныеCoMagic.Канал;
			Источник = ДанныеCoMagic.Источник;
			НастроитьФормуПоКаналу();
			УстановитьВидимостьКарточкиCoMagic();
		КонецЕсли;
	КонецЕсли;
	// -Софтфон
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если РежимПроверкиЗаполнения = "СозданиеКлиентаКонтакта" Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
	Если Не Интерес.Партнер.Пустая() Тогда
		Если Интерес.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания И Элементы.ГруппаКонтакт.Видимость Тогда
			Если Не CRM_РазрешитьСозданиеИнтересаБезКЛ Тогда
				ПроверяемыеРеквизиты.Добавить("Контакт");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимПроверкиЗаполнения = "СозданиеПотенциальногоКлиента" Тогда
		
		ПроверяемыеРеквизиты.Добавить("ФИО");
		ДополнительныеПроверяемыеРеквизиты = Неопределено;
		
	ИначеЕсли РежимПроверкиЗаполнения = "ЗапускБизнесПроцесса" Тогда
		
		ПроверяемыеРеквизиты.Добавить("СценарийПродажи");
		ДополнительныеПроверяемыеРеквизиты = Неопределено;
		
	ИначеЕсли РежимПроверкиЗаполнения = "СозданиеИнтереса"
		Или РежимПроверкиЗаполнения = "СозданиеКлиентаКонтакта" Тогда
		
		Если РежимПроверкиЗаполнения = "СозданиеИнтереса" Тогда
			
			ПроверяемыеРеквизиты.Добавить("СценарийПродажи");
			Если ПолучитьФункциональнуюОпциюФормы("CRM_ИспользоватьТипыУслуг") Тогда
				Если Не ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
					ТекстСообщения = НСтр("ru='Поле ""Тип услуги"" не заполнено.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Интерес.ТипУслуги", , Отказ);
				КонецЕсли;
			КонецЕсли;
			Если Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить() Тогда
				ПроверяемыеРеквизиты.Добавить("Канал");
			КонецЕсли;
			Если ЭтоПоддержка Тогда
				Если Не ЗначениеЗаполнено(Интерес.Тема) Тогда
					ТекстСообщения = НСтр("ru='Поле ""Тема"" не заполнено.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Интерес.Тема", , Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПоля = Новый Массив;
		
		Если (Элементы.ГруппаРеквизитыКлиента.Видимость ИЛИ Элементы.ГруппаРеквизитыКонтакта.Видимость) 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПоискДублей_НайденыДубли") 
			И НЕ РольДоступна("ПолныеПрава") Тогда
			
			Если ЭтотОбъект["ПоискДублей_НайденыДублиКлиенты"] 
				И Константы.CRM_ЗапретитьВводНовогоКлиентаПриНайденныхСовпадениях.Получить() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли клиента!
					|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
			КонецЕсли;
			Если ЭтотОбъект["ПоискДублей_НайденыДублиКонтакты"] 
				И Константы.CRM_ЗапретитьВводНовогоКонтактаПриНайденныхСовпадениях.Получить() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли контактного лица!
					|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
			Если НЕ ЗначениеЗаполнено(Клиент_Объект.Наименование) Тогда
				ТекстСообщения = НСтр("ru='Не заполнено наименование клиента'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Объект.Наименование", , Отказ);
			КонецЕсли;
			
			ПроверитьЗаполнениеКонтактнойИнформацииКлиента(ПроверяемыеРеквизиты);
			
			Если Клиент_Объект.ЮрФизЛицо <> Перечисления.КомпанияЧастноеЛицо.Компания
				 И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ") Тогда
				ДополнительныеПоля.Добавить("Клиент_Телефон");
				ДополнительныеПоля.Добавить("Клиент_Email");
				Если Элементы.Клиент_МобТелефон.Видимость Тогда
					ДополнительныеПоля.Добавить("Клиент_МобТелефон");
				КонецЕсли;
			КонецЕсли;
			Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
				CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
				CRM_Модуль.ПроверитьЗаполнениеКонтрагента(ЭтотОбъект, Отказ);
			КонецЕсли;
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ЭтоЮридическоеЛицо =
					(Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
			Иначе
				Модуль_ОбщегоНазначенияУТКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияУТКлиентСервер");
				ЭтоЮридическоеЛицо = Модуль_ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо);
				
				Если ЭтоЮридическоеЛицо Тогда
					Если ПустаяСтрока(Клиент_ИНН) И Не ПустаяСтрока(Клиент_КПП) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан КПП, но не указан ИНН'"), , "Клиент_ИНН", , Отказ);
					КонецЕсли;
				КонецЕсли;
				
				Если ЭтоЮридическоеЛицо
					И Не ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
					И Не ЭтотОбъект["УпрощенныйВводДоступен"] Тогда
					
					Если ПустаяСтрока(Клиент_ИНН) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано значение ИНН';
																				|en = 'TIN value is not specified'"), , "Клиент_ИНН", , Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Клиент_ИНН) Тогда
				
				ТекстСообщения = "";
				Отказ = НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Клиент_ИНН,
					 ЭтоЮридическоеЛицо,
					 ТекстСообщения);
				Если Отказ Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИНН");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			CRM_РазрешитьСозданиеИнтересаБезКЛ = Не ((ЗначениеЗаполнено(Контакт_Email)
				 Или ЗначениеЗаполнено(Контакт_Телефон) Или ЗначениеЗаполнено(НомерМобильногоТелефона))
				 И Не ЗначениеЗаполнено(Контакт_ФИО));
		КонецЕсли;
		
		Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
			Если НЕ CRM_РазрешитьСозданиеИнтересаБезКЛ Тогда
				
				ЮрЛицо = Истина;
				Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
					ЮрЛицо = (Интерес.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
				Иначе
					ЮрЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Контакт_ФИО) И ЮрЛицо Тогда
					ТекстСообщения = НСтр("ru='Не заполнено наименование контакта'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФИО", , Отказ);
				КонецЕсли;
				
				ПроверятьЗаполнениеКИ = ЗначениеЗаполнено(Контакт_ФИО)
										ИЛИ ЮрЛицо;
				
				Если ПроверятьЗаполнениеКИ Тогда
					ПроверитьЗаполнениеКонтактнойИнформацииКонтакта(ПроверяемыеРеквизиты);
				КонецЕсли;
				
				Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ")
					И ПроверятьЗаполнениеКИ Тогда
					ДополнительныеПоля.Добавить("Почта");
					ДополнительныеПоля.Добавить("Телефон");
					Если Элементы.ИДАккаунта.Видимость Тогда
						ДополнительныеПоля.Добавить("ИДАккаунта");
					КонецЕсли;
					Если ПоказыватьМобильныйТелефон Тогда
						ДополнительныеПоля.Добавить("НомерМобильногоТелефона");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ГруппаФИО.Видимость Тогда
			Если Элементы.ФИО.Видимость Тогда
				ПроверяемыеРеквизиты.Добавить("ФИО");
			КонецЕсли;
			ДополнительныеПоля.Добавить("Почта1");
			ДополнительныеПоля.Добавить("Телефон1");
			Если Элементы.ИДАккаунта.Видимость Тогда
				ДополнительныеПоля.Добавить("ИДАккаунта");
			КонецЕсли;
			Если ПоказыватьМобильныйТелефон Тогда
				ДополнительныеПоля.Добавить("НомерМобильногоТелефона");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РежимПроверкиЗаполнения = "";
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПоля <> Неопределено
		И НЕ ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент)
		И (НЕ ЗначениеЗаполнено(Интерес.Партнер) ИЛИ НЕ Элементы.ГруппаКонтакт.Видимость) Тогда
		
		НетЗаполненных = Истина;
		Для Каждого Поле Из ДополнительныеПоля Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[Элементы[Поле].ПутьКДанным]) Тогда
				НетЗаполненных = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НетЗаполненных Тогда
			Для Каждого Поле Из ДополнительныеПоля Цикл
				Если Элементы[Поле].Видимость Тогда
					ТекстСообщения = НСтр("ru='Не заполнена контактная информация';en='Contact information not filled'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Элементы[Поле].ПутьКДанным, , Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимПроверкиЗаполнения <> "СозданиеКлиентаКонтакта" Тогда
	
		Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес")
			 И Элементы.Источник.АвтоОтметкаНезаполненного = Истина Тогда
			ПроверяемыеРеквизиты.Добавить("Источник");
		КонецЕсли;
		
		Если НЕ РолеваяАдресацияРазрешена(СценарийПродажи)
			 И ТипЗнч(Интерес.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для первого состояния сценария %1 не разрешена ролевая адресация'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				 СценарийПродажи), , "Ответственный", ,
				 Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ, РежимПроверкиЗаполнения);
	
	РежимПроверкиЗаполнения = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СпособПоиска",
			 "МастерРегистрации",
			 СпособПоиска);
		ВыполнитьПоиск(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сфпКарточкаCoMagic(Команда)
	
	СтруктураПоиска = Новый Структура("Звонок,Партнер,КонтактноеЛицо", Обращение,
		Интерес.Партнер, Интерес.КонтактноеЛицо);
	сфпСофтФонПроКлиентПереопределяемый.сфпОбработкаКомандыКарточкаCoMagic(СтруктураПоиска);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.href, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокОбращениеНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Обращение) Тогда
		ПоказатьЗначение(, Обращение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаналНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	Канал);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	НастроитьФормуПоКаналу();
	УстановитьВидимостьКарточкиCoMagic();
	
КонецПроцедуры  

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПересчитатьСуммуПриИзмененииДоговора();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПриИзмененииДоговора()
	
	Если Не ЗначениеЗаполнено(Интерес.Договор) Тогда
		// Если договор не заполнен, то считаем, что валюта не изменилась
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовИмя = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "ВалютаРасчетов", "ВалютаВзаиморасчетов");
	Интерес.ОжидаемаяВыручка = РаботаСКурсамиВалют.ПересчитатьВВалюту(Интерес.ОжидаемаяВыручка, Интерес.Валюта,
		Интерес.Договор[ВалютаРасчетовИмя], ТекущаяДатаСеанса());
	Интерес.Валюта = Интерес.Договор[ВалютаРасчетовИмя];
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Канал) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПВХ(Канал) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",		Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока",	Источник);
		ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
		ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		
		ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
		ЭлементОтбора.ПравоеЗначение	= НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЭлементОтбора.Использование		= Истина;
		ФормаВыбора.Открыть();
		
	ИначеЕсли ТипПВХ(Канал) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		СтандартнаяОбработка	= Ложь;
		ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
		ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПараметрыФормы			= Новый Структура;
		Если ЗначениеЗаполнено(Источник) И (ТипЗнч(Источник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Источник, "Владелец"));
		КонецЕсли;	
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ,
			 ВариантОткрытияОкна.ОтдельноеОкно, ,
			 ОписаниеВыбораПартнера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальныйКлиентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПотенциальныйКлиентОткрытиеЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьЗначение(ОповещениеЗавершения, Интерес.ПотенциальныйКлиент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальныйКлиентОткрытиеЗавершение(ДополнительныеПараметры) Экспорт
	
	Организация = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес.ПотенциальныйКлиент, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбращенияПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	ЭтоПоддержка = (ТипОбращения <> ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"));
	Элементы.ГруппаУровеньПоддержки.Видимость = ЭтоПоддержка;
	Элементы.Тема.АвтоОтметкаНезаполненного = ЭтоПоддержка;
	Элементы.Тема.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Интерес.Тема) И ЭтоПоддержка;
	
	Если ЭтоПоддержка Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru = 'Создать обращение'");
		Элементы.Навигация_Основное1.Заголовок = НСтр("ru = 'Обращение'");
	Иначе
		Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru = 'Создать интерес'");
		Элементы.Навигация_Основное1.Заголовок = НСтр("ru = 'Интерес'");
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиент.ОпределитьУровеньПоддержки(ЭтотОбъект);
	ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ОбновитьЗаголовок();

	ПоказатьСкрытьКомандуТоварыИУслуги(Не ЭтоПоддержка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУслугиПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОпределитьУровеньПоддержки(ЭтотОбъект);
	ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПродажиПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	НастроитьФормуПоСценариюПродаж(ЭтотОбъект);
	
	СценарийПродажиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СценарийПродажиПриИзмененииСервер()
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Интерес.Ответственный = Неопределено Тогда
		Интерес.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ВыбранПользователь = (ТипЗнч(Интерес.Ответственный) = Тип("СправочникСсылка.Пользователи"));
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Если ВыбранПользователь Тогда
		
		Если Не ЗначениеЗаполнено(Интерес.Ответственный) Тогда
			ЗаполнитьОтветственного(ЭтотОбъект, Новый Структура("НеУстанавливатьРоль"));
			Если Интерес.Ответственный = Неопределено Тогда
				Интерес.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		Интерес.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация", Интерес.Ответственный);
		
		ТемпПроект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект", Интерес.Ответственный);
		Если ЗначениеЗаполнено(ТемпПроект) Тогда
			Интерес.Проект = ТемпПроект;
		КонецЕсли;
		
	ИначеЕсли Интерес.Ответственный = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		
		ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Интерес.Ответственный = ОтветственныйДоИзменения;
		Возврат;
		
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.ОпределитьУровеньПоддержки(ЭтотОбъект);
		
	Если ВыбранПользователь Тогда
		
		ТипУслугиОтв = ПолучитьТипУслугиПользователя(Интерес.Ответственный);
		Если ЗначениеЗаполнено(ТипУслугиОтв) Тогда
			УстановитьЗначениеТипУслуги(ТипУслугиОтв);
		КонецЕсли;	
		
		ОбновитьТипОбращения(Интерес.Ответственный);
	
	КонецЕсли;
	
	ИзменениеОтветственного = Истина;
	ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
	ИзменениеОтветственного = Ложь;
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	сфпВидимостьИДоступностьГруппыСофтфон();
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтаПриИзменении(Элемент)
	
	Почта = СокрЛП(Почта);
	Ошибка = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Почта);
	Если Ошибка.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.Сообщение, , "Почта");
	КонецЕсли;
	
	// +CRM_Модуль
	ОбновитьОтображениеРеквизитовКонтактаКлиента();
	// -CRM_Модуль
	
	ВыполнитьПоискДублейПоЗначению(Почта, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	
	Если Элемент.Имя = "Телефон1" Тогда
		Если Элемент.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
				 "");
		КонецЕсли;
		
		ВыполнитьПоискДублейПоЗначению(Телефон, Элемент,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Иначе	
		Если Элемент.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
			Контакт_Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
				 "");
		КонецЕсли;
		
		ВыполнитьПоискДублейПоЗначению(Контакт_Телефон, Элемент,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерМобильногоТелефонаПриИзменении(Элемент)
	
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерМобильногоТелефона);
		НомерМобильногоТелефона = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
	КонецЕсли;
	
	// +CRM_Модуль
	ОбновитьОтображениеРеквизитовКонтактаКлиента();
	// -CRM_Модуль
	
	ВыполнитьПоискДублейПоЗначению(НомерМобильногоТелефона, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФИО1ПриИзменении(Элемент)
	
	КонтактРедактированиеПредставления = Истина;
	Если Не КонтактПредставлениеВыбраноИзСписка Тогда
		
		ФИО_Темп = Контакт_ФИО;
		ФИО_Темп = СтрЗаменить(ФИО_Темп, ",", "");
		ФИО_Темп = СтрЗаменить(ФИО_Темп, ".", "");
		ФИО_Темп = СтрЗаменить(ФИО_Темп, ";", "");
		
		Если ПустаяСтрока(Контакт_Фамилия) Тогда
		
			ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			
			//Контакт_Фамилия = ПервоеСлово;
			//Контакт_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			//Контакт_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			Контакт_Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(ПервоеСлово);
			Контакт_Имя =
				CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп));
			Контакт_Отчество =
				CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп));
			
			Если Не ЗначениеЗаполнено(ПолКонтактногоЛица) Тогда
				ПолКонтактногоЛица = CRM_КлиентыКлиент.ОпределитьПол(Контакт_Имя);
			КонецЕсли;
			СтруктураКЛ = Новый Структура;
			СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
			СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
			СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
			Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
	ФИО = Элемент.ТекстРедактирования;
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	ВыполнитьПоискДублейПоЗначению(ФИО, Элемент);
	
	// +CRM_Модуль
	ОбновитьОтображениеРеквизитовКонтактаКлиента();
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ФИО1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВыполнитьПоискДублейПоЗначению(Элемент.ТекстРедактирования, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	ФИО = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(ФИО);
	МассивФИО = СтрРазделить(ФИО, " ", Ложь);
	Если МассивФИО.Количество() > 1 Тогда
		ПолКонтактногоЛица = CRM_КлиентыСервер.ОпределитьПол(МассивФИО[1]);
	КонецЕсли;
	
	СтруктураЗаполнения = ЗаполнитьФИОКонтактаНаСервере(Контакт_ФИО);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураЗаполнения);
	
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	ВыполнитьПоискДублейПоЗначению(ФИО, Элемент);
	
	//ОбрабатыватьАктивизациюПоиска = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФИООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ФИО = СокрЛП(Текст);
	Если Элемент.Имя = "ФИО1" Тогда
		Контакт_ФИО = ФИО;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФИОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаКонтактРедактированиеФИО.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ФИООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтактПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтруктураКЛ = Новый Структура;
	СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
	СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
	СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
	
	МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
	Если МассивПредставлений.Количество() > 0 Тогда
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений();
		КонецЕсли;
		Для Каждого тДанные Из МассивПредставлений Цикл
			ДанныеВыбора.Вставить(0, тДанные, тДанные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНаименованиеВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не КонтактПредставлениеВыбраноИзСписка Тогда
		
		СтруктураКЛ = Новый Структура;
		СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
		СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
		СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
		
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);	
		Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимФильтраПоИнтересамНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьЗаголовокФильтраПоИнтересам();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента,
																		"НетОтбораПоАктивнымИнтересам",
																		НетОтбораПоАктивнымИнтересам(РежимФильтраПоИнтересам),
																		Истина);
	Элементы.ИнтересыКлиентаЗавершен.Видимость = НетОтбораПоАктивнымИнтересам(РежимФильтраПоИнтересам);
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЗадачуПриСвязыванииПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СоздаватьЗадачуПриСвязывании",
		 "МастерРегистрации",
		 СоздаватьЗадачуПриСвязывании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьИнтересПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.ОткрыватьИнтерес",
		 "МастерРегистрации",
		 ОткрыватьИнтерес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьИнтересОбращениеПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.ОткрыватьИнтересОбращение",
		 "МастерРегистрации",
		 ОткрыватьИнтересОбращение);
	
КонецПроцедуры

&НаКлиенте
Процедура РольКонтактногоЛицаПриИзменении(Элемент)
	РольВИнтересе = РольКонтактногоЛица;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ФамилияПриИзменении(Элемент)
	
	Клиент_ОбъектРедактированиеФИО = Истина;
	Клиент_Объект.CRM_Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Клиент_Объект.CRM_Фамилия);
	Если Клиент_Объект.Ссылка.Пустая() И Не Клиент_ОбъектРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(Клиент_ОбъектТекФамилия) И Клиент_ОбъектТекФамилия <> СокрЛП(Клиент_Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Клиент_Объект.CRM_Фамилия) И Не ПустаяСтрока(Клиент_ОбъектТекФамилия)) Тогда
			
			Клиент_Объект.Наименование = СокрЛП(СтрЗаменить(Клиент_Объект.Наименование,
				 Клиент_ОбъектТекФамилия,
				 СокрЛП(Клиент_Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Клиент_Объект.Наименование) Тогда
			
			Клиент_Объект.Наименование = СокрЛП(Клиент_Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Клиент_Объект.CRM_Фамилия) И ПустаяСтрока(Клиент_ОбъектТекФамилия) Тогда
			
			Клиент_Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Клиент_Объект.CRM_Фамилия),   СокрЛП(Клиент_Объект.CRM_Фамилия) + " ",
				 "")
										+ ?(ЗначениеЗаполнено(Клиент_Объект.CRM_Имя), 		 СокрЛП(Клиент_Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Клиент_Объект.CRM_Отчество),  СокрЛП(Клиент_Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	Клиент_ОбъектТекФамилия = СокрЛП(Клиент_Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
	Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ИмяПриИзменении(Элемент)
	
	Клиент_ОбъектРедактированиеФИО = Истина;
	Клиент_Объект.CRM_Имя = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Клиент_Объект.CRM_Имя);
	Если Клиент_Объект.Ссылка.Пустая() И Не Клиент_ОбъектРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(Клиент_ОбъектТекИмя) И Клиент_ОбъектТекФамилия <> СокрЛП(Клиент_Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Клиент_Объект.CRM_Имя) И Не ПустаяСтрока(Клиент_ОбъектТекИмя)) Тогда
			
			Клиент_Объект.Наименование = СокрЛП(СтрЗаменить(Клиент_Объект.Наименование, Клиент_ОбъектТекИмя,
				 СокрЛП(Клиент_Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Клиент_Объект.Наименование) Тогда
			
			Клиент_Объект.Наименование = СокрЛП(Клиент_Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Клиент_Объект.CRM_Имя) И ПустаяСтрока(Клиент_ОбъектТекИмя) Тогда
			
			Клиент_Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Клиент_Объект.CRM_Фамилия), 	 СокрЛП(Клиент_Объект.CRM_Фамилия) + " ",
				 "")
										+ ?(ЗначениеЗаполнено(Клиент_Объект.CRM_Имя), 		 СокрЛП(Клиент_Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Клиент_Объект.CRM_Отчество),  СокрЛП(Клиент_Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	Клиент_ОбъектТекИмя = СокрЛП(Клиент_Объект.CRM_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Клиент_Объект.Пол) Тогда
		
		Клиент_Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Клиент_Объект.CRM_Имя);
		
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
	Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ОтчествоПриИзменении(Элемент)
	
	Клиент_ОбъектРедактированиеФИО = Истина;
	Клиент_Объект.CRM_Отчество = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Клиент_Объект.CRM_Отчество);
	Если Клиент_Объект.Ссылка.Пустая() И Не Клиент_ОбъектРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(Клиент_ОбъектТекОтчество)) 
			Или (ПустаяСтрока(Клиент_Объект.CRM_Отчество) И Не ПустаяСтрока(Клиент_ОбъектТекОтчество)) Тогда
			
			Клиент_Объект.Наименование = СокрЛП(СтрЗаменить(Клиент_Объект.Наименование,
				 Клиент_ОбъектТекОтчество,
				 СокрЛП(Клиент_Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Клиент_Объект.Наименование) Тогда
		
			Клиент_Объект.Наименование = СокрЛП(Клиент_Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Клиент_Объект.CRM_Отчество) И ПустаяСтрока(Клиент_ОбъектТекОтчество) Тогда

			Клиент_Объект.Наименование = Клиент_Объект.Наименование + " " + СокрЛП(Клиент_Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	Клиент_ОбъектТекОтчество = СокрЛП(Клиент_Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
	Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ФамилияПриИзменении(Элемент)
	
	КонтактРедактированиеФИО = Истина;
	Контакт_Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Контакт_Фамилия);
	Если Не КонтактРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(КонтактТекФамилия) И КонтактТекФамилия <> СокрЛП(Контакт_Фамилия)) 
			 Или (ПустаяСтрока(Контакт_Фамилия) И Не ПустаяСтрока(КонтактТекФамилия)) Тогда
			
			Контакт_ФИО = СокрЛП(СтрЗаменить(Контакт_ФИО, КонтактТекФамилия, СокрЛП(Контакт_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Контакт_ФИО) Тогда
			
			Контакт_ФИО = СокрЛП(Контакт_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Контакт_Фамилия) И ПустаяСтрока(КонтактТекФамилия) Тогда
			
			Контакт_ФИО = СокрЛП((?(ЗначениеЗаполнено(Контакт_Фамилия),   СокрЛП(Контакт_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Контакт_Имя), 		 СокрЛП(Контакт_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Контакт_Отчество),  СокрЛП(Контакт_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактТекФамилия = СокрЛП(Контакт_Фамилия);
	
	СтруктураКЛ = Новый Структура;
	СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
	СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
	СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
	Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ИмяПриИзменении(Элемент)
	
	КонтактРедактированиеФИО = Истина;
	Контакт_Имя = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Контакт_Имя);
	Если Не КонтактРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(КонтактТекИмя) И КонтактТекФамилия <> СокрЛП(Контакт_Имя)) 
			 Или (ПустаяСтрока(Контакт_Имя) И Не ПустаяСтрока(КонтактТекИмя)) Тогда
			
			Контакт_ФИО = СокрЛП(СтрЗаменить(Контакт_ФИО, КонтактТекИмя, СокрЛП(Контакт_Имя)));
			
		ИначеЕсли ПустаяСтрока(Контакт_ФИО) Тогда
			
			Контакт_ФИО = СокрЛП(Контакт_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Контакт_Имя) И ПустаяСтрока(КонтактТекИмя) Тогда
			
			Контакт_ФИО = СокрЛП((?(ЗначениеЗаполнено(Контакт_Фамилия), 	 СокрЛП(Контакт_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Контакт_Имя), 		 СокрЛП(Контакт_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Контакт_Отчество),  СокрЛП(Контакт_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактТекИмя = СокрЛП(Контакт_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(ПолКонтактногоЛица) Тогда
		
		ПолКонтактногоЛица = CRM_КлиентыКлиент.ОпределитьПол(Контакт_Имя);
		
	КонецЕсли;
	
	СтруктураКЛ = Новый Структура;
	СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
	СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
	СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
	Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ОтчествоПриИзменении(Элемент)
	
	КонтактРедактированиеФИО = Истина;
	Контакт_Отчество = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Контакт_Отчество);
	Если Не КонтактРедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(КонтактТекОтчество)) 
			Или (ПустаяСтрока(Контакт_Отчество) И Не ПустаяСтрока(КонтактТекОтчество)) Тогда
			
			Контакт_ФИО = СокрЛП(СтрЗаменить(Контакт_ФИО, КонтактТекОтчество, СокрЛП(Контакт_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Контакт_ФИО) Тогда
		
			Контакт_ФИО = СокрЛП(Контакт_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Контакт_Отчество) И ПустаяСтрока(КонтактТекОтчество) Тогда

			Контакт_ФИО = Контакт_ФИО + " " + СокрЛП(Контакт_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	КонтактТекОтчество = СокрЛП(Контакт_Отчество);
	
	СтруктураКЛ = Новый Структура;
	СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
	СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
	СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
	Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ОсновнаяОтрасльПриИзменении(Элемент)
	
	Клиент_Объект.CRM_ВидыДеятельности.Очистить();
	Если ЗначениеЗаполнено(Клиент_Объект.CRM_ОсновнаяОтрасль) Тогда
		СтрОтрасль = Клиент_Объект.CRM_ВидыДеятельности.Добавить();
		СтрОтрасль.ВидДеятельности = Клиент_Объект.CRM_ОсновнаяОтрасль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньПоддержкиОписаниеОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаЭлемент = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(НавигационнаяСсылкаФорматированнойСтроки);
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаЭлемент);
	ОткрытьФорму("Справочник.CRM_УровниПоддержки.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_СервисНедоступенНажатие(Элемент)
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
КонецПроцедуры

&НаКлиенте
Процедура СодержимоеОснованияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	НажатыйЭлемент = ДанныеСобытия.Element;
	
	Если ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если НажатыйЭлемент.id = "previousHref" Тогда
			ОкноБраузера = Элементы.СодержимоеОснованияHTML.Документ.defaultView;
			
			Количество				= 0;
			ОграничениеПоКоличеству	= 20;
			
			НачинаяССообщения	= СодержимоеОснования_ПервоеСообщение;
			МассивСообщений		= ПолучитьМассивСообщенийНаСервере(Ложь, Количество, НачинаяССообщения);
			
			ОкноБраузера.AddMessages(МассивСообщений, Истина, Количество < 20);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СодержимоеОснованияHTMLПриНажатии()

&НаКлиенте
Процедура СодержимоеОснованияHTMLДокументСформирован(Элемент)
	
	Если ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		ОкноБраузера = Элементы.СодержимоеОснованияHTML.Документ.defaultView;
		ОкноБраузера.changeChatInputVisibility(Ложь);
		ОкноБраузера.showMessageContextMenu = Ложь;
		
		ОбновитьСообщения();
	КонецЕсли;
	
КонецПроцедуры // СодержимоеОснованияHTMLДокументСформирован()

&НаКлиенте
Процедура Клиент_ОбъектCRM_ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, Истина, , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , Истина, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, Истина, , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , Истина, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПартнерДляПривязкиПКПриИзменении(Элемент)
	Интерес.Партнер = ПартнерДляПривязкиПК;
КонецПроцедуры

// +CRM_Модуль
#Область CRM_Модуль
&НаКлиенте
Процедура ОсновнаяОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьСвязиПараметровВыбораРеквизитовФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоглашениеПриИзменении(Элемент)
	
	ОбновитьНадписиПосоглашениюСервер();
	
	Если Не ЗначениеЗаполнено (Интерес["Соглашение"]) Тогда
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Ложь;
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
	СоглашениеПриИзмененииСервер();

	ВалютаПриИзмененииСервер(
		Интерес.Валюта,
		ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Интерес, ВалютаДокумента));

	ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Интерес.Валюта);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = Истина;
	ОбновитьЗаголовокГруппыТовары();
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьСвязиПараметровВыбораРеквизитовФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Интерес["Соглашение"], Истина);
		
		Если УсловияПродаж = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Интерес.ОжидаемаяВыручка = РаботаСКурсамиВалют.ПересчитатьВВалюту(Интерес.ОжидаемаяВыручка,
			Интерес.Валюта, УсловияПродаж.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());  
		
		Если ЗначениеЗаполнено(УсловияПродаж.ВалютаВзаиморасчетов) Тогда
			Интерес.Валюта = УсловияПродаж.ВалютаВзаиморасчетов;
		Иначе
			Интерес.Валюта = ВалютаУправленческогоУчета;
		КонецЕсли;
		
		ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Интерес.Организация;
	
		Если ИзмененаОрганизация Тогда
			Интерес.Организация = УсловияПродаж.Организация;
			ОрганизацияПриИзмененииСервер();
		КонецЕсли;
	
		Если Не УсловияПродаж.Типовое Тогда
			Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
				Интерес.Контрагент = УсловияПродаж.Контрагент;
			КонецЕсли;
		КонецЕсли;
	
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Интерес.Партнер, Интерес.Контрагент);
	
		Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		 
			ДанныеОбъекта = Новый Структура("Организация, Соглашение, Партнер, Контрагент, Договор",
											Интерес.Организация, Интерес["Соглашение"], Интерес.Партнер,
											Интерес.Контрагент, Интерес.Договор);
			Интерес.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДанныеОбъекта, Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Интерес.Валюта);
			
		КонецЕсли;
		
		Интерес.ЦенаВключаетНДС = Интерес["Соглашение"].ЦенаВключаетНДС;
	
	Иначе
		Интерес.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьСвязиПараметровВыбораРеквизитовФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Интерес.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	ДанныеОбъекта = Новый Структура("Организация, Соглашение, Партнер, Контрагент, Договор",
											Интерес.Организация, Интерес["Соглашение"],
											Интерес.Партнер, Интерес.Контрагент, Интерес.Договор);
	ДоговорПоУмолчанию = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДанныеОбъекта, 
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Интерес.Валюта);
															
	Если ДоговорПоУмолчанию <> Интерес.Договор Тогда
		Интерес.Договор = ДоговорПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязиПараметровВыбораРеквизитовФормы()
	
	ОбновитьСвязиПараметровВыбораРеквизитовФормыНаСервере();
	
	ПодключитьОбработчикОжидания("СбросОбрабатыватьАктивизациюПоиска", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СбросОбрабатыватьАктивизациюПоиска()
	
	// сброс ОбрабатыватьАктивизациюПоиска в Истина
	Если Не ОбрабатыватьАктивизациюПоиска Тогда
		РезультатыПоискаПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиПараметровВыбораРеквизитовФормыНаСервере()
	
	// Договор
	ЭлементФормы = Элементы.Договор;
	НовыеСвязиПараметровВыбора = Новый Массив;
	
	ПараметрВыбора = Новый СвязьПараметраВыбора("Отбор.Партнер", "Интерес.Партнер", РежимИзмененияСвязанногоЗначения.Очищать);
	НовыеСвязиПараметровВыбора.Добавить(ПараметрВыбора);
	
	Если Элементы.ОсновнаяОрганизация.Видимость И ЗначениеЗаполнено(Интерес.Организация) Тогда
		ПараметрВыбора = Новый СвязьПараметраВыбора("Отбор.Организация", "Интерес.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
		НовыеСвязиПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Если Элементы.Контрагент.Видимость И ЗначениеЗаполнено(Интерес.Контрагент) Тогда
		ПараметрВыбора = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Интерес.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		НовыеСвязиПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	ЭлементСоглашение = Элементы.Найти("Соглашение");
	Если ЭлементСоглашение <> Неопределено 
		И ЭлементСоглашение.Видимость И ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		ПараметрВыбора = Новый СвязьПараметраВыбора("Соглашение", "Интерес.Соглашение", РежимИзмененияСвязанногоЗначения.НеИзменять);
		НовыеСвязиПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязиПараметровВыбора);
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПродажПоУмолчанию()
	
	Партнер = ?(ЗначениеЗаполнено(Интерес.Партнер),
			Интерес.Партнер, Справочники.Партнеры.РозничныйПокупатель);
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено(Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", 
			Истина, 
			Интерес["Соглашение"],
			Документы.CRM_Интерес.ПустаяСсылка()));
			
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Интерес["Соглашение"] = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Интерес["Контрагент"]);
			Интерес["Соглашение"] = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Интерес.Партнер) И Интерес["Контрагент"].Пустая() Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Интерес["Контрагент"]);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж)
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Интерес.ОжидаемаяВыручка = РаботаСКурсамиВалют.ПересчитатьВВалюту(Интерес.ОжидаемаяВыручка,
		Интерес.Валюта, УсловияПродаж.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(УсловияПродаж.ВалютаВзаиморасчетов) Тогда
		Интерес.Валюта = УсловияПродаж.ВалютаВзаиморасчетов;
	Иначе
		Интерес.Валюта = ВалютаУправленческогоУчета;
	КонецЕсли;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Интерес.Организация;
	
	Если ИзмененаОрганизация Тогда
		Интерес.Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Интерес.Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Интерес.Партнер, Интерес.Контрагент);
	
	Если Не ЗначениеЗаполнено(Интерес.Контрагент) Тогда
		ОписаниеРеквизитов = Новый Структура;
		ПараметрыРеквизитов = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
		ПараметрыРеквизитов.РазрезыСбораСтатистики.ИспользоватьВсегда = "Партнер";
		ПараметрыРеквизитов.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Партнер";
		ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Контрагент", ПараметрыРеквизитов);
		
		РеквизитыДляОтбора = Новый Структура("Партнер", Интерес.Партнер);
		МодульЗаполнениеОбъектовПоСтатистике = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеОбъектовПоСтатистике");
		ЗаполняемыеРеквизиты = МодульЗаполнениеОбъектовПоСтатистике.ПолучитьЗначенияРеквизитов(Документы.CRM_Интерес.ПустаяСсылка(), ОписаниеРеквизитов, РеквизитыДляОтбора);
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.Контрагент) Тогда
			Интерес.Контрагент = ЗаполняемыеРеквизиты.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
	
		ДанныеОбъекта = Новый Структура("Организация, Соглашение, Партнер, Контрагент, Договор",
											Интерес.Организация, Интерес["Соглашение"],
											Интерес.Партнер, Интерес.Контрагент, Интерес.Договор);
		Интерес.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДанныеОбъекта, 
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Интерес.Валюта);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажКонтрагентаДоговор()
	
	ЗаполнитьУсловияПродажПоУмолчанию();
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		Если ИспользоватьДоговорыСКлиентами Тогда
			ЗаполнитьДоговорПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаВключаетНДС()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ОтборВидаЦен          = Новый Структура("ИспользоватьПриПродаже", Истина);
		РеквизитыЦеныПоУмолчанию = Справочники.ВидыЦен.ВидЦеныИПризнакЦенаВключаетНДСПоУмолчанию(
			ОтборВидаЦен, Документы.CRM_Интерес.ПустаяСсылка());
		Возврат РеквизитыЦеныПоУмолчанию.ЦенаВключаетНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДоговорПриСозданииИнтереса(Организация, Соглашение, Партнер, Контрагент, Договор, Валюта)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		Если ИспользоватьДоговорыСКлиентами Тогда
			ДанныеОбъекта = Новый Структура("Организация, Соглашение, Партнер, Контрагент, Договор",
								Организация, Соглашение, Партнер, Контрагент, Договор);
			ДоговорПоУмолчанию = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДанныеОбъекта, Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Валюта);
			Интерес["Договор"] = ДоговорПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
#КонецОбласти
// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыПоиска

&НаКлиенте
Процедура РезультатыПоискаПриАктивизацииСтроки(Элемент)
	
	Если ОбрабатыватьАктивизациюПоиска = Неопределено Тогда
		ОбрабатыватьАктивизациюПоиска = Истина;
	КонецЕсли;
	
	Если Не ОбрабатыватьАктивизациюПоиска Тогда
		ОбрабатыватьАктивизациюПоиска = Истина;
		Возврат;
	КонецЕсли;
	
	// Если данные не поменялись - не перезаполняем реквизиты
	ИдентификаторТД = ?(Элементы.РезультатыПоиска.ТекущиеДанные = Неопределено, -1,
		 Элементы.РезультатыПоиска.ТекущиеДанные.ПолучитьИдентификатор());
	Если РезультатыПоискаПредыдущиеДанныеИдентификатор = ИдентификаторТД Тогда
		Возврат;
	КонецЕсли;
	РезультатыПоискаПредыдущиеДанныеИдентификатор = ИдентификаторТД;
	
	ПодключитьОбработчикОжидания("НастроитьЗаполнитьПоНайденнымДанным", 0.1, Истина);
	
	Если Элементы.РезультатыПоиска.ТекущаяСтрока <> Неопределено Тогда
		ПотенциальныйКлиентПриАктивизацииСтроки = Элементы.РезультатыПоиска.ТекущиеДанные.Контакт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Клиент);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеИнтересы

&НаКлиенте
Процедура НайденныеИнтересыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Интерес);
КонецПроцедуры

&НаКлиенте
Процедура НайденныеИнтересыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.НайденныеИнтересы.ТекущиеДанные;
	Элементы.ПрикрепитьКВыбранному.Доступность = ТекущиеДанные <> Неопределено И ДоступноОбращение;
	Элементы.ОткрыватьИнтересОбращение.Видимость = ТекущиеДанные <> Неопределено И ДоступноОбращение;
	УстановитьВидимостьСоздаватьЗадачуПриСвязывании(ЭтотОбъект, Элементы.ОткрыватьИнтересОбращение.Видимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСоздаватьЗадачуПриСвязывании(Форма, ВидимостьБезУчетаОтветственного)
	
	#Если Сервер Тогда
		Возврат;
	#Иначе
		
	Форма.Элементы.СоздаватьЗадачуПриСвязывании.Видимость = Ложь;
	Если ВидимостьБезУчетаОтветственного Тогда
		
		ТекущиеДанные = Форма.Элементы.НайденныеИнтересы.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
		
			ТипПользователи = Тип("СправочникСсылка.Пользователи");
			ТипРоли = Тип("СправочникСсылка.РолиИсполнителей");
			ТипОтветственныйИнтерес = ТипЗнч(ТекущиеДанные.Ответственный);
			
			Если ТипОтветственныйИнтерес = ТипПользователи Тогда
				Форма.Элементы.СоздаватьЗадачуПриСвязывании.Видимость = (ТекущиеДанные.Ответственный <> Форма.ТекущийПользователь);
			ИначеЕсли ТипОтветственныйИнтерес = ТипРоли Тогда
				Форма.Элементы.СоздаватьЗадачуПриСвязывании.Видимость = НЕ ПользовательВходитВРоль(Форма.ТекущийПользователь,
					 ТекущиеДанные.Ответственный);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОткрыватьИнтерес(Форма)
	
	ТипПользователи = Тип("СправочникСсылка.Пользователи");
	ТипРоли = Тип("СправочникСсылка.РолиИсполнителей");
	ТипОтветственныйИнтерес = ТипЗнч(Форма.Интерес.Ответственный);
	
	Если ТипОтветственныйИнтерес = ТипПользователи Тогда
		Форма.Элементы.ОткрыватьИнтерес.Видимость = (Форма.ТекущийПользователь <> Форма.Интерес.Ответственный);
	ИначеЕсли ТипОтветственныйИнтерес = ТипРоли Тогда
		Форма.Элементы.ОткрыватьИнтерес.Видимость = Не ПользовательВходитВРоль(Форма.ТекущийПользователь,
			Форма.Интерес.Ответственный);
	КонецЕсли;
	Форма.Элементы.ДобавитьСебяВСоисполнители.Видимость = Форма.Элементы.ОткрыватьИнтерес.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОсновныеДействия

&НаКлиенте
Процедура СоздатьИнтерес(Команда)
	
	ЭтоСвязываниеИнтереса = Ложь;
	
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		
		РежимПроверкиЗаполнения = "ЗапускБизнесПроцесса";
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если Интерес.Партнер.Пустая() И Интерес.ПотенциальныйКлиент.Пустая() Тогда
			СоздатьПотенциальныйКлиентНаСервере();
		КонецЕсли;
		СтруктураЗаполнения = Новый Структура("ПотенциальныйКлиент, Партнер, Контакт, КартаМаршрута,
			| Тема, Описание, Ответственный, Подразделение, Сумма",
			Интерес.ПотенциальныйКлиент, Интерес.Партнер, Интерес.КонтактноеЛицо,
			СценарийПродажи, Интерес.Тема, Интерес.Описание, Интерес.Ответственный,
			CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес.Ответственный, "Подразделение"),
			Интерес.ОжидаемаяВыручка);
		Если ЗначениеЗаполнено(Интерес.Проект) Тогда
			СтруктураЗаполнения.Вставить("Проект", Интерес.Проект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обращение) Тогда
			СтруктураЗаполнения.Вставить("Предмет", Обращение);
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭтоБП");
		ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		Если CRM_БизнесПроцессыИЗадачиСервер.ЭтоПоручение(СценарийПродажи) Тогда
			ДополнительныеПараметры.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения");
		Иначе
			ДополнительныеПараметры.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСтартаНезависимого");
		КонецЕсли;
		
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		
		РежимПроверкиЗаполнения = "СозданиеИнтереса";
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
			ДополнительныеПараметры = Новый Структура("ВФормеДублейВыбраноКЛ", Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьИнтересЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			НайтиДубли(ОписаниеОповещения);
		ИначеЕсли НЕ (ЗначениеЗаполнено(Интерес.Партнер) Или ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент)) Тогда
			ДополнительныеПараметры = Новый Структура("ВФормеДублейВыбраноКЛ", Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьИнтересЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			НайтиДублиПК(ОписаниеОповещения);
		Иначе
			СоздатьИнтересЗавершение(Ложь, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнтересЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	
	Если НЕ НайденыДубли Тогда
		ИнтересСоздан = СоздатьИнтересНаСервере();
			
		Если ИнтересСоздан Тогда
				
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Интерес", СозданныйИнтерес);
			ДополнительныеПараметры.Вставить("СостояниеИнтереса", ПервичноеСостояниеСценария);
			ДополнительныеПараметры.Вставить("ЭтоСоздание");
			Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
				ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
			Иначе
				ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			КонецЕсли;
			
			СоздатьИнтересЗавершениеСервер(ДополнительныеПараметры);
			
			Если ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
				Оповестить("ОбновитьСообщения");
				ОповеститьОбИзменении(Обращение);
				CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики(
					"CRM_Статистика.АРМДиалоги.Удобство.ПринятьОбращение");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьИнтересЗавершениеСервер(ДополнительныеПараметры)
	
	Если ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		Если Обращение.Статус <> Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу
			И Обращение.Статус <> Перечисления.CRM_СтатусыДиалогов.Закрыт Тогда
			CRM_РаботаСМессенджерамиСервер.ПринятьДиалог(Обращение);
		КонецЕсли;
		Если ПустаяСтрока(Обращение.Наименование) Тогда
			CRM_РаботаСМессенджерамиСервер.ПереименоватьДиалог(Обращение, Интерес.Описание);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		Если ТипЗнч(Обращение.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			СвязатьОснованиеЗаявкиСИнтересом(Обращение.ДокументОснование, ДополнительныеПараметры.Интерес);
		ИначеЕсли ЗначениеЗаполнено(ТелефонныйЗвонок) Тогда
			СвязатьОснованиеЗаявкиСИнтересом(ТелефонныйЗвонок, ДополнительныеПараметры.Интерес);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьКВыбранному(Команда)
	
	ЭтоСвязываниеИнтереса = Истина;
	
	ТекущиеДанные = Элементы.НайденныеИнтересы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Интерес", ТекущиеДанные.Интерес);
	ДополнительныеПараметры.Вставить("СостояниеИнтереса", ТекущиеДанные.СостояниеИнтереса);
	ДополнительныеПараметры.Вставить("ЭтоСвязывание");
	Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
		ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
	Иначе
		ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ТекущееСостояние = Неопределено;
	Если CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Обращение, ТекущееСостояние) Тогда
		CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Если ОбязательноУказыватьПричинуОтказа(Обращение) Тогда
		ОповещениеПричинаОтказа = Новый ОписаниеОповещения("ОтклонитьЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения",
			 Новый Структура, ЭтотОбъект, , , , ОповещениеПричинаОтказа,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗаписатьСостояниеОтклоненногоЛида(Обращение, "", "");
		ДописатьИнформациюВОснованиеОбращения("", "");
		
		ДополнительныеПараметры = Новый Структура;
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ПричинаОтказа")
		И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		
		ДописатьИнформациюВОснованиеОбращения(Результат.ПричинаОтказа, Результат.Комментарий);
		ЗаписатьСостояниеОтклоненногоЛида(Обращение, Результат.ПричинаОтказа, Результат.Комментарий);
		
		ДополнительныеПараметры = Новый Структура;
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеДействия

&НаКлиенте
Процедура ДобавитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска" + Строка(КоличествоПолейПоиска)].Видимость = Истина;
	Элементы["ДобавитьПолеПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	КоличествоПолейПоиска = КоличествоПолейПоиска + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйКлиент(Команда)
	
	Если РезультатыПоиска.Количество() > 0 Тогда
		РезультатыПоиска.Очистить();
	Иначе
		НастроитьЗаполнитьПоНайденнымДанным();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиента(Команда)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	ВидПартнераКомпания = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	ВидПартнераЧастноеЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Клиент_Объект.ОсновнойМенеджер = Интерес.Ответственный;
	Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		ЗаполнитьКлиентаИзПотенциального();
	Иначе
		Если ЗначениеЗаполнено(Организация) Тогда
			Клиент_Объект.ЮрФизЛицо = ВидПартнераКомпания;
		Иначе
			НастройкаКлиент_ОбъектЮрФизЛицо = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.Клиент_ОбъектЮрФизЛицо",
				 "МастерРегистрации",
				 Неопределено);
			Если НастройкаКлиент_ОбъектЮрФизЛицо = Неопределено Тогда
				Клиент_Объект.ЮрФизЛицо = ВидПартнераЧастноеЛицо;
			Иначе
				Клиент_Объект.ЮрФизЛицо = НастройкаКлиент_ОбъектЮрФизЛицо;
			КонецЕсли;
		КонецЕсли;
		
		БуферФИО = ФИО;
		ФамилияКонтакта = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
		ИмяКонтакта = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
		ОтчествоКонтакта = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
		ПараметрыКЛ = Новый структура("ФИО, Фамилия, Имя, Отчество", ФИО, ФамилияКонтакта, ИмяКонтакта, ОтчествоКонтакта);
		
		Если Клиент_Объект.ЮрФизЛицо = ВидПартнераКомпания Тогда
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Интерес.Ответственный,
				 "ПравоваяФормаКлиентаПоУмолчанию");
			Клиент_Объект.Наименование = Организация;
			Клиент_Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" , СокрЛП(Организация), СокрЛП(ПравоваяФорма) + " """ + СокрЛП(Организация) 
				+ """");
			Если ЗначениеЗаполнено(ИДАккаунта) Тогда
				Контакт_Мессенджер = ИДАккаунта;
				Элементы.Контакт_Мессенджер.Заголовок = Элементы.ИДАккаунта.Заголовок;
				Элементы.Контакт_Мессенджер.Видимость = Истина;
			КонецЕсли;
			
			Контакт_ФИО = ФИО;
			Контакт_Email = Почта;
			Контакт_Телефон = Телефон;
			
		Иначе
			Клиент_Объект.Наименование = ФИО;
			Клиент_Объект.НаименованиеПолное = ФИО;
			Клиент_Объект.CRM_Фамилия = ФамилияКонтакта;
			Клиент_Объект.CRM_Имя = ИмяКонтакта;
			Клиент_Объект.CRM_Отчество = ОтчествоКонтакта;
			Клиент_Email = Почта;
			Клиент_Телефон = Телефон;
			Клиент_МобТелефон = НомерМобильногоТелефона;
			Если ЗначениеЗаполнено(ИДАккаунта) Тогда
				Клиент_Мессенджер = ИДАккаунта;
				Элементы.Клиент_Мессенджер.Заголовок = Элементы.ИДАккаунта.Заголовок;
				Элементы.Клиент_Мессенджер.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Клиент_Объект.БизнесРегион = БизнесРегион;
		Клиент_Объект.CRM_ОсновнаяОтрасль = Отрасль;
		Клиент_Объект.CRM_ВидыДеятельности.Очистить();
		Если ЗначениеЗаполнено(Клиент_Объект.CRM_ОсновнаяОтрасль) Тогда
			СтрОтрасль = Клиент_Объект.CRM_ВидыДеятельности.Добавить();
			СтрОтрасль.ВидДеятельности = Клиент_Объект.CRM_ОсновнаяОтрасль;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаФИО.Видимость = Ложь;
	Элементы.ГруппаРеквизитыКлиента.Видимость = Истина;
	Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = Ложь;
	Элементы.ГруппаВзаимодействие.Видимость = Ложь;
	
	ИменаЭлементовИзменениеВидимости = Новый Массив;
	ИменаЭлементовИзменениеВидимости.Добавить(Элементы.РольВИнтересе.Имя);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	Иначе
		ИменаЭлементовИзменениеВидимости.Добавить("Соглашение");
		ИменаЭлементовИзменениеВидимости.Добавить("Контрагент");
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	КонецЕсли;	
	УстановитьВидимостьРеквизитов(ИменаЭлементовИзменениеВидимости);
	
	Клиент_ОбъектЮрФизЛицоПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаОтмена(Команда)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Контакт_ФИО = "";
	
	Элементы.ГруппаФИО.Видимость = Истина;
	Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
	Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = НЕ ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент);
	Элементы.ГруппаВзаимодействие.Видимость = Истина;
	
	ИменаЭлементовИзменениеВидимости = Новый Массив;
	ИменаЭлементовИзменениеВидимости.Добавить(Элементы.РольВИнтересе.Имя);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	Иначе
		ИменаЭлементовИзменениеВидимости.Добавить("Соглашение");
		ИменаЭлементовИзменениеВидимости.Добавить("Контрагент");
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	КонецЕсли;
	УстановитьВидимостьРеквизитов(ИменаЭлементовИзменениеВидимости);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаЗаписать(Команда)
	
	РежимПроверкиЗаполнения = "СозданиеКлиентаКонтакта";
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВФормеДублейВыбраноКЛ", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКлиентаЗаписатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НайтиДубли(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СоздатьКлиентаЗаписатьНаСервере(ДополнительныеПараметры.ВФормеДублейВыбраноКЛ);
	СпозиционироватьсяНаКлиентеКонтакте();
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаКлиентеКонтакте()
	
	ПараметрыОтбораРезультатаПоиска = Новый Структура;
		
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		
		ПараметрыОтбораРезультатаПоиска.Вставить("Клиент", Интерес.Партнер);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
		
		ПараметрыОтбораРезультатаПоиска.Вставить("Контакт", Интерес.КонтактноеЛицо);
		
	КонецЕсли;
	
	СтрокиПозиционирования = РезультатыПоиска.НайтиСтроки(ПараметрыОтбораРезультатаПоиска);
	
	Для Каждого СтрПозиционирования Из СтрокиПозиционирования Цикл
		Элементы.РезультатыПоиска.ТекущаяСтрока = СтрПозиционирования.ПолучитьИдентификатор();
	КонецЦикла;
	
	НастроитьЗаполнитьПоНайденнымДанным();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаЗаписатьНаСервере(ВФормеДублейВыбраноКЛ)
	
	Если Не ЗначениеЗаполнено(Интерес.Партнер) Тогда
		СоздатьКлиентаНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		
		Если Не (ПустаяСтрока(Контакт_ФИО) Или ВФормеДублейВыбраноКЛ
			Или ЗначениеЗаполнено(Интерес.КонтактноеЛицо)) Тогда
			СоздатьКонтактНаСервере();
			ОчиститьРеквизитыКонтакта();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Интерес.Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
			КлиентОбъект = Интерес.Партнер.ПолучитьОбъект();
			КлиентОбъект.CRM_ОсновноеКонтактноеЛицо = Интерес.КонтактноеЛицо;
			КлиентОбъект.Записать();
		КонецЕсли;
		
		СвязатьПотенциальногоКлиентаСКлиентомКонтактом();
		
	КонецЕсли;
	
	УсловияПоиска = Новый Массив;
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		УсловияПоиска.Добавить(СокрЛП(Интерес.Партнер));
	КонецЕсли;
	Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
		УсловияПоиска.Добавить(СокрЛП(Интерес.КонтактноеЛицо));
	КонецЕсли;
	
	Если УсловияПоиска.Количество() > 0 Тогда
		ВыполнитьПоискНаСервере(УсловияПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Интерес.КонтактноеЛицо = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Контакт", Неопределено, Истина);
	
	Элементы.ГруппаКонтакт.Видимость = Ложь;
	
	Элементы.ГруппаФИО.Видимость = Ложь;
	Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = Ложь;
	Элементы.ФИО.Видимость = Истина;
	
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Истина;
	Элементы.Контакт_Мессенджер.Видимость = ЗначениеЗаполнено(ИДАккаунта);
	
	Элементы.ПартнерДляПривязкиПК.Видимость = ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент);
	Если Элементы.ПартнерДляПривязкиПК.Видимость Тогда
		ЗаполнитьКонтактноеЛицоИзПотенциального(Интерес.ПотенциальныйКлиент, Истина);
	КонецЕсли;
	
	ИменаЭлементовИзменениеВидимости = Новый Массив;
	ИменаЭлементовИзменениеВидимости.Добавить(Элементы.РольВИнтересе.Имя);
	УстановитьВидимостьРеквизитов(ИменаЭлементовИзменениеВидимости);
	
	Элементы.СоздатьКлиента.Видимость = Ложь;
	Элементы.СоздатьКонтактОтмена.Видимость = Истина;
	Элементы.СоздатьКонтактЗаписать.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактОтмена(Команда)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Контакт_ФИО = "";
	
	НастроитьЗаполнитьПоНайденнымДанным();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактЗаписать(Команда)
	
	РежимПроверкиЗаполнения = "СозданиеКлиентаКонтакта";
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВФормеДублейВыбраноКЛ", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтактЗаписатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НайтиДубли(ОписаниеОповещения, Истина);
	
	Фио = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СоздатьКонтактЗаписатьНаСервере(ДополнительныеПараметры.ВФормеДублейВыбраноКЛ);
	СпозиционироватьсяНаКлиентеКонтакте();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтактЗаписатьНаСервере(ВФормеДублейВыбраноКЛ)
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		
		Если Не (ПустаяСтрока(Контакт_ФИО) Или ВФормеДублейВыбраноКЛ Или ЗначениеЗаполнено(Интерес.КонтактноеЛицо)) Тогда
			СоздатьКонтактНаСервере();
			ОчиститьРеквизитыКонтакта();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Интерес.Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
			КлиентОбъект = Интерес.Партнер.ПолучитьОбъект();
			КлиентОбъект.CRM_ОсновноеКонтактноеЛицо = Интерес.КонтактноеЛицо;
			КлиентОбъект.Записать();
		КонецЕсли;
		
		СвязатьПотенциальногоКлиентаСКлиентомКонтактом();
		
	КонецЕсли;
	
	УсловияПоиска = Новый Массив;
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		УсловияПоиска.Добавить(СокрЛП(Интерес.Партнер));
	КонецЕсли;
	Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
		УсловияПоиска.Добавить(СокрЛП(Интерес.КонтактноеЛицо));
	КонецЕсли;
	
	Если УсловияПоиска.Количество() > 0 Тогда
		ВыполнитьПоискНаСервере(УсловияПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаНастроек", , ЭтотОбъект, , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если ИспользоватьПК Тогда
			РежимВводаНовогоКлиента = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.РежимВводаНовогоКлиента",
				"МастерРегистрации", 0);
		КонецЕсли;
		
		ЗаполнитьВариантыНазначенияОтветственного();
		
		ПоискПоПочтовомуДомену = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.ПоискПоПочтовомуДомену",
			"МастерРегистрации", Ложь);
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ОсновнойТипУслуги)
			И Интерес.ТипУслуги <> РезультатЗакрытия.ОсновнойТипУслуги Тогда
			УстановитьЗначениеТипУслуги(РезультатЗакрытия.ОсновнойТипУслуги);
			ОбрабатыватьАктивизациюПоиска = Ложь;
			ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
			
			ЗаполнитьПроверяемыеРеквизитыИнтереса();
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ОсновнойТипОбращения)
			И ТипОбращения <> РезультатЗакрытия.ОсновнойТипОбращения Тогда
			УстановитьЗначениеТипОбращения(РезультатЗакрытия.ОсновнойТипОбращения);
			ОбрабатыватьАктивизациюПоиска = Ложь;
			ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
			
			ЗаполнитьПроверяемыеРеквизитыИнтереса();
			ОбновитьЭлементыДополнительныхРеквизитов();
			ТипОбращенияПриИзменении(Неопределено);
		КонецЕсли;
		
		Если РезультатЗакрытия.ИзмененСоставРеквизитов Тогда
			ИзменитьСоставРеквизитов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРоль(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект, Новый Структура);

	ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
		СписокВыбора = CRM_БизнесПроцессыИЗадачиСервер.ПолучитьИзбранныхПолучателей();
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"),
			 НСтр("ru='Выбрать пользователя ...';en='Select user ...'"), ,
			 БиблиотекаКартинок.Лупа);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект, Новый Структура);
		Если СписокВыбора.Количество() = 1 Тогда
			ОбработкаВыбораИзМенюЗавершение(СписокВыбора[0], ОповещениеОЗакрытии);
		Иначе	
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИзМенюЗавершение", ЭтотОбъект, ОповещениеОЗакрытии);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элементы.Перенаправить);
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИзМенюЗавершение(ВыбранныйЭлемент, ОписаниеОповещения) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Интерес.Ответственный = ВыбранныйЭлемент.Значение;
	Если Интерес.Ответственный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Интерес.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда	
		Если Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
			сфпВиднаКолонкаСтатусов = Ложь;
		КонецЕсли;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект, Новый Структура);
		ПараметрыОткрытия = Новый Структура;
		ПоказыватьНастройкаПоТипуУслуги = Ложь;
		Если ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
			ПараметрыОткрытия.Вставить("ТипУслуги", Интерес.ТипУслуги);
			ПоказыватьНастройкаПоТипуУслуги = Истина;
		КонецЕсли;
		ПараметрыОткрытия.Вставить("сфпВиднаКолонкаСтатусов", сфпВиднаКолонкаСтатусов);
		ПараметрыОткрытия.Вставить("ПоказыватьНастройкаПоТипуУслуги", ПоказыватьНастройкаПоТипуУслуги);
		ПараметрыОткрытия.Вставить("Партнер", Интерес.Партнер);
		ПараметрыОткрытия.Вставить("КонтактноеЛицо", Интерес.КонтактноеЛицо);
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", ПараметрыОткрытия , ЭтотОбъект, , , ,
			ОповещениеОЗакрытии);
	Иначе
		ПеренаправитьЗавершение(Интерес.Ответственный, ОписаниеОповещения.ДополнительныеПараметры);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(Результат, ДопПараметры) Экспорт
	
	ВыбранПользователь = (ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи"));
	ВыбранаРоль = (ТипЗнч(Результат) = Тип("СправочникСсылка.РолиИсполнителей"));
	Если ВыбранПользователь ИЛИ ВыбранаРоль Тогда
		ОбрабатыватьАктивизациюПоиска = Ложь;
		Если Результат = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
			Возврат;
		КонецЕсли;
		Интерес.Ответственный = Результат;
		Если ВыбранПользователь Тогда
			Интерес.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация",
				Интерес.Ответственный);
			Интерес.Проект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект", Интерес.Ответственный);
			ТипУслугиОтв = ПолучитьТипУслугиПользователя(Интерес.Ответственный);
			Если ЗначениеЗаполнено(ТипУслугиОтв) Тогда
				УстановитьЗначениеТипУслуги(ТипУслугиОтв);
			КонецЕсли;
			ОбновитьТипОбращения(Интерес.Ответственный);
		КонецЕсли;
		ИзменениеОтветственного = Истина;
		ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
		ИзменениеОтветственного = Ложь;
		ЗаполнитьПроверяемыеРеквизитыИнтереса();
		ОбновитьЭлементыДополнительныхРеквизитов();
		сфпВидимостьИДоступностьГруппыСофтфон();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактнуюИнформацию(Команда)
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	ПризнакТипа = ИмяКомандыМассив[1];
	ПризнакВладельца = ИмяКомандыМассив[2];
	
	ДобавитьКИНаСервере(ПризнакТипа, ПризнакВладельца, КэшЗаполнения[ПризнакТипа]);
	ТекущиеДанные = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Описание = ОписаниеСтрокиНайденного(ТекущиеДанные.Клиент, ТекущиеДанные.Контакт, , , ,
			 МассивДополнительныхРеквизитов());
	КонецЕсли;
	
	Элементы[Команда.Имя].Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Команда)
	
	ФИО = КэшЗаполнения.ФИО;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКомпанию(Команда)
	
	Организация = КэшЗаполнения.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Клиент_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено';en='The field ""TIN"" is empty'"));
		ТекущийЭлемент = Элементы.Клиент_ОбъектCRM_ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Клиент_Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?';en='Refill current attributes?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРаскрытьЗначениеНажатие(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийПиктограммаТреугольникВозлеСсылкиНаДокумент");
	
	Элементы.ГруппаИнформацииОснования.Видимость	= Не Элементы.ГруппаИнформацииОснования.Видимость;
	Элементы.ДекорацияРаскрытьЗначение.Картинка		= ?(
		Элементы.ГруппаИнформацииОснования.Видимость,
		БиблиотекаКартинок.CRM_ВыпадающийСписокГолубойРаскрытая,
		БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой);
	
КонецПроцедуры // ДекорацияРаскрытьЗначениеНажатие()

#Область СофтФон

&НаКлиенте
Процедура сфпУдержатьЗвонок(Команда)
	
	Если сфпПанельУправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ сфпУдержаниеЗвонка Тогда
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпОтветитьПанель;
	Иначе
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпУдержаниеПанель;
	КонецЕсли;
	сфпПанельУправления.HoldCall(НайденныйЗвонок.LineName, НайденныйЗвонок.hCall);
	сфпУдержаниеЗвонка = НЕ сфпУдержаниеЗвонка;
	
КонецПроцедуры

&НаКлиенте
Процедура сфпПереводЗвонка(Команда)
	
	Если сфпПанельУправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", сфпНомерПеревода);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("LineName", НайденныйЗвонок.LineName);
		ДополнительныеПараметры.Вставить("hCall", hCall);
		сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сфпПодтвердитьПереводЗвонка(Команда)
	
	Если сфпПанельУправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	Попытка 
		hCall = Число(hCall);
	Исключение
		Возврат;
	КонецПопытки;
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если сфпИдентификаторПереводимогоЗвонка > 0 Тогда
		// Подтверждаем перевод звонка
		сфпПанельУправления.FinishTransferCall(НайденныйЗвонок.LineName, сфпИдентификаторПереводимогоЗвонка, "");
		сфпИдентификаторПереводимогоЗвонка = 0;
		Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
		Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
		Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
		Закрыть();
	Иначе
		сфпПанельУправления.DropCall(НайденныйЗвонок.LineName, hCall);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоискДанныхИНастройка

&НаКлиенте
Процедура ВыполнитьПоиск(ОповещатьОбОшибках) Экспорт // АПК:78 - исключить из проверки.
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	РезультатыПоиска.Очистить();
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп" + Строка(Сч);
		ЭтотОбъект[ИмяПоля] = СокрЛП(ЭтотОбъект[ИмяПоля]);
	КонецЦикла;
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';
		|en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоиска) < 3  И СтрДлина(СтрокаПоиска) > 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска", , Отказ);
	КонецЕсли;	
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп" + Строка(Сч);
		Если ОповещатьОбОшибках И СтрДлина(ЭтотОбъект[ИмяПоля]) < 3  И СтрДлина(ЭтотОбъект[ИмяПоля]) > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ИмяПоля, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		НастроитьЗаполнитьПоНайденнымДанным();
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискНаСервере();
	
	Если РезультатыПоиска.Количество() = 0 Тогда
		НастроитьЗаполнитьПоНайденнымДанным();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНаСервере(УсловияПоиска = Неопределено)
	
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		КэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоиска,
				КэшПоиска, КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
			Если СпособПоиска <> 2 Тогда
				ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, СтрокаПоискаНормализованная, УсловияПоиска);
			КонецЕсли;
		КонецЕсли;
		Для Сч = 1 По 3 Цикл
			ТекущаяСтрокаПоиска = ЭтотОбъект["СтрокаПоискаДоп" + Сч];
			Если Не ПустаяСтрока(ТекущаяСтрокаПоиска) Тогда
				СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(ТекущаяСтрокаПоиска,
					КэшПоиска, КэшЗаполнения);
				УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
				Если СпособПоиска <> 2 Тогда
					ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, СтрокаПоискаНормализованная, УсловияПоиска);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Поиск.
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		НастроитьФормуПослеПоиска();
		Возврат;
	КонецЕсли;
	
	НайденнаяСсылкаКонтакт = "";
	
	Запрос = Новый Запрос;
	НайденныеСсылки = Новый ТаблицаЗначений;
	НайденныеСсылки.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.CRM_КонтактДляПоиска.Тип);
	Для Каждого НайденнаяСсылка Из РезультатПоиска.Элементы Цикл
		НайденныеСсылки.Добавить().Ссылка = НайденнаяСсылка;
		Если ТипЗнч(НайденнаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			И Не ЗначениеЗаполнено(НайденнаяСсылкаКонтакт)
			И (ЗначениеЗаполнено(КэшПоиска.Телефон) Или ЗначениеЗаполнено(КэшПоиска.Email)) Тогда
			
			НайденнаяСсылкаКонтакт = НайденнаяСсылка;
		КонецЕсли;
	КонецЦикла;
	Запрос.Параметры.Вставить("НайденныеСсылки", НайденныеСсылки);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ПараметрыЗапросов);
	
	Запрос.Текст = ТекстЗапросаПоискаДанных();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатыПоиска.Загрузить(РезультатЗапроса.Выгрузить());
		Для Каждого СтрокаРезультата Из РезультатыПоиска Цикл
			СтрокаРезультата.КлиентДоступен = Истина;
			СтрокаРезультата.КонтактДоступен = Истина;
			Если ВключеныОграниченияДоступа Тогда
				Если ЗначениеЗаполнено(СтрокаРезультата.Клиент) Тогда
					СтрокаРезультата.КлиентДоступен = РазрешеноИзменение(СтрокаРезультата.Клиент, ТекущийПользователь);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаРезультата.Контакт)
					и ТипЗнч(СтрокаРезультата.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					СтрокаРезультата.КонтактДоступен = РазрешеноИзменение(СтрокаРезультата.Контакт, ТекущийПользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(НайденнаяСсылкаКонтакт) Тогда
			СтруктураПоиска = Новый Структура("Контакт", НайденнаяСсылкаКонтакт);
			СтрокиКонтакта = РезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКонтакта.Количество() > 0 Тогда
				Элементы.РезультатыПоиска.ТекущаяСтрока = СтрокиКонтакта[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НастроитьФормуПослеПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыПоискаПоПараметру(ИмяПараметра, ЗначениеПараметра)
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИмяПараметра = "Клиент" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияПоКлиенту();
	ИначеЕсли ИмяПараметра = "Контакт" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияПоКонтакту();
	ИначеЕсли ИмяПараметра = "Интерес" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияПоИнтересу();
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", ЗначениеПараметра);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ПараметрыЗапросов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	НоваяСтрока = РезультатыПоиска.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.КлиентДоступен = Истина;
	НоваяСтрока.КонтактДоступен = Истина;
	Если ВключеныОграниченияДоступа Тогда
		Если ЗначениеЗаполнено(НоваяСтрока.Клиент) Тогда
			НоваяСтрока.КлиентДоступен = РазрешеноИзменение(НоваяСтрока.Клиент, ТекущийПользователь);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Контакт)
			и ТипЗнч(НоваяСтрока.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			НоваяСтрока.КонтактДоступен = РазрешеноИзменение(НоваяСтрока.Контакт, ТекущийПользователь);
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РезультатыПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлиентДоступен = Истина;
		НоваяСтрока.КонтактДоступен = Истина;
		Если ВключеныОграниченияДоступа Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Клиент) Тогда
				НоваяСтрока.КлиентДоступен = РазрешеноИзменение(НоваяСтрока.Клиент, ТекущийПользователь);
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.Контакт)
				и ТипЗнч(НоваяСтрока.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				НоваяСтрока.КонтактДоступен = РазрешеноИзменение(НоваяСтрока.Контакт, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКэши(Знач КэшФИО, Знач КэшОрганизация, Знач КэшТелефон, Знач КэшEmail, Знач КэшURL)
	
	КэшФИО			= СокрЛП(КэшФИО);
	КэшОрганизация	= СокрЛП(КэшОрганизация);
	КэшТелефон		= СокрЛП(КэшТелефон);
	КэшEmail		= СокрЛП(КэшEmail);
	КэшURL			= СокрЛП(КэшURL);
	
	КэшПоиска.ФИО = КэшФИО;
	КэшЗаполнения.ФИО = CRM_КлиентыСервер.ПривестиФИОКСтандартномуВиду(КэшФИО);
	
	КэшПоиска.Организация = КэшОрганизация;
	КэшЗаполнения.Организация = КэшОрганизация;
	
	ПозДоб = СтрНайти(ВРЕГ(КэшТелефон), ", ДОБ.");
	Если ПозДоб = 0 Тогда
		ПозДоб = СтрНайти(ВРЕГ(КэшТелефон), ", EXT.");
	КонецЕсли;
	Если ПозДоб = 0 Тогда
		КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(КэшТелефон);
	Иначе
		КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(Лев(КэшТелефон, ПозДоб - 1));
	КонецЕсли;	
	СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(КэшТелефон);
	КэшЗаполнения.Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
		 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, СтруктураКИ.Добавочный,
		 "");
	
	КэшПоиска.Email = КэшEmail;
	КэшЗаполнения.Email = КэшEmail;
	
	КэшПоиска.URL = КэшURL;
	КэшЗаполнения.URL = КэшURL;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПослеПоиска()
	
	ЕстьНайденные = (РезультатыПоиска.Количество() > 0);
	
	Почта = КэшЗаполнения.Email;
	Телефон = КэшЗаполнения.Телефон;
	ИДАккаунта = КэшЗаполнения.URL;
	
	Для Каждого КлючИЗначение Из КэшЗаполнения Цикл
		
		ИмяПараметра = КлючИЗначение.Ключ;
		ЗначениеПараметра = КлючИЗначение.Значение;
		
		Если ИмяПараметра = "ИНН" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = "Заполнить_" + ИмяПараметра;
		Если ИмяПараметра = "Телефон" Тогда
			ЗаголовокКоманды = НСтр("ru='Добавить телефон';en='Add Phone'") + ": " + ЗначениеПараметра;
			Элементы[ИмяЭлемента + "_Клиент"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_ПК"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_Контакт"].Заголовок = ЗаголовокКоманды;
		ИначеЕсли ИмяПараметра = "Email" Тогда
			ЗаголовокКоманды = НСтр("ru='Добавить Email';en='Add Email'") + ": " + ЗначениеПараметра;
			Элементы[ИмяЭлемента + "_Клиент"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_ПК"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_Контакт"].Заголовок = ЗаголовокКоманды;
		ИначеЕсли ИмяПараметра = "URL" Тогда
			
			Если ДоступноОбращение И ЗначениеЗаполнено(Обращение) 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "УчетнаяЗапись") 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение.УчетнаяЗапись, "ТипМессенджера") Тогда
				
				ЗаголовокКоманды = НСтр("ru='Добавить';en='Add'") + " " + СокрЛП(Обращение.УчетнаяЗапись.ТипМессенджера) + ": " 
					+ ЗначениеПараметра;
			Иначе
				ЗаголовокКоманды = НСтр("ru='Добавить';en='Add'") + ": " + ЗначениеПараметра;
			КонецЕсли;
			
			Элементы[ИмяЭлемента + "_Клиент"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_ПК"].Заголовок = ЗаголовокКоманды;
			Элементы[ИмяЭлемента + "_Контакт"].Заголовок = ЗаголовокКоманды;
			
		Иначе
			Элементы[ИмяЭлемента].Заголовок = НСтр("ru='Заполнить';en='Fill in'") + ": " + ЗначениеПараметра;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СоздатьНовогоКлиента.Видимость = ЕстьНайденные И Не ОпределенКлиент;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнитьПоНайденнымДанным()
	
	ТекущиеДанные = Элементы.РезультатыПоиска.ТекущиеДанные;
	РежимВвода = "";
	Элементы.ГруппаВзаимодействие.Видимость = Истина;
	
	ОсновнойМенеджер = Неопределено;
	Если ТекущиеДанные = Неопределено Тогда
		
		Интерес.Ответственный = Неопределено;
		РежимВвода = "СброситьДанные";
		Интерес.Партнер = Неопределено;
		Интерес.КонтактноеЛицо = Неопределено;
		Интерес.ПотенциальныйКлиент = Неопределено;
		Организация = "";
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Интерес["Контрагент"] = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Интерес.Ответственный = Неопределено;
		Если ТипЗнч(ТекущиеДанные.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			РежимВвода = "ПотенциальныйКлиент";
			Интерес.Партнер = Неопределено;
			Интерес.КонтактноеЛицо = Неопределено;
			Интерес.ПотенциальныйКлиент = ТекущиеДанные.Контакт;
			Организация = ТекущиеДанные.Организация;
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Интерес["Контрагент"] = Неопределено;
			КонецЕсли;
		Иначе
			РежимВвода = "КлиентИКонтакт";
			ДоступенКлиент = ТекущиеДанные.КлиентДоступен;
			ДоступенКонтакт = ТекущиеДанные.КонтактДоступен;
			Интерес.Партнер = ТекущиеДанные.Клиент;
			ТекКонтакт = ТекущиеДанные.Контакт;
			Если ДоступенКонтакт Тогда
				Интерес.КонтактноеЛицо = ТекущиеДанные.Контакт;
			Иначе
				Интерес.КонтактноеЛицо = Неопределено;
			КонецЕсли;
			РольВИнтересе = ТекущиеДанные.КонтактРоль;
			Интерес.ПотенциальныйКлиент = Неопределено;
			Организация = "";
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Интерес["Контрагент"] = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОсновнойМенеджер = ТекущиеДанные.ОсновнойМенеджер;
		
	КонецЕсли;
	
	ЗаполнитьОтветственного(ЭтотОбъект);
	
	Интерес.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация", Интерес.Ответственный);
	ОсновнойПроект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект", Интерес.Ответственный);
	Если ЗначениеЗаполнено(ОсновнойПроект) И Не ЗначениеЗаполнено(Интерес.Проект) Тогда
		Интерес.Проект = ОсновнойПроект;
	КонецЕсли;
	
	Если ВключеныОграниченияДоступа Тогда
		Элементы.ГруппаПраваяКолонка.ТолькоПросмотр = Ложь;
		Элементы.СоздатьНовыйИнтерес.Доступность = Истина;
		Элементы.СоздатьКонтакт.Доступность = Истина;
		Элементы.Перенаправить.Доступность = Истина;
		Элементы.ПеренаправитьНаРоль.Доступность = Истина;
	КонецЕсли;
	
	Если РежимВвода = "СброситьДанные" Тогда
		
		Описание = "";
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Клиент", Неопределено, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Контакт", Неопределено, Истина);
		
		Должность = Неопределено;
		
		ФИО = "";
		
		Элементы.ГруппаКлиент.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		
		Элементы.ГруппаФИО.Видимость = Истина;
		Элементы.ПотенциальныйКлиент.Видимость = Ложь;
		Элементы.ФИО.Видимость = Истина;
		Элементы.Компания.Видимость = Истина;
		Элементы.Компания.Доступность = Истина;
		
		Элементы.СоздатьКлиента.Видимость = ДоступноИзменениеПартнеров;
		Элементы.СоздатьКонтактОтмена.Видимость = Ложь;
		Элементы.СоздатьКонтактЗаписать.Видимость = Ложь;
		
		Элементы.Заполнить_Организация.Видимость = ЗначениеЗаполнено(КэшПоиска.Организация);
		Элементы.Заполнить_ФИО.Видимость = ЗначениеЗаполнено(КэшПоиска.ФИО);
		
		Элементы.Заполнить_Телефон_ПК.Видимость = Ложь;
		Элементы.Заполнить_Email_ПК.Видимость = Ложь;
		Элементы.Заполнить_URL_ПК.Видимость = Ложь;
		
		Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
		Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = Истина;
		
		Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
		
		// Переключение интерфейса ввода на Клиента
		Если ДоступноИзменениеПартнеров И РежимВводаНовогоКлиента = 0 Тогда
			СоздатьКлиента(Неопределено);
		КонецЕсли;
		
	ИначеЕсли РежимВвода = "ПотенциальныйКлиент" Тогда
		
		Описание = ОписаниеСтрокиНайденного(Неопределено,
			Интерес.ПотенциальныйКлиент, , , , МассивДополнительныхРеквизитов());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Клиент",
			Интерес.ПотенциальныйКлиент, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Контакт",
			Интерес.ПотенциальныйКлиент, Истина);
		
		Элементы.ГруппаКлиент.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		
		Элементы.ГруппаФИО.Видимость = Истина;
		Элементы.ПотенциальныйКлиент.Видимость = Истина;
		Элементы.ФИО.Видимость = Ложь;
		Элементы.Компания.Видимость = ЗначениеЗаполнено(Организация);
		Элементы.Компания.Доступность = Ложь;
		
		Элементы.Должность.Видимость = Ложь;
		
		Элементы.СоздатьКлиента.Видимость = ДоступноИзменениеПартнеров;
		Элементы.СоздатьКонтакт1.Видимость = ДоступноИзменениеПартнеров;
		
		Элементы.СоздатьКонтактОтмена.Видимость = Ложь;
		Элементы.СоздатьКонтактЗаписать.Видимость = Ложь;
		
		Элементы.Заполнить_Организация.Видимость = Ложь;
		Элементы.Заполнить_ФИО.Видимость = Ложь;
		
		РезультатПоискаКИ = НайтиКИ(Интерес.ПотенциальныйКлиент, КэшПоиска);
		
		Элементы.Заполнить_Телефон_ПК.Видимость = ЗначениеЗаполнено(КэшПоиска.Телефон) И Не РезультатПоискаКИ.Телефон;
		Элементы.Заполнить_Email_ПК.Видимость = ЗначениеЗаполнено(КэшПоиска.Email) И Не РезультатПоискаКИ.Email;
		Элементы.Заполнить_URL_ПК.Видимость = ЗначениеЗаполнено(КэшПоиска.URL) И Не РезультатПоискаКИ.URL;
		
		Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
		Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = Ложь;
		
		Элементы.ИДАккаунта.Видимость = Ложь;
		
	ИначеЕсли РежимВвода = "КлиентИКонтакт" Тогда
		
		Если ВключеныОграниченияДоступа Тогда
			Описание = ОписаниеСтрокиНайденного(Интерес.Партнер, ТекКонтакт, ВключеныОграниченияДоступа,
				 ДоступенКлиент, ДоступенКонтакт,
				 МассивДополнительныхРеквизитов());
		Иначе
			Описание = ОписаниеСтрокиНайденного(Интерес.Партнер, ТекКонтакт, , , , МассивДополнительныхРеквизитов());
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Клиент", Интерес.Партнер, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИнтересыКлиента, "Контакт", ТекКонтакт, Истина);
		
		Элементы.ГруппаКлиент.Видимость = Истина;
		Элементы.ГруппаКонтакт.Видимость = Истина;
		
		Элементы.ГруппаФИО.Видимость = Ложь;
		Элементы.Компания.Видимость = Ложь;
		Элементы.Заполнить_Организация.Видимость = Ложь;
		
		РезультатПоискаКИКлиент = НайтиКИ(Интерес.Партнер, КэшПоиска);
		РезультатПоискаКИКонтакт = НайтиКИ(Интерес.КонтактноеЛицо, КэшПоиска);
		
		Элементы.Заполнить_Телефон_Клиент.Видимость = ЗначениеЗаполнено(КэшПоиска.Телефон)
			 И Не ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКлиент.Телефон;
		Элементы.Заполнить_Email_Клиент.Видимость = ЗначениеЗаполнено(КэшПоиска.Email)
			 И Не ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКлиент.Email;
		Элементы.Заполнить_URL_Клиент.Видимость = ЗначениеЗаполнено(КэшПоиска.URL)
			 И Не ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКлиент.URL;
		
		Элементы.Заполнить_Телефон_Контакт.Видимость = ЗначениеЗаполнено(КэшПоиска.Телефон)
			 И ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКонтакт.Телефон;
		Элементы.Заполнить_Email_Контакт.Видимость = ЗначениеЗаполнено(КэшПоиска.Email)
			 И ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКонтакт.Email;
		Элементы.Заполнить_URL_Контакт.Видимость = ЗначениеЗаполнено(КэшПоиска.URL)
			 И ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			 И Не РезультатПоискаКИКонтакт.URL;
		
		Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
		Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПотенциальногоКлиента.Видимость = Ложь;
		
		Элементы.ИДАккаунта.Видимость = Ложь;
		
		Если ВключеныОграниченияДоступа Тогда
			Если Не ДоступенКлиент Тогда
				ОбрабатыватьАктивизациюПоиска = Ложь;
				Элементы.ГруппаПраваяКолонка.ТолькоПросмотр = Истина;
				Элементы.СоздатьНовыйИнтерес.Доступность = Ложь;
				Элементы.СоздатьКонтакт.Доступность = Ложь;
				Элементы.Перенаправить.Доступность = Ложь;
				Элементы.ПеренаправитьНаРоль.Доступность = Ложь;
			КонецЕсли;
			Если Не ДоступенКлиент Тогда
				Элементы.ГруппаКлиент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаЭлементовИзменениеВидимости = Новый Массив;
	ИменаЭлементовИзменениеВидимости.Добавить(Элементы.РольВИнтересе.Имя);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	Иначе
		ИменаЭлементовИзменениеВидимости.Добавить("Соглашение");
		ИменаЭлементовИзменениеВидимости.Добавить("Контрагент");
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	КонецЕсли;
	УстановитьВидимостьРеквизитов(ИменаЭлементовИзменениеВидимости);
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				Интерес.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Интерес.Партнер, Интерес.Организация);
				ДоговорПриИзменении(Неопределено);
			Исключение
				// Обработка исключения не требуется.
			КонецПопытки;
			// BSLLS:MissingCodeTryCatchEx-on
		Иначе
			// +CRM_Модуль
			ЗаполнитьУсловияПродажКонтрагентаДоговор();
			// -CRM_Модуль
			
			ОбрабатыватьАктивизациюПоиска = Ложь;
			ПодключитьОбработчикОжидания("ОбновитьСвязиПараметровВыбораРеквизитовФормы", 0.1, Истина);
		КонецЕсли;
		
	Иначе
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Интерес["Договор"] = Неопределено;
		Иначе
			Интерес["Соглашение"] = Неопределено;
			Интерес["Контрагент"] = Неопределено;
			Интерес["Договор"] = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ТипУслугиОтв = ПолучитьТипУслугиПользователя(Интерес.Ответственный);
	
	Если ЗначениеЗаполнено(ТипУслугиОтв) И НЕ НеОбновлятьТипУслуги Тогда
		УстановитьЗначениеТипУслуги(ТипУслугиОтв);
	КонецЕсли;
	
	НеОбновлятьТипУслуги = Ложь;
	
	// +CRM_Модуль
	ОрганизацияПриИзмененииСервер();
	// -CRM_Модуль
	
	ОбновитьТипОбращения(Интерес.Ответственный);
	
	ЗаполнитьДоступныеСценарииПродаж(ЭтотОбъект);
	
	ЗаполнитьПроверяемыеРеквизитыИнтереса();
	CRM_ОбщегоНазначенияКлиент.ОпределитьУровеньПоддержки(ЭтотОбъект);
	сфпВидимостьИДоступностьГруппыСофтфон();
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьСтрокуПоиска()
	
	Элементы.СтрокаПоиска.Доступность = Ложь;
	Элементы.ДобавитьПолеПоиска0.Доступность = Ложь;
	
	КоличествоПолейПоиска = 1;
	
	Для Сч = 1 По 3 Цикл
		ЭтотОбъект["СтрокаПоискаДоп" + Сч] = "";
		Элементы["ГруппаПоиска" + Сч].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеПоискаПоПараметру(ИмяПараметра, ЗначениеПараметра)
	
	Элементы["ГруппаПоиска" + Строка(КоличествоПолейПоиска)].Видимость = Истина;
	Элементы["ДобавитьПолеПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	ЭтотОбъект["СтрокаПоискаДоп" + Строка(КоличествоПолейПоиска)] = ЗначениеПараметра;
	КоличествоПолейПоиска = КоличествоПолейПоиска + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуРезультатыПоиска()
	
	НайденныеСтроки = РезультатыПоиска.НайтиСтроки(Новый Структура("Контакт, Клиент",
		Интерес.КонтактноеЛицо, Интерес.Партнер));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденныеСтроки = РезультатыПоиска.НайтиСтроки(Новый Структура("Контакт", Интерес.ПотенциальныйКлиент));
	КонецЕсли;
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденныеСтроки = РезультатыПоиска.НайтиСтроки(Новый Структура("Контакт", Интерес.КонтактноеЛицо));
	КонецЕсли;
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденныеСтроки = РезультатыПоиска.НайтиСтроки(Новый Структура("Клиент", Интерес.Партнер));
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.РезультатыПоиска.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеДействия

&НаСервере
Функция СоздатьИнтересНаСервере()
	
	Результат = Ложь;
	
	Отказ = Ложь;
	ПервоеСостояниеИнтереса = ПервичноеСостояниеСценария;
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(ПервоеСостояниеИнтереса);
	Если Не ЗначениеЗаполнено(ПервоеСостояниеИнтереса) Тогда
		ТекстСообщения = НСтр("ru='Не определено первое состояние интереса!';en='Primary lead state not defined!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СценарийПродажи", , Отказ);
	Иначе
		Если ПроверяемыеРеквизитыИнтереса.Найти("Партнер") <> Неопределено
			И Не ЗначениеЗаполнено(Интерес.Партнер) И Не Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
			ТекстСообщения = НСтр("ru='Не выбран клиент';en='No customer selected'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("ОжидаемаяВыручка") <> Неопределено
			 И Не ЗначениеЗаполнено(Интерес.ОжидаемаяВыручка) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Выручка""';en='Not Filled Box ""Revenue""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОжидаемаяВыручка", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("ОжидаемаяДатаПродажи") <> Неопределено
			 И Не ЗначениеЗаполнено(Интерес.ОжидаемаяДатаПродажи) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Дата продажи""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОжидаемаяДатаПродажи", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Организация") <> Неопределено
			 И Не ЗначениеЗаполнено(Интерес.Организация) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Организация""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОсновнаяОрганизация", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Проект") <> Неопределено
			И Не ЗначениеЗаполнено(Интерес.Проект) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Проект""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Проект", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Договор") <> Неопределено И Не ЗначениеЗаполнено(Интерес.Договор) 
				И Элементы.Договор.Доступность Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Договор""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Договор", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Соглашение") <> Неопределено И Не ЗначениеЗаполнено(Интерес["Соглашение"]) 
				И Элементы["Соглашение"].Доступность Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Соглашение""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Соглашение", "Интерес.Соглашение", Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(Интерес["Контрагент"])
				И Элементы["Контрагент"].Доступность Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Контрагент""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Описание") <> Неопределено И Не ЗначениеЗаполнено(Интерес.Описание) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено поле ""Содержание""';");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Содержание", , Отказ);
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Товары") <> Неопределено
			И Не CRM_ОбщегоНазначенияСервер.ТЧИнтересаЗаполнена(Интерес, "Товары") Тогда
			ТекстСообщения = НСтр("ru='Не заполнена таблица ""Товары и услуги""';");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Товары", , Отказ);
		КонецЕсли;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
			Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
				Для Каждого ОписаниеДопРеквизита Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
					Если ПроверяемыеРеквизитыИнтереса.Найти(ОписаниеДопРеквизита.Свойство) <> Неопределено
						И Не ЗначениеЗаполнено(ЭтотОбъект[ОписаниеДопРеквизита.ИмяРеквизитаЗначение]) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено поле ""%1""';
							|"), ОписаниеДопРеквизита.Наименование);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
							ОписаниеДопРеквизита.ИмяРеквизитаЗначение, , Отказ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.Партнер)
		И Интерес.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		Если Не ЗначениеЗаполнено(Интерес.КонтактноеЛицо) И НЕ CRM_РазрешитьСозданиеИнтересаБезКЛ Тогда
			Если ПустаяСтрока(ФИО) Тогда
				
				Если Элементы.ГруппаФИО.Видимость Тогда
					Если Элементы.ФИО.Видимость Тогда
						ТекстСообщения = НСтр("ru='Не заполнено поле ""ФИО""';en='Not Filled Box ""Full Name""'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФИО", , Отказ);
					Иначе
						ТекстСообщения = НСтр("ru='Не заполнено поле ""Контакт""';en='Not Filled Box ""Contact""'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт", , Отказ);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru='Не заполнено поле ""Контакт""';en='Not Filled Box ""Contact""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт", , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ОбъектИнтерес							= РеквизитФормыВЗначение("Интерес");
		ОбъектИнтерес.Дата						= ТекущаяДатаСеанса();
		ОбъектИнтерес.Автор						= ТекущийПользователь;
		
		// Заполнение по статистике
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			МодульЗаполнениеОбъектовПоСтатистике = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеОбъектовПоСтатистике");
			МодульЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ОбъектИнтерес, Неопределено);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Интерес.Партнер) И Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
			СоздатьКлиентаНаСервере();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
			ОбъектИнтерес.Партнер				= Интерес.Партнер;
			Если НЕ (ПустаяСтрока(Контакт_ФИО) ИЛИ ЗначениеЗаполнено(Интерес.КонтактноеЛицо)) Тогда
				СоздатьКонтактНаСервере();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
				ОбъектИнтерес.КонтактноеЛицо		= Интерес.КонтактноеЛицо;
				СтрКонтакт = ОбъектИнтерес.Контакты.Добавить();
				СтрКонтакт.Контакт = Интерес.КонтактноеЛицо;
				СтрКонтакт.Роль = Интерес.КонтактноеЛицо.CRM_РольКонтактногоЛица;
				
				Если НЕ ЗначениеЗаполнено(Интерес.Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
					УстановитьПривилегированныйРежим(Истина);
					КлиентОбъект = Интерес.Партнер.ПолучитьОбъект();
					КлиентОбъект.CRM_ОсновноеКонтактноеЛицо = Интерес.КонтактноеЛицо;
					КлиентОбъект.Записать();
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
			
			СвязатьПотенциальногоКлиентаСКлиентомКонтактом();
			
		Иначе
			Если Не ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
				СоздатьПотенциальныйКлиентНаСервере();
			КонецЕсли;
			ОбъектИнтерес.ПотенциальныйКлиент	= Интерес.ПотенциальныйКлиент;
		КонецЕсли;
		
		ОбъектИнтерес.СостояниеИнтереса			= ПервоеСостояниеИнтереса;
		ОбъектИнтерес.ДокументОснование			= Обращение;
		Если ДобавитьСебяВСоисполнители И ОбъектИнтерес.Ответственный <> ТекущийПользователь Тогда
			НовСоисполнитель = ОбъектИнтерес.Соисполнители.Добавить();
			НовСоисполнитель.Соисполнитель = ТекущийПользователь;
		КонецЕсли;
		ОбъектИнтерес.Подразделение				= CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(ОбъектИнтерес.Ответственный,
			 "Подразделение");
		ОбъектИнтерес.Офис						= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектИнтерес.Подразделение,
			 "CRM_Офис");
		Если Не ЗначениеЗаполнено(ОбъектИнтерес.ТипУслуги) Тогда
			ОбъектИнтерес.ТипУслуги				= Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				ОбъектИнтерес.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Интерес.Ответственный, "ОсновнаяОрганизация");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				ОбъектИнтерес.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
					ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
				Если МодульCRM_Модуль_МетодыМодулейОбъектовДокументов <> Неопределено Тогда
					МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ЗаполнитьОрганизацию(ОбъектИнтерес);
				КонецЕсли;
			КонецЕсли;
			
			МодульДенежныеСредстваСервер = ОбщегоНазначения.ОбщийМодуль("ДенежныеСредстваСервер");
			Если МодульДенежныеСредстваСервер <> Неопределено Тогда
				МодульДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(ОбъектИнтерес.Организация,
																									ОбъектИнтерес["CRM_Модуль_БанковскийСчет"]);
			КонецЕсли;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Проект) Тогда
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ОбъектИнтерес.Проект				= ЗначениеНастройки;
			КонецЕсли;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ТипЗнч(ОбъектИнтерес.Ответственный) = Тип("СправочникСсылка.Пользователи")
				И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"]) Тогда
				МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
				Если МодульУправлениеДоступом <> Неопределено Тогда
					ЗапрещенныеКонтакты = МодульУправлениеДоступом.ЗапрещенныеКлиентыКонтактыОбъекта(ОбъектИнтерес,
						ОбъектИнтерес.Ответственный);
					Если ЗапрещенныеКонтакты.Количество() > 0 Тогда
						МодульУправлениеДоступом.УстановитьОбъектамУровеньДоступаПользователя(ЗапрещенныеКонтакты,
							ОбъектИнтерес.Ответственный);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) Тогда
				Если Не ЗначениеЗаполнено(ОбъектИнтерес.Договор) И ЗначениеЗаполнено(Интерес.Договор) Тогда
					ОбъектИнтерес.Договор = Интерес.Договор; // Договор был заполнен при создании партнера
					ОбъектИнтерес["Курс"]      = Интерес.Курс;
					ОбъектИнтерес["Кратность"] = Интерес.Кратность;
					ОбъектИнтерес["ВидСкидкиНаценки"] = Интерес.ВидСкидкиНаценки;
					ОбъектИнтерес["ВидЦен"] = Интерес.ВидЦен;
					ОбъектИнтерес["ЦенаВключаетНДС"] = Интерес.ЦенаВключаетНДС;
					ОбъектИнтерес.ОжидаемаяВыручка = ПересчитатьСуммуПоВалюте(ОбъектИнтерес.ОжидаемаяВыручка,
						ОбъектИнтерес.Договор.ВалютаРасчетов, ВалютаУправленческогоУчета);
				КонецЕсли;
			КонецЕсли;
		Иначе
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
				ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ОбъектИнтерес, Ложь);
			
			Если ЗначениеЗаполнено(ОбъектИнтерес["Соглашение"]) Тогда
				МодульCRM_Модуль_МетодыМодулейМенеджеровДокументов =
					ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
				МодульCRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересЗаполнитьУсловияПродажПоСоглашению(ОбъектИнтерес);
			// Иначе // закомментировано: не заполнять!
			//	ОбъектИнтерес.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
			
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И Не ЗначениеЗаполнено(ОбъектИнтерес["Контрагент"]) Тогда
				МодульПартнерыИКонтрагенты = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
				МодульПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ОбъектИнтерес.Партнер, ОбъектИнтерес["Контрагент"]);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектИнтерес["Контрагент"]) Тогда
				
				МодульЗначениеНастроекПовтИсп = ОбщегоНазначения.ОбщийМодуль("ЗначениеНастроекПовтИсп");
				ОбъектИнтерес["CRM_Модуль_БанковскийСчетКонтрагента"] = 
					МодульЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектИнтерес["Контрагент"]);
				
			КонецЕсли;
			
			// +CRM_Модуль
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И Не ЗначениеЗаполнено(ОбъектИнтерес["Договор"]) Тогда
				ЗаполнитьДоговорПриСозданииИнтереса(ОбъектИнтерес.Организация, ОбъектИнтерес["Соглашение"], ОбъектИнтерес.Партнер,
					ОбъектИнтерес.Контрагент, ОбъектИнтерес.Договор, ОбъектИнтерес.Валюта);
			КонецЕсли;
			// -CRM_Модуль
			
			МодульCRM_Модуль_МетодыМодулейМенеджеровДокументов =
				ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейМенеджеровДокументов");
			ПараметрыЗаполнения =
				МодульCRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(ОбъектИнтерес);
			МодульУчетНДСУП = ОбщегоНазначения.ОбщийМодуль("УчетНДСУП");
			
			ИзмененныеПараметры = Новый Структура("ПараметрыЗаполненияНалогообложенияНДСПродажи");
			ИзмененныеПараметры.ПараметрыЗаполненияНалогообложенияНДСПродажи =
				МодульCRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(ОбъектИнтерес);
			ИзмененныеПараметры.ПараметрыЗаполненияНалогообложенияНДСПродажи.Договор = Неопределено;
			ИзмененныеПараметры.ПараметрыЗаполненияНалогообложенияНДСПродажи.Организация = Неопределено;
			
			МодульУчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ОбъектИнтерес.НалогообложениеНДС,
				 ПараметрыЗаполнения,
				 ИзмененныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КаналОбращения) Тогда
			ОбъектИнтерес.КаналОбращения = КаналОбращения;
			ОбъектИнтерес.ИсточникОбращения = ИсточникОбращения;
		КонецЕсли;
		
		Если ЭтоПоддержка Тогда
			ОбъектИнтерес.ТипОбращения = ТипОбращения;
			ОбъектИнтерес.УровеньПоддержки = УровеньПоддержки;
			СрокиПоОбращению = Справочники.CRM_УровниПоддержки.СрокиПоУровнюПоддержки(ОбъектИнтерес.Дата, УровеньПоддержки);
			ЗаполнитьЗначенияСвойств(ОбъектИнтерес, СрокиПоОбращению);
		Иначе
			ОбъектИнтерес.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
			Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
				CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, ОбъектИнтерес);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение ТЧ Товары
		Если Не ЭтоПоддержка Тогда
			ТаблицаТоваров = ОбъектИнтерес.Товары;
			ТаблицаТоваров.Очистить();
			ТаблицаТоваров.Загрузить(Интерес.Товары.Выгрузить());
		КонецЕсли;
		
		//ОбъектИнтерес.УстановитьНовыйНомер(ПрефиксНомераИнтереса);
		СоздатьИнтересНаСервереПереопределяемый(ОбъектИнтерес);
		Если Не ЗначениеЗаполнено(ОбъектИнтерес.Тема)  И НЕ СценарийПродажи.ЭтоПоддержка Тогда
			ОбъектИнтерес.ДополнительныеСвойства.Вставить("НеОтражатьВИстории");
			ОбъектИнтерес.Записать();
			ОбъектИнтерес.Прочитать();
			Если Не ЗначениеЗаполнено(ОбъектИнтерес.Тема) Тогда
				// Тема могла быть установлена триггером.
				ОбъектИнтерес.ДополнительныеСвойства.Вставить("ОбновитьИсторию", Истина);
				ОбъектИнтерес.ДополнительныеСвойства.Удалить("НеОтражатьВИстории");
				ОбъектИнтерес.Тема = "#" + ОбъектИнтерес.Номер;
				ОбъектИнтерес.Записать();
			КонецЕсли;
		Иначе
			ОбъектИнтерес.Записать();
		КонецЕсли;
		СозданныйИнтерес = ОбъектИнтерес.Ссылка;
		
		ЗаписатьТрудозатраты(СозданныйИнтерес);
		
		Если ЗначениеЗаполнено(Канал) Тогда
			Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			Менеджер.Период = ОбъектИнтерес.Дата;
			Менеджер.Сделка = СозданныйИнтерес;
			Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
			Менеджер.КаналПервичногоИнтереса = Канал;
			Менеджер.ИсточникПервичногоИнтереса = Источник;
			Менеджер.Записать(Истина);
		КонецЕсли;
		
		Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			СтруктураДляЗаписи = РегистрыСведений.ПредметыПапкиВзаимодействий.РеквизитыВзаимодействия();
			СтруктураДляЗаписи.Предмет                 = СозданныйИнтерес;
			СтруктураДляЗаписи.РассчитыватьРассмотрено = Ложь;
			РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Обращение, СтруктураДляЗаписи);
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			КонтактноеЛицо = Неопределено;
			Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
				КонтактноеЛицо = Интерес.КонтактноеЛицо;
			ИначеЕсли ЗначениеЗаполнено(Интерес.Партнер) Тогда
				КонтактноеЛицо = Интерес.Партнер;
			ИначеЕсли ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
				КонтактноеЛицо = Интерес.ПотенциальныйКлиент;
			КонецЕсли;
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(Обращение.УчетнаяЗапись.ТипМессенджера,
					Обращение.ID_Пользователя, КонтактноеЛицо);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
			Если Обращение.Статус <> Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу
				И Обращение.Статус <> Перечисления.CRM_СтатусыДиалогов.Закрыт Тогда
				Справочники.CRM_Диалоги.ПринятьДиалог(Обращение);
			КонецЕсли;
			Справочники.CRM_Диалоги.ДобавитьДействие(Обращение,
				 Перечисления.CRM_ДействияСДиалогами.ПринятоОбращение, ОбъектИнтерес.Дата, ОбъектИнтерес.Автор,
				 ОбъектИнтерес.Ссылка);
		КонецЕсли;
		
		Если Интерес.Ответственный <> ТекущийПользователь
			И НЕ CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(ОбъектИнтерес.Ссылка)
			И НЕ ПервоеСостояниеИнтереса.НеСоздаватьЗадачу Тогда
			СоздатьЗадачуНаСервере();
		КонецЕсли;
		
		Результат = ЗначениеЗаполнено(СозданныйИнтерес);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Не удалось записать интерес. Подробности см. в журнале регистрации.';
			|en='Could not write lead. For details,
			| see in Event Log.'");
		ТекстЗаписиЖурнала = НСтр("ru='Принятие обращения (Интерес не создан)';en='New Request (Lead not created)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(ТекстЗаписиЖурнала, УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обработка дополнительных действий при создании объекта для использования в расширениях
//
// Параметры:
//  ИнтересОбъект	 - ДокументОбъект.CRM_Интерес	 - объект документа Интерес
//
&НаСервере
Процедура СоздатьИнтересНаСервереПереопределяемый(ИнтересОбъект)

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ, РежимПроверкиЗаполнения = "")
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	МассивИсключений = Новый Массив;
	ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеРеквизиты;
	МассивОписаний = Новый Массив;
	
	Если РежимПроверкиЗаполнения <> "СозданиеПотенциальногоКлиента" Тогда
		// Не будет создан Потенциальный клиент
		МассивОписаний.Добавить(ТемпПотенциальныйКлиент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Или Не Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		// Не будет создан клиент
		МассивОписаний.Добавить(Интерес.Партнер);
	КонецЕсли;
	
	Если ПустаяСтрока(Контакт_ФИО) Или ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Или Не Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		// Не будет создан контакт
		МассивОписаний.Добавить(ТемпКонтакт);
	КонецЕсли;
	
	Если РежимПроверкиЗаполнения = "СозданиеКлиентаКонтакта"
		Или РежимПроверкиЗаполнения = "СозданиеПотенциальногоКлиента" Тогда
		// Не будет создан интерес
		МассивОписаний.Добавить(ТемпИнтерес);
	КонецЕсли;
	
	Для Каждого ТекОписание Из МассивОписаний Цикл
		Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
		
		КлючНазначения = Неопределено;
		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
			ТекОписание, КлючНазначения);
		
		УправлениеСвойствамиСлужебный.ЗаполнитьНаборыСДополнительнымиРеквизитами(
			НаборыСвойствОбъекта,
			Свойства_НаборыДополнительныхРеквизитовОбъекта);
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ТекОписание.ДополнительныеРеквизиты.Выгрузить(),
			Свойства_НаборыДополнительныхРеквизитовОбъекта,
			ВидСвойств);
		Для Каждого ТекСвойство Из ОписаниеСвойств Цикл
			МассивИсключений.Добавить(ТекСвойство.Свойство);
		КонецЦикла;
	КонецЦикла;
	
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, , МассивИсключений);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачуНаСервере()
	
	ДатаЗадачи = ТекущаяДатаСеанса();
	Если СозданныйИнтерес.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
		ТекстЗадачи = НСтр("ru='Обработать новый интерес клиента';en='Process new lead'")
			+ ?(ЗначениеЗаполнено(Интерес.Тема), " (" + Интерес.Тема + ")", "");
	Иначе
		ТекстЗадачи = НСтр("ru='Обработать новое обращение: '") + НРег(СозданныйИнтерес.ТипОбращения) 
			+ ?(ЗначениеЗаполнено(Интерес.Тема), " (" + Интерес.Тема + ")", "");
	КонецЕсли;
	
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор				= ТекущийПользователь;
	
	Если ТипЗнч(Интерес.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ОбъектЗадача.РольИсполнителя	= Интерес.Ответственный;
	Иначе
		ОбъектЗадача.Исполнитель		= Интерес.Ответственный;
	КонецЕсли;
	
	ОбъектЗадача.ПринятаКИсполнению	= Истина;
	ОбъектЗадача.Наименование		= ТекстЗадачи;
	ОбъектЗадача.Дата				= ДатаЗадачи;
	ОбъектЗадача.ДатаНачала			= ДатаЗадачи;

	СрокИсполнения = НачалоДня(ДатаЗадачи + 60 * 60 * 24);
	СоответствиеДат = CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(СрокИсполнения);
	Если СоответствиеДат.Количество() > 0 Тогда
		ОбъектЗадача.СрокИсполнения =
			КонецДня(CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(СрокИсполнения).Получить(СрокИсполнения));
	Иначе
		ОбъектЗадача.СрокИсполнения = СрокИсполнения;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен календарный график! Срок исполнения задачи по обработке Интереса установлен без учета календаря!'"));
	КонецЕсли;
	
	ОбъектЗадача.CRM_Личная			= Истина;
	ОбъектЗадача.Предмет			= СозданныйИнтерес;
	ОбъектЗадача.Описание			= Интерес.Описание;
	ОбъектЗадача.CRM_Партнер		= Интерес.Партнер;
	ОбъектЗадача.CRM_КонтактноеЛицо	= Интерес.КонтактноеЛицо;
	ОбъектЗадача.Записать();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПотенциальныйКлиентНаСервере()
	
	ПотенциальныйКлиентОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
	ПотенциальныйКлиентОбъект.Наименование = ФИО;
	ПотенциальныйКлиентОбъект.Организация = Организация;
	ПотенциальныйКлиентОбъект.Должность = Должность;
	ПотенциальныйКлиентОбъект.БизнесРегион = БизнесРегион;
	ПотенциальныйКлиентОбъект.Отрасль = Отрасль;
	ПотенциальныйКлиентОбъект.Родитель = РодительПК;
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Телефон1.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный, "");
		Иначе
			Представление = Телефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПотенциальныйКлиентОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Почта) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Почта, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПотенциальныйКлиентОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИДАккаунта) Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
			 Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка());
		ТипКИ = ВидКИ.Тип;
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ИДАккаунта);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				ВидКИ, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ИДАккаунта, ВидКИ);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПотенциальныйКлиентОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, ПотенциальныйКлиентОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ПотенциальныйКлиентОбъект.Записать();
	Интерес.ПотенциальныйКлиент = ПотенциальныйКлиентОбъект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаНаСервере()
	
	Если ЗначениеЗаполнено(Клиент_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Клиент_Телефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Телефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
				 "");
		Иначе
			Представление = Клиент_Телефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Клиент_МобТелефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_МобТелефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
		Иначе
			Представление = Клиент_МобТелефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_Адрес, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Мессенджер) Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
			 Справочники.Партнеры.ПустаяСсылка());
		ТипКИ = ВидКИ.Тип;
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				 ВидКИ, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_Мессенджер, ВидКИ);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_ЮрАдрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_ЮрАдрес, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Клиент_Объект);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ИНН") Тогда
		Клиент_Объект["CRM_ИНН"] = Клиент_ИНН;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_КПП") Тогда
		Клиент_Объект["CRM_КПП"] = Клиент_КПП;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ОГРН") Тогда
		Клиент_Объект["CRM_ОГРН"] = Клиент_ОГРН;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Клиент_Объект.ОсновнойМенеджер) Тогда
		Клиент_Объект.ОсновнойМенеджер = Интерес.Ответственный;
	КонецЕсли;
	Клиент_Объект.CRM_Автор = ТекущийПользователь;
	
	НовыйКлиент = РеквизитФормыВЗначение("Клиент_Объект");
	НовыйКлиент.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйКлиент.Записать();
	Интерес.Партнер = НовыйКлиент.Ссылка;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если Не ЗначениеЗаполнено(Интерес.Договор) Тогда
			Интерес.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Интерес.Партнер, Интерес.Организация);
			
			Если ЗначениеЗаполнено(Интерес.Договор) Тогда
				Интерес.Валюта = Интерес.Договор["ВалютаРасчетов"];
				ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Интерес.Дата,
					Новый Структура("Валюта", Интерес.Договор["ВалютаРасчетов"]));
				Интерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				Интерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
					ВалютаРасчетовКурсКратность.Кратность);
				Интерес["ВидСкидкиНаценки"] = Интерес.Договор["ВидСкидкиНаценки"];
				ВидЦен = ?(ЗначениеЗаполнено(ВидЦен), ВидЦен, Интерес.Договор["ВидЦен"]);
				Интерес["ВидЦен"] = ВидЦен;
				Интерес["ЦенаВключаетНДС"] = ВидЦен.ЦенаВключаетНДС;
				Интерес.ОжидаемаяВыручка = ПересчитатьСуммуПоВалюте(Интерес.ОжидаемаяВыручка,
					Интерес.Договор["ВалютаРасчетов"], ВалютаУправленческогоУчета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРаботаСКонтрагентами = (Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено);
	ЕстьИспользоватьПартнеровКакКонтрагентов =
		(Метаданные.Константы.Найти("ИспользоватьПартнеровКакКонтрагентов") <> Неопределено);
	
	Если ЕстьИспользоватьПартнеровКакКонтрагентов И ЕстьРаботаСКонтрагентами Тогда
		
		ИспользоватьПартнеровКакКонтрагентов = Константы["ИспользоватьПартнеровКакКонтрагентов"].Получить();
		
		Если ИспользоватьПартнеровКакКонтрагентов ИЛИ ЗначениеЗаполнено(Клиент_ИНН) Тогда
			CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
			CRM_Модуль.СоздатьКонтрагентаПриСозданииПартнера(ЭтотОбъект, Интерес.Партнер);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтактНаСервере()
	
	НовоеКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	НовоеКЛ.Владелец = Интерес.Партнер;
	НовоеКЛ.Наименование = Контакт_ФИО;
	
	НаименованиеДляОбработки = Контакт_ФИО;
	Если ЗначениеЗаполнено(Контакт_Фамилия) Тогда
		НовоеКЛ.CRM_Фамилия = Контакт_Фамилия; 
		ПромежуточныйОтрез = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(НаименованиеДляОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Имя) Тогда
		НовоеКЛ.CRM_Имя = Контакт_Имя;
		ПромежуточныйОтрез = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(НаименованиеДляОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Отчество) Тогда
		НовоеКЛ.CRM_Отчество = Контакт_Отчество;
	Иначе
		НовоеКЛ.CRM_Отчество = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(НаименованиеДляОбработки);
	КонецЕсли;
	
	НовоеКЛ.Комментарий = Контакт_Описание;
	НовоеКЛ.CRM_Состояние = Перечисления.CRM_Состояние.Работает;
	НовоеКЛ.CRM_Должность = Должность;
	НовоеКЛ.CRM_РольКонтактногоЛица = РольКонтактногоЛица;
	НовоеКЛ.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(ПолКонтактногоЛица) Тогда
		НовоеКЛ.Пол = CRM_КлиентыСервер.ОпределитьПол(НовоеКЛ.CRM_Имя);
	Иначе
		НовоеКЛ.Пол = ПолКонтактногоЛица;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Телефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный, "");
		Иначе
			Представление = Контакт_Телефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерМобильногоТелефона) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.НомерМобильногоТелефона.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерМобильногоТелефона);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
		Иначе
			Представление = НомерМобильногоТелефона;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Мессенджер) Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
			 Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		ТипКИ = ВидКИ.Тип;
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				ВидКИ, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Мессенджер, ВидКИ);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, НовоеКЛ);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаРожденияКЛ) Тогда
		НовоеКЛ.ДатаРождения = ДатаРожденияКЛ;
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица'"),
			 Истина);
		Если НЕ (ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.ПустаяСсылка()) Тогда
			НовСтрока = НовоеКЛ.CRM_КлючевыеСобытия.Добавить();
			НовСтрока.ВидСобытия = ВидСобытия;
			НовСтрока.ДатаСобытия = ДатаРожденияКЛ;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусКЛ) Тогда
		НовСтрока = НовоеКЛ.CRM_Статусы.Добавить();
		НовСтрока.Статус = СтатусКЛ;
	КонецЕсли;
	
	НовоеКЛ.Автор = ТекущийПользователь;
	НовоеКЛ.Записать();
	Интерес.КонтактноеЛицо = НовоеКЛ.Ссылка;

КонецПроцедуры

&НаСервере
Процедура СвязатьОбращениеСИнтересомНаСервере(ТекущийИнтерес)
	
	ОбращениеЗаполнено = ЗначениеЗаполнено(Обращение)
		И ТипЗнч(Обращение) <> Тип("ДокументСсылка.CRM_Интерес")
		И ТипЗнч(Обращение) <> Тип("ДокументСсылка.CRM_Телемаркетинг")
		И ТипЗнч(Обращение) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	
	Если Не ОбращениеЗаполнено Тогда
		Возврат;
	КонецЕсли;
	
	ОбращениеОбъект = Обращение.ПолучитьОбъект();
	
	ЭтоВзаимодействие = ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Взаимодействие");
	ЭтоЭлектронноеПисьмо = ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
	Если ЭтоВзаимодействие Тогда
		ОбращениеОбъект.ДокументОснование = ТекущийИнтерес;
	ИначеЕсли ЭтоЭлектронноеПисьмо Тогда
		КонтактноеЛицо = Неопределено;
		АдресЭПКонтакта = "";
		Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
			КонтактноеЛицо = Интерес.КонтактноеЛицо;
			АдресЭПКонтакта = Контакт_Email;
		ИначеЕсли ЗначениеЗаполнено(Интерес.Партнер) Тогда
			КонтактноеЛицо = Интерес.Партнер;
			АдресЭПКонтакта = Клиент_Email;
		ИначеЕсли ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
			КонтактноеЛицо = Интерес.ПотенциальныйКлиент;
			АдресЭПКонтакта = Почта;
		КонецЕсли;
		Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
			ЗаполнитьКонтактОбращения(ОбращениеОбъект, Интерес.КонтактноеЛицо, АдресЭПКонтакта);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСвязей = CRM_МетодыФормДокументовСервер.ДанныеСвязанныхИнтересов(ОбращениеОбъект.Ссылка);
	
	ОсновныеИнтересы = ТаблицаСвязей.НайтиСтроки(Новый Структура("ОсновнойИнтерес", Истина));
	
	Если ОсновныеИнтересы.Количество() <> 1 Тогда
		ТаблицаСвязей.ЗаполнитьЗначения(Ложь, "ОсновнойИнтерес");
		ЭтоОсновнойИнтерес = Истина;
	Иначе
		ЭтоОсновнойИнтерес = Ложь;
	КонецЕсли;
	
	НоваяСвязьСИнтересом = ТаблицаСвязей.Добавить();
	НоваяСвязьСИнтересом.Ссылка				= ТекущийИнтерес.Ссылка;
	НоваяСвязьСИнтересом.СостояниеИнтереса	= ТекущийИнтерес.СостояниеИнтереса;
	НоваяСвязьСИнтересом.ОсновнойИнтерес	= ЭтоОсновнойИнтерес;
	НоваяСвязьСИнтересом.ВведенНаОсновании	= Ложь;
	
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ОбращениеОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	КонецЕсли;
	
	ОбращениеЯвляетсяЛидом = РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Обращение)
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Обращение);
	Если ОбращениеЯвляетсяЛидом И ОбщегоНазначения.ЕстьРеквизитОбъекта("CRM_СкрытьВАРМ",
		 ОбращениеОбъект.Метаданные()) Тогда
		ОбращениеОбъект.CRM_СкрытьВАРМ = Истина;
	КонецЕсли;
	
	ОбращениеОбъект.Ответственный = Интерес.Ответственный;
	ОбращениеОбъект.Записать();
	
	Если ОбращениеЯвляетсяЛидом И НЕ ЭтоВзаимодействие Тогда
		ПараметрСостояниеЛида = Справочники.CRM_СостоянияЛидов.Сконвертирован;
		Если ЭтоСвязываниеИнтереса Тогда
			ПараметрСостояниеЛида = Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный;
		КонецЕсли;
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение, ПараметрСостояниеЛида, ТекущийИнтерес);
	КонецЕсли;
	
	ПеренестиПисьмоВОбработанные(Обращение);
	
КонецПроцедуры

&НаСервере
Процедура СвязатьДокументСИнтересомНаСервере(ЧтоСвязать, ИнтересСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЧтоСвязать);
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		ТекЗапись.CRM_Интерес = ИнтересСсылка;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДописатьИнформациюВОснованиеОбращения(ПричинаОтказа, Комментарий)
	
	Если Не ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат;
	КонецЕсли;
	
	ТелефонныйЗвонокОб = Обращение.ПолучитьОбъект();
	ТелефонныйЗвонокОб.CRM_СкрытьВАРМ = Истина;
	ТелефонныйЗвонокОб.Комментарий = ТелефонныйЗвонокОб.Комментарий 
		+ ?(ЗначениеЗаполнено(ТелефонныйЗвонокОб.Комментарий), Символы.ПС, "")
		+ НСтр("ru='Обращение потеряно по причине';en='Request is lost for a reason'") + ": " + Строка(ПричинаОтказа)
		+ Символы.ПС + Комментарий;
	АбонентВТелефонномЗвонке = ТелефонныйЗвонокОб.АбонентКонтакт;
	Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) 
		И Интерес.ПотенциальныйКлиент <> АбонентВТелефонномЗвонке Тогда
		ТелефонныйЗвонокОб.АбонентКонтакт 		= Интерес.ПотенциальныйКлиент;
		ТелефонныйЗвонокОб.АбонентПредставление 	= Строка(ТелефонныйЗвонокОб.АбонентКонтакт);
	ИначеЕсли ЗначениеЗаполнено(Интерес.КонтактноеЛицо) 
		И Интерес.КонтактноеЛицо <> АбонентВТелефонномЗвонке Тогда
		ТелефонныйЗвонокОб.АбонентКонтакт 		= Интерес.КонтактноеЛицо;
		ТелефонныйЗвонокОб.АбонентПредставление 	= Строка(ТелефонныйЗвонокОб.АбонентКонтакт);
	КонецЕсли;
	// BSLLS:MissingCodeTryCatchEx-off
	Попытка
		ТелефонныйЗвонокОб.Записать();
	Исключение
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, ПричинаОтказа, Комментарий)
	
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_Заявка")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Если ЗначениеЗаполнено(ОснованиеОбращения)
			 И РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(ОснованиеОбращения) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения,
				 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
				 Комментарий);
		КонецЕсли;
		ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
		ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
		Если Не ЗначениеЗаполнено(ОбъектОбращение.Ответственный) Тогда
			ОбъектОбращение.Ответственный = ТекущийПользователь;
		КонецЕсли;
		ОбъектОбращение.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьКВыбранномуНаСервере(ТекущийИнтерес)
	
	Если ТекущийИнтерес.Ответственный <> ТекущийПользователь
		И ТипЗнч(ТекущийИнтерес.Ответственный) = Тип("СправочникСсылка.Пользователи")
		И СоздаватьЗадачуПриСвязывании Тогда
		
		ДатаЗадачи = ТекущаяДатаСеанса();
		ТекстЗадачи = НСтр("ru='Обработать обращение клиента';en='Process lead'");
		
		ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ОбъектЗадача.Автор 				= ТекущийПользователь;
		ОбъектЗадача.Исполнитель		= ТекущийИнтерес.Ответственный;
		ОбъектЗадача.ПринятаКИсполнению	= Истина;
		ОбъектЗадача.Наименование		= ТекстЗадачи;
		ОбъектЗадача.Дата				= ДатаЗадачи;
		ОбъектЗадача.ДатаНачала			= ДатаЗадачи;
		ОбъектЗадача.СрокИсполнения		= ДатаЗадачи;
		ОбъектЗадача.CRM_Личная			= Истина;
		ОбъектЗадача.Предмет			= ТекущийИнтерес;
		ОбъектЗадача.Описание			= Интерес.Описание;
		ОбъектЗадача.CRM_Партнер		= Интерес.Партнер;
		ОбъектЗадача.CRM_КонтактноеЛицо	= Интерес.КонтактноеЛицо;
		ОбъектЗадача.Записать();
		
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") И ЗначениеЗаполнено(Интерес.Описание) Тогда
		
		ОбъектЗвонок = Обращение.ПолучитьОбъект();
		ОбъектЗвонок.Комментарий = Интерес.Описание;
		ОбъектЗвонок.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.Описание) Тогда
		
		ФорматированныйТекст = Новый ФорматированныйДокумент;
		ФорматированныйТекст.УстановитьHTML(Интерес.Описание, Новый Структура);
		СодержаниеЗаметки = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
		
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Интерес.Описание);
		ТекстHTML    = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекстHTML    = СтрЗаменить(ТекстHTML, "size=""2""", "");
		
		CRM_СодержаниеHTML = Новый ХранилищеЗначения(ТекстHTML, Новый СжатиеДанных(9));
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДатаИзменения",      ТекущаяДатаСеанса());
		ДанныеЗаполнения.Вставить("Предмет",            ТекущийИнтерес);
		ДанныеЗаполнения.Вставить("Автор",              ТекущийПользователь);
		ДанныеЗаполнения.Вставить("Содержание",         СодержаниеЗаметки);
		ДанныеЗаполнения.Вставить("ТекстСодержания",    Интерес.Описание);
		ДанныеЗаполнения.Вставить("CRM_СодержаниеHTML", CRM_СодержаниеHTML);
		ДанныеЗаполнения.Вставить("CRM_ЗаметкаЛенты",   Истина);
		
		ЗаметкаОбъект = Справочники.Заметки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЗаметкаОбъект, ДанныеЗаполнения);
		ЗаметкаОбъект.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Обращение_Взаимодействие) Тогда
		СвязатьДокументСИнтересомНаСервере(Обращение_Взаимодействие, ТекущийИнтерес);
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		СвязатьДокументСИнтересомНаСервере(Обращение, ТекущийИнтерес);
	Иначе
		СвязатьОбращениеСИнтересомНаСервере(ТекущийИнтерес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеДействия

&НаСервере
Процедура СвязатьПотенциальногоКлиентаСКлиентомКонтактом()
	
	// Связывание Потенциального клиента с созданным Клиентом
	Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент)
		И НЕ ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент.Партнер) Тогда
		
		ПотенциальныйКлиентОбъект = Интерес.ПотенциальныйКлиент.ПолучитьОбъект();
		ПотенциальныйКлиентОбъект.Партнер = Интерес.Партнер;
		ПотенциальныйКлиентОбъект.КонтактноеЛицо = Интерес.КонтактноеЛицо;
		ПотенциальныйКлиентОбъект.Записать();
		
		CRM_ОбщегоНазначенияСервер.ПереписатьАктивныеИнтересыСПотенциальногоКлиентаНаПартнера(
			Интерес.ПотенциальныйКлиент, Интерес.Партнер);
		CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(
			Интерес.ПотенциальныйКлиент, Интерес.Партнер, Интерес.КонтактноеЛицо);
		CRM_ОбщегоНазначенияСервер.ПереопределитьЗвонкиСПотенциальногоКлиентаНаПартнера(
			Интерес.ПотенциальныйКлиент, Интерес.Партнер, Интерес.КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактноеЛицоИзПотенциального(ПК, НеПроверятьОрганизацию = Ложь)
	
	Если ЗначениеЗаполнено(ПК.Организация) Или НеПроверятьОрганизацию Тогда
		
		Контакт_ФИО = ПК.Наименование;
		Контакт_Фамилия = ПК.Фамилия;
		Контакт_Имя = ПК.Имя;
		Контакт_Отчество = ПК.Отчество;
		
		СтрокаТелефонаПотенциальногоКлиента	= ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	КонецЕсли;
	
	Должность = ПК.Должность;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерТелефонаОбращения(Звонок)
	Возврат Прав(Звонок.сфпНомерКомпании, 10);
КонецФункции

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	Если РезультатЗакрытия <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы,
		 ДополнительныеПараметры.Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
Процедура НастроитьФормуПоКаналу()
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Элементы.Источник.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Канал, "ТипЗначения"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Канал) И ТипПВХ(Канал) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.Источник.Видимость = Истина;
		Элементы.Источник.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Источник.Видимость = Ложь;
		Элементы.Источник.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Канал) И Не ЗначениеЗаполнено(Источник) Тогда
		Элементы.Источник.АвтоОтметкаНезаполненного = Истина;
		Элементы.Источник.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Источник.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Источник.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Канал) И ТипПВХ(Канал) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.Источник.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Источник.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.Источник.ОграничениеТипа = Новый ОписаниеТипов(Канал.ТипЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеСценарииПродаж(Форма)
	
	СписокВыбора = Форма.Элементы.СценарийПродажи.СписокВыбора;
	
	ПараметрыСценариев = Новый Структура;
	ПараметрыСценариев.Вставить("ТипУслуги", Форма.Интерес.ТипУслуги);
	ПараметрыСценариев.Вставить("ИспользоватьТипыУслуг", Форма.ИспользоватьТипыУслуг);
	ПараметрыСценариев.Вставить("Ответственный", Форма.Интерес.Ответственный);
	ПараметрыСценариев.Вставить("ДоступныКарты", Форма.ДоступныКарты);
	ПараметрыСценариев.Вставить("ТипОбращения", Форма.ТипОбращения);
	ПараметрыСценариев.Вставить("ЭтоПоддержка", Форма.ЭтоПоддержка);
	ПараметрыСценариев.Вставить("ИсточникОбращения", Форма.ИсточникОбращения);
	
	ДоступныеСценарии = ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
	
	СписокВыбора.Очистить();
	Для Каждого Элемент Из ДоступныеСценарии Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление, , Элемент.Картинка);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Форма.СценарийПродажи) Тогда
		Если СписокВыбора.Количество() > 0 Тогда
			Форма.СценарийПродажи = СписокВыбора[0].Значение;
		КонецЕсли;
	Иначе
		Если СписокВыбора.Количество() > 0 Тогда
			Если СписокВыбора.Количество() = 1 Тогда
				Форма.СценарийПродажи = СписокВыбора[0].Значение;
			ИначеЕсли СписокВыбора.НайтиПоЗначению(Форма.СценарийПродажи) = Неопределено Тогда
				Форма.СценарийПродажи = СписокВыбора[0].Значение;
			КонецЕсли;
		Иначе
			Форма.СценарийПродажи = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоСценариюПродаж(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеСценарииПродаж(Знач ПараметрыСценариев)
	Возврат Обработки.CRM_МастерРегистрацииОбращения.ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьФормуПоСценариюПродаж(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(Форма.СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru='Запустить бизнес-процесс';en='Start Business Process'");
		Элементы.ОткрыватьИнтерес.Видимость = Ложь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
		Элементы.СоздаватьЗадачуПриСвязывании.Видимость = Ложь;
	Иначе
		Если Форма.ЭтоПоддержка Тогда
			Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru = 'Создать обращение'");
		Иначе
			Элементы.СоздатьНовыйИнтерес.Заголовок = НСтр("ru = 'Создать интерес'");
		КонецЕсли;
		УстановитьВидимостьОткрыватьИнтерес(Форма);
		Элементы.ОткрыватьИнтересОбращение.Видимость = Элементы.ПрикрепитьКВыбранному.Доступность;		
		#Если Клиент Тогда
			УстановитьВидимостьСоздаватьЗадачуПриСвязывании(Форма, Элементы.ПрикрепитьКВыбранному.Доступность);
		#Иначе
			Элементы.СоздаватьЗадачуПриСвязывании.Видимость = Элементы.ПрикрепитьКВыбранному.Доступность;
		#КонецЕсли
			
	КонецЕсли;
	
	НастроитьРолевуюАдресацию(Форма, РолеваяАдресацияРазрешена(Форма.СценарийПродажи));
	ОбновитьОжидаемуюДатуПродажи(Форма.Интерес, Форма.СценарийПродажи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроверяемыеРеквизитыИнтереса()
	
	ПервичноеСостояниеСценария = ПолучитьПервичноеСостояниеСценария(СценарийПродажи);
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(ПервичноеСостояниеСценария);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПервичноеСостояниеСценария(СценарийПродажи)
	Возврат Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийПродажи);
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКИ(Знач ОбъектПоиска, Знач КэшПоиска)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Телефон", Ложь);
	РезультатПоиска.Вставить("Email", Ложь);
	РезультатПоиска.Вставить("URL", Ложь);
	
	Если Не ЗначениеЗаполнено(ОбъектПоиска) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ИскатьТелефон = ЗначениеЗаполнено(КэшПоиска.Телефон);
	ИскатьEmail = ЗначениеЗаполнено(КэшПоиска.Email);
	ИскатьURL = ЗначениеЗаполнено(КэшПоиска.URL);
	
	КонтактнаяИнформация = ОбъектПоиска.КонтактнаяИнформация;
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если ИскатьТелефон И Не РезультатПоиска.Телефон Тогда
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ТелефонДляПреобразования = СтрокаКИ.НомерТелефона;
				ПозДоб = СтрНайти(ВРЕГ(ТелефонДляПреобразования), ", ДОБ.");
				Если ПозДоб = 0 Тогда
					ПозДоб = СтрНайти(ВРЕГ(ТелефонДляПреобразования), ", EXT.");
				КонецЕсли;
				Если ПозДоб = 0 Тогда
					ТелефонПослеПреобразования = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(ТелефонДляПреобразования);
				Иначе
					ТелефонПослеПреобразования = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(Лев(ТелефонДляПреобразования,
						 ПозДоб - 1));
				КонецЕсли;
				Если СтрНайти(ТелефонПослеПреобразования, КэшПоиска.Телефон) > 0 Тогда
					РезультатПоиска.Телефон = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ИскатьEmail И Не РезультатПоиска.Email Тогда
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
				И СтрНайти(СтрокаКИ.АдресЭП, КэшПоиска.Email) > 0 Тогда
				РезультатПоиска.Email = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИскатьURL И Не РезультатПоиска.URL Тогда
			Если СтрокаКИ.Представление = КэшПоиска.URL Тогда
				РезультатПоиска.URL = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаСервере
Процедура ДобавитьКИНаСервере(ПризнакТипа, ПризнакВладельца, Представление)
	
	Если ПризнакТипа = "Email" Тогда
		ПризнакТипа = "Почта";
	КонецЕсли;
	Если ПризнакТипа = "URL" И Не СтрНайти(Представление, "t.me") = 0 Тогда
		ПризнакТипа = "Мессенждер";
	КонецЕсли;
	
	Если ПризнакВладельца = "Клиент" И ЗначениеЗаполнено(Интерес.Партнер) Тогда
		
		ВладелецОбъект = Интерес.Партнер.ПолучитьОбъект();
		Если ПризнакТипа = "Телефон" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ИначеЕсли ПризнакТипа = "Почта" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		ИначеЕсли ПризнакТипа = "Мессенждер" Тогда
			ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
				 Справочники.Партнеры.ПустаяСсылка());
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ПризнакВладельца = "Контакт" И ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
		
		ВладелецОбъект = Интерес.КонтактноеЛицо.ПолучитьОбъект();
		Если ПризнакТипа = "Телефон" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ИначеЕсли ПризнакТипа = "Почта" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли ПризнакТипа = "Мессенждер" Тогда
			ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
				 Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ПризнакВладельца = "ПотенциальныйКлиент" И ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		
		ВладелецОбъект = Интерес.ПотенциальныйКлиент.ПолучитьОбъект();
		Если ПризнакТипа = "Телефон" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		ИначеЕсли ПризнакТипа = "Почта" Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		ИначеЕсли ПризнакТипа = "Мессенждер" Тогда
			ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись,
				 Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка());
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПризнакТипа = "Телефон" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Представление);
		ПредставлениеКИ = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
			 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, СтруктураКИ.Добавочный,
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ПредставлениеКИ,
			 ВидКИ, "");
			 
	ИначеЕсли ПризнакТипа = "Почта" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ПредставлениеКИ = Представление;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПредставлениеКИ, ВидКИ);
		
	ИначеЕсли ПризнакТипа = "Мессенждер" Тогда
		ТипКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ТипКИМессенджера(Обращение.УчетнаяЗапись);
		СтруктураКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ПредставлениеКИ = Представление;
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураКИ, ПредставлениеКИ, ВидКИ); 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ВладелецОбъект, ДанныеКИ, ВидКИ, ТипКИ);
    ВладелецОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокФильтраПоИнтересам()
	
	Если РежимФильтраПоИнтересам = РежимФильтраПоИнтересамАктивные() Тогда
		РежимФильтраПоИнтересам = РежимФильтраПоИнтересамВсе();
	Иначе
		РежимФильтраПоИнтересам = РежимФильтраПоИнтересамАктивные();
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.РежимФильтраПоИнтересам",
		 "МастерРегистрации",
		 РежимФильтраПоИнтересам);
	
Конецпроцедуры

Процедура ОбновитьДанныеОбработкиОбращения(ДатаОбработки, ОтветственныйЗаОбработку)
	
	ШаблонЗаголовкаДата = НСтр("ru = 'Дата обработки: %1'; en = 'Processing Date: %1'");
	Элементы.Обращение_ДатаОбработки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаДата,
		 Формат(ДатаОбработки,
		 "ДФ='dd.MM.yyyy HH:mm'"));
	Элементы.Обращение_ДатаОбработки.Видимость = ЗначениеЗаполнено(ДатаОбработки);

	Обращение_ОтветственныйЗаОбработку = ОтветственныйЗаОбработку;
	Элементы.ГруппаОтветственныйЗаОбработку.Видимость = ЗначениеЗаполнено(ОтветственныйЗаОбработку);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяВыручкаПриИзменении(Элемент)
	Интерес.ОжидаемаяВыручка = ПересчитатьСуммуПоВалюте(ВыручкаВВалюте, Интерес.Валюта, ВалютаУправленческогоУчета);
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяДатаПродажиПриИзменении(Элемент)
	Интерес.РучнойВводДатыПродажи = ЗначениеЗаполнено(Интерес.ОжидаемаяДатаПродажи);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОжидаемуюДатуПродажи(Интерес, СценарийПродажи)
	
	Если Интерес.ЭтоПоддержка Или Интерес.РучнойВводДатыПродажи Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтереса = ПолучитьПервичноеСостояниеСценария(СценарийПродажи);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтереса) Тогда
		Интерес.ОжидаемаяДатаПродажи = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтруктураИнтереса = Новый Структура;
	СтруктураИнтереса.Вставить("СостояниеИнтереса", СостояниеИнтереса);
	СтруктураИнтереса.Вставить("Ссылка", СостояниеИнтереса);
	
	Интерес.ОжидаемаяДатаПродажи = CRM_ИнтересыВызовСервера.ПлановаяДатаПродажи(СтруктураИнтереса, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает данные заявки, в которой указана ссылка на документ,
// переданный в параметре функции
//
// Параметры:
//  ДокументОснование    - ссылка на документ, из которого открыт мастер регистрации обращения
//
// Возвращаемое значение:
//  Заявка             - ссылка на документ Заявка.
Функция ПолучитьЗаявку(ДокументОснование)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_Заявка.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.CRM_Заявка КАК CRM_Заявка
	               |ГДЕ
	               |	CRM_Заявка.ДокументОснование = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Заявка.МоментВремени";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
// Связывает объект журнала документов с интересом
//
// Параметры:
//  ОбъектЖурнала  - объект журнала документов.
//  Интерес        - документ Интерес
//
Процедура СвязатьОснованиеЗаявкиСИнтересом(ОбъектЖурнала, Интерес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
		|	CRM_ЖурналДокументов.Клиент КАК Клиент,
		|	CRM_ЖурналДокументов.Объект КАК Объект,
		|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЖурналДокументов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Объект", ОбъектЖурнала);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурнала = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
	ЗаписьЖурнала.ГлавнаяЗапись = Результат[0].ГлавнаяЗапись;
	ЗаписьЖурнала.Клиент = Результат[0].Клиент;
	ЗаписьЖурнала.Объект = Результат[0].Объект;
	ЗаписьЖурнала.CRM_Интерес = Результат[0].CRM_Интерес;
	ЗаписьЖурнала.Прочитать();
	Если ЗаписьЖурнала.Выбран() Тогда
		ЗаписьЖурнала.CRM_Интерес = Интерес;
		ЗаписьЖурнала.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные   

&НаСервере
Функция ПересчитатьСуммуПоВалюте(Сумма, ТекущаяВалюта, НоваяВалюта)    
	
	Результат = 0;
	
	Если НоваяВалюта = ТекущаяВалюта Тогда
		Результат = Сумма;
		СуммаВВалютеУпрУчета = Результат;
	Иначе
		Результат = РаботаСКурсамиВалют.ПересчитатьВВалюту(Сумма, ТекущаяВалюта, НоваяВалюта, Интерес.Дата);
		СуммаВВалютеУпрУчета = РаботаСКурсамиВалют.ПересчитатьВВалюту(Результат, НоваяВалюта,
			 ВалютаУправленческогоУчета,
			 Интерес.Дата);
	КонецЕсли;
	
	Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = (Интерес.Валюта <> ВалютаУправленческогоУчета);
	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(СуммаВВалютеУпрУчета) + " " 
		+ ВалютаУправленческогоУчета.Наименование 
		+ ")";
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПоискаДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НайденныеСсылки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеНайденныеСсылки
	|ИЗ
	|	&НайденныеСсылки КАК НайденныеСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНайденныеСсылки.Ссылка КАК Ссылка,
	|	"""" КАК Оригинал
	|ПОМЕСТИТЬ НайденныеСсылкиИОригиналы
	|ИЗ
	|	ВсеНайденныеСсылки КАК ВсеНайденныеСсылки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДублиКлиентовИКонтактов.Оригинал,
	|	&ДополнениеОригиналаКлиента
	|ИЗ
	|	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК ДублиКлиентовИКонтактов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНайденныеСсылки КАК ВсеНайденныеСсылки
	|		ПО ДублиКлиентовИКонтактов.Контакт = ВсеНайденныеСсылки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеСсылкиИОригиналы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(НайденныеСсылкиИОригиналы.Оригинал) КАК Оригинал
	|ПОМЕСТИТЬ НайденныеСсылки
	|ИЗ
	|	НайденныеСсылкиИОригиналы КАК НайденныеСсылкиИОригиналы
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеСсылкиИОригиналы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Клиенты.Ссылка КАК Партнер,
	|	Контакты.Ссылка КАК КонтактноеЛицо,
	|	Клиенты.Наименование + ВЫБОР
	|	КОГДА НЕ КлючевыеЛица.ФизЛицо ЕСТЬ NULL
	|			ТОГДА "" "" + &ДополнениеКлиентаКлючевогоЛица
	|		КОГДА Клиенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|			ТОГДА "" "" + &ДополнениеКлиентаФизическогоЛица
	|		ИНАЧЕ """"
	|	КОНЕЦ + НайденныеСсылки.Оригинал КАК ПредставлениеКлиента,
	|	Контакты.Наименование + ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА "" "" + &ДополнениеУволенногоКонтакта
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА "" "" + &ДополнениеНеРаботающегоКонтакта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКонтакта,
	|	Клиенты.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтактУволен,
	|	"""" КАК Организация,
	|	Клиенты.ПометкаУдаления КАК КлиентПометкаУдаления,
	|	Контакты.ПометкаУдаления КАК КонтактПометкаУдаления,
	|	Контакты.CRM_РольКонтактногоЛица КАК КонтактРоль
	|ПОМЕСТИТЬ ДанныеКлиентов
	|ИЗ
	|	Справочник.Партнеры КАК Клиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|		ПО Клиенты.Ссылка = Контакты.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО Клиенты.Ссылка = НайденныеСсылки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК КлючевыеЛица
	|		ПО Клиенты.Ссылка = КлючевыеЛица.ФизЛицо
	|ГДЕ
	|	НЕ Клиенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Клиенты.Ссылка,
	|	Контакты.Ссылка,
	|	Клиенты.Наименование + ВЫБОР
	|		КОГДА Клиенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|			ТОГДА "" "" + &ДополнениеКлиентаФизическогоЛица
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	Контакты.Наименование + ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА "" "" + &ДополнениеУволенногоКонтакта
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА "" "" + &ДополнениеНеРаботающегоКонтакта
	|		ИНАЧЕ """"
	|	КОНЕЦ + НайденныеСсылки.Оригинал,
	|	Клиенты.ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	"""",
	|	Клиенты.ПометкаУдаления,
	|	Контакты.ПометкаУдаления,
	|	Контакты.CRM_РольКонтактногоЛица
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Клиенты
	|		ПО Контакты.Владелец = Клиенты.Ссылка
	|			И НЕ Клиенты.ЭтоГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО Контакты.Ссылка = НайденныеСсылки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	|	ПотенциальныеКлиенты.Ссылка,
	|	ВЫБОР
	|		КОГДА ПотенциальныеКлиенты.Организация = """"
	|			ТОГДА &НадписьПотенциальногоКлиента
	|		ИНАЧЕ ПотенциальныеКлиенты.Организация + "" "" + &ДополнениеПотенциальногоКлиента
	|	КОНЕЦ,
	|	ПРЕДСТАВЛЕНИЕ(ПотенциальныеКлиенты.Ссылка),
	|	ПотенциальныеКлиенты.ОсновнойМенеджер,
	|	ЛОЖЬ,
	|	ПотенциальныеКлиенты.Организация,
	|	ЛОЖЬ,
	|	ПотенциальныеКлиенты.ПометкаУдаления,
	|	ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.ПустаяСсылка)
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты КАК ПотенциальныеКлиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО ПотенциальныеКлиенты.Ссылка = НайденныеСсылки.Ссылка
	|ГДЕ
	|	ПотенциальныеКлиенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКлиентов.Партнер КАК Клиент,
	|	ДанныеКлиентов.КонтактноеЛицо КАК Контакт,
	|	ДанныеКлиентов.ПредставлениеКлиента КАК ПредставлениеКлиента,
	|	ДанныеКлиентов.ПредставлениеКонтакта КАК ПредставлениеКонтакта,
	|	ДанныеКлиентов.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ДанныеКлиентов.КонтактУволен КАК КонтактУволен,
	|	ДанныеКлиентов.Организация КАК Организация,
	|	ДанныеКлиентов.КлиентПометкаУдаления КАК КлиентПометкаУдаления,
	|	ДанныеКлиентов.КонтактПометкаУдаления КАК КонтактПометкаУдаления,
	|	ДанныеКлиентов.КонтактРоль КАК КонтактРоль
	|ИЗ
	|	ДанныеКлиентов КАК ДанныеКлиентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеКлиента,
	|	ПредставлениеКонтакта";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕ Клиенты.ЭтоГруппа", "Истина");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЗаполненияПоКлиенту()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент,
	|	Контакты.Ссылка КАК Контакт,
	|	Клиенты.Наименование + ВЫБОР
	|		КОГДА Клиенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|			ТОГДА "" "" + &ДополнениеКлиентаФизическогоЛица
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКлиента,
	|	Контакты.Наименование + ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА "" "" + &ДополнениеУволенногоКонтакта
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА "" "" + &ДополнениеНеРаботающегоКонтакта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКонтакта,
	|	Клиенты.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтактУволен,
	|	Клиенты.Наименование КАК СтрокаПоиска,
	|	"""" КАК Организация,
	|	Клиенты.ПометкаУдаления КАК КлиентПометкаУдаления,
	|	Контакты.ПометкаУдаления КАК КонтактПометкаУдаления
	|ИЗ
	|	Справочник.Партнеры КАК Клиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|		ПО Клиенты.Ссылка = Контакты.Владелец
	|ГДЕ
	|	Клиенты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеКлиента,
	|	ПредставлениеКонтакта";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЗаполненияПоКонтакту()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контакты.Владелец КАК Клиент,
	|	Контакты.Ссылка КАК Контакт,
	|	Клиенты.Наименование + ВЫБОР
	|		КОГДА Клиенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|			ТОГДА "" "" + &ДополнениеКлиентаФизическогоЛица
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКлиента,
	|	Контакты.Наименование + ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА "" "" + &ДополнениеУволенногоКонтакта
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА "" "" + &ДополнениеНеРаботающегоКонтакта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКонтакта,
	|	Клиенты.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Контакты.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтактУволен,
	|	Контакты.Наименование КАК СтрокаПоиска,
	|	"""" КАК Организация,
	|	Клиенты.ПометкаУдаления КАК КлиентПометкаУдаления,
	|	Контакты.ПометкаУдаления КАК КонтактПометкаУдаления
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Клиенты
	|		ПО Контакты.Владелец = Клиенты.Ссылка
	|ГДЕ
	|	Контакты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЗаполненияПоИнтересу()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Интерес.Партнер КАК Клиент,
	|	ВЫБОР
	|		КОГДА Интерес.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Интерес.КонтактноеЛицо
	|		ИНАЧЕ Интерес.ПотенциальныйКлиент
	|	КОНЕЦ КАК Контакт,
	|	ВЫБОР
	|		КОГДА Интерес.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Клиенты.Наименование + ВЫБОР
	|					КОГДА Клиенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|						ТОГДА "" "" + &ДополнениеКлиентаФизическогоЛица
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СправочникПотенциальныеКлиенты.Организация = """"
	|					ТОГДА &НадписьПотенциальногоКлиента
	|				ИНАЧЕ СправочникПотенциальныеКлиенты.Организация + "" "" + &ДополнениеПотенциальногоКлиента
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеКлиента,
	|	ВЫБОР
	|		КОГДА Интерес.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|			ТОГДА КонтактныеЛица.Наименование + ВЫБОР
	|					КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|						ТОГДА "" "" + &ДополнениеУволенногоКонтакта
	|					КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|						ТОГДА "" "" + &ДополнениеНеРаботающегоКонтакта
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		КОГДА Интерес.ПотенциальныйКлиент <> ЗНАЧЕНИЕ(Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(СправочникПотенциальныеКлиенты.Ссылка)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеКонтакта,
	|	Интерес.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(Клиенты.ОсновнойМенеджер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Интерес.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтактУволен,
	|	"""" КАК СтрокаПоиска,
	|	ВЫБОР
	|		КОГДА Интерес.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА Интерес.ПотенциальныйКлиент <> ЗНАЧЕНИЕ(Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка)
	|			ТОГДА СправочникПотенциальныеКлиенты.Организация
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА Интерес.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Клиенты.ПометкаУдаления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КлиентПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Интерес.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА КонтактныеЛица.ПометкаУдаления
	|		ИНАЧЕ СправочникПотенциальныеКлиенты.ПометкаУдаления
	|	КОНЕЦ КАК КонтактПометкаУдаления
	|ИЗ
	|	Документ.CRM_Интерес КАК Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Клиенты
	|		ПО Интерес.Партнер = Клиенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|		ПО Интерес.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ПотенциальныеКлиенты КАК СправочникПотенциальныеКлиенты
	|		ПО Интерес.ПотенциальныйКлиент = СправочникПотенциальныеКлиенты.Ссылка
	|ГДЕ
	|	Интерес.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьДанныеCoMagic(Знач Данные)
	
	Текст = НСтр("ru='Кампания:';en='Campaign:'") + " " + Данные.comagic_context.campaign + Символы.ПС 
		+ НСтр("ru='Сайт:';en='Website:'") + " " + Данные.comagic_context.site + Символы.ПС
		+ НСтр("ru='Ключевые слова:';en='Keywords:'") + " " + Данные.comagic_context.search_query; 
	
	Канал = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic;
	Источник = сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(Данные.comagic_context.campaign);
	
	Возврат Новый Структура("Текст,Канал,Источник", Текст, Канал, Источник);
	
КонецФункции

&НаСервере
Функция ПолучитьТипУслугиПользователя(Знач Пользователь, ПолучитьЗначениеПоУмолчанию = Ложь)
	
	Если Не ПолучитьЗначениеПоУмолчанию Тогда
		Возврат Интерес.ТипУслуги;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойТипУслуг");
	
КонецФункции

&НаСервере
Функция ПолучитьТипОбращенияПользователя(Знач Пользователь, ПолучитьЗначениеПоУмолчанию = Ложь)
	
	Если НЕ ПолучитьЗначениеПоУмолчанию Тогда
		Возврат ТипОбращения;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойТипОбращения");
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКарточкиCoMagic()
	Элементы.ГруппаКарточкаCoMagic.Видимость =
		(Канал = ПредопределенноеЗначение("ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic"));
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаКлиенте
Функция МассивДополнительныхРеквизитов()
	
	Результат = Новый Массив;
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Для Каждого ЭлементКоллекции Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
			Результат.Добавить(ЭлементКоллекции.Свойство);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеСтрокиНайденного(Знач Клиент, Знач Контакт, Знач ВключеныОграниченияДоступа = Ложь,
	 ДоступенКлиент = Истина, ДоступенКонтакт = Истина,
	 МассивДополнительныхРеквизитов = Неопределено)
	
	// 00A0F2 - голубой
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	ТаблицаЭлементовНастройки = Новый ТаблицаЗначений;
	ТаблицаЭлементовНастройки.Колонки.Добавить("Ключ");
	ТаблицаЭлементовНастройки.Колонки.Добавить("Значение");
	ТаблицаЭлементовНастройки.Колонки.Добавить("Представление");
	ТаблицаЭлементовНастройки.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	
	Если Не ОбщиеНастройки = Неопределено Тогда
	
		Для Каждого НастройкаГруппы Из ОбщиеНастройки Цикл
			
			Для Каждого НастройкаЭлемента Из НастройкаГруппы.Значение Цикл
				Если НастройкаЭлемента.Пометка Тогда
					НоваяСтрока = ТаблицаЭлементовНастройки.Добавить();
					НоваяСтрока.Ключ = НастройкаГруппы.Ключ;
					НоваяСтрока.Значение = НастройкаЭлемента.Значение;
					НоваяСтрока.Представление = НастройкаЭлемента.Представление;
					
					НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
					Если ТипЗнч(МассивДополнительныхРеквизитов) = Тип("Массив") Тогда
						НоваяСтрока.ЭтоДополнительныйРеквизит =
							(МассивДополнительныхРеквизитов.Найти(НастройкаЭлемента.Значение) <> Неопределено);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Описание = "";
	
	Если ЗначениеЗаполнено(Клиент) И ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Клиент);
		Описание = "<table width=""100%"" border=""0"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>" 
			+ СокрЛП(Клиент.Наименование) 
			+ "</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
			+ НСтр("ru='Публ. наименование: ';en='Public Name: '") 
			+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
			+ СокрЛП(Клиент.НаименованиеПолное) 
			+ "</font>
		|<br>
		|";
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ЗначениеЗаполнено(Клиент["CRM_ИНН"]) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
				+ НСтр("ru='ИНН: ';en='TIN:'") 
				+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
				+ СокрЛП(Клиент.CRM_ИНН) 
				+ "  </font><font style=""font-size:12px;"" face=""MS Sans Serif"">КПП: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
				+ СокрЛП(Клиент.CRM_КПП) 
				+ "</font>
			|<br>
			|";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Клиент.CRM_ТипОтношенийПредставление) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
				+ НСтр("ru='Тип отношений: ';en='Realtion Type:'") 
				+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
				+ СокрЛП(Клиент.CRM_ТипОтношенийПредставление) 
				+ "</font>
			|<br>
			|";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Клиент.ОсновнойМенеджер) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
				+ НСтр("ru='Ответственный: ';en='Responsible: '") 
				+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
				+ СокрЛП(Клиент.ОсновнойМенеджер) 
				+ "</font>
			|<br>
			|";
		КонецЕсли;
		
		Описание = ДобавитьОписаниеПоНастройке(ТаблицаЭлементовНастройки, "Клиент", Клиент, Описание);
		
		ОписаниеКонтакты = "";
		Для Каждого Строка Из Клиент.КонтактнаяИнформация Цикл
			Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
				 ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если ОписаниеКонтакты = "" Тогда
					ОписаниеКонтакты = "</td>
					|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
					|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>" + НСтр("ru='Контакты';en='Contacts'") + "</B></font>
					|<br>
					|";
				КонецЕсли;	
				ОписаниеКонтакты = ОписаниеКонтакты + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
					+ СокрЛП(Строка.Вид) 
					+ ": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
					+ СокрЛП(Строка.Представление) 
					+ "</font>
				|<br>
				|";	
			КонецЕсли;
		КонецЦикла;	
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;	
		
		Описание = Описание + "</td>
		|</table>
		|";
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Контакт);
		Описание = "<table width=""100%"" border=""0"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>" 
			+ СокрЛП(Контакт.Наименование) 
			+ "</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
			+ ?(ЗначениеЗаполнено(Контакт.Организация), НСтр("ru='Компания: ';en='Company: '"), "") + "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
			+ СокрЛП(Контакт.Организация) 
			+ "</font>
		|<br>
		|";
		Если ЗначениеЗаполнено(Контакт.ОсновнойМенеджер) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
				+ НСтр("ru='Ответственный: ';en='Responsible: '") 
				+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
				+ СокрЛП(Контакт.ОсновнойМенеджер) 
				+ "</font>
			|<br>
			|";
		КонецЕсли;
		
		Описание = ДобавитьОписаниеПоНастройке(ТаблицаЭлементовНастройки, "ПотенциальныйКлиент", Контакт, Описание);
		
		ОписаниеКонтакты = "";
		Для Каждого Строка Из Контакт.КонтактнаяИнформация Цикл
			Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
				 ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если ОписаниеКонтакты = "" Тогда
					ОписаниеКонтакты = "</td>
					|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
					|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>Контакты</B></font>
					|<br>
					|";
				КонецЕсли;	
				ОписаниеКонтакты = ОписаниеКонтакты + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
					+ СокрЛП(Строка.Вид) 
					+ ": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
					+ СокрЛП(Строка.Представление) 
					+ "</font>
				|<br>
				|";
			КонецЕсли;	
		КонецЦикла;
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;
		Описание = Описание + "</td>
		|</table>
		|";
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Контакт);
		Описание = Описание + "<table width=""100%"" style=""border-top: 1px solid"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>" 
			+ СокрЛП(Контакт.Наименование) 
			+ "</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">" + НСтр("ru='Состояние: ';en='State: '") 
			+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
			+ СокрЛП(Контакт.CRM_Состояние) 
			+ "</font>
		|<br>";
		
		Описание = ДобавитьОписаниеПоНастройке(ТаблицаЭлементовНастройки, "Контакт", Контакт, Описание);
		
		Описание = Описание +
		"<font style=""font-size:12px;"" face=""MS Sans Serif"">" + НСтр("ru='Автор: ';en='Author: '") 
			+ "</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
			+ Строка(Контакт.Автор) 
			+ "</font>
		|<br>
		|";
		
		ОписаниеКонтакты = "";
		
		Если ДоступенКонтакт Тогда
			Для Каждого Строка Из Контакт.КонтактнаяИнформация Цикл
				Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
					 ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Если ОписаниеКонтакты = "" Тогда
						ОписаниеКонтакты = "</td>
						|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
						|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>Контакты</B></font>
						|<br>
						|";
					КонецЕсли;	
					ОписаниеКонтакты = ОписаниеКонтакты 
						+ "<font style=""font-size:12px;"" face=""MS Sans Serif"">" + СокрЛП(Строка.Вид) 
						+ ": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
						+ СокрЛП(Строка.Представление) 
						+ "</font>
					|<br>
					|";
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;
		Описание = Описание + "</td>
		|</table>
		|";
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Описание =
	"<html>
	|<head>
	|
	|<style type=""text/css"">
	|	a {text-decoration:none;
	|	color: #000000;}
	|</style>
	|
	|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>
	|" + Описание + "
	|</body>
	|</html>";
	
	Возврат Описание;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ДобавитьОписаниеПоНастройке(ТаблицаЭлементовНастройки, КлючОтбора, ОбъектОтбора, Описание)
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("Должность", "CRM_Должность");
	Соответствие.Вставить("СтатусКЛ", "Статус");
	Соответствие.Вставить("РольКонтактногоЛица", "CRM_РольКонтактногоЛица");
	Соответствие.Вставить("ПолКонтактногоЛица", "Пол");
	Соответствие.Вставить("ДатаРожденияКЛ", "ДатаРождения");
	Соответствие.Вставить("Контакт_Описание", "Комментарий");
	
	Соответствие.Вставить("Клиент_ОбъектCRM_ОсновнаяОтрасль", "CRM_ОсновнаяОтрасль");
	Соответствие.Вставить("Клиент_ОбъектCRM_СегментРынка", "CRM_Сегментрынка");
	Соответствие.Вставить("Клиент_ОбъектCRM_Важность", "CRM_Важность");
	Соответствие.Вставить("Клиент_ОбъектCRM_СтатусРаботы", "CRM_СтатусРаботы");
	Соответствие.Вставить("Клиент_ОбъектБизнесРегион", "БизнесРегион");
	Соответствие.Вставить("Клиент_Адрес", "Адрес");
	Соответствие.Вставить("Клиент_ЮрАдрес", "ЮрАдрес");
	Соответствие.Вставить("Клиент_ОбъектПол", "Пол");
	Соответствие.Вставить("Клиент_ОбъектДатаРождения", "ДатаРождения");
	Соответствие.Вставить("Клиент_ОбъектКомментарий", "Комментарий");
	
	Соответствие.Вставить("Должность1", "Должность");
	Соответствие.Вставить("Отрасль", "Отрасль");
	Соответствие.Вставить("БизнесРегион", "БизнесРегион");
	
	ОписаниеНовое = Описание;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючОтбора);
	НайденныеСтроки = ТаблицаЭлементовНастройки.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ЭлементМассива Из НайденныеСтроки Цикл
			
			ПредставлениеЗначения = Неопределено;
			ПредставлениеРеквизита = ЭлементМассива.Представление;
			
			Если ЭлементМассива.ЭтоДополнительныйРеквизит Тогда
				Если НЕ ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
					ПредставлениеРеквизита = Строка(ЭлементМассива.Значение);
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					ПредставлениеЗначения = CRM_УправлениеСвойствами.ПредставлениеЗначенияСвойства(ОбъектОтбора,
						 ЭлементМассива.Значение,
						 КодОсновногоЯзыка);
				Иначе
					ПредставлениеЗначения = УправлениеСвойствами.ПредставлениеЗначенияСвойства(ОбъектОтбора,
						 ЭлементМассива.Значение,
						 КодОсновногоЯзыка);
				КонецЕсли;
			Иначе
				
				Если СтрНачинаетсяС(ЭлементМассива.Значение, "Группа") Тогда
					Продолжить;
				КонецЕсли;
				
				НовоеЗначениеРеквизита = Неопределено;
				Если ТипЗнч(ЭлементМассива.Значение) = Тип("Строка")
					 И Соответствие.Свойство(ЭлементМассива.Значение, НовоеЗначениеРеквизита) Тогда
					НаименованиеРеквизита = НовоеЗначениеРеквизита;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
					ПредставлениеРеквизита = НаименованиеРеквизита;
				КонецЕсли;
				Если СтрНайти(ПредставлениеРеквизита, "CRM_") > 0 Тогда
					ПредставлениеРеквизита = Сред(ПредставлениеРеквизита, 5);
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектОтбора, НаименованиеРеквизита) Тогда
					ПредставлениеЗначения = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектОтбора, НаименованиеРеквизита);
					ПредставлениеЗначения = Формат(ПредставлениеЗначения, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
				ОписаниеНовое = ОписаниеНовое + "<font style=""font-size:12px;"" face=""MS Sans Serif"">" 
					+ СокрЛП(ПредставлениеРеквизита) 
					+ ": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">" 
					+ СокрЛП(ПредставлениеЗначения) 
					+ "</font>
				|<br>
				|";
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеНовое; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаголовокОбращения(Обращение)
	
	СтруктураЗаголовка = Новый Структура("ТекстЗаголовка, Картинка");
	
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Письмо';en='Letter'") + ": " + Обращение.Тема;
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Письмо';en='Letter'") + ": " + Обращение.Тема;
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Сообщение';en='Message'") + ": " + Обращение.ТекстСообщения;
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_СообщениеМессенджера;
	ИначеЕсли ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Диалог';en='Dialog'") + ": " + Строка(Обращение);
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_СообщениеМессенджера;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Заявка';en='Request'") + ": " + Строка(Обращение);
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.Документ;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Взаимодействие';en='Interaction'") + ": " + Строка(Обращение);
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_КалендарьСписок;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Если ЗначениеЗаполнено(Обращение) Тогда
			СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Телефонный звонок';en='Phone call'") + ": " + Строка(Обращение);
		Иначе
			СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Звонок с номера';en='Call from number'") + ": " + Строка(Обращение);
		КонецЕсли;
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		СтруктураЗаголовка.ТекстЗаголовка = НСтр("ru='Телемаркетинг';en='Telemarketing'") + ": " + Строка(Обращение);
		СтруктураЗаголовка.Картинка = БиблиотекаКартинок.Документ;
	КонецЕсли;
	
	Возврат СтруктураЗаголовка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбязательноУказыватьПричинуОтказа(Обращение)
	
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат Обращение.УчетнаяЗапись.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Возврат Обращение.УчетнаяЗапись.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		Возврат Обращение.ИсточникПолучения.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Константы.CRM_ОбязательноУказыватьПричинуПотериЗвонков.Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимФильтраПоИнтересамАктивные()
	Возврат	НСтр("ru = 'активные'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимФильтраПоИнтересамВсе()
	Возврат	НСтр("ru = 'все'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетОтбораПоАктивнымИнтересам(РежимФильтраПоИнтересам)
	
	Возврат РежимФильтраПоИнтересам <> РежимФильтраПоИнтересамАктивные();
	
КонецФункции

&НаСервере
Процедура ОбновитьТипОбращения(ПользовательСсылка)
	
	ТипОбращенияОтв = ПолучитьТипОбращенияПользователя(ПользовательСсылка);
	Если ЗначениеЗаполнено(ТипОбращенияОтв) И НЕ НеОбновлятьТипОбращения Тогда
		УстановитьЗначениеТипОбращения(ТипОбращенияОтв);
	КонецЕсли;
	
	НеОбновлятьТипОбращения = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеТипОбращения(Значение)
	
	Если ИсточникОткрытияМастера = CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж() И НЕ ЭтоПоддержка Тогда
		ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес;
	Иначе
		ТипОбращения = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеТипУслуги(Значение)
	
	Если ИспользоватьТипыУслуг Тогда
		Интерес.ТипУслуги = Значение;
	Иначе
		Интерес.ТипУслуги = Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если Не ДоступноОбращение Тогда
		ШаблонЗаголовка = НСтр("ru='%1 (новый)';en='%1 (New)'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ТипОбращения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РолеваяАдресацияРазрешена(Сценарий)
	
	ПервоеСостояние = ПервоеСостояниеСценария(Сценарий);
	
	Если ЗначениеЗаполнено(ПервоеСостояние) Тогда
		Возврат ПервоеСостояние.РазрешитьРолевуюАдресацию;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРолевуюАдресацию(Форма, РолеваяАдресацияРазрешена)
		
	ТипПользователи = Тип("СправочникСсылка.Пользователи");
	ТипРолиИсполнителей = Тип("СправочникСсылка.РолиИсполнителей");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипПользователи);
	
	Форма.Элементы.ПеренаправитьНаРоль.Видимость = Ложь;
	
	Если РолеваяАдресацияРазрешена Тогда
		МассивТипов.Добавить(ТипРолиИсполнителей);
		Форма.Элементы.ПеренаправитьНаРоль.Видимость = Истина;
	КонецЕсли;
	
	Форма.Элементы.Ответственный.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ЗаполнитьОтветственного(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПервоеСостояниеСценария(Сценарий)
	Возврат Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(Сценарий);
КонецФункции

&НаСервереБезКонтекста
Функция ОтветственныйПоРолиПервичногоСостояния(Сценарий)
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервоеСостояние = ПервоеСостояниеСценария(Сценарий);
	
	Если НЕ ЗначениеЗаполнено(ПервоеСостояние) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПервоеСостояние.РазрешитьРолевуюАдресацию И ЗначениеЗаполнено(ПервоеСостояние.РольОтветственного) Тогда
		Возврат ПервоеСостояние.РольОтветственного;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаКлиенте
Процедура ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	ЭтоСоздание = ДополнительныеПараметры.Свойство("ЭтоСоздание");
	ЭтоСвязывание = ДополнительныеПараметры.Свойство("ЭтоСвязывание");
	ЭтоБП = ДополнительныеПараметры.Свойство("ЭтоБП");
	
	Если ЭтоСоздание ИЛИ ЭтоСвязывание Тогда
	
		ИнтересСсылка = ДополнительныеПараметры.Интерес;
		СостояниеИнтереса = ДополнительныеПараметры.СостояниеИнтереса;
		
		Если ЭтоСоздание Тогда
			Если ЗначениеЗаполнено(Обращение_Взаимодействие) Тогда
				СвязатьДокументСИнтересомНаСервере(Обращение_Взаимодействие, ИнтересСсылка);
			ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				СвязатьДокументСИнтересомНаСервере(Обращение, ИнтересСсылка);
			Иначе
				СвязатьОбращениеСИнтересомНаСервере(ИнтересСсылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоСвязывание Тогда
			ПрикрепитьКВыбранномуНаСервере(ИнтересСсылка);
		КонецЕсли;
			
		ПоказатьОповещениеПользователя(НСтр("ru='Обращение принято';en='Request Accepted'"),
			ПолучитьНавигационнуюСсылку(ИнтересСсылка),
				НСтр("ru='Интерес: ';en='Lead:'")
				+ CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересСсылка, "Тема")
				+ " (" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ")");
		
		КолонкиАРМ = Новый Массив;
		КолонкиАРМ.Добавить("НеРазобрано");
		КолонкиАРМ.Добавить(СостояниеИнтереса);
		Оповестить("ОбновитьАРМ", КолонкиАРМ, ЭтотОбъект);
		
		Если ЭтоСоздание Тогда
			Оповестить("ПринятиеОбращения", ИнтересСсылка, Обращение);
			Если ОткрыватьИнтерес Или ТекущийПользователь = Интерес.Ответственный
				Или ПользовательВходитВРоль(ТекущийПользователь, Интерес.Ответственный) Тогда
				ПоказатьЗначение(, ИнтересСсылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоСвязывание Тогда
			Оповестить("ПринятиеОбращения", ИнтересСсылка, Обращение);
			Если ОткрыватьИнтересОбращение Тогда
				ПоказатьЗначение(, ИнтересСсылка);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ЭтоБП Тогда
				
		ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ДополнительныеПараметры.ПараметрыФормы);
		
	КонецЕсли;

	ПеренестиПисьмоВОбработанные(Обращение);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , , );
КонецПроцедуры

&НаСервере
Функция НеобходимоЗадатьВопросПриПереносеВОбработанные()
		
	Если ЗначениеЗаполнено(Обращение) И ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		УчетнаяЗапись = Обращение.УчетнаяЗапись;
		Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Ложь;
					
КонецФункции

&НаСервере
Процедура ПеренестиПисьмоВОбработанные(Обращение)
	
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
		// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
		Если Обращение.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда
			Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Обращение.УчетнаяЗапись, "Обработанные");
			Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Обращение, Папка);
			
			ПрочитанныеПисьма = Новый Массив;
			ПрочитанныеПисьма.Добавить(Обращение);
			CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательВходитВРоль(Пользователь, Роль)
	
	Если ТипЗнч(Роль) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.УстановитьПараметр("РольИсполнителя", Роль);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
	               |	И ИсполнителиЗадач.Исполнитель = &Исполнитель";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаИзЗапроса.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПотенциальногоКлиента(ПотенциальныйКлиент)
	
	Результат = Новый Структура("Клиент, Контакт");
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПотенциальныеКлиенты.Ссылка КАК Ссылка,
		|	CRM_ПотенциальныеКлиенты.Партнер КАК Клиент,
		|	CRM_ПотенциальныеКлиенты.КонтактноеЛицо КАК Контакт
		|ИЗ
		|	Справочник.CRM_ПотенциальныеКлиенты КАК CRM_ПотенциальныеКлиенты
		|ГДЕ
		|	CRM_ПотенциальныеКлиенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПотенциальныйКлиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПоискНаСервереПоДаннымПК()
	
	Результат = Ложь;

	ДанныеПК = ДанныеПотенциальногоКлиента(ПотенциальныйКлиентПриАктивизацииСтроки);
	ПК_КлиентЗаполнен = ЗначениеЗаполнено(ДанныеПК.Клиент);
	ПК_КонтактЗаполнен = ЗначениеЗаполнено(ДанныеПК.Контакт);
	
	УсловияПоиска = Новый Массив;
	Если ПК_КлиентЗаполнен Тогда
		УсловияПоиска.Добавить(СокрЛП(ДанныеПК.Клиент));
	КонецЕсли;
	Если ПК_КонтактЗаполнен Тогда
		УсловияПоиска.Добавить(СокрЛП(ДанныеПК.Контакт));
	КонецЕсли;
	
	Если УсловияПоиска.Количество() > 0 Тогда
		
		// Поиск.
		УстановитьПривилегированныйРежим(Истина);
		РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина);
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
			
			Запрос = Новый Запрос;
			НайденныеСсылки = Новый ТаблицаЗначений;
			НайденныеСсылки.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.CRM_КонтактДляПоиска.Тип);
			Для Каждого НайденнаяСсылка Из РезультатПоиска.Элементы Цикл
				НайденныеСсылки.Добавить().Ссылка = НайденнаяСсылка;
			КонецЦикла;
			Запрос.Параметры.Вставить("НайденныеСсылки", НайденныеСсылки);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ПараметрыЗапросов);
			
			Запрос.Текст = ТекстЗапросаПоискаДанных();
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				лРезультатыПоиска = РезультатЗапроса.Выгрузить();
				
				ПараметрыОтбораРезультатаПоиска = Новый Структура;
				Если ПК_КлиентЗаполнен Тогда
					ПараметрыОтбораРезультатаПоиска.Вставить("Клиент", ДанныеПК.Клиент);
				КонецЕсли;
				Если ПК_КонтактЗаполнен Тогда
					ПараметрыОтбораРезультатаПоиска.Вставить("Контакт", ДанныеПК.Контакт);
				КонецЕсли;						
				
				СтрокиСДанными = лРезультатыПоиска.НайтиСтроки(ПараметрыОтбораРезультатаПоиска);
				
				ИдентификаторСтроки = Элементы.РезультатыПоиска.ТекущаяСтрока;
				СтрокаРезультатыПоиска = РезультатыПоиска.НайтиПоИдентификатору(ИдентификаторСтроки);
		
				Для Каждого СтрСДанными Из СтрокиСДанными Цикл
					ЗаполнитьЗначенияСвойств(СтрокаРезультатыПоиска, СтрСДанными);
					
					// очистка незаполненного поля:
					Если НЕ ПК_КлиентЗаполнен Тогда
						СтрокаРезультатыПоиска.Клиент = Неопределено;
						СтрокаРезультатыПоиска.КлиентПометкаУдаления = Ложь;
						СтрокаРезультатыПоиска.ПредставлениеКлиента = "";
					КонецЕсли;
					Если НЕ ПК_КонтактЗаполнен Тогда
						СтрокаРезультатыПоиска.Контакт = Неопределено;
						СтрокаРезультатыПоиска.КонтактПометкаУдаления = Ложь;
						СтрокаРезультатыПоиска.КонтактУволен = Ложь;
						СтрокаРезультатыПоиска.ПредставлениеКонтакта = "";
					КонецЕсли;
					
					Результат = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноИзменение(Знач КлиентКЛ, Пользователь)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			Если ТипЗнч(КлиентКЛ) = Тип("СправочникСсылка.Партнеры") Тогда
				Возврат (МодульУправлениеДоступом.РежимДоступаКПартнерам(КлиентКЛ, Пользователь, "И") = 1);
			ИначеЕсли ТипЗнч(КлиентКЛ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Возврат (МодульУправлениеДоступом.РежимДоступаККонтактам(КлиентКЛ, Пользователь) = 1);
			Иначе
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("УправлениеДоступом");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			Возврат Не МодульУправлениеДоступом.ИзменениеРазрешено(КлиентКЛ, Пользователь);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСценарийПользователя(Знач Пользователь, ПолучитьЗначениеПоУмолчанию = Ложь)
	
	Если НЕ ПолучитьЗначениеПоУмолчанию Тогда
		Возврат СценарийПродажи;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСценарий");
	
КонецФункции // ПолучитьСценарийПользователя()

&НаСервереБезКонтекста
Процедура ДобавитьУсловиеПоискаПоПочтовомуДомену(ПоискПоПочтовомуДомену, АдресЭП, УсловияПоиска)
	
	Если ПоискПоПочтовомуДомену И ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭП) Тогда
		ПочтовыйДомен = "@" + CRM_ОбщегоНазначенияКлиентСервер.ПолучитьДоменныйАдресДляПоиска(АдресЭП);
		
		ПубличныеДомены = CRM_ОбщегоНазначенияСервер.МассивПубличныхДоменов();
		Если ПубличныеДомены.Найти(ПочтовыйДомен) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураУсловия = CRM_ПоискКонтактов.СтруктураУсловияПоиска(ПочтовыйДомен);
		СтруктураУсловия.ПоискПоПочтовомуДомену = Истина;
		УсловияПоиска.Добавить(СтруктураУсловия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СофтФон

&НаКлиенте
Процедура сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры)
	Если СтруктураКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	сфпИдентификаторПереводимогоЗвонка = ДополнительныеПараметры.hCall;
	ИмяЛинии = ДополнительныеПараметры.LineName; 
	сфпПанельУправления.StartTransferCall(ИмяЛинии, сфпИдентификаторПереводимогоЗвонка, ПолеВводаНомера, "");
	Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция сфпПолучитьИдентификаторЗвонка(ТелефЗвонок)
	Если ТелефЗвонок = Неопределено ИЛИ ТипЗнч(ТелефЗвонок) <> Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрЗаменить(ТелефЗвонок.сфпИдентификаторЗвонка, Символы.НПП, "");
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция сфпКартинкаСтатуса(ПредставлениеСтатуса)
	
	КартинкаСтатуса = 4;
	
	Если ВРЕГ(ПредставлениеСтатуса) = "В СЕТИ" Тогда
		КартинкаСтатуса = 0;
		
	ИначеЕсли ВРЕГ(ПредставлениеСтатуса) = "НЕТ НА МЕСТЕ" Тогда
		КартинкаСтатуса = 1;
		
	ИначеЕсли ВРЕГ(ПредставлениеСтатуса) = "НЕ БЕСПОКОИТЬ" Тогда
		КартинкаСтатуса = 2;
		
	ИначеЕсли ВРЕГ(ПредставлениеСтатуса) = "ЛИНИЯ ЗАНЯТА" Тогда
		КартинкаСтатуса = 3;
	КонецЕсли;
	
	Возврат КартинкаСтатуса;
	
КонецФункции

&НаКлиенте
Процедура сфпВидимостьИДоступностьГруппыСофтфон()
	
	сфпНомерПеревода = "";
	
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь)
		И ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		И Не ИзАРМ Тогда 
		Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
		сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(Интерес.Ответственный, Истина);
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			ЗаголовокВнутреннегоНомера = Нстр("ru='Вн. номер: ';en='Int. number:'") + сфпНомерПеревода;
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				Если СтатусЛинии <> Неопределено Тогда
					ЗаголовокВнутреннегоНомера = ЗаголовокВнутреннегоНомера + " (" + НРег(СтатусЛинии) + ")";
				КонецЕсли;
				сфпСтатус = сфпКартинкаСтатуса(СтатусЛинии);
			КонецЕсли;
			Элементы.сфпВнутреннийНомер.Заголовок = ЗаголовокВнутреннегоНомера;
		Иначе
			Элементы.сфпВнутреннийНомер.Заголовок = "";
			сфпСтатус = 4;
		КонецЕсли;
		Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(Обращение));
			Если НайденныйЗвонок <> Неопределено Тогда
				Элементы.сфпУдержатьЗвонок.Доступность = Истина;
				Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
				Элементы.сфпПереводЗвонка.Доступность =
					НЕ (сфпНомерПеревода =  сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь));
			Иначе
				Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
				Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
				Элементы.сфпПереводЗвонка.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
			Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
			Элементы.сфпПереводЗвонка.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МоделиМашинногоОбучения

&НаСервере
Функция Помощник_ПроверитьИспользование()
	
	Если Не ИспользоватьПоддержку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиМоделей = CRM_МоделиМашинногоОбучения.ПолучитьНастройкиМоделей();
	Если Не CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделейЗаполнены(НастройкиМоделей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НастройкиМоделей.ИспользоватьКлассификациюОбращений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = CRM_МоделиМашинногоОбучения.ПроверитьСостояние("КлассификацияОбращений", НастройкиМоделей);
	Если РезультатПроверки.Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Помощник_ТекущаяПодсказкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипОбращения <> Помощник_ТекущаяПодсказка Тогда
		ТипОбращения = Помощник_ТекущаяПодсказка;
		ТипОбращенияПриИзменении(Элементы.ТипОбращения);
	КонецЕсли;
	
	Элементы.ТипОбращения.ЦветФона = Помощник_ВспомогательныеДанные.ФонПодсказки;
	Элементы.Помощник_Подсказки.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ИсходныйТипОбращенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипОбращения <> Помощник_ИсходныйТипОбращения Тогда
		ТипОбращения = Помощник_ИсходныйТипОбращения;
		ТипОбращенияПриИзменении(Элементы.ТипОбращения);
	КонецЕсли;
	
	Элементы.ТипОбращения.ЦветФона = Новый Цвет;
	Элементы.Помощник_Подсказки.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ЗаголовокНажатие(Элемент)
	
	Элементы.Помощник_Подсказки.Показать();
	ТекущийЭлемент = Элементы.Помощник_ИконкаБольшая;
	
	Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаСовет;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ВсеПодсказкиНажатие(Элемент)
	Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаПодсказки;
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Помощник_Данные.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Помощник_ДанныеОценкаПлюс Тогда
		
		Если ТекущиеДанные.Оценка = 1 Тогда
			ОбновитьОценкуПодсказки(ТекущиеДанные, 0);
		Иначе
			ОбновитьОценкуПодсказки(ТекущиеДанные, 1);
		КонецЕсли;
		
		Если Помощник_ТекущаяПодсказка = ТекущиеДанные.Ссылка Тогда
			ОбновитьОценкуСовета(ТекущиеДанные.Оценка);
		КонецЕсли;
		
		CRM_МоделиМашинногоОбучения.ЗаписатьОценку("КлассификацияОбращений",
			Помощник_ТекстПоиска, ТекущиеДанные.Ссылка, ТекущиеДанные.Оценка);
		
	ИначеЕсли Поле = Элементы.Помощник_ДанныеОценкаМинус Тогда
		
		Если ТекущиеДанные.Оценка = -1 Тогда
			ОбновитьОценкуПодсказки(ТекущиеДанные, 0);
		Иначе
			ОбновитьОценкуПодсказки(ТекущиеДанные, -1);
		КонецЕсли;
		
		Если Помощник_ТекущаяПодсказка = ТекущиеДанные.Ссылка Тогда
			ОбновитьОценкуСовета(ТекущиеДанные.Оценка);
		КонецЕсли;
		
		CRM_МоделиМашинногоОбучения.ЗаписатьОценку("КлассификацияОбращений",
			Помощник_ТекстПоиска, ТекущиеДанные.Ссылка, ТекущиеДанные.Оценка);
		
	Иначе
		
		Если ТипОбращения <> ТекущиеДанные.Ссылка Тогда
			ТипОбращения = ТекущиеДанные.Ссылка;
			ТипОбращенияПриИзменении(Элементы.ТипОбращения);
		КонецЕсли;
		Элементы.Помощник_Подсказки.Скрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ОценкаПоложительная(Команда)
	
	Если Помощник_ТекущаяОценка = 1 Тогда
		ОбновитьОценкуСовета(0);
	Иначе
		ОбновитьОценкуСовета(1);
	КонецЕсли;
	
	НайденныеСтроки = Помощник_Данные.НайтиСтроки(Новый Структура("Ссылка", Помощник_ТекущаяПодсказка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		ОбновитьОценкуПодсказки(НайденнаяСтрока, Помощник_ТекущаяОценка);
	КонецЕсли;
	
	CRM_МоделиМашинногоОбучения.ЗаписатьОценку("КлассификацияОбращений",
		Помощник_ТекстПоиска, Помощник_ТекущаяПодсказка, Помощник_ТекущаяОценка);
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ОценкаОтрицательная(Команда)
	
	Если Помощник_ТекущаяОценка = -1 Тогда
		ОбновитьОценкуСовета(0);
	Иначе
		ОбновитьОценкуСовета(-1);
	КонецЕсли;
	
	НайденныеСтроки = Помощник_Данные.НайтиСтроки(Новый Структура("Ссылка", Помощник_ТекущаяПодсказка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		ОбновитьОценкуПодсказки(НайденнаяСтрока, Помощник_ТекущаяОценка);
	КонецЕсли;
	
	CRM_МоделиМашинногоОбучения.ЗаписатьОценку("КлассификацияОбращений",
		Помощник_ТекстПоиска, Помощник_ТекущаяПодсказка, Помощник_ТекущаяОценка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОценкуСовета(Оценка)
	
	Помощник_ТекущаяОценка = Оценка;
	Если Оценка = 1 Тогда
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусСерыйБольшая;
	ИначеЕсли Оценка = -1 Тогда
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсСерыйБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусБольшая;
	Иначе
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсСерыйБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусСерыйБольшая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОценкуПодсказки(СтрокаПодсказки, Оценка)
	
	СтрокаПодсказки.Оценка = Оценка;
	Если Оценка = 1 Тогда
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюс;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	ИначеЕсли Оценка = -1 Тогда
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинус;
	Иначе
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Помощник_ОбновитьСостояние()
	
	// Проверки и формирование текста запроса.
	Помощник_ТекстПоиска = "";
	Если Параметры.Свойство("ПисьмоВходящее") Тогда
		Обращение = Параметры.ПисьмоВходящее;
		Помощник_ТекстПоиска = CRM_МоделиМашинногоОбученияКлиентСервер.ОбработатьТекст(Обращение.Текст);
		Если Не ЗначениеЗаполнено(Помощник_ТекстПоиска) Тогда
			Помощник_ТекстПоиска = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Обращение.ТекстHTML);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Помощник_ТекстПоиска) Тогда
		Элементы.ГруппаПомощник.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Запрос данных.
	РезультатыКлассификации = CRM_МоделиМашинногоОбучения.КлассифицироватьОбращение(Помощник_ТекстПоиска);
	
	КоличествоПодсказок = РезультатыКлассификации.Количество();
	Если КоличествоПодсказок = 0 Тогда
		Элементы.ГруппаПомощник.Видимость = Ложь;
		Возврат;
	ИначеЕсли КоличествоПодсказок = 1 Тогда
		Элементы.Помощник_ГруппаВсеПодсказки.Видимость = Ложь;
		Элементы.Помощник_ГруппаПодсказки.Видимость = Ложь;
	Иначе
		ЗаголовокВсеПодсказки = НСтр("ru = 'Все подсказки (%1)'");
		Элементы.Помощник_ВсеПодсказки.Заголовок = СтрШаблон(ЗаголовокВсеПодсказки, КоличествоПодсказок);
	КонецЕсли;
	
	// Вспомогательные данные.
	Помощник_ВспомогательныеДанные = Новый Структура;
	Помощник_ВспомогательныеДанные.Вставить("ФонПодсказки", ЦветаСтиля.CRM_ЦветФонаПодсказкиПомощника);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсСерый", БиблиотекаКартинок.CRM_ОценкаПлюсСерый);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюс", БиблиотекаКартинок.CRM_ОценкаПлюс);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусСерый", БиблиотекаКартинок.CRM_ОценкаМинусСерый);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинус", БиблиотекаКартинок.CRM_ОценкаМинус);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсСерыйБольшая", БиблиотекаКартинок.CRM_ОценкаПлюсСерый24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсБольшая", БиблиотекаКартинок.CRM_ОценкаПлюс24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусСерыйБольшая", БиблиотекаКартинок.CRM_ОценкаМинусСерый24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусБольшая", БиблиотекаКартинок.CRM_ОценкаМинус24);
	
	// Заполнение.
	Помощник_ИсходныйТипОбращения = ТипОбращения;
	Помощник_ТекущаяОценка = 0;
	ПервыйРезультат = РезультатыКлассификации[0];
	Помощник_ТекущаяПодсказка = ПервыйРезультат.Ссылка;
	
	Если ПервыйРезультат.ЭтоСовет Тогда
		Если ТипОбращения <> Помощник_ТекущаяПодсказка Тогда
			ТипОбращения = Помощник_ТекущаяПодсказка;
			Элементы.ТипОбращения.ЦветФона = ЦветаСтиля.CRM_ЦветФонаПодсказкиПомощника;
			Элементы.Помощник_СтраницыКомментария.ТекущаяСтраница = Элементы.Помощник_КомментарийИзменения;
		Иначе
			Элементы.Помощник_СтраницыКомментария.ТекущаяСтраница = Элементы.Помощник_КомментарийПодсказки;
			Элементы.Помощник_НадписьНеИзменено.Заголовок =
				НСтр("ru = 'Я не менял исходный тип обращения, поскольку он совпадает с моим прогнозом'");
		КонецЕсли;
	Иначе
		Элементы.Помощник_ГруппаИсходныйТипОбращения.Видимость = Ложь;
		Элементы.Помощник_СтраницыКомментария.ТекущаяСтраница = Элементы.Помощник_КомментарийПодсказки;
	КонецЕсли;
	
	ТекстСовета = НСтр("ru = 'Уверен на %1, что тип этого обращения:'");
	Элементы.Помощник_ТекстСовета.Заголовок = СтрШаблон(ТекстСовета, Формат(ПервыйРезультат.Уверенность, "ЧФ=Ч%"));
	
	ИндексКартинки = Помощник_ИсходныйТипОбращения.ИндексКартинки;
	Элементы.Помощник_ИсходнаяКартинка.Картинка = БиблиотекаКартинок["CRM_ТипОбращения" + ИндексКартинки];
	ИндексКартинки = Помощник_ТекущаяПодсказка.ИндексКартинки;
	Элементы.Помощник_ТекущаяКартинка.Картинка = БиблиотекаКартинок["CRM_ТипОбращения" + ИндексКартинки];
	
	Для Каждого Результат Из РезультатыКлассификации Цикл
		НоваяСтрока = Помощник_Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.ИндексКартинки = Результат.Ссылка.ИндексКартинки;
		НоваяСтрока.Оценка = 0;
		НоваяСтрока.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		НоваяСтрока.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСоставаРеквизитов

&НаСервере
Процедура ИзменитьСоставРеквизитов()
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	Если ОбщиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для каждого НастройкаГруппы Из ОбщиеНастройки Цикл
		Для Каждого НастройкаЭлемента Из НастройкаГруппы.Значение Цикл
			Элемент = Неопределено;
			Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("Строка") Тогда
				Элемент = Элементы.Найти(НастройкаЭлемента.Значение);
			Иначе
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
					 И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
					ОписанияДР = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
						 НастройкаЭлемента.Значение));
					Если ОписанияДР.Количество() > 0 Тогда
						Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Элемент <> Неопределено Тогда
				Элемент.Видимость = НастройкаЭлемента.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого НастройкаЭлемента Из ПроверяемыеРеквизитыИнтереса Цикл
		Если ТипЗнч(НастройкаЭлемента) = Тип("Строка") Тогда
			НастройкаЭлемента = ?(НастройкаЭлемента = "Описание", "Содержание",
				 НастройкаЭлемента); // реквизиту Интереса "Описание" соответствует реквизит Мастера принятия обращения "Содержание"
			Элемент = Элементы.Найти(НастройкаЭлемента);
		Иначе
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
				 И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
				ОписанияДР = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
					 НастройкаЭлемента));
				Если ОписанияДР.Количество() > 0 Тогда
					Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Истина;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ОтметкаНезаполненного") Тогда
				Элемент.ОтметкаНезаполненного = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ОжидаемаяВыручка.Видимость = Элементы.ОжидаемаяВыручка.Видимость И НЕ ЭтоПоддержка;
	Элементы.ОжидаемаяДатаПродажи.Видимость = Элементы.ОжидаемаяДатаПродажи.Видимость И НЕ ЭтоПоддержка;
	Элементы.Валюта.Видимость = Элементы.ОжидаемаяВыручка.Видимость;
	
	ИменаЭлементовИзменениеВидимости = Новый Массив;
	ИменаЭлементовИзменениеВидимости.Добавить(Элементы.РольВИнтересе.Имя);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	Иначе
		ИменаЭлементовИзменениеВидимости.Добавить("Соглашение");
		ИменаЭлементовИзменениеВидимости.Добавить("Контрагент");
		ИменаЭлементовИзменениеВидимости.Добавить("Договор");
	КонецЕсли;	
	УстановитьВидимостьРеквизитаНаСервере(ИменаЭлементовИзменениеВидимости);
	
	// +CRM_Модуль
	ОбновитьСвязиПараметровВыбораРеквизитовФормыНаСервере();
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРеквизитов(МассивИменЭлементов)
	
	УстановитьВидимостьРеквизитаНаСервере(МассивИменЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитаНаСервере(МассивИменЭлементов)
	
	МассивЭлементов = Новый Массив;
	Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	Если ОбщиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого НастройкаГруппы Из ОбщиеНастройки Цикл
		
		Для Каждого Элемент Из МассивЭлементов Цикл
			
			ИмяЭлемента = Элемент.Имя;
		
			ЭлементСписка = НастройкаГруппы.Значение.НайтиПоЗначению(ИмяЭлемента);
			Если ЭлементСписка <> Неопределено Тогда
				
				ОбязательноКЗаполнению = Ложь;
				Если ТипЗнч(ПроверяемыеРеквизитыИнтереса) = Тип("ФиксированныйМассив") Тогда
					ОбязательноКЗаполнению = ?(ПроверяемыеРеквизитыИнтереса.Найти(ИмяЭлемента) = Неопределено,
												Ложь, Истина);
				КонецЕсли;
												
				Если ИмяЭлемента = "Договор" Тогда
					Элемент.Видимость = (ЭлементСписка.Пометка Или ОбязательноКЗаполнению)
										И ЗначениеЗаполнено(Интерес.Партнер);
				ИначеЕсли ИмяЭлемента = "РольВИнтересе" Тогда
					Элемент.Видимость = ЭлементСписка.Пометка
										И (ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
										Или Элементы.ГруппаРеквизитыКлиента.Видимость);
					Элементы.РольКонтактногоЛица.Видимость = ЭлементСписка.Пометка
										И (Элементы.ГруппаРеквизитыКлиента.Видимость Или Элементы.ГруппаРеквизитыКонтакта.Видимость);
				ИначеЕсли ИмяЭлемента = "Соглашение" Тогда
					Элемент.Видимость = (ЭлементСписка.Пометка Или ОбязательноКЗаполнению)
											И ЗначениеЗаполнено(Интерес.Партнер);
					ДопЭлемент = Элементы.Найти("СоглашениеТовары");
					Если ДопЭлемент <> Неопределено Тогда
						ДопЭлемент.Видимость = Элемент.Видимость;
						ДопЭлемент.АвтоОтметкаНезаполненного = ДопЭлемент.Видимость И ОбязательноКЗаполнению;
					КонецЕсли;
				ИначеЕсли ИмяЭлемента = "Контрагент" Тогда
					Элемент.Видимость = (ЭлементСписка.Пометка Или ОбязательноКЗаполнению)
											И ЗначениеЗаполнено(Интерес.Партнер);
				КонецЕсли;
				
				Элемент.АвтоОтметкаНезаполненного = Элемент.Видимость И ОбязательноКЗаполнению;
				ЗначениеРеквизита = Вычислить(Элемент.ПутьКДанным);
				Элемент.ОтметкаНезаполненного = Элемент.АвтоОтметкаНезаполненного
					 И НЕ ЗначениеЗаполнено(ЗначениеРеквизита);
				Элемент.Доступность = Элемент.Видимость;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Установить маски ввода КИ
	ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить();
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Клиент_Телефон) И ВидКИ.ВводитьНомерПоМаске Тогда
		Элементы.Клиент_Телефон.Маска = ВидКИ.МаскаНомераТелефона;
	Иначе
		Элементы.Клиент_Телефон.Маска = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Клиент_МобТелефон)
		 И Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ВводитьНомерПоМаске Тогда
		Элементы.Клиент_МобТелефон.Маска =
			Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.МаскаНомераТелефона;
	Иначе
		Элементы.Клиент_МобТелефон.Маска = "";
	КонецЕсли;
	
	ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Контакт_Телефон) И ВидКИ.ВводитьНомерПоМаске Тогда
		Элементы.Телефон.Маска = ВидКИ.МаскаНомераТелефона;
	Иначе
		Элементы.Телефон.Маска = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НомерМобильногоТелефона)
		 И Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ВводитьНомерПоМаске Тогда
		Элементы.НомерМобильногоТелефона.Маска =
			Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.МаскаНомераТелефона;
	Иначе
		Элементы.НомерМобильногоТелефона.Маска = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Телефон)
		 И Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента.ВводитьНомерПоМаске Тогда
		Элементы.Телефон1.Маска = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента.МаскаНомераТелефона;
	Иначе
		Элементы.Телефон1.Маска = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Клиент_Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Клиент_Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		
		МассивОбъектовСДопРеквизитами = Новый Массив;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКлиента");
		ДополнительныеПараметры.Вставить("Объект", Клиент_Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКонтакта");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпКонтакт);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРекизитовПК");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпПотенциальныйКлиент);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ТемпИнтерес.ТипОбращения = ТипОбращения;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДопРеквизитыИнтереса");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", ТемпИнтерес);
		
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, МассивОбъектовСДопРеквизитами);
		
		РазложитьДопРеквизитыПоКолонкам(МассивОбъектовСДопРеквизитами);
		ИзменитьСоставРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура РазложитьДопРеквизитыПоКолонкам(МассивОбъектов)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		Для Каждого ОбъектДопРеквизитов Из МассивОбъектов Цикл
			ГруппаДопРеквизитов = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения);
			Если ГруппаДопРеквизитов <> Неопределено Тогда
				ГруппаЛев = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Левая");
				ГруппаПрав = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Правая");
				Если ГруппаЛев <> Неопределено И ГруппаПрав <> Неопределено Тогда
					Левая = Истина;
					Для Каждого ДопРеквизит Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
						ДопЭлемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ДопРеквизит);
						Если ДопЭлемент <> Неопределено 
							И (ДопЭлемент.Родитель = ГруппаДопРеквизитов Или ДопЭлемент.Родитель.Родитель = ГруппаДопРеквизитов) Тогда
							ДопЭлемент.Видимость = Ложь;
							Элементы.Переместить(ДопЭлемент, ?(Левая, ГруппаЛев, ГруппаПрав));
							Левая = Не Левая;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	РольВИнтересе = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес.КонтактноеЛицо, "CRM_РольКонтактногоЛица");
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхКлиента

&НаСервере
Процедура ЗаполнитьКлиентаИзПотенциального()
	ПотенциальныйКлиент = Интерес.ПотенциальныйКлиент;
	Если ЗначениеЗаполнено(ПотенциальныйКлиент.Организация) Тогда
		Клиент_Объект.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
		Клиент_Объект.Наименование = ПотенциальныйКлиент.Организация;
		Клиент_Объект.НаименованиеПолное = ПотенциальныйКлиент.Организация;
		Контакт_ФИО = ПотенциальныйКлиент.Наименование;
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			"Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			"Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Почта = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "Тип");
		
		Если СтрокаДругойКИПотенциальногоКлиента = Неопределено Тогда
			ПараметрОтбора			= Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			СтрокиКИМессенджеров	= ПотенциальныйКлиент.КонтактнаяИнформация.НайтиСтроки(ПараметрОтбора);
			
			Для Каждого ТекущаяСтрокаКИ Из СтрокиКИМессенджеров Цикл
				НаименованиеВидаКИ = ТекущаяСтрокаКИ.Вид.Наименование;
				Если НаименованиеВидаКИ = "WhatsApp" Тогда
					СтрокаДругойКИПотенциальногоКлиента = ТекущаяСтрокаКИ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	Иначе
		
		НастройкаКлиент_ОбъектЮрФизЛицо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.Клиент_ОбъектЮрФизЛицо",
			 "МастерРегистрации",
			 Неопределено);
		Если НастройкаКлиент_ОбъектЮрФизЛицо = Неопределено Тогда
			Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			Клиент_Объект.ЮрФизЛицо = НастройкаКлиент_ОбъектЮрФизЛицо;
		КонецЕсли;
		
		Клиент_Объект.Наименование = ПотенциальныйКлиент.Наименование;
		Клиент_Объект.НаименованиеПолное = ПотенциальныйКлиент.Наименование;
		Клиент_Объект.CRM_Фамилия = ПотенциальныйКлиент.Фамилия;
		Клиент_Объект.CRM_Имя = ПотенциальныйКлиент.Имя;
		Клиент_Объект.CRM_Отчество = ПотенциальныйКлиент.Отчество;
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		
		Если СтрокаДругойКИПотенциальногоКлиента = Неопределено Тогда
			ПараметрОтбора			= Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			СтрокиКИМессенджеров	= ПотенциальныйКлиент.КонтактнаяИнформация.НайтиСтроки(ПараметрОтбора);
			
			Для Каждого ТекущаяСтрокаКИ Из СтрокиКИМессенджеров Цикл
				НаименованиеВидаКИ = ТекущаяСтрокаКИ.Вид.Наименование;
				Если НаименованиеВидаКИ = "WhatsApp" Тогда
					СтрокаДругойКИПотенциальногоКлиента = ТекущаяСтрокаКИ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Клиент_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.Партнеры.ПустаяСсылка());
			Клиент_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Клиент_Мессенджер.Видимость = Истина;
			Элементы.Клиент_Мессенджер.Заголовок = Клиент_МессенджерВид;
		КонецЕсли;
	КонецЕсли;
	
	Должность = ПотенциальныйКлиент.Должность;
	Клиент_Объект.БизнесРегион = ПотенциальныйКлиент.БизнесРегион;
	Клиент_Объект.CRM_ОсновнаяОтрасль = ПотенциальныйКлиент.Отрасль;
	
	Клиент_Объект.CRM_ВидыДеятельности.Очистить();
	Если ЗначениеЗаполнено(Клиент_Объект.CRM_ОсновнаяОтрасль) Тогда
		СтрОтрасль = Клиент_Объект.CRM_ВидыДеятельности.Добавить();
		СтрОтрасль.ВидДеятельности = Клиент_Объект.CRM_ОсновнаяОтрасль;
	КонецЕсли;
	
	Клиент_Объект.Комментарий = Интерес.ПотенциальныйКлиент.Комментарий;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектЮрФизЛицоПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Если Элемент <> Неопределено Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.Клиент_ОбъектЮрФизЛицо",
			 "МастерРегистрации",
			 Клиент_Объект.ЮрФизЛицо);
	КонецЕсли;
	
	Клиент_ОбъектЮрФизЛицоПриИзмененииСервер();
	
	ФизЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	
	Элементы.Клиент_ОбъектНаименование.КнопкаВыбора = ФизЛицо;
	
	Если ФизЛицо Тогда
		СписокВыбораКлиент_Объект = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
		Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбораКлиент_Объект);
		Элементы.ГруппаКлиент_ОбъектРедактированиеФИО.Видимость = Истина;
	Иначе
		Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.Очистить();
		Элементы.ГруппаКлиент_ОбъектРедактированиеФИО.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураКЛ = Новый Структура;
	СтруктураКЛ.Вставить("CRM_Фамилия", Контакт_Фамилия);
	СтруктураКЛ.Вставить("CRM_Имя", Контакт_Имя);
	СтруктураКЛ.Вставить("CRM_Отчество", Контакт_Отчество);
	СписокВыбораКонтакт = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(СтруктураКЛ, Ложь);
	Элементы.КонтактНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбораКонтакт);
	
	Элементы.ГруппаКлиент_ОбъектРедактированиеФИО.Скрыть();
	Элементы.ГруппаКонтактРедактированиеФИО.Скрыть();
	
	Элементы.Клиент_ОбъектДатаРождения.Видимость = Элементы.Клиент_ОбъектДатаРождения.Видимость И ФизЛицо;
	Элементы.Клиент_ОбъектПол.Видимость = Элементы.Клиент_ОбъектПол.Видимость И ФизЛицо;
	Элементы.Клиент_МобТелефон.Видимость = ФизЛицо;
	
	Элементы.Клиент_ЮрАдрес.Видимость = Элементы.Клиент_ЮрАдрес.Видимость И НЕ ФизЛицо;
	Элементы.Клиент_ОбъектCRM_КПП.Видимость = НЕ ФизЛицо;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Элементы.ГруппаКлиентИНН.Видимость = НЕ ФизЛицо;
	КонецЕсли;
	
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Истина;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Элементы.ФИО1.АвтоОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо);
		Элементы.ФИО1.ОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо)
			 И НЕ ЗначениеЗаполнено(ФИО);
	КонецЕсли;
	
	Если Элемент <> Неопределено Тогда
		Если ФизЛицо Тогда // с юр лица на физ лицо
			
			Клиент_Объект.CRM_Фамилия = Контакт_Фамилия;
			Клиент_Объект.CRM_Имя = Контакт_Имя;
			Клиент_Объект.CRM_Отчество = Контакт_Отчество;
			
			Клиент_Email = Контакт_Email;
			Клиент_Телефон = Контакт_Телефон;
			Клиент_МобТелефон = НомерМобильногоТелефона;
			Клиент_Мессенджер = Контакт_Мессенджер;
			
			Контакт_Email = "";
			Контакт_Телефон = "";
			НомерМобильногоТелефона = "";
			Контакт_Мессенджер = "";
			
		Иначе // с физ лица на юр лицо
			
			Контакт_ФИО = ?(ЗначениеЗаполнено(Контакт_ФИО), Контакт_ФИО, Клиент_Объект.Наименование);

			Контакт_Фамилия = Клиент_Объект.CRM_Фамилия;
			Контакт_Имя = Клиент_Объект.CRM_Имя;
			Контакт_Отчество = Клиент_Объект.CRM_Отчество;
			
			Контакт_Email = Клиент_Email;
			Контакт_Телефон = Клиент_Телефон;
			НомерМобильногоТелефона = Клиент_МобТелефон;
			Контакт_Мессенджер = Клиент_Мессенджер;
			
			Клиент_Email = "";
			Клиент_Телефон = "";
			Клиент_МобТелефон = "";
			Клиент_Мессенджер = "";
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		CRM_РазрешитьСозданиеИнтересаБезКЛ = Не ((ЗначениеЗаполнено(Контакт_Email)
			 Или ЗначениеЗаполнено(Контакт_Телефон) Или ЗначениеЗаполнено(НомерМобильногоТелефона))
			 И Не ЗначениеЗаполнено(Контакт_ФИО));
		Элементы.ФИО1.АвтоОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо);
		Элементы.ФИО1.ОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо)
			 И НЕ ЗначениеЗаполнено(ФИО);
	КонецЕсли;
	
КонецПроцедуры

Процедура Клиент_ОбъектЮрФизЛицоПриИзмененииСервер()
	
	ОбновитьЭлементыДополнительныхРеквизитов();

	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.ЮрФизЛицоПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов"
"необходимо подключиться к Интернет-поддержке пользователей."
"Подключиться сейчас?';en='Fill in details of counterparty automatically"
"it is necessary to connect to user Internet support."
"Connect now?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ЭтоЮридическоеЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Иначе
		ЭтоЮридическоеЛицо =
			(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо <> Перечисления["ЮрФизЛицо"].ИндивидуальныйПредприниматель);
	КонецЕсли;
	Если ЭтоЮридическоеЛицо Тогда
		СведенияКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(СведенияКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СведенияКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		РеквизитыКонтрагента = СведенияКонтрагента.ЕГРЮЛ;
		Если РеквизитыКонтрагента = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'"), Клиент_ИНН);
			Возврат;
		КонецЕсли;
		
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Клиент_Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			Клиент_ЮрАдрес = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			Клиент_ЮрАдресЗначение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("КПП") И ЗначениеЗаполнено(РеквизитыКонтрагента.КПП) Тогда 
			Клиент_КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("Руководители")
			И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители)
			И Не ЗначениеЗаполнено(Контакт_ФИО) Тогда
			Контакт_ФИО = РеквизитыКонтрагента.Руководители[0].Представление;
			Должность = Справочники.CRM_Должности.НайтиПоНаименованию(РеквизитыКонтрагента.Руководители[0].Должность);
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("НаименованиеСокращенное")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.НаименованиеСокращенное) Тогда
			CRM_Контрагент_НаименованиеСокращенное = РеквизитыКонтрагента.НаименованиеСокращенное;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер")
		 И ЗначениеЗаполнено(РеквизитыКонтрагента.РегистрационныйНомер) Тогда
		Клиент_ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		Клиент_Телефон = РеквизитыКонтрагента.Телефон.Представление;
	КонецЕсли;
	
	РеквизитыКонтрагента.Свойство("КПП", ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Клиент_Объект.CRM_КПП, Клиент_КПП));
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ТипОтношенийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Элементы.ГруппаВсеТипыОтношений.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаВсеТипыОтношений.Скрыта() Тогда
		ТекущийЭлемент = Элементы.Клиент_ОбъектCRM_ТипОтношенийПредставление;
		CRM_ЗаписатьВсеТипыОтношений();
		СформироватьТипОтношенийПредставление();
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаСервере
Процедура СформироватьТипОтношенийПредставление()
	
	Если ДоступноИзменениеПартнеров Тогда
		CRM_ТипыОтношений = "";
		ТипКлиент = Ложь;
		ТипПоставщик = Ложь;
		ТипКонкурент = Ложь;
		ТипПрочиеОтношения = Ложь;
		
		Для Каждого Строка Из Клиент_Объект.CRM_ТипыОтношений Цикл
			ТипКлиент = ТипКлиент ИЛИ Строка.ТипОтношений.Клиент;
			ТипПоставщик = ТипПоставщик ИЛИ Строка.ТипОтношений.Поставщик;
			ТипКонкурент = ТипКонкурент ИЛИ Строка.ТипОтношений.Конкурент;
			ТипПрочиеОтношения = ТипПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения;
			
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
		КонецЦикла;	
		Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
			CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
		КонецЕсли;	
		Клиент_Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
		Клиент_Объект.Клиент = ТипКлиент;
		Клиент_Объект.Поставщик = ТипПоставщик;
		Клиент_Объект.Конкурент = ТипКонкурент;
		Клиент_Объект.ПрочиеОтношения = ТипПрочиеОтношения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	
	Если ДоступноИзменениеПартнеров Тогда
		Клиент_Объект.CRM_ТипыОтношений.Очистить();
		Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
			Если ТипОтношений.Пометка Тогда
				НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
				НовСтр.ТипОтношений = ТипОтношений.Значение;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
Процедура КлиентКонтакт_КИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура;
	Если Элемент.Имя = "Клиент_Адрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера"));
	ИначеЕсли Элемент.Имя = "Клиент_ЮрАдрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ЮрАдрес"));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Представление", ЭтотОбъект[Элемент.Имя]);
	ПараметрыОткрытия.Вставить("Значение", ЭтотОбъект[Элемент.Имя + "Значение"]);
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения", Элемент.Имя);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения] = РезультатЗакрытия.Представление;
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения + "Значение"] = РезультатЗакрытия.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ТелефонПриИзменении(Элемент)
	
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Телефон);
	Если Элемент.Маска = "" Тогда
		Клиент_Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Телефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Если ЗначениеЗаполнено(СтруктураТелефона.КодСтраны) И ЗначениеЗаполнено(СтруктураТелефона.КодГорода) Тогда
		НомерТелефона = СтруктураТелефона.КодГорода + СтруктураТелефона.НомерТелефона;
		Клиент_Объект.БизнесРегион = CRM_УправлениеКонтактнойИнформациейВызовСервера.ОпределитьБизнесРегион(НомерТелефона,
			 СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_МобТелефонПриИзменении(Элемент)
	
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_МобТелефон);
		Клиент_МобТелефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Клиент_МобТелефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПриИзменении(Элемент)
	
	Клиент_ОбъектРедактированиеПредставления = Истина;
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		Если Не Клиент_ОбъектПредставлениеВыбраноИзСписка Тогда
			
			ФИО_Темп = Клиент_Объект.Наименование;
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ",", "");
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ".", "");
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ";", "");
			
			СтруктураЗаполнения = ЗаполнитьФИОНаСервере(Клиент_Объект.Наименование);
			ИзменитьТекущиеФИО(СтруктураЗаполнения);
			
			Если ПустаяСтрока(Клиент_Объект.CRM_Фамилия) Или Клиент_Объект.Ссылка.Пустая() Тогда
				Если Не ЗначениеЗаполнено(Клиент_Объект.Пол) Тогда
					Клиент_Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Клиент_Объект.CRM_Имя);
				КонецЕсли;
				СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
				Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Не ЗначениеЗаполнено(Клиент_Объект.НаименованиеПолное) Тогда
		Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Интерес.Ответственный,
				 "ПравоваяФормаКлиентаПоУмолчанию");
			Клиент_Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" , СокрЛП(Клиент_Объект.Наименование),
			СокрЛП(ПравоваяФорма) + " """ + СокрЛП(Клиент_Объект.Наименование) + """");
		Иначе
			Клиент_Объект.НаименованиеПолное = СокрЛП(Клиент_Объект.Наименование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаКлиент_ОбъектРедактированиеФИО.Показать();
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Клиент_ОбъектПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
			
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);
		Если МассивПредставлений.Количество() > 0 Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый СписокЗначений();
			КонецЕсли;
			Для Каждого тДанные Из МассивПредставлений Цикл
				ДанныеВыбора.Вставить(0, тДанные, тДанные);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Не Клиент_ОбъектПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект);	
			Элементы.Клиент_ОбъектНаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПолноеПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.НаименованиеПолное, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Клиент_ИНН) Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ЭтоЮридическоеЛицо =
				(Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Иначе
			ЭтоЮридическоеЛицо =
				(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"));
		КонецЕсли;
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Клиент_ИНН,
			 ЭтоЮридическоеЛицо,
			 ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Клиент_ИНН");
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН();
		КонецЕсли;
	КонецЕсли;
	ВыполнитьПоискДублейПоЗначению(Клиент_ИНН, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Клиент_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
КонецПроцедуры

&НаКлиенте
Процедура Клиент_АдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Адрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ЮрАдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_ЮрАдрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматированныйНомерТелефона(НомерТелефона)
	
	Возврат CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(НомерТелефона);
	
КонецФункции

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения, ТолькоРеквизитыКонтакта = Ложь)
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!';
			|en='Search attributes in the settings of the service functions are not set!'"));
	КонецЕсли;
	
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("ЕстьДанныеКЛ_МПО", Ложь);
	
	Если НЕ ТолькоРеквизитыКонтакта Тогда
		СтруктураОбъекта.Вставить("Наименование",		Клиент_Объект.Наименование);
		СтруктураОбъекта.Вставить("НаименованиеПолное",	Клиент_Объект.НаименованиеПолное) ;
		СтруктураОбъекта.Вставить("ИНН",				Клиент_ИНН);
		Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
			СтруктураОбъекта.Вставить("Адрес", Клиент_Адрес);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Клиент_Телефон) Тогда
			ТелефонФорматированный = ФорматированныйНомерТелефона(Клиент_Телефон);
			СтруктураОбъекта.Вставить("Телефон", ТелефонФорматированный);
			Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
				СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
			КонецЕсли;
			Если ПустаяСтрока(ТелефонДляПоиска) Тогда
				ТелефонДляПоиска	= ТелефонФорматированный;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Клиент_Email) Тогда
			СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Клиент_Email);
			Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
				СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
			КонецЕсли;
			Если ПустаяСтрока(EmailДляПоиска) Тогда
				EmailДляПоиска	= Клиент_Email;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Контакт_Телефон) Тогда
		ТелефонФорматированный = ФорматированныйНомерТелефона(Контакт_Телефон);
		СтруктураОбъекта.Вставить("Контакт_Телефон", ТелефонФорматированный);
		СтруктураОбъекта.ЕстьДанныеКЛ_МПО = Истина;
		ТелефонДляПоиска	= ТелефонФорматированный;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контакт_Email) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", Контакт_Email);
		СтруктураОбъекта.ЕстьДанныеКЛ_МПО = Истина;
		EmailДляПоиска	= Контакт_Email;
	КонецЕсли;
	
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы, ЭтотОбъект);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе 
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект,
			 ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиДублиПК(ОписаниеОповещения)
	
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!';
			|en='Search attributes in the settings of the service functions are not set!'"));
	КонецЕсли;
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование",		Клиент_Объект.Наименование);
	
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	Если НЕ ПустаяСтрока(Телефон) Тогда
		ТелефонФорматированный = ФорматированныйНомерТелефона(Телефон);
		СтруктураОбъекта.Вставить("Контакт_Телефон", ТелефонФорматированный);
		ТелефонДляПоиска	= ТелефонФорматированный;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Телефон) Тогда
		ТелефонФорматированный = ФорматированныйНомерТелефона(Телефон);
		СтруктураОбъекта.Вставить("Телефон", ТелефонФорматированный);
		Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
		КонецЕсли;
		Если ПустаяСтрока(ТелефонДляПоиска) Тогда
			ТелефонДляПоиска	= ТелефонФорматированный;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Почта) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", Почта);
		EmailДляПоиска	= Почта;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Почта) Тогда
		СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Почта);
		Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
		КонецЕсли;
		Если ПустаяСтрока(EmailДляПоиска) Тогда
			EmailДляПоиска	= Почта;
		КонецЕсли;
	КонецЕсли;
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублейПК", ПараметрыФормы, ЭтотОбъект);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект,
			 ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиНайденыЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Перейти" ИЛИ РезультатЗакрытия.Результат = "Продолжить" Тогда
				
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Интерес.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						Интерес.КонтактноеЛицо = РезультатЗакрытия.Объект;
						Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
						Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
						Если ОписаниеОповещения.ДополнительныеПараметры.Свойство("ВФормеДублейВыбраноКЛ") Тогда
							ОписаниеОповещения.ДополнительныеПараметры.ВФормеДублейВыбраноКЛ = Истина;
						КонецЕсли;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						Интерес.Партнер = РезультатЗакрытия.Объект;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Интерес.ПотенциальныйКлиент = РезультатЗакрытия.Объект;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли (ТипЗнч(РезультатЗакрытия) = Тип("КодВозвратаДиалога")) 
		И (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
КонецПроцедуры

&НаСервере
// Функция создает Структуру реквизитов для поиска партнеров.
//
Функция СоздатьСтруктуруПоиска()
	СтруктураПоиска = Новый Структура;
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если НЕ (РеквизитыПоиска = Неопределено) Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПоиска;
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКлиента(ПроверяемыеРеквизиты)
	
	Если Константы.CRM_ОсновнойВидТелефонаКлиента.Получить().ОбязательноеЗаполнение
		 И Элементы.Клиент_Телефон.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Клиент_Телефон");
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ОбязательноеЗаполнение
		 И Элементы.Клиент_МобТелефон.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Клиент_МобТелефон");
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКлиента.Получить().ОбязательноеЗаполнение
		 И Элементы.Клиент_Email.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Клиент_Email");
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.АдресПартнера.ОбязательноеЗаполнение
		 И Элементы.Клиент_Адрес.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Клиент_Адрес");
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес.ОбязательноеЗаполнение
		 И Элементы.Клиент_ЮрАдрес.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Клиент_ЮрАдрес");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_ФИО) Тогда
		
		Если Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить().ОбязательноеЗаполнение
			 И Элементы.Телефон.Видимость Тогда
			
			ПроверяемыеРеквизиты.Добавить("Контакт_Телефон");
		КонецЕсли;
		
		Если Константы.CRM_ОсновнойВидEmailКонтакта.Получить().ОбязательноеЗаполнение
			 И Элементы.Почта.Видимость Тогда
			
			ПроверяемыеРеквизиты.Добавить("Контакт_Email");
		КонецЕсли;
		
		Если Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ОбязательноеЗаполнение
			И Элементы.НомерМобильногоТелефона.Видимость Тогда
			
			ПроверяемыеРеквизиты.Добавить("НомерМобильногоТелефона");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПК 
		И Не ЗначениеЗаполнено(Интерес.Партнер) И Не ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		
		Если Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента.ОбязательноеЗаполнение Тогда
			ПроверяемыеРеквизиты.Добавить("Телефон1");
		КонецЕсли;
		
		Если Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента.ОбязательноеЗаполнение Тогда
			ПроверяемыеРеквизиты.Добавить("Почта1");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКонтакта(ПроверяемыеРеквизиты)
	
	Если Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить().ОбязательноеЗаполнение
		И Элементы.Телефон.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Контакт_Телефон");
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКонтакта.Получить().ОбязательноеЗаполнение
		И Элементы.Почта.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("Контакт_Email");
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ОбязательноеЗаполнение
		И Элементы.НомерМобильногоТелефона.Видимость Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерМобильногоТелефона");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацяКлиентаИзменитьОтметкиНезаполненного()
	
	Если Константы.CRM_ОсновнойВидТелефонаКлиента.Получить().ОбязательноеЗаполнение
		 И Элементы.Клиент_Телефон.Видимость Тогда
		
		Элементы.Клиент_Телефон.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Телефон.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Телефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Телефон.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ОбязательноеЗаполнение
		 И Элементы.Клиент_МобТелефон.Видимость Тогда
		
		Элементы.Клиент_МобТелефон.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_МобТелефон.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_МобТелефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_МобТелефон.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКлиента.Получить().ОбязательноеЗаполнение
		И Элементы.Клиент_Email.Видимость Тогда
		
		Элементы.Клиент_Email.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Email.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Email.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Email.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.АдресПартнера.ОбязательноеЗаполнение
		 И Элементы.Клиент_Адрес.Видимость Тогда
		
		Элементы.Клиент_Адрес.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Адрес.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Адрес.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Адрес.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес.ОбязательноеЗаполнение
		 И Элементы.Клиент_ЮрАдрес.Видимость Тогда
		
		Элементы.Клиент_ЮрАдрес.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_ЮрАдрес.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_ЮрАдрес.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_ЮрАдрес.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного()
	
	ЮрЛицо = Истина;
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		ЮрЛицо = (Интерес.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Иначе
		ЮрЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_ФИО) И ЮрЛицо Тогда
		
		Если Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить().ОбязательноеЗаполнение
			И Элементы.Телефон.Видимость Тогда
			
			Элементы.Телефон.АвтоОтметкаНезаполненного = Истина;
			Элементы.Телефон.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Телефон.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Телефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если Константы.CRM_ОсновнойВидEmailКонтакта.Получить().ОбязательноеЗаполнение
			И Элементы.Почта.Видимость Тогда
			
			Элементы.Почта.АвтоОтметкаНезаполненного = Истина;
			Элементы.Почта.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Почта.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Почта.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ОбязательноеЗаполнение
			И Элементы.НомерМобильногоТелефона.Видимость Тогда
			
			Элементы.НомерМобильногоТелефона.АвтоОтметкаНезаполненного = Истина;
			Элементы.НомерМобильногоТелефона.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.НомерМобильногоТелефона.АвтоОтметкаНезаполненного = Ложь;
			Элементы.НомерМобильногоТелефона.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.Телефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Телефон.ОтметкаНезаполненного = Ложь;
		
		Элементы.Почта.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Почта.ОтметкаНезаполненного = Ложь;
		
		Элементы.НомерМобильногоТелефона.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерМобильногоТелефона.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацяПотенциальногоКлиентаИзменитьОтметкиНезаполненного()
	
	Если ИспользоватьПК Тогда
		Если Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента.ОбязательноеЗаполнение Тогда
			Элементы.Телефон1.АвтоОтметкаНезаполненного = Истина;
			Элементы.Телефон1.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Телефон1.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Телефон1.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		Если Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента.ОбязательноеЗаполнение Тогда
			Элементы.Почта1.АвтоОтметкаНезаполненного = Истина;
			Элементы.Почта1.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Почта1.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Почта1.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ОбновитьОтображениеРеквизитовКонтактаКлиента()
	
	ФизЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	CRM_РазрешитьСозданиеИнтересаБезКЛ = Не((ЗначениеЗаполнено(Контакт_Email)Или ЗначениеЗаполнено(Контакт_Телефон) Или ЗначениеЗаполнено(НомерМобильногоТелефона))И Не ЗначениеЗаполнено(Контакт_ФИО));
	
	Элементы.ФИО1.АвтоОтметкаНезаполненного = НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо);
	Элементы.ФИО1.ОтметкаНезаполненного = НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо) И НЕ ЗначениеЗаполнено(ФИО);
	
КонецПроцедуры
// -CRM_Модуль

#КонецОбласти

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, Поле.Имя, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		 Поле,
		 СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура Трудозатраты_Таймер(Команда)
	ПереключитьТаймерТрудозатрат();
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ПоказатьРеквизиты(Команда)
	
	Если Элементы.ГруппаТрудозатратыРеквизиты.Скрыта() Тогда
		Элементы.ГруппаТрудозатратыРеквизиты.Показать();
		ПодключитьОбработчикОжидания("ГруппаТрудозатратыРеквизиты_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТрудозатратыРеквизиты_Закрыть()
	
	Если Элементы.ГруппаТрудозатратыРеквизиты.Скрыта() Тогда
		ТекущийЭлемент = Элементы.Трудозатраты_ПоказатьРеквизиты;
		ОтключитьОбработчикОжидания("ГруппаТрудозатратыРеквизиты_Закрыть");
	Иначе
		ПодключитьОбработчикОжидания("ГруппаТрудозатратыРеквизиты_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаймерТрудозатрат()
	
	ИспользоватьТрудозатраты = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьУчетРабочегоВремени");
	
	Если Не ИспользоватьТрудозатраты Тогда
		Элементы.ГруппаТрудозатраты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ИспользуетсяУчетРабочегоВремени",
		 Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ТаймерУРВЗапущен", Новый ОписаниеТипов("Булево")));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	АвтозапускТаймера =
		CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("АвтоматическиЗапускатьТаймерУчетаРабочегоВремени");
	Если АвтозапускТаймера Тогда
		ПереключитьТаймерТрудозатрат();
	КонецЕсли;
	
	Таймер_ВидРабот = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВидРаботПоУмолчанию"); ;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьТаймерТрудозатрат()
	
	ЗапуститьТаймер = Не CRM_ТрудозатратыСервер.ПоОбъектуЗапущенТаймерУРВ(Строка(УникальныйИдентификатор));
	
	Если Не ЗапуститьТаймер Тогда
		Таймер_НакопленноеВремя = Таймер_НакопленноеВремя 
			+ (ТекущаяДатаСеанса() - ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени);
	КонецЕсли;
	
	CRM_ТрудозатратыСервер.ОстановитьУчетРабочегоВремени();
	
	Если ЗапуститьТаймер Тогда
		Элементы.Трудозатраты_Таймер.Картинка = БиблиотекаКартинок.CRM_НачатьУчетВремениЗапущен24;
		Элементы.Трудозатраты_Таймер.Заголовок = НСтр("ru = 'Остановить таймер'");
		CRM_ТрудозатратыСервер.НачатьУчетРабочегоВремениПоОбъекту(Строка(УникальныйИдентификатор), Таймер_ВидРабот);
	Иначе
		Элементы.Трудозатраты_Таймер.Картинка = БиблиотекаКартинок.CRM_НачатьУчетВремени24Анимация;
		Элементы.Трудозатраты_Таймер.Заголовок = НСтр("ru = 'Запустить таймер'");
	КонецЕсли;
	ЭтотОбъект["CRM_ТаймерУРВЗапущен"] = ЗапуститьТаймер;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТрудозатраты(СозданныйИнтерес)
	
	ИспользоватьТрудозатраты = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьУчетРабочегоВремени");
	
	Если Не ИспользоватьТрудозатраты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени) Тогда
		Таймер_НакопленноеВремя = Таймер_НакопленноеВремя 
			+ (ТекущаяДатаСеанса() - ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени);
	КонецЕсли;
	
	CRM_ТрудозатратыСервер.ОстановитьУчетРабочегоВремени();
	ЭтотОбъект["CRM_ТаймерУРВЗапущен"] = Ложь;
	
	Если Таймер_НакопленноеВремя = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.CRM_РабочееВремяПользователей.СоздатьМенеджерЗаписи();
	
	Запись.ДатаРегистрации = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Запись.ДатаРабот = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Запись.Пользователь = Пользователи.АвторизованныйПользователь();
	Запись.Подразделение = Запись.Пользователь.Подразделение;
	Запись.Источник = СозданныйИнтерес;
	Запись.ВидРабот =  Таймер_ВидРабот;
	Запись.Трудозатраты = ?(Таймер_НакопленноеВремя / 3600 > 8, 8 * 3600, Таймер_НакопленноеВремя);
	Запись.ТрудозатратыВремя = Дата('00010101') + Запись.Трудозатраты;
	Запись.Интерес = Запись.Источник;
	Запись.Клиент = Запись.Источник.Партнер;
	Запись.Проект = Запись.Источник.Проект;
	
	Запись.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтветственныйДоИзменения = Интерес.Ответственный;
КонецПроцедуры

#КонецОбласти

#Область ОтображениеСодержанияHTML

&НаСервере
Функция ПрочитатьТекстПисьмаHTML(ЭлектронноеПисьмо)
	
	Если ЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
			Или ЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		ЭтоВходящееПисьмо = (ТипЗнч(ЭлектронноеПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		
		Если ЭтоВходящееПисьмо Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	РегистрСведений.CRM_ДоверенныеАдресаЭлектроннойПочты КАК ДоверенныеАдреса
			|ГДЕ
			|	ДоверенныеАдреса.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			
			Запрос.УстановитьПараметр("АдресЭлектроннойПочты", ЭлектронноеПисьмо.ОтправительАдрес);
			РезультатЗапроса = Запрос.Выполнить();
			
			ЗапрещеноОтображениеНебезопасногоСодержимого = Взаимодействия.ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах();
			
			ЕстьНебезопасноеСодержимое		= Ложь;
			СодержимоеОснования_ВключитьНебезопасноеСодержимое	= Не ЗапрещеноОтображениеНебезопасногоСодержимого
				И (СодержимоеОснования_ВключитьНебезопасноеСодержимое Или Не РезультатЗапроса.Пустой());
		КонецЕсли;
		
		ТекстПисьма = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
			ЭлектронноеПисьмо.ТекстHTML, ЭлектронноеПисьмо.Ссылка, УникальныйИдентификатор, Новый СписокЗначений);
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
		
		Если ЭтоВходящееПисьмо Тогда
			Взаимодействия.ОтфильтроватьСодержимоеТекстаHTML(
				ТекстПисьма,
				ЭлектронноеПисьмо.Кодировка,
				Не СодержимоеОснования_ВключитьНебезопасноеСодержимое,
				ЕстьНебезопасноеСодержимое);
			
			Элементы.ПредупреждениеБезопасности.Видимость = Не ЗапрещеноОтображениеНебезопасногоСодержимого
				И ЕстьНебезопасноеСодержимое И Не СодержимоеОснования_ВключитьНебезопасноеСодержимое;
		КонецЕсли;
	Иначе
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ЭлектронноеПисьмо.Текст);
		ТекстПисьма = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	КонецЕсли;
	
	Возврат ТекстПисьма;
	
КонецФункции // ПрочитатьТекстПисьмаHTML()

&НаКлиенте
Процедура ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьНебезопасноеСодержимое" Тогда
		СтандартнаяОбработка = Ложь;
		СодержимоеОснования_ВключитьНебезопасноеСодержимое = Истина;
		СодержимоеОснованияHTML = ПрочитатьТекстПисьмаHTML(Обращение);
	КонецЕсли;
	
КонецПроцедуры // ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки()

&НаКлиенте
Процедура ОбновитьСообщения()
	
	ОкноБраузера = Элементы.СодержимоеОснованияHTML.Документ.defaultView;
	
	ОграничениеПоКоличеству				= 20;
	КоличествоПолученныхСообщений		= 0;
	СодержимоеОснования_ПервоеСообщение	= ПредопределенноеЗначение("Документ.CRM_СообщениеМессенджера.ПустаяСсылка");
	
	АдресаТекущихКартинокДиалогаТемп = СодержимоеОснования_АдресаТекущихКартинокДиалога.Скопировать();
	СодержимоеОснования_АдресаТекущихКартинокДиалога.Очистить();
	
	МассивСообщений = ПолучитьМассивСообщенийНаСервере(Истина, КоличествоПолученныхСообщений);
	
	ОкноБраузера.ClearDialog();
	ОкноБраузера.AddMessages(МассивСообщений, , КоличествоПолученныхСообщений < ОграничениеПоКоличеству, Истина);
	
	// При переходе на сообщение из другого диалога подгружать предыдущие сообщения может оказаться невозможным.
	// Поэтому необходимо обновлять видимость элемента, на который мы опираемся для реализации работы подгруздки.
	ОкноБраузера.resetScrollElement();
	
	// Также, может возникнуть ситуация, когда все сообщения помещаются на экран.
	// Поэтому, подгрузка также будет недоступна.
	// Чтобы этого избежать, будем подгружать до тех пор, пока не появится скролл или не будет сообщений на подгруздку.
	Для КоличествоОбновлений = 0 По 5 Цикл
		Если ОкноБраузера.windowIsScrollable() Или КоличествоПолученныхСообщений = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НачинаяССообщения = СодержимоеОснования_ПервоеСообщение;
		МассивСообщений = ПолучитьМассивСообщенийНаСервере(Ложь, КоличествоПолученныхСообщений, НачинаяССообщения);
		ОкноБраузера.AddMessages(МассивСообщений, Истина, КоличествоПолученныхСообщений < ОграничениеПоКоличеству);
	КонецЦикла;
	
	Для Каждого Элемент Из АдресаТекущихКартинокДиалогаТемп Цикл
		УдалитьИзВременногоХранилища(Элемент.Значение);
	КонецЦикла;
	
	АдресаТекущихКартинокДиалогаТемп.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСообщенийНаСервере(ПрямойОбход = Ложь, Количество,
	 ПередСообщением = Неопределено,
	 ВключаяСообщение = Ложь)
	
	МассивСообщений = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СодержимоеОснования_ТекущийДиалог) Тогда
		Количество = 0;
		Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(
			Новый Структура("ArrayOfMessages", МассивСообщений));
	КонецЕсли;
	
	// Автонумерация выполняется отдельным запросом, так как при выполнении в первом запросе приводит к ошибке платформы,
	// если пользователь не является администратором
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_ДиалогиДействияСДиалогом.НомерСтроки КАК ПолеСортировки,
	|	ЛОЖЬ КАК Исходящее,
	|	NULL КАК Текст,
	|	NULL КАК ТекстHTML,
	|	CRM_ДиалогиДействияСДиалогом.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА CRM_ДиалогиДействияСДиалогом.ОбъектДействия ЕСТЬ NULL
	|				ИЛИ CRM_ДиалогиДействияСДиалогом.ОбъектДействия = НЕОПРЕДЕЛЕНО
	|			ТОГДА CRM_ДиалогиДействияСДиалогом.Пользователь.Наименование
	|		ИНАЧЕ ЕСТЬNULL(CRM_ДиалогиДействияСДиалогом.ОбъектДействия.Наименование, ПРЕДСТАВЛЕНИЕ(CRM_ДиалогиДействияСДиалогом.ОбъектДействия))
	|	КОНЕЦ КАК Контакт,
	|	ВЫБОР
	|		КОГДА CRM_ДиалогиДействияСДиалогом.ОбъектДействия ЕСТЬ NULL
	|				ИЛИ CRM_ДиалогиДействияСДиалогом.ОбъектДействия = НЕОПРЕДЕЛЕНО
	|			ТОГДА CRM_ДиалогиДействияСДиалогом.Пользователь
	|		ИНАЧЕ CRM_ДиалогиДействияСДиалогом.ОбъектДействия
	|	КОНЕЦ КАК КонтактСсылка,
	|	NULL КАК СообщениеОснование,
	|	CRM_ДиалогиДействияСДиалогом.Действие КАК Действие,
	|	CRM_ДиалогиДействияСДиалогом.Описание КАК ОписаниеДействия,
	|	CRM_ДиалогиДействияСДиалогом.ОбъектДействия КАК ОбъектДействия,
	|	CRM_ДиалогиДействияСДиалогом.Ссылка КАК Диалог,
	|	ЛОЖЬ КАК Важное,
	|	CRM_ДиалогиДействияСДиалогом.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ДействияСДиалогом
	|ИЗ
	|	Справочник.CRM_Диалоги.ДействияСДиалогом КАК CRM_ДиалогиДействияСДиалогом
	|ГДЕ
	|	CRM_ДиалогиДействияСДиалогом.Ссылка В(&МассивДиалогов)
	|	И &Действие
	|	И &ОграничениеСлужебныхСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК Ссылка,
	|	ДействияСДиалогом.ПолеСортировки КАК ПолеСортировки,
	|	ДействияСДиалогом.Исходящее КАК Исходящее,
	|	ДействияСДиалогом.Текст КАК Текст,
	|	ДействияСДиалогом.ТекстHTML КАК ТекстHTML,
	|	ДействияСДиалогом.Дата КАК Дата,
	|	ДействияСДиалогом.Контакт КАК Контакт,
	|	ДействияСДиалогом.КонтактСсылка КАК КонтактСсылка,
	|	ДействияСДиалогом.СообщениеОснование КАК СообщениеОснование,
	|	ДействияСДиалогом.Действие КАК Действие,
	|	ДействияСДиалогом.ОписаниеДействия КАК ОписаниеДействия,
	|	ДействияСДиалогом.ОбъектДействия КАК ОбъектДействия,
	|	ДействияСДиалогом.Диалог КАК Диалог,
	|	ДействияСДиалогом.Важное КАК Важное,
	|	ДействияСДиалогом.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ СлужебныеСообщения
	|ИЗ
	|	ДействияСДиалогом КАК ДействияСДиалогом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	|	CRM_СообщениеМессенджера.Ссылка КАК ПолеСортировки,
	|	ВЫБОР
	|		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исходящее,
	|	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстСообщения КАК СТРОКА(1000)) КАК Текст,
	|	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстHTML КАК СТРОКА(1000)) КАК ТекстHTML,
	|	CRM_СообщениеМессенджера.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	|			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	|		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	|	КОНЕЦ + ВЫБОР
	|		КОГДА CRM_СообщениеМессенджера.ПолучателиПредставление = """"
	|			ТОГДА """"
	|		ИНАЧЕ "" -> "" + CRM_СообщениеМессенджера.ПолучателиПредставление
	|	КОНЕЦ КАК Контакт,
	|	ВЫБОР
	|		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	|			ТОГДА CRM_СообщениеМессенджера.Ответственный
	|		ИНАЧЕ CRM_СообщениеМессенджера.Контакт
	|	КОНЕЦ КАК КонтактСсылка,
	|	CRM_СообщениеМессенджера.СообщениеОснование КАК СообщениеОснование,
	|	NULL КАК Действие,
	|	NULL КАК ОписаниеДействия,
	|	NULL КАК ОбъектДействия,
	|	CRM_СообщениеМессенджера.Диалог КАК Диалог,
	|	CRM_СообщениеМессенджера.CRM_Избранный КАК Важное,
	|	NULL КАК Пользователь
	|ПОМЕСТИТЬ Сообщения
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
	|	И &Сообщение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СлужебныеСообщения.Ссылка,
	|	СлужебныеСообщения.ПолеСортировки,
	|	СлужебныеСообщения.Исходящее,
	|	СлужебныеСообщения.Текст,
	|	СлужебныеСообщения.ТекстHTML,
	|	СлужебныеСообщения.Дата,
	|	СлужебныеСообщения.Контакт,
	|	СлужебныеСообщения.КонтактСсылка,
	|	СлужебныеСообщения.СообщениеОснование,
	|	СлужебныеСообщения.Действие,
	|	СлужебныеСообщения.ОписаниеДействия,
	|	СлужебныеСообщения.ОбъектДействия,
	|	СлужебныеСообщения.Диалог,
	|	СлужебныеСообщения.Важное,
	|	СлужебныеСообщения.Пользователь
	|ИЗ
	|	СлужебныеСообщения КАК СлужебныеСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 25
	|	Сообщения.Ссылка КАК Ссылка,
	|	Сообщения.ПолеСортировки КАК ПолеСортировки,
	|	Сообщения.Исходящее КАК Исходящее,
	|	Сообщения.Текст КАК Текст,
	|	Сообщения.ТекстHTML КАК ТекстHTML,
	|	Сообщения.Контакт КАК Контакт,
	|	Сообщения.КонтактСсылка КАК КонтактСсылка,
	|	Сообщения.Дата КАК Дата,
	|	Сообщения.Действие КАК Действие,
	|	Сообщения.ОписаниеДействия КАК ОписаниеДействия,
	|	Сообщения.СообщениеОснование КАК СообщениеОснование,
	|	Сообщения.ОбъектДействия КАК ОбъектДействия,
	|	Сообщения.Диалог КАК Диалог,
	|	Сообщения.Важное КАК Важное,
	|	Сообщения.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ Сообщения20
	|ИЗ
	|	Сообщения КАК Сообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	ПолеСортировки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сообщения.Ссылка КАК Ссылка,
	|	Сообщения.ПолеСортировки КАК ПолеСортировки,
	|	Сообщения.Исходящее КАК Исходящее,
	|	Сообщения.Текст КАК Текст,
	|	Сообщения.ТекстHTML КАК ТекстHTML,
	|	Сообщения.Дата КАК Дата,
	|	Сообщения.Контакт КАК Контакт,
	|	Сообщения.КонтактСсылка КАК КонтактСсылка,
	|	Сообщения.СообщениеОснование КАК СообщениеОснование,
	|	Сообщения.Действие КАК Действие,
	|	Сообщения.ОписаниеДействия КАК ОписаниеДействия,
	|	Сообщения.ОбъектДействия КАК ОбъектДействия,
	|	Сообщения.Диалог КАК Диалог,
	|	Сообщения.Важное КАК Важное,
	|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
	|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК Расширение,
	|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла,
	|	CRM_ЖурналДокументов.CRM_Интерес КАК Интерес,
	|	Сообщения.Пользователь КАК Пользователь
	|ИЗ
	|	Сообщения20 КАК Сообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
	|		ПО (CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = Сообщения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|		ПО (CRM_ЖурналДокументов.Объект = Сообщения.Диалог)
	|			И (CRM_ЖурналДокументов.ОсновнойИнтерес)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	ПолеСортировки УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ПолеСортировки),
	|	МАКСИМУМ(Исходящее),
	|	МАКСИМУМ(Текст),
	|	МАКСИМУМ(ТекстHTML),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Контакт),
	|	МАКСИМУМ(КонтактСсылка),
	|	МАКСИМУМ(СообщениеОснование),
	|	МАКСИМУМ(Действие),
	|	МАКСИМУМ(ОписаниеДействия),
	|	МАКСИМУМ(ОбъектДействия),
	|	МАКСИМУМ(Пользователь),
	|	МАКСИМУМ(Диалог),
	|	МАКСИМУМ(Важное),
	|	МАКСИМУМ(Интерес)
	|ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ПередСообщением) Тогда
		Запрос.УстановитьПараметр("Сообщение",		ПередСообщением);
		Запрос.УстановитьПараметр("ДатаСообщения",	ПередСообщением.Дата);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение",
			"CRM_СообщениеМессенджера.Дата <= &ДатаСообщения И CRM_СообщениеМессенджера.Ссылка <> &Сообщение");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", "CRM_ДиалогиДействияСДиалогом.Дата < &ДатаСообщения");
	Иначе
		Запрос.УстановитьПараметр("Сообщение",	Истина);
		Запрос.УстановитьПараметр("Действие",	Истина);
	КонецЕсли;
	
	МассивДиалогов = ЗапросМассиваДиалоговНаСервере(
		Обращение.Группа,
		Обращение.Ответственный,
		Обращение.УчетнаяЗапись,
		Обращение.Статус,
		Обращение.ID_Пользователя);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОграничениеСлужебныхСообщений",
		"ВЫБОР КОГДА CRM_ДиалогиДействияСДиалогом.Ссылка = &ТекущийДиалог ТОГДА "
		+ "ИСТИНА ИНАЧЕ CRM_ДиалогиДействияСДиалогом.Действие В(&МассивИнформационныхДействий) КОНЕЦ");
	
	Запрос.УстановитьПараметр("ТекущийДиалог", СодержимоеОснования_ТекущийДиалог);
	
	МассивИнформационныхДействий = Новый Массив;
	МассивИнформационныхДействий.Добавить(Перечисления.CRM_ДействияСДиалогами.ПринятоОбращение);
	МассивИнформационныхДействий.Добавить(Перечисления.CRM_ДействияСДиалогами.СозданаЗадача);
	
	Запрос.УстановитьПараметр("МассивИнформационныхДействий",	МассивИнформационныхДействий);
	Запрос.УстановитьПараметр("МассивДиалогов",					МассивДиалогов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ПрямойОбход И Выборка.Количество() > 0 Тогда
		ПоследнееСообщение = Выборка.Ссылка;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		МассивФайлов = Новый Массив;
		ВыборкаФайлы = Выборка.Выбрать();
		
		Пока ВыборкаФайлы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаФайлы.Файл) Тогда
				image = "";
				РазмерыКартинки = Неопределено;
				
				Если СтрНайти(ВРег("jpeg,jpg,gif,png"), ВРег(ВыборкаФайлы.Расширение)) > 0 Тогда
					ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлы.Файл, Ложь);
					
					Если ДвоичныеДанныеКартинки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					image = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
					СодержимоеОснования_АдресаТекущихКартинокДиалога.Добавить(image);
					
					КартинкаИзДвоичныхДанных = Новый Картинка(ДвоичныеДанныеКартинки);
					РазмерыКартинки = Новый Структура(
						"height, width",
						КартинкаИзДвоичныхДанных.Высота(), КартинкаИзДвоичныхДанных.Ширина());
				Иначе	
					ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ВыборкаФайлы.Расширение);
					image = СодержимоеОснования_СписокИконокФайлов[ИндексКартинки / 2].Представление;
				КонецЕсли;
				
				СтруктураМассиваФайлов = Новый Структура;
				СтруктураМассиваФайлов.Вставить("file",		ВыборкаФайлы.ИмяФайла);
				СтруктураМассиваФайлов.Вставить("guid",		Строка(ВыборкаФайлы.Файл.УникальныйИдентификатор()));
				СтруктураМассиваФайлов.Вставить("image",	image);
				
				Если РазмерыКартинки <> Неопределено Тогда
					СтруктураМассиваФайлов.Вставить("size", РазмерыКартинки);
				КонецЕсли;
				
				МассивФайлов.Добавить(СтруктураМассиваФайлов);
			КонецЕсли;
		КонецЦикла;
		
		Служебное	= ЗначениеЗаполнено(Выборка.Действие);
		ЭтоHTML		= ЗначениеЗаполнено(Выборка.ТекстHTML);
		
		ИспользуемыйФорматВремени = ?(
			НачалоДня(Выборка.Дата) = НачалоДня(ТекущаяДатаСеанса()),
			"ДФ=HH:mm",
			"ДФ='dd MMMM HH:mm'");
		
		ПолеTime = Формат(
			Выборка.Дата,
			ИспользуемыйФорматВремени);
		
		ПолеContact	= ?(
			ЗначениеЗаполнено(Выборка.Контакт),
			Строка(Выборка.Контакт),
			"");
		
		ПолеContactRef = ?(
			ЗначениеЗаполнено(Выборка.КонтактСсылка),
			ПолучитьНавигационнуюСсылку(Выборка.КонтактСсылка),
			"");
		
		ПолеText = ?(
			Служебное,
			?(ЗначениеЗаполнено(Выборка.ОписаниеДействия), Выборка.ОписаниеДействия, Строка(Выборка.Действие)),
			?(ЭтоHTML, Выборка.ТекстHTML, Выборка.Текст));
		
		ПолеOut		= Выборка.Исходящее;
		ПолеService	= Служебное;
		
		ПолеGUID = ?(
			Служебное,
			Строка(Выборка.Диалог.УникальныйИдентификатор()) + "_" + Строка(Выборка.ПолеСортировки),
			Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		
		ПолеIsFav			= Выборка.Важное;
		ПолеAttachments		= МассивФайлов;
		ПолеIsHTML			= ЭтоHTML;
		
		ПолеLeadRef = ?(
			ЗначениеЗаполнено(Выборка.Интерес),
			ПолучитьНавигационнуюСсылку(Выборка.Интерес),
			"");
		
		ПолеLeadDescr = ?(
			ЗначениеЗаполнено(Выборка.Интерес),
			Строка(Выборка.Интерес),
			"");
		
		НовСообщение = Новый Структура;
		НовСообщение.Вставить("time",			ПолеTime);
		НовСообщение.Вставить("contact",		ПолеContact);
		НовСообщение.Вставить("contactRef",		ПолеContactRef);
		НовСообщение.Вставить("text",			ПолеText);
		НовСообщение.Вставить("out",			ПолеOut);
		НовСообщение.Вставить("service",		ПолеService);
		НовСообщение.Вставить("guid",			ПолеGUID);
		НовСообщение.Вставить("isFav",			ПолеIsFav);
		НовСообщение.Вставить("attachments",	ПолеAttachments);
		НовСообщение.Вставить("isHTML",			ПолеIsHTML);
		НовСообщение.Вставить("leadRef",		ПолеLeadRef);
		НовСообщение.Вставить("lead_descr",		ПолеLeadDescr);
		
		Если Служебное
				И Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.ДобавленСоисполнитель
				Или Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.УдаленСоисполнитель Тогда
			ЭтоHTML = Истина;
			
			Если ЗначениеЗаполнено(Выборка.Пользователь) И ЗначениеЗаполнено(Выборка.ОбъектДействия) Тогда
				ШаблонОбъектовДействия = "<a href='%1' class='chat__info-link'>%2</a>";
				
				Если Выборка.Пользователь = Выборка.ОбъектДействия Тогда
					ЗаполненныйШаблонСоисполнителя = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.ОбъектДействия),
						Строка(Выборка.ОбъектДействия));
					
					НовСообщение["text"] = СтрШаблон(
						НСтр("ru = 'Соисполнитель %1 покинул беседу';en='The co-executor %1 left the conversation'"),
						ЗаполненныйШаблонСоисполнителя);
				Иначе
					ШаблонОписанияДействия = ?(
						Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.ДобавленСоисполнитель,
						НСтр("ru = 'Ответственным %1 добавлен соисполнитель %2';en='Responsible %1 added co-executor %2'"),
						НСтр("ru = 'Ответственным %1 удален соисполнитель %2';en='Responsible %1 removed co-executor %2'"));
					
					ЗаполненныйШаблонОтветственного = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.Пользователь),
						Строка(Выборка.Пользователь));
					
					ЗаполненныйШаблонСоисполнителя = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.ОбъектДействия),
						Строка(Выборка.ОбъектДействия));
					
					НовСообщение["text"] =
						СтрШаблон(ШаблонОписанияДействия, ЗаполненныйШаблонОтветственного, ЗаполненныйШаблонСоисполнителя);
				КонецЕсли;
				
				// Тип сообщения - добавление/удаления соисполнители.
				НовСообщение.Вставить("msgType", 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СообщениеОснование) Тогда
			Основание = Выборка.СообщениеОснование;
			
			ПолеReplyMessage_time = Формат(
				Основание.Дата,
				?(НачалоДня(Основание.Дата) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'"));
			
			ПолеReplyMessage_contact = ?(
				Основание.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее,
				Основание.Диалог.Ответственный.Наименование,
				Основание.КонтактПредставление);
			
			ПолеReplyMessage_text = ?(
				ЗначениеЗаполнено(Основание.ТекстСообщения),
				Основание.ТекстСообщения,
				НСтр("ru = 'Файл...'; en = 'File...'"));
			
			ПолеReplyMessage_guid = Строка(Основание.УникальныйИдентификатор());
			
			ПолеReplyMessage = Новый Структура;
			ПолеReplyMessage.Вставить("time",		ПолеReplyMessage_time);
			ПолеReplyMessage.Вставить("contact",	ПолеReplyMessage_contact);
			ПолеReplyMessage.Вставить("text",		ПолеReplyMessage_text);
			ПолеReplyMessage.Вставить("guid",		ПолеReplyMessage_guid);
			
			НовСообщение.Вставить("reply_message", ПолеReplyMessage);
		КонецЕсли;
		
		Если ПрямойОбход Тогда
			Если Не ЗначениеЗаполнено(Выборка.Действие) Тогда
				Если НЕ ЗначениеЗаполнено(ПоследнееСообщение) Тогда
					ПоследнееСообщение = Выборка.Ссылка;
				КонецЕсли;
				
				СодержимоеОснования_ПервоеСообщение = Выборка.Ссылка;
			КонецЕсли;
			
			МассивСообщений.Вставить(0, НовСообщение);
		Иначе	
			Если Не ЗначениеЗаполнено(Выборка.Действие) Тогда
				СодержимоеОснования_ПервоеСообщение = Выборка.Ссылка;
			КонецЕсли;
			
			МассивСообщений.Добавить(НовСообщение);
		КонецЕсли;
	КонецЦикла;
	
	Количество = МассивСообщений.Количество();
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросМассиваДиалоговНаСервере(
		ТекущаяГруппа,
		ТекущийПользователь,
		ТекущаяУчетнаяЗапись,
		ТекущийСтатус,
		ТекущийID_Пользователя)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Диалоги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Диалоги КАК CRM_Диалоги
	|ГДЕ
	|	CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	|	И CRM_Диалоги.Группа = &Группа
	|	И CRM_Диалоги.ID_Пользователя = &ID_Пользователя
	|	И НЕ CRM_Диалоги.Служебный
	|	И ВЫБОР
	|			КОГДА &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ CRM_Диалоги.Ответственный В (&МассивОтветственный)
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Статус В (&СтатусыЗакрытПередан)
	|				ТОГДА CRM_Диалоги.Статус = &Статус
	|			ИНАЧЕ CRM_Диалоги.Статус <> ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПереданДляОзнакомления)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Завершен,
	|	CRM_Диалоги.ДатаЗавершения УБЫВ,
	|	CRM_Диалоги.ДатаНачала УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивОтветственный = Новый Массив;
	МассивОтветственный.Добавить(ТекущийПользователь);
	МассивОтветственный.Добавить(Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивОтветственный",	МассивОтветственный);
	Запрос.УстановитьПараметр("Группа",			ТекущаяГруппа);
	Запрос.УстановитьПараметр("Ответственный",	ТекущийПользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись",	ТекущаяУчетнаяЗапись);
	
	Если ТекущаяУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия 
			ИЛИ ТекущаяУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_Диалоги.ID_Пользователя = &ID_Пользователя", "");
	Иначе
		Запрос.УстановитьПараметр("ID_Пользователя", ТекущийID_Пользователя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Статус", ТекущийСтатус);
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.CRM_СтатусыДиалогов.Закрыт);
	МассивСтатусов.Добавить(Перечисления.CRM_СтатусыДиалогов.ПереданДляОзнакомления);
	Запрос.УстановитьПараметр("СтатусыЗакрытПередан", МассивСтатусов);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ЗапросМассиваДиалоговНаСервере()

&НаСервере
Процедура ИнициализироватьДокументHTMLМессенджера()
	
	Макет = ?(
		ОбщегоНазначения.ЭтоLinuxКлиент() И Не ОбщегоНазначения.ЭтоВебКлиент(),
		Обработки.CRM_Мессенджер.ПолучитьМакет("Диалог_HTML_Linux"),
		Обработки.CRM_Мессенджер.ПолучитьМакет("Диалог_HTML_Windows"));
	
	ТекстHTML = Макет.ПолучитьТекст();
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_Библиотека_Смайликов, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/smiles.png", ПутьККартинке);
	
	МакетКодовСмайликов = Обработки.CRM_Мессенджер.ПолучитьМакет("Распознавание_смайликов");
	ТекстHTML = СтрЗаменить(ТекстHTML, "<SMILES_REGEXP_AND_CODES>", МакетКодовСмайликов.ПолучитьТекст());
	
	МакетСмещенияСмайликов = Обработки.CRM_Мессенджер.ПолучитьМакет("Стили_смещения_для_смайликов");
	ТекстHTML = СтрЗаменить(ТекстHTML, "<SMILES_OFFSET_STYLES>", МакетСмещенияСмайликов.ПолучитьТекст());
	
	СодержимоеОснования_НастройкаОформленияМессенджера =
		CRM_РаботаСМессенджерамиСервер.ПолучитьОформлениеМессенджераПоПользователю(ТекущийПользователь);
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "/* {{CRM:CUSTOMIZE:STYLES}} */",
		CRM_РаботаСМессенджерамиСервер.ПолучитьСтилиОформленияМессенджера(СодержимоеОснования_НастройкаОформленияМессенджера));
	
	Если СтрНайти(ТекстHTML, "<BACKGROUND_PATTERN>") > 0 Тогда
		ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
			БиблиотекаКартинок.CRM_ПаттернФонаМессенджера, УникальныйИдентификатор);
		ТекстHTML = СтрЗаменить(ТекстHTML, "<BACKGROUND_PATTERN>", ПутьККартинке);
	КонецЕсли;
	
	// Заполняем массив с картинками расширений файлов
	Для ИндексКартинки = 0 По 38 Цикл
		НаименованиеКартинки	= "CRM_ИконкаТипаФайла_" + ИндексКартинки * 2;
		КартинкаПомещения		= БиблиотекаКартинок[НаименованиеКартинки];
		
		СодержимоеОснования_СписокИконокФайлов.Добавить(
			КартинкаПомещения, CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
				КартинкаПомещения, УникальныйИдентификатор));
	КонецЦикла;
	
	СодержимоеОснованияHTML				= ТекстHTML;
	СодержимоеОснования_ТекущийДиалог	= Обращение;
	
КонецПроцедуры // ИнициализироватьДокументHTMLМессенджера()

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивИменЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей         = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивИменЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечиПоиск(Команда)
	
	ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_Поиск";
	РаспознаваниеРечи(Элементы.РаспознаваниеРечиПоиск);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечиВвод(Команда)
	
	ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_Ввод";
	РаспознаваниеРечи(Элементы.РаспознаваниеРечиВвод);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Элемент)
	
	МассивИменЭлементов   = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей           = РаспознаваниеРечи_МассивПолей();
	ИмяОперацииСтатистики = "CRM_Статистика.ГолосовойВвод.МастерРегистрацииОбращенияГолосовойВводНажатие";
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элемент);
	Контекст.Вставить("ТекущийЭлемент",                   Элемент);
	Контекст.Вставить("ИмяРеквизита",                     Элемент.Имя);
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	Контекст.Вставить("ИмяОперацииСтатистики",            ИмяОперацииСтатистики);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаГолосовогоВвода", ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"]);
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	Если ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_Поиск"
		И Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		
		ЭтотОбъект[ИмяРеквизита] = "";
		ТекЭлемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	Если ТекЭлемент.Имя = "ФИО1" Тогда
		Контакт_ФИО = ТРег(Контакт_ФИО);
		ФИО1ПриИзменении(ТекЭлемент);
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект,
		Контекст.ТекущийЭлемент, Контекст.МассивКнопокРаспознавания);
	
	Если ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_Поиск" Тогда
		СтрокаПоискаПриИзменении(ТекЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РаспознаваниеРечи_МассивИменЭлементов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиПоиск");
	МассивЭлементов.Добавить("РаспознаваниеРечиВвод");
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	ИмяКомандыПоиск = "РаспознаваниеРечи_Поиск";
	ИмяКомандыВвод = "РаспознаваниеРечи_Ввод";
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска",     ИмяКомандыПоиск);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоискаДоп1", ИмяКомандыПоиск);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоискаДоп2", ИмяКомандыПоиск);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоискаДоп3", ИмяКомандыПоиск);
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ФИО",                       ИмяКомандыВвод);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема",                      ИмяКомандыВвод);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ФИО1",                      ИмяКомандыВвод);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Клиент_ОбъектНаименование", ИмяКомандыВвод);
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей,
		"Клиент_ОбъектНаименованиеПолное", ИмяКомандыВвод);
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Содержание", ИмяКомандыВвод);
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтветственного(Форма, ДополнительныеПараметры = Неопределено)
	
	Если Форма.ИзменениеОтветственного Тогда Возврат; КонецЕсли;
	
	Форма.Интерес.Ответственный = Неопределено;
	Для Каждого СтрВариантНазначения Из Форма.ТаблицаНазначенияОтветственного Цикл
		
		Если Не СтрВариантНазначения.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Форма.Интерес.Ответственный = ЗаполнитьОтветственногоПоВариантуНазначения(Форма,
			СтрВариантНазначения.Вариант, ДополнительныеПараметры);
		
		Если ЗначениеЗаполнено(Форма.Интерес.Ответственный) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьОтветственногоПоВариантуНазначения(Форма, Вариант, ДополнительныеПараметры = Неопределено)
	
	Результат = Неопределено;
	
	Если Вариант = ПредопределенноеЗначение("Перечисление.CRM_ВариантыНазначенияОтветственного.ПерсональнаяНастройка") Тогда
		Результат = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
	ИначеЕсли Вариант = ПредопределенноеЗначение("Перечисление.CRM_ВариантыНазначенияОтветственного.ТекущийПользователь") Тогда
		Результат = Форма.ТекущийПользователь;
	ИначеЕсли Вариант = ПредопределенноеЗначение("Перечисление.CRM_ВариантыНазначенияОтветственного.МенеджерКлиента") Тогда	
		Результат = ОсновнойМенеджерКлиента(Форма.Интерес.Партнер);
	ИначеЕсли Вариант = ПредопределенноеЗначение("Перечисление.CRM_ВариантыНазначенияОтветственного.РольСценария") Тогда	
		
		Пропустить = Ложь;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("НеУстанавливатьРоль") Тогда
			Пропустить = Истина;
		КонецЕсли;
		
		Если НЕ Пропустить Тогда
			ОтветственныйПоРолиПервичногоИнтереса = ОтветственныйПоРолиПервичногоСостояния(Форма.СценарийПродажи);
			Если ЗначениеЗаполнено(ОтветственныйПоРолиПервичногоИнтереса) Тогда
				Результат = ОтветственныйПоРолиПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Вариант = ПредопределенноеЗначение("Перечисление.CRM_ВариантыНазначенияОтветственного.ОтветственныйОбращения") Тогда	
		Результат = ОтветственныйОбращения(Форма.Обращение);		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтветственныйОбращения(Обращение)
	
	Если НЕ ЗначениеЗаполнено(Обращение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "Ответственный") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Обращение.Ответственный;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновнойМенеджерКлиента(Клиент)
	
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Клиент.ОсновнойМенеджер;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВариантыНазначенияОтветственного()
	
	ТаблицаИсточник = Обработки.CRM_МастерРегистрацииОбращения.ВариантыНазначенияОтветственного();
	
	ТаблицаНазначенияОтветственного.Очистить();
	Для Каждого СтрИсточник Из ТаблицаИсточник Цикл
		
		НС = ТаблицаНазначенияОтветственного.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеВыбораФИОНаСервере(СтрокаПоиска, ЭтоФамилия = Ложь, ЭтоИмя = Ложь,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СписокФИО = CRM_КлиентыСервер.ПолучитьДанныеВыбораФИО(СтрокаПоиска, ЭтоФамилия, ЭтоИмя);
	Если СписокФИО.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокФИО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИОКлиента(Команда)
	
	СтруктураЗаполнения = ЗаполнитьФИОНаСервере(Клиент_Объект.Наименование);
	Если (ЗначениеЗаполнено(Клиент_Объект.CRM_Фамилия) И Не Клиент_Объект.CRM_Фамилия = СтруктураЗаполнения.Клиент_ОбъектТекФамилия) 
		Или (ЗначениеЗаполнено(Клиент_Объект.CRM_Имя) И Не Клиент_Объект.CRM_Имя = СтруктураЗаполнения.Клиент_ОбъектТекИмя) 
		Или (ЗначениеЗаполнено(Клиент_Объект.CRM_Отчество) И Не Клиент_Объект.CRM_Отчество = СтруктураЗаполнения.Клиент_ОбъектТекОтчество) Тогда
			ТекстВопроса = НСтр("ru = 'Переписать ФИО?'");
			Ответ = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереписатьФИОЗавершение", ЭтотОбъект,
				 СтруктураЗаполнения), ТекстВопроса,
				 РежимДиалогаВопрос.ДаНет);
	Иначе
		ИзменитьТекущиеФИО(СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереписатьФИОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьТекущиеФИО(ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьФИОНаСервере(НаименованиеТекущее)
	
	СтруктураФИО = Новый Структура("Клиент_ОбъектТекФамилия, Клиент_ОбъектТекИмя, Клиент_ОбъектТекОтчество");
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее, 
		СтруктураФИО.Клиент_ОбъектТекФамилия, СтруктураФИО.Клиент_ОбъектТекИмя, СтруктураФИО.Клиент_ОбъектТекОтчество);
	Возврат СтруктураФИО;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТекущиеФИО(СтруктураЗаполнения)
	
	Клиент_Объект.CRM_Фамилия = СтруктураЗаполнения.Клиент_ОбъектТекФамилия;
	Клиент_Объект.CRM_Имя = СтруктураЗаполнения.Клиент_ОбъектТекИмя;
	Клиент_Объект.CRM_Отчество = СтруктураЗаполнения.Клиент_ОбъектТекОтчество;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИОКонтакта(Команда)
	
	СтруктураЗаполнения = ЗаполнитьФИОКонтактаНаСервере(Контакт_ФИО);
	Если (ЗначениеЗаполнено(Контакт_Фамилия) И Не Контакт_Фамилия = СтруктураЗаполнения.Контакт_Фамилия) 
		Или (ЗначениеЗаполнено(Контакт_Имя) И Не Контакт_Имя = СтруктураЗаполнения.Контакт_Имя) 
		Или (ЗначениеЗаполнено(Контакт_Отчество) И Не Контакт_Отчество = СтруктураЗаполнения.Контакт_Отчество) Тогда
			ТекстВопроса = НСтр("ru = 'Переписать ФИО?'");
			Ответ = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереписатьФИОКонтактаЗавершение", ЭтотОбъект,
				 СтруктураЗаполнения), ТекстВопроса,
				 РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереписатьФИОКонтактаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьФИОКонтактаНаСервере(НаименованиеТекущее)
	
	СтруктураФИО = Новый Структура("Контакт_Фамилия, Контакт_Имя, Контакт_Отчество");
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее, 
		СтруктураФИО.Контакт_Фамилия, СтруктураФИО.Контакт_Имя, СтруктураФИО.Контакт_Отчество);
	Возврат СтруктураФИО;
	
КонецФункции

&НаСервере
Процедура ОчиститьРеквизитыКонтакта()
	
	СтатусКЛ				= Справочники.CRM_СтатусыКонтактныхЛиц.ПустаяСсылка();
	Должность				= Справочники.CRM_Должности.ПустаяСсылка();
	ПолКонтактногоЛица		= Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	РольКонтактногоЛица		= Справочники.РолиКонтактныхЛицПартнеров.ПустаяСсылка();
	НомерМобильногоТелефона	= "";
	
	ДатаРожденияКЛ = Дата('00010101');
	
	Контакт_ФИО			= "";
	Контакт_Email		= "";
	Контакт_Телефон		= "";
	Контакт_Описание	= "";
	Контакт_Мессенджер	= "";
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаКонтейнерДопРеквизитовКонтактаЛевая.ПодчиненныеЭлементы Цикл
		ЭтотОбъект[ПодчиненныйЭлемент.Имя] = Неопределено;
	КонецЦикла;
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаКонтейнерДопРеквизитовКонтактаПравая.ПодчиненныеЭлементы Цикл
		ЭтотОбъект[ПодчиненныйЭлемент.Имя] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитыКонтакта()

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтактОбращения(ОбращениеОбъект, Контакт, Контакт_АдресЭП)
	
	Если ТипЗнч(ОбращениеОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Если Не ЗначениеЗаполнено(ОбращениеОбъект.ОтправительКонтакт) Тогда
			ОбращениеОбъект.ОтправительКонтакт = Контакт;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
				И ТипЗнч(ОбращениеОбъект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")
				И РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЭтоКлючевоеЛицо(
					ОбращениеОбъект.ОтправительКонтакт, Контакт) Тогда
			ОбращениеОбъект.ОтправительКонтакт = Контакт;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбращениеОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		СтруктураОтбор = Новый Структура("Адрес", Контакт_АдресЭП);
		НайденныеСтроки = ОбращениеОбъект.ПолучателиПисьма.НайтиСтроки(СтруктураОтбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрока = НайденныеСтроки[0];
			ТекСтрока.Контакт = Контакт;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТоварыИУслуги()
	
	// +CRM_Модуль
	ЭлементТовары = Элементы.Добавить("Товары", Тип("ТаблицаФормы"), Элементы.ГруппаТоварыИУслугиВнутр);
	ЭлементТовары.ПутьКДанным = "Интерес.Товары";
	ЭлементТовары.РастягиватьПоВертикали = Истина;
	ЭлементТовары.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	ЭлементТовары.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
	ЭлементТовары.УстановитьДействие("Выбор", "ТоварыВыбор");
	ЭлементТовары.УстановитьДействие("ПередНачаломДобавления", "ТоварыПередНачаломДобавления");
	ЭлементТовары.УстановитьДействие("ПередУдалением", "ТоварыПередУдалением");
	ЭлементТовары.УстановитьДействие("ПриНачалеРедактирования", "ТоварыПриНачалеРедактирования");
	ЭлементТовары.УстановитьДействие("ПриОкончанииРедактирования", "ТоварыПриОкончанииРедактирования");
	ЭлементТовары.УстановитьДействие("ПослеУдаления", "ТоварыПослеУдаления");
	
	Элементы.Переместить(ЭлементТовары, Элементы.ГруппаТоварыИУслугиВнутр, Элементы.ГруппаВсего);
	
	// Номер строки
	НовоеПоле = Элементы.Добавить("ТоварыНомерСтроки", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "Интерес.Товары.НомерСтроки";
	НовоеПоле.Ширина = 2;
	
	ТоварыГруппаСодержание = Элементы.Добавить("ТоварыГруппаНоменклатураСодержание", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаСодержание.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаСодержание.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ТоварыГруппаНоменклатураХарактеристика = Элементы.Добавить(
		"ТоварыГруппаНоменклатураХарактеристика", Тип("ГруппаФормы"), ТоварыГруппаСодержание);
	ТоварыГруппаНоменклатураХарактеристика.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНоменклатураХарактеристика.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	// Номенклатура
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатура", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Номенклатура";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыНоменклатураПриИзменении");
	НовоеПоле.Ширина = 16;
	
	// Характеристика
	НовоеПоле = Элементы.Добавить("ТоварыХарактеристика", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Характеристика";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыХарактеристикаПриИзменении");
	НовоеПоле.Ширина = 16;
	
	// Тип номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураТипНоменклатуры", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.Номенклатура.ТипНоменклатуры";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 7;
	НовоеПоле.Заголовок = НСтр("ru = 'Тип'");
	
	// Код номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураКод", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Номенклатура.Код";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 16;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Видимость = Ложь;
	
	// Артикул номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураАртикул", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Артикул";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 16;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Видимость = Ложь;
	
	// Содержание
	НовоеПоле = Элементы.Добавить("ТоварыСодержание", Тип("ПолеФормы"), ТоварыГруппаСодержание);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Содержание";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("НачалоВыбора", "ТоварыСодержаниеНачалоВыбора");
	
	// Индекс набора
	НовоеПоле = Элементы.Добавить("ТоварыИндексНабора", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.ИндексНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Наборы;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Набор;
	
	// Наборы
	ТоварыГруппаНаборы = Элементы.Добавить("ТоварыГруппаНаборы", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаНаборы.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНаборы.Группировка = ГруппировкаКолонок.ВЯчейке;
	ТоварыГруппаНаборы.ОтображатьВШапке = Истина;
	ТоварыГруппаНаборы.ОтображатьЗаголовок = Истина;
	ТоварыГруппаНаборы.Заголовок = НСтр("ru = 'Наборы'");
	ТоварыГруппаНаборы.Видимость = Ложь;
	
	// Номенклатура набора
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураНабора", Тип("ПолеФормы"), ТоварыГруппаНаборы);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.НоменклатураНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ОтображатьВШапке = Ложь;
	
	// Характеристика набора
	НовоеПоле = Элементы.Добавить("ТоварыХарактеристикаНабора", Тип("ПолеФормы"), ТоварыГруппаНаборы);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.ХарактеристикаНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ОтображатьВШапке = Ложь;
	
	// Количество и единицы измерения
	ТоварыГруппаКоличествоЕдиницаИзмерения = Элементы.Добавить(
		"ТоварыГруппаКоличествоЕдиницаИзмерения", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаКоличествоЕдиницаИзмерения.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаКоличествоЕдиницаИзмерения.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаКоличествоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	
	//Количество упаковок
	НовоеПоле = Элементы.Добавить("ТоварыКоличествоУпаковок", Тип("ПолеФормы"), ТоварыГруппаКоличествоЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.КоличествоУпаковок";
	НовоеПоле.ПутьКДаннымПодвала = "Интерес.Товары.ИтогКоличествоУпаковок";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 8;
	НовоеПоле.Заголовок = НСтр("ru = 'Количество'");
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыКоличествоУпаковокПриИзменении");
	
	// Упаковка и единица измерения
	ТоварыУпаковкаЕдиницаИзмерения = Элементы.Добавить(
		"ТоварыУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), ТоварыГруппаКоличествоЕдиницаИзмерения);
	ТоварыУпаковкаЕдиницаИзмерения.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыУпаковкаЕдиницаИзмерения.Группировка = ГруппировкаКолонок.ВЯчейке;
	ТоварыУпаковкаЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	
	// Упаковка
	НовоеПоле = Элементы.Добавить("ТоварыУпаковка", Тип("ПолеФормы"), ТоварыУпаковкаЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Упаковка";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 10;
	НовоеПоле.ОтображатьВШапке = Ложь;
	НовоеПоле.Заголовок = НСтр("ru = 'Упаковка'");
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыУпаковкаПриИзменении");
	
	// Единица измерения
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"),
		ТоварыУпаковкаЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.Номенклатура.ЕдиницаИзмерения";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Заголовок = НСтр("ru = 'Ед. изм.'");
	НовоеПоле.Ширина = 8;
	
	// Вид цены
	НовоеПоле = Элементы.Добавить("ТоварыВидЦены", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.ВидЦены";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 16;
	НовоеПоле.КнопкаВыпадающегоСписка = Истина;
	НовоеПоле.КнопкаВыбора = Истина;
	НовоеПоле.КнопкаОчистки = Истина;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыВидЦеныПриИзменении");
	
	СвязиПараметровВыбораПоля = Новый Массив;
	
	СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор.ЦенаВключаетНДС", "Интерес.ЦенаВключаетНДС");
	СвязиПараметровВыбораПоля.Добавить(СвязьПараметраВыбора);
	
	НовоеПоле.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораПоля);
	
	ПараметрыВыбораПоля = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	НовоеПоле.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
	
	// Цена
	НовоеПоле = Элементы.Добавить("ТоварыЦена", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.Цена";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыЦенаПриИзменении");
	НовоеПоле.Ширина = 9;
	
	// Процент скидок
	ТоварыГруппаПроцентСкидок = Элементы.Добавить(
		"ТоварыГруппаПроцентСкидок", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаПроцентСкидок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаПроцентСкидок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаПроцентСкидок.РастягиватьПоГоризонтали = Ложь;
	
	// Процент ручной скидки
	НовоеПоле = Элементы.Добавить("ТоварыПроцентРучнойСкидки", Тип("ПолеФормы"), ТоварыГруппаПроцентСкидок);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.ПроцентРучнойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыПроцентРучнойСкидкиПриИзменении");
	НовоеПоле.Ширина = 6;
	НовоеПоле.Заголовок = НСтр("ru = '% руч.'");
	
	// Процент автоматической скидки
	НовоеПоле = Элементы.Добавить("ТоварыПроцентАвтоматическойСкидки", Тип("ПолеФормы"), ТоварыГруппаПроцентСкидок);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.ПроцентАвтоматическойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 6;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Сумма скидок
	ТоварыГруппаСуммыСкидок = Элементы.Добавить(
		"ТоварыГруппаСуммыСкидок", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаСуммыСкидок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаСуммыСкидок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаСуммыСкидок.РастягиватьПоГоризонтали = Ложь;
	
	// Сумма ручной скидки
	НовоеПоле = Элементы.Добавить("ТоварыСуммаРучнойСкидки", Тип("ПолеФормы"), ТоварыГруппаСуммыСкидок);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.СуммаРучнойСкидки";
	НовоеПоле.ПутьКДаннымПодвала = "Интерес.Товары.ИтогСуммаРучнойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаРучнойСкидкиПриИзменении");
	НовоеПоле.Ширина = 9;
	НовоеПОле.ПропускатьПриВводе = Истина;
	
	// Сумма автоматической скидки
	НовоеПоле = Элементы.Добавить("ТоварыСуммаАвтоматическойСкидки", Тип("ПолеФормы"), ТоварыГруппаСуммыСкидок);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.СуммаАвтоматическойСкидки";
	НовоеПоле.ПутьКДаннымПодвала = "Интерес.Товары.ИтогСуммаАвтоматическойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 9;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Сумма
	НовоеПоле = Элементы.Добавить("ТоварыСумма", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.Сумма";
	НовоеПоле.ПутьКДаннымПодвала = "Интерес.Товары.ИтогСумма";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаПриИзменении");
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Ширина = 9;
	НовоеПОле.ПропускатьПриВводе = Истина;
	
	// НДС
	ТоварыГруппаНДС = Элементы.Добавить(
		"ТоварыГруппаНДС", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаНДС.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНДС.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаНДС.РастягиватьПоГоризонтали = Ложь;
	
	// Сумма НДС
	НовоеПоле = Элементы.Добавить("ТоварыСуммаНДС", Тип("ПолеФормы"), ТоварыГруппаНДС);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.СуммаНДС";
	НовоеПоле.ПутьКДаннымПодвала = "Интерес.Товары.ИтогСуммаНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаНДСПриИзменении");
	НовоеПоле.Ширина = 9;
	НовоеПоле.ПропускатьПриВводе = Истина;
	НовоеПоле.Заголовок = НСтр("ru = 'НДС'");
	
	// Ставка НДС
	НовоеПоле = Элементы.Добавить("ТоварыСтавкаНДС", Тип("ПолеФормы"), ТоварыГруппаНДС);
	НовоеПоле.ПутьКДанным = "Интерес.Товары.СтавкаНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСтавкаНДСПриИзменении");
	НовоеПоле.Ширина = 9;
	
	// Сумма с НДС
	НовоеПоле = Элементы.Добавить("ТоварыСуммаСНДС", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.СуммаСНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Ширина = 9;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Склад
	НовоеПоле = Элементы.Добавить("ТоварыСклад", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.Склад";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	
	// Комментарий для покупателя
	НовоеПоле = Элементы.Добавить("ТоварыКомментарийДляПокупателя", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.КомментарийДляПокупателя";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Заголовок = НСтр("ru = 'Доп. информация для покупателя'");
	
	// Комментарий для покупателя
	НовоеПоле = Элементы.Добавить("ТоварыКомментарийВнутренний", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Интерес.Товары.КомментарийВнутренний";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Заголовок = НСтр("ru = 'Комментарий (внутренний)'");
	
	// Цены и скидки
	ГруппаЦеныСкидки = Элементы.Добавить("ГруппаЦеныСкидки", Тип("ГруппаФормы"), ЭлементТовары.КоманднаяПанель);
	ГруппаЦеныСкидки.Вид = ВидГруппыФормы.Подменю;
	ГруппаЦеныСкидки.Заголовок = НСтр("ru = 'Цены и скидки'");
	
	ГруппаТоварыЦены = Элементы.Добавить("ГруппаТоварыЦены", Тип("ГруппаФормы"), ГруппаЦеныСкидки);
	ГруппаТоварыЦены.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗаполнитьЦеныПоСоглашению", Тип("КнопкаФормы"), ГруппаТоварыЦены);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗаполнитьЦеныПоСоглашению";
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен",
		Тип("КнопкаФормы"), ГруппаТоварыЦены);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен";
	
	ГруппаТоварыСкидкиНаценки = Элементы.Добавить("ГруппаТоварыСкидкиНаценки", Тип("ГруппаФормы"), ГруппаЦеныСкидки);
	ГруппаТоварыСкидкиНаценки.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыРассчитатьСкидкиНаценки", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "РассчитатьСкидкиНаценки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьАвтоматическиеСкидки",
		Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьАвтоматическиеСкидки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьРучнуюСкидку", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьРучнуюСкидку";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок",
		Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьРучнуюСкидкуВыделенныхСтрок";
	
	НоваяКнопка = Элементы.Добавить("ТоварыОтменитьРучныеСкидки", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОтменитьРучныеСкидки";
	
	ГруппаТоварыИнформацияОСкидках = Элементы.Добавить("ГруппаТоварыИнформацияОСкидках",
		Тип("ГруппаФормы"), ГруппаТоварыСкидкиНаценки);
	ГруппаТоварыИнформацияОСкидках.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыОткрытьИнформациюОСкидках",
		Тип("КнопкаФормы"), ГруппаТоварыИнформацияОСкидках);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОткрытьИнформациюОСкидках";
	
	// Подобрать товары
	ГруппаТоварыПодобратьТовары = Элементы.Добавить("ГруппаТоварыПодобратьТовары",
		Тип("ГруппаФормы"), ЭлементТовары.КоманднаяПанель);
	ГруппаТоварыПодобратьТовары.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ТоварыГруппаЗаполнить = Элементы.Добавить("ТоварыГруппаЗаполнить",
		Тип("ГруппаФормы"), ГруппаТоварыПодобратьТовары);
	ТоварыГруппаЗаполнить.Вид = ВидГруппыФормы.Подменю;
	ТоварыГруппаЗаполнить.Заголовок = НСтр("ru = 'Заполнить'");
	
	НоваяКнопка = Элементы.Добавить("ТоварыОткрытьПодбор",
		Тип("КнопкаФормы"), ТоварыГруппаЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОткрытьПодбор";
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗагрузитьИзВнешнегоФайла",
		Тип("КнопкаФормы"), ТоварыГруппаЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗагрузитьИзВнешнегоФайла";
	
	НоваяКнопка = Элементы.Добавить("ТоварыПоискПоШтрихкоду",
		Тип("КнопкаФормы"), ГруппаТоварыПодобратьТовары);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ПоискПоШтрихкоду";
	
	НоваяКнопка = Элементы.Добавить("ТоварыСоставНабора",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СоставНабора";
	
	НоваяКнопка = Элементы.Добавить("ТоварыРазбитьСтроку",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "РазбитьСтроку";
	
	НоваяКнопка = Элементы.Добавить("ТоварыВставитьСтроки",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ВставитьСтроки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыСкопироватьСтроки",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СкопироватьСтроки";
	
	НоваяКнопка = Элементы.Добавить("ПоказатьСообщения",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ПоказатьСообщения";
	НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НоваяКнопка.Заголовок = НСтр("ru = 'Есть сообщения'");
	
	УстановитьУсловноеОформлениеТоваров();
	
	НастроитьКомандуПоказатьСообщения(Интерес, Элементы.ПоказатьСообщения);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	Элементы.ТоварыСклад.Видимость = ИспользоватьСкладыВТЧ;

	Элемент = Элементы.Найти("ТоварыИтогСумма");
	Если Элемент = Неопределено Тогда
		Элемент = Элементы.Вставить("ТоварыИтогСумма", Тип("ПолеФормы"),
			Элементы.Найти("ГруппаВсего"), Элементы.Найти("ГруппаПерезаполнитьОжидаемуюВыручку"));
		Элемент.ПутьКДанным = "Интерес.Товары.ИтогСуммаСНДС";
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = Истина;
		Элемент.ТолькоПросмотр = Истина;
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьКомандуПоказатьСообщения(Объект, ЭлементФормы, Видимость = Истина) Экспорт
	
	СтруктураСообщений = СтруктураСообщенийВн(Объект);
	ВсегоСообщений = СтруктураСообщений.Сообщения.Количество();
	НепрочитанныхСообщений = 0;
	Для Каждого СтрокаТЧ Из СтруктураСообщений.Сообщения Цикл
		Если СтрокаТЧ.НапомнитьПозже Тогда
			НепрочитанныхСообщений = НепрочитанныхСообщений + 1;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормы.Видимость = ВсегоСообщений > 0 И Видимость;
	Если НепрочитанныхСообщений > 0 Тогда
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Показать непрочитанные сообщения (%1)'"), НепрочитанныхСообщений);
	Иначе
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Показать сообщения (%1)'"), СтруктураСообщений.Сообщения.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьКомандуТоварыИУслуги(Показать) 
	Элементы.Навигация_ТоварыИУслуги1.Видимость = Показать;
КонецПроцедуры

#Область Товары


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьЗаголовокГруппыТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		ПередУдалениемСтрокиТабличнойЧасти(Отказ, Истина);
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	НоваяСтрока.Склад = Интерес.Склад;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТабличнойЧасти(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемСтрокиТабличнойЧасти(Отказ, Копирование = Ложь, ИмяОбработчикаОповещения = "ПриУдаленииКомплектующих") Экспорт
	
	ТЧ = Интерес.Товары;
	
	ЭлементТЧ = Элементы.Найти("Товары");
	Если ЭлементТЧ = Неопределено
		Или ЭлементТЧ.ВыделенныеСтроки.Количество() = ТЧ.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУдаления = Новый Структура;
	ПараметрыУдаления.Вставить("Наборы", Новый Массив);
	ПараметрыУдаления.Вставить("Прочее", Новый Массив);
	ПараметрыУдаления.Вставить("ИмяТЧ", "Товары");
	ПараметрыУдаления.Вставить("Копирование", Копирование);
	
	ПроверятьКодСтроки = Ложь;
	
	НайденНабор = Ложь;
	Для каждого ИдентификаторВыделеннойСтроки Из ЭлементТЧ.ВыделенныеСтроки Цикл
		СтрокаТЧ = ТЧ.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "НоменклатураНабора")
			И ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора)
			И ( Не ПроверятьКодСтроки
			   ИЛИ (ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "КодСтроки") И СтрокаТЧ.КодСтроки = 0)
			   ИЛИ НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "КодСтроки")) Тогда
			НайденНабор = Истина;
			
			ПараметрыНабора = Новый Структура;
			ПараметрыНабора.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
			ПараметрыНабора.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "ЗаказКлиента") Тогда
				ПараметрыНабора.Вставить("ЗаказКлиента", СтрокаТЧ.ЗаказКлиента);
			КонецЕсли;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "ДокументРеализации") Тогда
				ПараметрыНабора.Вставить("ДокументРеализации", СтрокаТЧ.ДокументРеализации);
			КонецЕсли;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "КодСтроки") И СтрокаТЧ.КодСтроки = 0 Тогда
				ПараметрыНабора.Вставить("КодСтроки", 0);
			КонецЕсли;
			
			НаборДобавлен = Ложь;
			Для Каждого СтрокаНабора Из ПараметрыУдаления.Наборы Цикл
				ЕстьОтличия = Ложь;
				Для Каждого КлючИЗначение Из ПараметрыНабора Цикл
					Если СтрокаНабора[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьОтличия Тогда
					НаборДобавлен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НаборДобавлен Тогда
				ПараметрыУдаления.Наборы.Добавить(ПараметрыНабора);
			КонецЕсли;
			
		Иначе
			ПараметрыУдаления.Прочее.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если НайденНабор Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчикаОповещения, ЭтотОбъект, ПараметрыУдаления);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.УдалениеСтрокиНабора",
			ПараметрыУдаления,
			ЭтотОбъект,
			ЭтотОбъект.УникальныйИдентификатор,,,
			ОписаниеОповещения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(
		Новый Структура("Объект, ИспользоватьСоглашенияСКлиентами, ВидЦеныПоУмолчанию",
			Интерес, ИспользоватьСоглашенияСКлиентами, ВидЦеныПоУмолчанию),
		"Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Интерес.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Интерес.СкидкиРассчитаны Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
				Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
				Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ТоварыВыборФрагмент();

	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
		ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
		
		Оповестить("РедактироватьНабор", ПараметрОповещения, Новый Структура("Объект", ЭтотОбъект));
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
	
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Интерес.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Интерес.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, Новый Структура("Объект", ЭтотОбъект), УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыВыборФрагмент();
	
КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
	
	Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект); 
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ());
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес)); 
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
		Интерес.НалогообложениеНДС, Интерес.Дата, Интерес.Организация));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));
		
	ДобавитьДействиеЗаполненияЦен(СтруктураДействий); 

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ТекущаяСтрока.Содержание = СформироватьСодержаниеДляПечати(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ДобавитьДействиеЗаполненияЦен(СтруктураДействий)
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Интерес["Соглашение"])) 
		Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ());
	Иначе
		ПараметрыЗаполненияЦеныВСтрокеТЧ = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПараметрыЗаполненияЦеныВСтрокеТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСодержаниеДляПечати(Номенклатура, Характеристика)
	Возврат CRM_Модуль_РаботаСФормамиСервер.СформироватьСодержаниеДляПечати(Номенклатура, Характеристика);
КонецФункции
// -CRM_Модуль

&НаКлиенте
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ() Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Интерес.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Интерес.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Интерес["Соглашение"]);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Интерес.Партнер);
	СтруктураЗаполненияЦены.Вставить("Ссылка",     Интерес.Ссылка);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Интерес));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес)); 
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	ТекущаяСтрока.Содержание = СформироватьСодержаниеДляПечати(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Интерес));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес)); 
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Интерес);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес)); 
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(ЭтотОбъект, 
		//ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
		Ложь);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Новый Структура("Объект", ЭтотОбъект), "Элементы.Товары.ТекущиеДанные.Содержание", НСтр("ru='Содержание'"));

КонецПроцедуры

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Интерес.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Интерес.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Интерес.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Интерес.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Интерес["Соглашение"]);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Интерес.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("Организация", Интерес.Организация);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены( 
		Интерес.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Интерес.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Интерес.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Интерес.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Интерес.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены( 
		Интерес.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция СтруктураСообщений()
	
	Возврат СтруктураСообщенийВн(Интерес);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, Новый Структура("Объект", ЭтотОбъект), УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
		
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Интерес, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = Рассчитать(Интерес, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Интерес.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	СтруктураСообщений = CRM_Модуль_СкидкиНаценкиСервер.СтруктураСообщений(Интерес);
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Интерес, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатРасчета = CRM_Модуль_СкидкиНаценкиСервер.РассчитатьПоИнтересуКлиента(Объект, ВходныеПараметры);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Интерес, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	CRM_Модуль_СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Интерес, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Интерес, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Интерес, "Товары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
			
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИнициализироватьТоварыИУслуги()
	
	Интерес.Дата = ТекущаяДатаСеанса();
	
	ИспользоватьСоглашенияСКлиентами = ИспользоватьСоглашенияСКлиентами();
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ВалютаДокумента = Интерес.Валюта;
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Интерес.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
	Интерес.ЦенаВключаетНДС = Истина;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Интерес.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(Новый Структура("Объект", Интерес));
	
	Если Интерес.Товары.Количество() > 0 Тогда // +МПО
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Интерес);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
		Интерес.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		
	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Навигация_Перейти(Команда)
	
	ИмяСтраницы = СтрЗаменить(Команда.Имя, "Навигация_", "");
	
	Если ИмяСтраницы = "Основное" Тогда
		
		Элементы.СтраницыДанныеИнтереса.ТекущаяСтраница = Элементы.СтраницаДанныеИнтереса;
		ТекущийЭлемент = Элементы.Навигация_Основное1;
		
	ИначеЕсли ИмяСтраницы = "ТоварыИУслуги" Тогда
		
		Если Не ВыведеныТоварыИУслуги Тогда
			ВывестиТоварыИУслуги();
			// +CRM_Модуль
			//ОбновитьНадписьЦеныИВалюту();
			// -CRM_Модуль
		КонецЕсли;
		ВыведеныТоварыИУслуги = Истина;
		
		Элементы.СтраницыДанныеИнтереса.ТекущаяСтраница = Элементы.СтраницаТоварыИУслуги;
		ТекущийЭлемент = Элементы.Навигация_ТоварыИУслуги2;
		
	КонецЕсли;
	
КонецПроцедуры

#Область CRM_Модуль_Разное

&НаСервереБезКонтекста
Функция СтруктураСообщенийВн(Объект) Экспорт
	
	Сообщения = Новый Массив;
	
	АвтоматическиОткрывать = Ложь;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщения.Добавить(Новый Структура("СкидкаНаценка, НапомнитьПозже", СтрокаТЧ.СкидкаНаценка, СтрокаТЧ.НапомнитьПозже));
		Если СтрокаТЧ.НапомнитьПозже Тогда
			АвтоматическиОткрывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("Сообщения", Сообщения);
	СтруктураСообщений.Вставить("АвтоматическиОткрывать", АвтоматическиОткрывать);
	СтруктураСообщений.Вставить("КартаЛояльности", Справочники.КартыЛояльности.ПустаяСсылка());
	СтруктураСообщений.Вставить("Партнер", Объект.Партнер);

	СтруктураСообщений.Вставить("Соглашение", Объект["Соглашение"]);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеТоваров()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Интерес.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Интерес.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи();
	
	//
	УстановитьУсловноеОформлениеЦенаВключаетНДС();
	
	//
	ДополнительныеПараметры = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ДополнительныеПараметры.Вставить("ПутьКПолюУпаковка", "Интерес.Товары.Упаковка");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, ДополнительныеПараметры);
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,, "Интерес.Товары.ХарактеристикиИспользуются");
	
	//
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(ЭтотОбъект,, "Интерес.Товары.ВидЦены");
	
	//
	СтруктураОбъекта = Новый Структура("Объект, УсловноеОформление, Элементы", Интерес, УсловноеОформление, Элементы);
	НаборыСервер.УстановитьУсловноеОформление(СтруктураОбъекта, "Товары");
	
КонецПроцедуры

// Устанавливаем условное оформление для поля сумма с НДС 
//		в зависимости от флага "ЦенаВключаетНДС".
//
//
&НаСервере
Процедура УстановитьУсловноеОформлениеЦенаВключаетНДС()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = Элементы["ТоварыСуммаСНДС"]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Интерес.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС по налогообложению продажи.
//
// Параметры:
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС".
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС")
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаСтавкиНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаСуммыНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаСуммыСНДС].Имя);
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Интерес.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	//
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Интерес.Товары;
	
	Форма.СуммаАвтоСкидки = КоллекцияТовары.Итог("СуммаАвтоматическойСкидки");

	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки");

	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего = КоллекцияТовары.Итог("СуммаСНДС");
	
	СуммаБезНДС = КоллекцияТовары.Итог("Сумма");
	
	Если СуммаБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	ОтображатьИтогСуммыНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаПродажи(Форма.Интерес.НалогообложениеНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Интерес.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
			Интерес.НалогообложениеНДС, Интерес.Дата, Интерес.Организация));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Интерес);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Интерес.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(Интерес,, Истина);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	
	СтруктураПараметров = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок();
	СтруктураПараметров.ИмяТаблицы = "Товары";
	СтруктураПараметров.ТолькоДляВыделенныхСтрок = ТолькоВыделенныеСтроки;
	СтруктураПараметров.ТолькоАктивныеСтроки = ТолькоАктивныеСтроки; 
	Возврат СкидкиНаценкиЗаполнениеСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(
		Новый Структура("Объект, Элементы", Интерес, Элементы), УникальныйИдентификатор, СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Интерес.Валюта) Тогда
		
		ВалютаПриИзмененииСервер(
			Интерес.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Интерес, ВалютаДокумента));
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Интерес.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	
	ВалютаДокумента = Интерес.Валюта;
	
	ОбновитьЗаголовокГруппыТовары();
	ВыручкаВВалюте = ПересчитатьСуммуПоВалюте(Интерес.ОжидаемаяВыручка, ВалютаУправленческогоУчета, Интерес.Валюта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДСПродажи()
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Интерес);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Интерес.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
		Интерес.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Интерес);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Интерес.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьСоглашенияСКлиентами()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		И (Не ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Или ЗначениеЗаполнено(Интерес.Партнер));
КонецФункции

#КонецОбласти // CRM_Модуль_Разное

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Интерес, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Интерес.Договор);
	
	Если ЗначениеЗаполнено(Интерес.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		ЗаполнитьНалогообложениеНДСПродажи();
		НалогообложениеНДСПриИзмененииСервер();
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Интерес);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
		Интерес.НалогообложениеНДС, Интерес.Дата, Интерес.Организация));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Интерес.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Интерес);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Интерес.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Интерес.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкладПриИзменении(Элемент)
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Интерес.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Интерес.Склад, СкладГруппа, Интерес.Товары, Ложь);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Товары") Тогда
		УстановитьПараметрыВыбораТоварыСклад();
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка",
		ДанныеВыбораСкладов(Интерес.Склад));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура ОбновитьНадписиПосоглашениюСервер()
	УстановитьПривилегированныйРежим(Истина);
	Если Интерес["Соглашение"].Пустая() Тогда
		ЗаголовокСклад = Новый ФорматированнаяСтрока("Склад: ", Новый ФорматированнаяСтрока("Соглашение не выбрано", , WebЦвета.Синий));
		ЗаголовокКонтрагент = Новый ФорматированнаяСтрока("Контрагент: ", Новый ФорматированнаяСтрока("Соглашение не выбрано", , WebЦвета.Синий));
	Иначе
		ЗаголовокСклад = Новый ФорматированнаяСтрока("Склад: ",
			Новый ФорматированнаяСтрока(?(Интерес["Соглашение"].Склад.Пустая(),
			"Не заполнен в соглашении", Интерес["Соглашение"].Склад.Наименование), , WebЦвета.Синий));
		ЗаголовокКонтрагент = Новый ФорматированнаяСтрока("Контрагент: ",
			Новый ФорматированнаяСтрока(?(Интерес["Соглашение"].Контрагент.Пустая(),
			"Не заполнен в соглашении", Интерес["Соглашение"].Контрагент.Наименование), , WebЦвета.Синий));
	КонецЕсли;
	Если Элементы.Найти("ДекорацияСклад") <> Неопределено Тогда
		Элементы.ДекорацияСклад.Заголовок = ЗаголовокСклад;
	КонецЕсли; 
	Если Элементы.Найти("ДекорацияКонтрагент") <> Неопределено Тогда
		Элементы.ДекорацияКонтрагент.Заголовок = ЗаголовокКонтрагент;
	КонецЕсли; 
КонецПроцедуры	

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	//ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Интерес.Дата), Интерес.Дата, ТекущаяДатаСеанса());
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Интерес.Организация);
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента, ВалютаРегламентированногоУчета);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента, ВалютаРегламентированногоУчета);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Интерес.Товары,
			Интерес.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Интерес.Товары, ЗависимыеРеквизиты());
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьОжидаемуюВыручку(Команда)
	ПерезаполнитьОжидаемуюВыручкуНаСервере(); // +CRM_Модуль
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьОжидаемуюВыручкуНаСервере()
	ВыручкаВВалюте = Интерес.Товары.Итог("СуммаСНДС");  
	Интерес.ОжидаемаяВыручка = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыручкаВВалюте, 
		Интерес.Валюта, ВалютаУправленческогоУчета, ТекущаяДатаСеанса());

	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(Интерес.ОжидаемаяВыручка)+ " " +ВалютаУправленческогоУчета.Наименование + ")";
	Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = (Интерес.Валюта <> ВалютаУправленческогоУчета);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Интерес, "Товары", НСтр("ru='Товары'")) Тогда 
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	 
	 Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Интерес, "Товары", НСтр("ru = 'Товары';
																				|en = 'Goods'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения = 
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект);
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Интерес.ЦенаВключаетНДС;
		ПараметрыВыбораЦен.ИспользоватьПриПродаже = Истина;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВТЧПоСоглашению(Команда)
	ОбновитьНадписиПосоглашениюСервер();
	ЗаполнитьСкладВТЧПоСоглашениюСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладВТЧПоСоглашениюСервер()
	Если ЗначениеЗаполнено(Интерес["Соглашение"].Склад) Тогда
		Интерес.Склад = Интерес["Соглашение"].Склад;
		Для Каждого Строка Из Интерес.Товары Цикл
			Строка.Склад = Интерес["Соглашение"].Склад;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами
		И ЗначениеЗаполнено(Интерес.Партнер)
		И Не ЗначениеЗаполнено(Интерес["Соглашение"]) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"),
			ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка"),, "Интерес.Соглашение", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Интерес.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"),
			ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка"),, "Интерес.Валюта", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.CRM_Интерес.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами
		И ЗначениеЗаполнено(Интерес.Партнер)
		И Не ЗначениеЗаполнено(Интерес["Соглашение"]))
		Или Не ЗначениеЗаполнено(Интерес.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в Мастер принятия обращения");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Партнер", Интерес.Партнер);
	ПараметрыФормы.Вставить("Соглашение", Интерес["Соглашение"]);
	ПараметрыФормы.Вставить("Организация", Интерес.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Интерес.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Интерес.НалогообложениеНДС);
	ПараметрыФормы.Вставить("Валюта",    Интерес.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Интерес.Дата);
	ПараметрыФормы.Вставить("Документ",  Интерес.Ссылка);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Склад", Интерес.Склад);
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Интерес.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Интерес, ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение); 
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)';
				|en = 'Discounts (markups)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны';
				|en = 'Discount (markups) are calculated'"),
			БиблиотекаКартинок.Информация32);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Интерес, "Товары", НСтр("ru='Товары'")) Тогда 
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияРучныхСкидок( 
		АдресВоВременномХранилище,
		Интерес.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Интерес.Валюта); 
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Интерес, "Товары", НСтр("ru='Товары'")) Тогда 
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияРучныхСкидок( 
		АдресВоВременномХранилище,
		Интерес.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки,
			Интерес.Валюта); 
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможнаОтменаРучныхСкидокНаценок(Интерес, "Товары", НСтр("ru='Товары'")) Тогда 
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(); 
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)

	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Интерес.Товары;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	
	ОповещениеПослеРазбиения = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(ТаблицаФормы) Тогда
		Отказ = Истина;
	ИначеЕсли ТаблицаФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0
		И Не ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно разбить строку с нулевым количеством.';
										|en = 'Cannot break the line with zero quantity.'"));
		Отказ = Истина;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДанныеТаблицы[0], "НоменклатураНабора") Тогда
		ПередУдалениемСтрокиТабличнойЧасти(Отказ, Истина);
	КонецЕсли;
	
	Если Отказ Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаФормы.ТекущиеДанные[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0 Тогда // копирование строки
		ДобавитьСтрокуРазбиением(ДанныеТаблицы, ТаблицаФормы, 0, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки);
	Иначе
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ТабличнаяЧасть",           ДанныеТаблицы);
		ПараметрыОбработки.Вставить("ЭлементФормы",             ТаблицаФормы);
		ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеРазбиения);
		ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", ПараметрыРазбиенияСтроки);
		
		РаботаСТабличнымиЧастямиКлиент.ВвестиКоличествоДляРазбиения(ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуРазбиением(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки)
	
	ТекущаяСтрока = ЭлементФормы.ТекущиеДанные;
	НоваяСтрока   = ТЧ.Вставить(ТЧ.Индекс(ТекущаяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество]   = Количество;
	ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
	
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли;
	
	ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Интерес);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес)); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Интерес.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Интерес.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуСообщений(СтруктураСообщений(), ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры


// +CRM_ERP
&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.ЗагружатьЦены = Истина;
	ПараметрыЗагрузки.ЦенаВключаетНДС    = Интерес.ЦенаВключаетНДС;
	ПараметрыЗагрузки.НалогообложениеНДС = Интерес.НалогообложениеНДС;
	ПараметрыЗагрузки.ДатаЗаполнения     = Интерес.Дата;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Дата       = Интерес.Дата;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Валюта     = Интерес.Валюта;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Соглашение = Интерес["Соглашение"];
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ЗаполнятьДляВсехУслуг) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменятьКоличество = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Интерес);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Интерес, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Интерес, Истина));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Ложь));
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Интерес["Соглашение"])) 
		Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ());
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Интерес));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Интерес);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, Интерес);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтотОбъект);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Новый Структура("Объект", Интерес));
	КонецЕсли;
		
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект, Интерес, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Интерес.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Интерес.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
			Интерес.НалогообложениеНДС, Интерес.Дата, Интерес.Организация));
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Интерес);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Интерес.Товары, СтруктураХарактеристикиНоменклатуры);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтотОбъект, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтотОбъект, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтотОбъект, Параметры, "Товары");
	
КонецФункции

#КонецОбласти

// -CRM_ERP

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Интерес.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Интерес.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Интерес.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Интерес.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Интерес["Соглашение"]);
	ПараметрыОткрытия.Вставить("Дата", Интерес.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Интерес.Ссылка);
	//ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	//ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

// +Процедура области Товары к переносу в объединенные решения

&НаКлиенте
Процедура ОбновитьЗаголовокГруппыТовары()
	
	ИмяКолонкиИтога = "";
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИмяКолонкиИтога = "Всего";
	Иначе
		ИмяКолонкиИтога = "СуммаСНДС";
	КонецЕсли;
	
	ИтогВсего = Интерес.Товары.Итог(ИмяКолонкиИтога);
	
	КоличествоСтрок = Интерес.Товары.Количество();
	
	ТоварыЗаголовок = НСтр("ru = 'Товары и услуги'");
	Если КоличествоСтрок > 0 Тогда
		ТоварыЗаголовок = ТоварыЗаголовок + " (" + КоличествоСтрок + ")"
	КонецЕсли;
	
	Элементы.Навигация_ТоварыИУслуги1.Заголовок = ТоварыЗаголовок;
	Элементы.Навигация_ТоварыИУслуги2.Заголовок = ТоварыЗаголовок;
	
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = (ИтогВсего <> Интерес.ОжидаемаяВыручка);
	
КонецПроцедуры

// -Процедура области Товары к переносу в объединенные решения

#КонецОбласти

#КонецОбласти

#КонецОбласти
