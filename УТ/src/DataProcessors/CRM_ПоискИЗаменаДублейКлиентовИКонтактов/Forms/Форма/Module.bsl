
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СгенерироватьСКДОтбора(Неопределено);
	ЗаполнитьПубличныеДомены();
	ЗаполнитьРеквизитыСравнения();
	
	Если Параметры.Свойство("Настройки") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.Настройки);
		Если Параметры.Свойство("СкрытьГруппуКлиенты") Тогда
			Если Параметры.СкрытьГруппуКлиенты Тогда
				Элементы.ГруппаНастройкиПоискаКлиентов.Скрыть();
				СкрытьКлиенты = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Свойство("СкрытьГруппуКонтакты") Тогда
			Если Параметры.СкрытьГруппуКонтакты Тогда
				Элементы.ГруппаНастройкиПоискаКонтактов.Скрыть();
				СкрытьКонтакты = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Свойство("СкрытьГруппуПотенциальныеКлиенты") Тогда
			Если Параметры.СкрытьГруппуПотенциальныеКлиенты Тогда
				Элементы.ГруппаНастройкиПоискаПК.Скрыть();
				СкрытьПК = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Настройки_ИскатьДублиКлиентов = Истина;
		Настройки_ИскатьДублиКонтактов = Истина;
		Настройки_ИскатьДублиКонтр = Истина;
		Настройки_ИскатьДублиПК = Истина;
		Настройки_Клиенты_ПоНаименованию = Истина;
		Настройки_ПК_ПоНаименованию = Истина;
			
		ЗагрузитьНастройкиПоискаНаСервере();
		
		СкрытьКонтакты = Истина;
		СкрытьКонтр = Истина;
		СкрытьПК = Истина;
	КонецЕсли;
	
	Настройки_Контакты_ПоФамилииПохожесть = 1;
	
	ОтключатьКонтрольЗаписи = Истина;
	ВыполнятьВТранзакции = Истина;
	
	АдресПрогресса = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПредставлениеСпискаРеквизитов = "Выберите реквизиты";
	ПредставлениеСпискаРеквизитовКЛ = "Выберите реквизиты";
	ПредставлениеСпискаРеквизитовПК = "Выберите реквизиты";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СкрытьКлиенты Или СкрытьКонтакты Или СкрытьКонтр Тогда
		СвернутьГруппы();
		//ПодключитьОбработчикОжидания("СвернутьГруппы", 0.2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СвернутьГруппы()
	Если СкрытьКлиенты Тогда
		Элементы.ГруппаНастройкиПоискаКлиентов.Скрыть();
	Иначе
		Элементы.ГруппаНастройкиПоискаКлиентов.Показать();
	КонецЕсли;
	Если СкрытьКонтакты Тогда
		Элементы.ГруппаНастройкиПоискаКонтактов.Скрыть();
	Иначе
		Элементы.ГруппаНастройкиПоискаКонтактов.Показать();
	КонецЕсли;
	Если СкрытьКонтр Тогда
		Элементы.ГруппаНастройкиПоискаКонтр.Скрыть();
	Иначе
		Элементы.ГруппаНастройкиПоискаКонтр.Показать();
	КонецЕсли;
	Если СкрытьПК Тогда
		Элементы.ГруппаНастройкиПоискаПК.Скрыть();
	Иначе
		Элементы.ГруппаНастройкиПоискаПК.Показать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ДеревоДублейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоДублейКонтакт" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Контакт);
	Иначе
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДублейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =Истина;
КонецПроцедуры

&Наклиенте
Процедура ПубличныеДоменыДекорацияНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПубличныеДоменыНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаСпискаПубличныхДоменов",,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПубличныеДоменыНажатиеЗавершение(Результат, ДопПараметры) Экспорт
	ЗаполнитьПубличныеДомены();
КонецПроцедуры

&НаКлиенте
Процедура Настройки_Клиенты_ПриИзменении(Элемент)
	Похож = (Настройки_Клиенты_ПоНаименованию И Настройки_Клиенты_ПоНаименованиюПохожесть = 1)
		Или (Настройки_Клиенты_ПоПолномуНаименованию И Настройки_Клиенты_ПоПолномуНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести.Доступность = Похож;
КонецПроцедуры

&НаКлиенте
Процедура Настройки_Контакты_ПриИзменении(Элемент)
	Похож = (Настройки_Контакты_ПоФИО И Настройки_Контакты_ПоФИОПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести1.Доступность = Похож;
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ПК_ПриИзменении(Элемент)
	Похож = (Настройки_ПК_ПоНаименованию И Настройки_ПК_ПоНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести2.Доступность = Похож;
КонецПроцедуры

&НаКлиенте
Процедура Настройки_Контр_ПриИзменении(Элемент)
	Похож = (Настройки_Контр_ПоНаименованию И Настройки_Контр_ПоНаименованиюПохожесть = 1)
		Или (Настройки_Контр_ПоПолномуНаименованию И Настройки_Контр_ПоПолномуНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожестиКонтр.Доступность = Похож;
КонецПроцедуры

&НаКлиенте
Процедура НепосредственноУдалятьОбъектыПриИзменении(Элемент)
	Элементы.ЗаменитьДубли.Заголовок = ?(НепосредственноУдалятьОбъекты, НСтр("ru = 'Удалить дубли'"),
		НСтр("ru = 'Пометить на удаление'"))
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовСравненияПометкаПриИзменении(Элемент)
	ТемпЗаголовок = "";
	Для Каждого ЭлементСписка Из СписокРеквизитовСравнения Цикл
		Если ЭлементСписка.Пометка Тогда
			ТемпЗаголовок = ТемпЗаголовок + ?(ТемпЗаголовок = "", "", "; ") + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	Если ТемпЗаголовок = "" Тогда
		ТемпЗаголовок = НСтр("ru = 'Выберите реквизиты'");
	КонецЕсли;
	Элементы.ГруппаСписокРеквизитов.Заголовок = ТемпЗаголовок;
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовСравненияКЛПометкаПриИзменении(Элемент)
	ТемпЗаголовок = "";
	Для Каждого ЭлементСписка Из СписокРеквизитовСравненияКЛ Цикл
		Если ЭлементСписка.Пометка Тогда
			ТемпЗаголовок = ТемпЗаголовок + ?(ТемпЗаголовок = "", "", "; ") + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	Если ТемпЗаголовок = "" Тогда
		ТемпЗаголовок = НСтр("ru = 'Выберите реквизиты'");
	КонецЕсли;
	Элементы.ГруппаСписокРеквизитовКЛ.Заголовок = ТемпЗаголовок;
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовСравненияПКПометкаПриИзменении(Элемент)
	ТемпЗаголовок = "";
	Для Каждого ЭлементСписка Из СписокРеквизитовСравненияПК Цикл
		Если ЭлементСписка.Пометка Тогда
			ТемпЗаголовок = ТемпЗаголовок + ?(ТемпЗаголовок = "", "", "; ") + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	Если ТемпЗаголовок = "" Тогда
		ТемпЗаголовок = НСтр("ru = 'Выберите реквизиты'");
	КонецЕсли;
	Элементы.ГруппаСписокРеквизитовПК.Заголовок = ТемпЗаголовок;
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовСравненияКонтрПометкаПриИзменении(Элемент)
	ТемпЗаголовок = "";
	Для Каждого ЭлементСписка Из СписокРеквизитовСравненияКонтр Цикл
		Если ЭлементСписка.Пометка Тогда
			ТемпЗаголовок = ТемпЗаголовок + ?(ТемпЗаголовок = "", "", "; ") + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	Если ТемпЗаголовок = "" Тогда
		ТемпЗаголовок = НСтр("ru = 'Выберите реквизиты'");
	КонецЕсли;
	Элементы.ГруппаСписокРеквизитовКонтр.Заголовок = ТемпЗаголовок;
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаСервере
Процедура ПодготовитьФорму()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Дерево = РеквизитФормыВЗначение("ДеревоДублей");
	
	// Партнеры
	Для Каждого Реквизит Из СписокРеквизитовСравнения Цикл
		Если Не Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если Дерево.Колонки.Найти("Реквизит_" + Реквизит.Значение) = Неопределено Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Реквизит_" + Реквизит.Значение,
				Новый ОписаниеТипов(), "ДеревоДублей", Реквизит.Представление));
		Иначе
			Колонка = ДобавленныеКолонки.НайтиПоЗначению("Реквизит_" + Реквизит.Значение);
			Если Колонка <> Неопределено Тогда
				ДобавленныеКолонки.Удалить(Колонка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Контакты
	Для Каждого Реквизит Из СписокРеквизитовСравненияКЛ Цикл
		Если Не Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка = СписокРеквизитовСравнения.НайтиПоЗначению(Реквизит.Значение);
		Если (ЭлементСписка = Неопределено Или Не ЭлементСписка.Пометка)
			И Дерево.Колонки.Найти("Реквизит_" + Реквизит.Значение) = Неопределено Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Реквизит_" + Реквизит.Значение,
				Новый ОписаниеТипов(), "ДеревоДублей", Реквизит.Представление));
		Иначе
			Колонка = ДобавленныеКолонки.НайтиПоЗначению("Реквизит_" + Реквизит.Значение);
			Если Колонка <> Неопределено Тогда
				ДобавленныеКолонки.Удалить(Колонка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Потенциальные клиенты
	Для Каждого Реквизит Из СписокРеквизитовСравненияПК Цикл
		Если Не Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если Дерево.Колонки.Найти("Реквизит_" + Реквизит.Значение) = Неопределено Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Реквизит_" + Реквизит.Значение, Новый ОписаниеТипов(), "ДеревоДублей", Реквизит.Представление));
		Иначе
			Колонка = ДобавленныеКолонки.НайтиПоЗначению("Реквизит_" + Реквизит.Значение);
			Если Колонка <> Неопределено Тогда
				ДобавленныеКолонки.Удалить(Колонка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Контрагенты
	Для Каждого Реквизит Из СписокРеквизитовСравненияКонтр Цикл
		Если Не Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка = СписокРеквизитовСравнения.НайтиПоЗначению(Реквизит.Значение);
		Если (ЭлементСписка = Неопределено Или Не ЭлементСписка.Пометка)
			И Дерево.Колонки.Найти("Реквизит_" + Реквизит.Значение) = Неопределено Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Реквизит_" + Реквизит.Значение,
				Новый ОписаниеТипов(), "ДеревоДублей", Реквизит.Представление));
		Иначе
			Колонка = ДобавленныеКолонки.НайтиПоЗначению("Реквизит_" + Реквизит.Значение);
			Если Колонка <> Неопределено Тогда
				ДобавленныеКолонки.Удалить(Колонка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивУдаляемыхРеквизитов = Новый Массив; 
	Для Каждого Колонка Из ДобавленныеКолонки Цикл
		МассивУдаляемыхРеквизитов.Добавить("ДеревоДублей." + Колонка.Значение);
		Элементы.Удалить(Элементы.Найти("ДеревоДублей" + Колонка.Значение));
	КонецЦикла;
	ДобавленныеКолонки.Очистить();
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для Каждого Реквизит Из МассивДобавляемыхРеквизитов Цикл
		ДобавленныеКолонки.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Колонка Из ДобавленныеКолонки Цикл
		Элемент = Элементы.Найти("ДеревоДублей" + Колонка.Значение);
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Вставить("ДеревоДублей" + Колонка.Значение, Тип("ПолеФормы"),
				Элементы.ДеревоДублей, Элементы.ДеревоДублейЗаменять);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ДеревоДублей." + Колонка.Значение;
			Элемент.АвтоМаксимальнаяШирина  = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиДублиНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоДублей");
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дерево", Дерево);
	СтруктураПараметров.Вставить("Настройки_ИскатьДублиКлиентов", Настройки_ИскатьДублиКлиентов);
	СтруктураПараметров.Вставить("Настройки_ИскатьДублиКонтактов", Настройки_ИскатьДублиКонтактов);
	СтруктураПараметров.Вставить("Настройки_ИскатьДублиКонтр", Настройки_ИскатьДублиКонтр);
	СтруктураПараметров.Вставить("Настройки_ИскатьДублиПК", Настройки_ИскатьДублиПК);
	
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоEmail", Настройки_Клиенты_ПоEmail);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоEmailВариант", Настройки_Клиенты_ПоEmailВариант);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоНаименованию", Настройки_Клиенты_ПоНаименованию);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоНаименованиюПохожесть", Настройки_Клиенты_ПоНаименованиюПохожесть);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоПолномуНаименованию", Настройки_Клиенты_ПоПолномуНаименованию);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоПолномуНаименованиюПохожесть",
		Настройки_Клиенты_ПоПолномуНаименованиюПохожесть);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоТелефону", Настройки_Клиенты_ПоТелефону);
	СтруктураПараметров.Вставить("Настройки_Клиенты_ПоискТолькоПоОтбору", Настройки_Клиенты_ПоискТолькоПоОтбору);
	
	СтруктураПараметров.Вставить("Настройки_Контр_ПоEmail", Настройки_Контр_ПоEmail);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоEmailВариант", Настройки_Контр_ПоEmailВариант);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоНаименованию", Настройки_Контр_ПоНаименованию);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоНаименованиюПохожесть", Настройки_Контр_ПоНаименованиюПохожесть);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоПолномуНаименованию", Настройки_Контр_ПоПолномуНаименованию);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоПолномуНаименованиюПохожесть", Настройки_Контр_ПоПолномуНаименованиюПохожесть);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоТелефону", Настройки_Контр_ПоТелефону);
	СтруктураПараметров.Вставить("Настройки_Контр_ПоискТолькоПоОтбору", Настройки_Контр_ПоискТолькоПоОтбору);
	
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоEmail", Настройки_Контакты_ПоEmail);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоEmailВариант", Настройки_Контакты_ПоEmailВариант);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоВладельцу", Настройки_Контакты_ПоВладельцу);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоТелефону", Настройки_Контакты_ПоТелефону);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоФамилии", Настройки_Контакты_ПоФамилии);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоФамилииПохожесть", Настройки_Контакты_ПоФамилииПохожесть);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоФИО", Настройки_Контакты_ПоФИО);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоФИОПохожесть", Настройки_Контакты_ПоФИОПохожесть);
	СтруктураПараметров.Вставить("Настройки_Контакты_ПоискТолькоПоОтбору", Настройки_Контакты_ПоискТолькоПоОтбору);
	
	СтруктураПараметров.Вставить("Настройки_ПК_ПоEmail", Настройки_ПК_ПоEmail);
	СтруктураПараметров.Вставить("Настройки_ПК_ПоEmailВариант", Настройки_ПК_ПоEmailВариант);
	СтруктураПараметров.Вставить("Настройки_ПК_ПоНаименованию", Настройки_ПК_ПоНаименованию);
	СтруктураПараметров.Вставить("Настройки_ПК_ПоНаименованиюПохожесть", Настройки_ПК_ПоНаименованиюПохожесть);
	СтруктураПараметров.Вставить("Настройки_ПК_ПоТелефону", Настройки_ПК_ПоТелефону);
	СтруктураПараметров.Вставить("Настройки_ПК_ПоискТолькоПоОтбору", Настройки_ПК_ПоискТолькоПоОтбору);
	
	СтруктураПараметров.Вставить("ПубличныеДомены", ПубличныеДомены);
	СтруктураПараметров.Вставить("ДопустимоеРазличиеСлов", ДопустимоеРазличиеСлов);
	СтруктураПараметров.Вставить("ДопустимоеРазличиеСловКЛ", ДопустимоеРазличиеСловКЛ);
	СтруктураПараметров.Вставить("ДопустимоеРазличиеСловКонтр", ДопустимоеРазличиеСловКонтр);
	СтруктураПараметров.Вставить("ДопустимоеРазличиеСловПК", ДопустимоеРазличиеСловПК);
	
	СтруктураПараметров.Вставить("НастройкиКомпоновкиДанных",
		ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	СтруктураПараметров.Вставить("НастройкиКомпоновкиДанныхКЛ",
		ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхКЛ));
	СтруктураПараметров.Вставить("НастройкиКомпоновкиДанныхКонтр",
		ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхКонтр));
	СтруктураПараметров.Вставить("НастройкиКомпоновкиДанныхПК",
		ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхПК));
		
	СтруктураПараметров.Вставить("СхемаКомпоновкиДанных", ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
	СтруктураПараметров.Вставить("СхемаКомпоновкиДанныхКЛ", ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхКЛ));
	СтруктураПараметров.Вставить("СхемаКомпоновкиДанныхКонтр",
		ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхКонтр));
	СтруктураПараметров.Вставить("СхемаКомпоновкиДанныхПК", ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхПК));
	
	СтруктураПараметров.Вставить("АдресПрогресса", АдресПрогресса);
	
	РеквизитыСравнения = Новый СписокЗначений;
	Для Каждого ЗначениеСписка Из СписокРеквизитовСравнения Цикл
		Если ЗначениеСписка.Пометка Тогда
			РеквизитыСравнения.Добавить(ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("РеквизитыСравнения", РеквизитыСравнения);
	
	РеквизитыСравнения = Новый СписокЗначений;
	Для Каждого ЗначениеСписка Из СписокРеквизитовСравненияКЛ Цикл
		Если ЗначениеСписка.Пометка Тогда
			РеквизитыСравнения.Добавить(ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("РеквизитыСравненияКЛ", РеквизитыСравнения);
	
	РеквизитыСравнения = Новый СписокЗначений;
	Для Каждого ЗначениеСписка Из СписокРеквизитовСравненияПК Цикл
		Если ЗначениеСписка.Пометка Тогда
			РеквизитыСравнения.Добавить(ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("РеквизитыСравненияПК", РеквизитыСравнения);
	
	РеквизитыСравнения = Новый СписокЗначений;
	Для Каждого ЗначениеСписка Из СписокРеквизитовСравненияКонтр Цикл
		Если ЗначениеСписка.Пометка Тогда
			РеквизитыСравнения.Добавить(ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("РеквизитыСравненияКонтр", РеквизитыСравнения);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", "CRM_ПоискИЗаменаДублейКлиентовИКонтактов");
	ПараметрыЗадания.Вставить("ИмяМетода", "НайтиДублиВФоне");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Ложь);
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	ПараметрыВыполнения = МодульДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выгрузка данных EnterpriseData';
		|en='Export EnterpriseData data'");
	РезультатФоновогоЗадания = МодульДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод,
		ПараметрыЗадания,
		ПараметрыВыполнения);
	Возврат РезультатФоновогоЗадания;
КонецФункции

&НаКлиенте
Процедура НайтиДубли(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиДублиПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НайтиДублиПродолжение(Результат, ДопПараметр) Экспорт
	
	ПодготовитьФорму();
	ДеревоДублей.ПолучитьЭлементы().Очистить();
	МассивСообщений = Неопределено;
	ДлительнаяОперация = НайтиДублиНаСервере();
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		АдресХраненияРезультата = ДлительнаяОперация.АдресРезультата;
		ДлительнаяОперация.Свойство("Сообщения", МассивСообщений);
		ОбработатьРезультатПоиска();
		Элементы.Прогресс.Видимость = Ложь;
		Элементы.НайтиДубли.Доступность = Истина;
		Если ДеревоДублей.ПолучитьЭлементы().Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Дубли не найдены.'"));
		КонецЕсли;
	Иначе
		МодульДлительныеОперацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДлительныеОперацииКлиент");
		ПараметрыОжидания = МодульДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОперацииПоиска", ЭтотОбъект);
		МодульДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновлениеСостояния", 1);
	Прогресс = 0;
	Элементы.Прогресс.Видимость = Истина;
	Элементы.НайтиДубли.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОперацииПоиска(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Поиск завершен неудачно. Отсутствует результат.'");
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	АдресХраненияРезультата = Результат.АдресРезультата;
	ОбработатьРезультатПоиска();
	Элементы.Прогресс.Видимость = Ложь;
	Элементы.НайтиДубли.Доступность = Истина;
	Если ДеревоДублей.ПолучитьЭлементы().Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Дубли не найдены.'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПоиска()
	Дерево = ПолучитьИзВременногоХранилища(АдресХраненияРезультата);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДублей");
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСостояния()
	
	ТекущееЗначение = Прогресс;
	Если ПолучитьСостояниеФоновогоЗадания(ТекущееЗначение) Тогда
		ОтключитьОбработчикОжидания("ОбновлениеСостояния");
		Прогресс = 100;
		Элементы.Прогресс.Видимость = Ложь;
		Элементы.НайтиДубли.Доступность = Истина;
	Иначе
		Прогресс = ТекущееЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеФоновогоЗадания(ТекущееЗначение)
	Если ИдентификаторЗадания <> Неопределено Тогда
		ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		СтруктураПрогресса = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
		Если ТипЗнч(СтруктураПрогресса) = Тип("Структура") И СтруктураПрогресса.Свойство("Процент", ТекущееЗначение) Тогда
			
		КонецЕсли;
		Если ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			Если ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно
				И ФЗ.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
				// ошибка выполнения
				ИнформацияОбОшибке = ФЗ.ИнформацияОбОшибке.Описание;
			КонецЕсли;
		КонецЕсли;
		Возврат ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОтметитьКакОригинал(Команда)
	Если Элементы.ДеревоДублей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Родитель = Элементы.ДеревоДублей.ТекущиеДанные.ПолучитьРодителя();	
	Если Родитель <> Неопределено Тогда
		СтруктураТемп = Новый Структура("Код,Контакт,Количество,ПометкаУдаления,Автор,Дата");
		ЗаполнитьЗначенияСвойств(СтруктураТемп, Родитель);
		ЗаполнитьЗначенияСвойств(Родитель, Элементы.ДеревоДублей.ТекущиеДанные, "Код,Контакт,Количество,
			|ПометкаУдаления,
			|Автор,Дата");
		ЗаполнитьЗначенияСвойств(Элементы.ДеревоДублей.ТекущиеДанные, СтруктураТемп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоиска(Команда)
	
	Если Элементы.ГруппаВсплывающиеНастройки.Скрыта() Тогда
		Элементы.ГруппаВсплывающиеНастройки.Показать();
		ПодключитьОбработчикОжидания("НастройкиПоиска_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоиска_ЗакрытьНастройку()
	
	Если Элементы.ГруппаВсплывающиеНастройки.Скрыта() Тогда
		ТекущийЭлемент = Элементы.НастройкиПоиска;
		ОтключитьОбработчикОжидания("НастройкиПоиска_ЗакрытьНастройку");
	Иначе
		ПодключитьОбработчикОжидания("НастройкиПоиска_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиПоиска(Команда)
	
	Настройки_Клиенты_ПоEmail = Ложь;
	Настройки_Клиенты_ПоEmailВариант = 0;
	Настройки_Клиенты_ПоНаименованию = Истина;
	Настройки_Клиенты_ПоНаименованиюПохожесть = 0;
	Настройки_Клиенты_ПоПолномуНаименованию = Ложь;
	Настройки_Клиенты_ПоПолномуНаименованиюПохожесть = 0;
	Настройки_Клиенты_ПоТелефону = Ложь;
	
	Настройки_Контр_ПоEmail = Ложь;
	Настройки_Контр_ПоEmailВариант = 0;
	Настройки_Контр_ПоНаименованию = Истина;
	Настройки_Контр_ПоНаименованиюПохожесть = 0;
	Настройки_Контр_ПоПолномуНаименованию = Ложь;
	Настройки_Контр_ПоПолномуНаименованиюПохожесть = 0;
	Настройки_Контр_ПоТелефону = Ложь;
	
	Настройки_Контакты_ПоEmail = Ложь;
	Настройки_Контакты_ПоEmailВариант = 0;
	Настройки_Контакты_ПоВладельцу = Ложь;
	Настройки_Контакты_ПоТелефону = Ложь;
	Настройки_Контакты_ПоФамилии = Ложь;
	Настройки_Контакты_ПоФамилииПохожесть = 1;
	Настройки_Контакты_ПоФИО = Истина;
	Настройки_Контакты_ПоФИОПохожесть = 0;
	
	Настройки_ПК_ПоEmail = Ложь;
	Настройки_ПК_ПоEmailВариант = 0;
	Настройки_ПК_ПоНаименованию = Истина;
	Настройки_ПК_ПоНаименованиюПохожесть = 0;
	Настройки_ПК_ПоТелефону = Ложь;
	
	ДопустимоеРазличиеСлов = 0;
	ДопустимоеРазличиеСловКЛ = 0;
	ДопустимоеРазличиеСловКонтр = 0;
	ДопустимоеРазличиеСловПК = 0;
	
	СохранитьНастройкиПоискаНаСервере();
	Настройки_Клиенты_ПриИзменении(Неопределено);
	Настройки_Контакты_ПриИзменении(Неопределено);
	Настройки_Контр_ПриИзменении(Неопределено);
	Настройки_ПК_ПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПоискаНаСервере()
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Настройки_Клиенты_ПоEmail", Настройки_Клиенты_ПоEmail);
	Настройки.Вставить("Настройки_Клиенты_ПоEmailВариант", Настройки_Клиенты_ПоEmailВариант);
	Настройки.Вставить("Настройки_Клиенты_ПоНаименованию", Настройки_Клиенты_ПоНаименованию);
	Настройки.Вставить("Настройки_Клиенты_ПоНаименованиюПохожесть", Настройки_Клиенты_ПоНаименованиюПохожесть);
	Настройки.Вставить("Настройки_Клиенты_ПоПолномуНаименованию", Настройки_Клиенты_ПоПолномуНаименованию);
	Настройки.Вставить("Настройки_Клиенты_ПоПолномуНаименованиюПохожесть",
		Настройки_Клиенты_ПоПолномуНаименованиюПохожесть);
	Настройки.Вставить("Настройки_Клиенты_ПоТелефону", Настройки_Клиенты_ПоТелефону);
	
	Настройки.Вставить("Настройки_Контр_ПоEmail", Настройки_Клиенты_ПоEmail);
	Настройки.Вставить("Настройки_Контр_ПоEmailВариант", Настройки_Клиенты_ПоEmailВариант);
	Настройки.Вставить("Настройки_Контр_ПоНаименованию", Настройки_Клиенты_ПоНаименованию);
	Настройки.Вставить("Настройки_Контр_ПоНаименованиюПохожесть", Настройки_Клиенты_ПоНаименованиюПохожесть);
	Настройки.Вставить("Настройки_Контр_ПоПолномуНаименованию", Настройки_Клиенты_ПоПолномуНаименованию);
	Настройки.Вставить("Настройки_Контр_ПоПолномуНаименованиюПохожесть", Настройки_Клиенты_ПоПолномуНаименованиюПохожесть);
	Настройки.Вставить("Настройки_Контр_ПоТелефону", Настройки_Клиенты_ПоТелефону);
	
	Настройки.Вставить("Настройки_Контакты_ПоEmail", Настройки_Контакты_ПоEmail);
	Настройки.Вставить("Настройки_Контакты_ПоEmailВариант", Настройки_Контакты_ПоEmailВариант);
	Настройки.Вставить("Настройки_Контакты_ПоВладельцу", Настройки_Контакты_ПоВладельцу);
	Настройки.Вставить("Настройки_Контакты_ПоТелефону", Настройки_Контакты_ПоТелефону);
	Настройки.Вставить("Настройки_Контакты_ПоФамилии", Настройки_Контакты_ПоФамилии);
	Настройки.Вставить("Настройки_Контакты_ПоФИО", Настройки_Контакты_ПоФИО);
	Настройки.Вставить("Настройки_Контакты_ПоФИОПохожесть", Настройки_Контакты_ПоФИОПохожесть);
	
	Настройки.Вставить("Настройки_ПК_ПоEmail", Настройки_ПК_ПоEmail);
	Настройки.Вставить("Настройки_ПК_ПоEmailВариант", Настройки_ПК_ПоEmailВариант);
	Настройки.Вставить("Настройки_ПК_ПоНаименованию", Настройки_ПК_ПоНаименованию);
	Настройки.Вставить("Настройки_ПК_ПоНаименованиюПохожесть", Настройки_ПК_ПоНаименованиюПохожесть);
	Настройки.Вставить("Настройки_ПК_ПоТелефону", Настройки_ПК_ПоТелефону);
	
	Настройки.Вставить("ДопустимоеРазличиеСлов", ДопустимоеРазличиеСлов);
	Настройки.Вставить("ДопустимоеРазличиеСловКЛ", ДопустимоеРазличиеСловКЛ);
	Настройки.Вставить("ДопустимоеРазличиеСловКонтр", ДопустимоеРазличиеСловКЛ);
	Настройки.Вставить("ДопустимоеРазличиеСловПК", ДопустимоеРазличиеСловПК);
	
	ХранилищеСистемныхНастроек.Сохранить("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов",
		"НастройкиПоиска", Настройки);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиПоискаНаСервере()
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов",
		"НастройкиПоиска");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	КонецЕсли;
	
	Похож = (Настройки_Клиенты_ПоНаименованию И Настройки_Клиенты_ПоНаименованиюПохожесть = 1)
		Или (Настройки_Клиенты_ПоПолномуНаименованию И Настройки_Клиенты_ПоПолномуНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести.Доступность = Похож;
	
	Похож = (Настройки_Контр_ПоНаименованию И Настройки_Контр_ПоНаименованиюПохожесть = 1)
		Или (Настройки_Контр_ПоПолномуНаименованию И Настройки_Контр_ПоПолномуНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожестиКонтр.Доступность = Похож;
	
	Похож = (Настройки_Контакты_ПоФИО И Настройки_Контакты_ПоФИОПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести1.Доступность = Похож;
	
	Похож = (Настройки_ПК_ПоНаименованию И Настройки_ПК_ПоНаименованиюПохожесть = 1);
	Элементы.ГруппаНастройкаСхожести2.Доступность = Похож;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПоиска(Команда)
	СохранитьНастройкиПоискаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхОбъектов(Команда)
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма.ОсновнаяФорма");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	Для Каждого Строка Из ДеревоДублей.ПолучитьЭлементы() Цикл
		Строка.ЕстьПомеченные = Ложь;
		Для Каждого СтрокаДубль Из Строка.ПолучитьЭлементы() Цикл
			Если СтрокаДубль.ПометкаУдаления Тогда
				Строка.ЕстьПомеченные = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ВклВыклУсловноеОформлениеПомеченные();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПоиску(Команда)
	Для Каждого Строка Из ДеревоДублей.ПолучитьЭлементы() Цикл
		Строка.ЕстьДублиКУдалению = Ложь;
	КонецЦикла;
	Элементы.НепосредственноУдалятьОбъекты.Видимость = Ложь;
	Элементы.ПерейтиКПоиску.Видимость = Ложь;
	Элементы.ПерейтиКУдалению.Видимость = Истина;
	Элементы.ЗаменитьДубли.Видимость = Ложь;
	Элементы.ГруппаНастройкиПоиска.Видимость = Истина;
	Элементы.СохранитьИнформациюОДублях.Видимость = Истина;
	ВклВыклУсловноеОформлениеКУдалению();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУдалению(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиКПоискуПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПоискуПродолжение(Результат, ДопПараметр) Экспорт
	Для Каждого Строка Из ДеревоДублей.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДубль Из Строка.ПолучитьЭлементы() Цикл
			Если СтрокаДубль.Заменить Тогда
				Строка.ЕстьДублиКУдалению = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Элементы.НепосредственноУдалятьОбъекты.Видимость = Истина;
	Элементы.ПерейтиКПоиску.Видимость = Истина;
	Элементы.ПерейтиКУдалению.Видимость = Ложь;
	Элементы.ЗаменитьДубли.Видимость = Истина;
	Элементы.ГруппаНастройкиПоиска.Видимость = Ложь;
	Элементы.СохранитьИнформациюОДублях.Видимость = Ложь;
	ВклВыклУсловноеОформлениеКУдалению();
КонецПроцедуры

#КонецОбласти

#Область НастройкиПоиска

&НаСервере
Процедура СгенерироватьСКДОтбора(НастройкиСКД)
	// Партнеры
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ * ИЗ Справочник.Партнеры";
	Если Метаданные.Справочники.Партнеры.Иерархический 
		И Метаданные.Справочники.Партнеры.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + " ГДЕ НЕ ЭтоГруппа";
	КонецЕсли;
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	СКД_КомпановщикНастроекУсловий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	СКД_КомпановщикНастроекУсловий.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
	НастройкиСКД = СКД_КомпановщикНастроекУсловий.Настройки;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	АдресНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиСКД, УникальныйИдентификатор);
	
	Настройки_ПредставлениеОтбора = Строка(НастройкиСКД.Отбор);
	Если Настройки_ПредставлениеОтбора = "" Тогда
		Настройки_ПредставлениеОтбора = НСтр("ru = 'Без условий'");
		Элементы.Настройки_Клиенты_ПоискТолькоПоОтбору.Видимость = Ложь;
	КонецЕсли;
	
	// Контакты
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ * ИЗ Справочник.КонтактныеЛицаПартнеров";
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	СКД_КомпановщикНастроекУсловийКЛ.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	СКД_КомпановщикНастроекУсловийКЛ.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
	НастройкиСКД = СКД_КомпановщикНастроекУсловийКЛ.Настройки;
	АдресСхемыКомпоновкиДанныхКЛ = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	АдресНастроекКомпоновкиДанныхКЛ = ПоместитьВоВременноеХранилище(НастройкиСКД, УникальныйИдентификатор);
	
	Настройки_ПредставлениеОтбораКЛ = Строка(НастройкиСКД.Отбор);
	Если Настройки_ПредставлениеОтбораКЛ = "" Тогда
		Настройки_ПредставлениеОтбораКЛ = НСтр("ru = 'Без условий'");
		Элементы.Настройки_Контакты_ПоискТолькоПоОтбору.Видимость = Ложь;
	КонецЕсли;
	
	
	// Контрагенты
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ * ИЗ Справочник.Контрагенты";
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	СКД_КомпановщикНастроекУсловийКонтр.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	СКД_КомпановщикНастроекУсловийКонтр.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
	НастройкиСКД = СКД_КомпановщикНастроекУсловийКонтр.Настройки;
	АдресСхемыКомпоновкиДанныхКонтр = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	АдресНастроекКомпоновкиДанныхКонтр = ПоместитьВоВременноеХранилище(НастройкиСКД, УникальныйИдентификатор);
	
	Настройки_ПредставлениеОтбораКонтр = Строка(НастройкиСКД.Отбор);
	Если Настройки_ПредставлениеОтбораКонтр = "" Тогда
		Настройки_ПредставлениеОтбораКонтр = НСтр("ru = 'Без условий'");
		Элементы.Настройки_Контакты_ПоискТолькоПоОтбору.Видимость = Ложь;
	КонецЕсли;
	
	// Потенциальные клиенты
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ * ИЗ Справочник.CRM_ПотенциальныеКлиенты";
	Если Метаданные.Справочники.CRM_ПотенциальныеКлиенты.Иерархический 
		И Метаданные.Справочники.CRM_ПотенциальныеКлиенты.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + " ГДЕ НЕ ЭтоГруппа";
	КонецЕсли;
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	СКД_КомпановщикНастроекУсловийПК.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	СКД_КомпановщикНастроекУсловийПК.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
	НастройкиСКД = СКД_КомпановщикНастроекУсловийПК.Настройки;
	АдресСхемыКомпоновкиДанныхПК = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	АдресНастроекКомпоновкиДанныхПК = ПоместитьВоВременноеХранилище(НастройкиСКД, УникальныйИдентификатор);
	
	Настройки_ПредставлениеОтбораПК = Строка(НастройкиСКД.Отбор);
	Если Настройки_ПредставлениеОтбораПК = "" Тогда
		Настройки_ПредставлениеОтбораПК = НСтр("ru = 'Без условий'");
		Элементы.Настройки_ПК_ПоискТолькоПоОтбору.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ПредставлениеОтбораНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("НастроитьУсловияЗавершениеСКД", ЭтотОбъект, "Партнеры");
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("НастройкиСКД", СКД_КомпановщикНастроекУсловий.Настройки);
	ОткрытьФорму("Справочник.CRM_Триггеры.Форма.ФормаРЕдактированияСКД", ПараметрыОткрытия, ЭтаФорма, ,
		, , ОписаниеОповещенияЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ПредставлениеОтбораКЛНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("НастроитьУсловияЗавершениеСКД", ЭтотОбъект, "Контакты");
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанныхКЛ);
	ПараметрыОткрытия.Вставить("НастройкиСКД", СКД_КомпановщикНастроекУсловийКЛ.Настройки);
	ОткрытьФорму("Справочник.CRM_Триггеры.Форма.ФормаРЕдактированияСКД", ПараметрыОткрытия, ЭтаФорма, ,
		, , ОписаниеОповещенияЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ПредставлениеОтбораПКНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("НастроитьУсловияЗавершениеСКД", ЭтотОбъект, "CRM_ПотенциальныеКлиенты");
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанныхПК);
	ПараметрыОткрытия.Вставить("НастройкиСКД", СКД_КомпановщикНастроекУсловийПК.Настройки);
	ОткрытьФорму("Справочник.CRM_Триггеры.Форма.ФормаРЕдактированияСКД", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещенияЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ПредставлениеОтбораКонтрНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("НастроитьУсловияЗавершениеСКД", ЭтотОбъект, "Контрагенты");
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанныхКонтр);
	ПараметрыОткрытия.Вставить("НастройкиСКД", СКД_КомпановщикНастроекУсловийКонтр.Настройки);
	ОткрытьФорму("Справочник.CRM_Триггеры.Форма.ФормаРЕдактированияСКД", ПараметрыОткрытия, ЭтаФорма, ,
		, , ОписаниеОповещенияЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУсловияЗавершениеСКД(Результат, Параметр) Экспорт
	Если Результат <> Неопределено Тогда
		Если Параметр = "Партнеры" Тогда
			АдресНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			ОбновитьНастройкиСКД(Параметр);
			Настройки_ПредставлениеОтбора = Строка(Результат.Отбор);
			Если Настройки_ПредставлениеОтбора = "" Тогда
				Настройки_ПредставлениеОтбора = НСтр("ru = 'Без условий'");
				Элементы.Настройки_ПредставлениеОтбора.Высота = 1;
				Настройки_Клиенты_ПоискТолькоПоОтбору = Ложь;
				Элементы.Настройки_Клиенты_ПоискТолькоПоОтбору.Видимость = Ложь;
			Иначе
				Элементы.Настройки_ПредставлениеОтбора.Высота = СтрЧислоСтрок(Настройки_ПредставлениеОтбора);
				Элементы.Настройки_Клиенты_ПоискТолькоПоОтбору.Видимость = Истина;
			КонецЕсли;
		ИначеЕсли Параметр = "Контрагенты" Тогда
			АдресНастроекКомпоновкиДанныхКонтр = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			ОбновитьНастройкиСКД(Параметр);
			Настройки_ПредставлениеОтбораКонтр = Строка(Результат.Отбор);
			Если Настройки_ПредставлениеОтбораКонтр = "" Тогда
				Настройки_ПредставлениеОтбораКонтр = НСтр("ru = 'Без условий'");
				Элементы.Настройки_ПредставлениеОтбораКонтр.Высота = 1;
				Настройки_Контр_ПоискТолькоПоОтбору = Ложь;
				Элементы.Настройки_Контр_ПоискТолькоПоОтбору.Видимость = Ложь;
			Иначе
				Элементы.Настройки_ПредставлениеОтбораКонтр.Высота = СтрЧислоСтрок(Настройки_ПредставлениеОтбораКонтр);
				Элементы.Настройки_Контр_ПоискТолькоПоОтбору.Видимость = Истина;
			КонецЕсли;
		ИначеЕсли Параметр = "Контакты" Тогда
			АдресНастроекКомпоновкиДанныхКЛ = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			ОбновитьНастройкиСКД(Параметр);
			Настройки_ПредставлениеОтбораКЛ = Строка(Результат.Отбор);
			Если Настройки_ПредставлениеОтбораКЛ = "" Тогда
				Настройки_ПредставлениеОтбораКЛ = НСтр("ru = 'Без условий'");
				Элементы.Настройки_ПредставлениеОтбораКЛ.Высота = 1;
				Настройки_Контакты_ПоискТолькоПоОтбору = Ложь;
				Элементы.Настройки_Контакты_ПоискТолькоПоОтбору.Видимость = Ложь;
			Иначе
				Элементы.Настройки_ПредставлениеОтбораКЛ.Высота = СтрЧислоСтрок(Настройки_ПредставлениеОтбора);
				Элементы.Настройки_Контакты_ПоискТолькоПоОтбору.Видимость = Истина;
			КонецЕсли;
		ИначеЕсли Параметр = "CRM_ПотенциальныеКлиенты" Тогда
			АдресНастроекКомпоновкиДанныхПК = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			ОбновитьНастройкиСКД(Параметр);
			Настройки_ПредставлениеОтбораПК = Строка(Результат.Отбор);
			Если Настройки_ПредставлениеОтбораПК = "" Тогда
				Настройки_ПредставлениеОтбораПК = НСтр("ru = 'Без условий'");
				Элементы.Настройки_ПредставлениеОтбораПК.Высота = 1;
				Настройки_ПК_ПоискТолькоПоОтбору = Ложь;
				Элементы.Настройки_ПК_ПоискТолькоПоОтбору.Видимость = Ложь;
			Иначе
				Элементы.Настройки_ПредставлениеОтбораПК.Высота = СтрЧислоСтрок(Настройки_ПредставлениеОтбораПК);
				Элементы.Настройки_ПК_ПоискТолькоПоОтбору.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиСКД(Параметр)
	Если Параметр = "Партнеры" Тогда
		СКД_КомпановщикНастроекУсловий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		СКД_КомпановщикНастроекУсловий.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		СКД_КомпановщикНастроекУсловий.Восстановить();
	ИначеЕсли Параметр = "Контрагенты" Тогда
		СКД_КомпановщикНастроекУсловийКонтр.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхКонтр));
		СКД_КомпановщикНастроекУсловийКонтр.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхКонтр));
		СКД_КомпановщикНастроекУсловийКонтр.Восстановить();
	ИначеЕсли Параметр = "Контакты" Тогда
		СКД_КомпановщикНастроекУсловийКЛ.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхКЛ));
		СКД_КомпановщикНастроекУсловийКЛ.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхКЛ));
		СКД_КомпановщикНастроекУсловийКЛ.Восстановить();
	ИначеЕсли Параметр = "CRM_ПотенциальныеКлиенты" Тогда
		СКД_КомпановщикНастроекУсловийПК.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхПК));
		СКД_КомпановщикНастроекУсловийПК.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхПК));
		СКД_КомпановщикНастроекУсловийПК.Восстановить();
	КонецЕсли;
КонецПроцедуры	


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПубличныеДомены()
	
	ПубличныеДомены.ЗагрузитьЗначения(CRM_ОбщегоНазначенияСервер.МассивПубличныхДоменов());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСравнения()
	
	Для Каждого Реквизит Из Метаданные.Справочники.Партнеры.Реквизиты Цикл
		Если Реквизит.Имя <> "НаименованиеПолное" И Не СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			СписокРеквизитовСравнения.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты Цикл
		Если Реквизит.Имя <> "CRM_Фамилия" И Не СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			СписокРеквизитовСравненияКЛ.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.Справочники.Контрагенты.Реквизиты Цикл
		Если Реквизит.Имя <> "НаименованиеПолное" И Не СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			СписокРеквизитовСравненияКонтр.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.Справочники.CRM_ПотенциальныеКлиенты.Реквизиты Цикл
		Если Не СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			СписокРеквизитовСравненияПК.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИнформациюОДубляхНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоДублей");
	Для Каждого СтрокаОригинала Из Дерево.Строки Цикл
		ТаблицаДублей =
			Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаОригинала.Контакт);
		Если ТаблицаДублей.Количество()>0 Тогда
			СтрОригинал = ТаблицаДублей.Найти(Истина, "ЭтоОригинал");
			Если СтрОригинал <> Неопределено Тогда
				РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(СтрокаОригинала.Контакт);
			КонецЕсли;
			Для Каждого СтрДубль Из ТаблицаДублей Цикл
				Если СтрокаОригинала.Строки.Найти(СтрДубль.Контакт) = Неопределено Тогда
					РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(СтрДубль.Контакт);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаДубль Из СтрокаОригинала.Строки Цикл
			РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(СтрокаОригинала.Контакт,
				СтрокаДубль.Контакт, СтрокаДубль.Заменить,
				СтрокаДубль.Комментарий);
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИнформациюОДублях(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьИнформациюОДубляхПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИнформациюОДубляхПродолжение(Результат, ДопПараметр) Экспорт
	СохранитьИнформациюОДубляхНаСервере();
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Информация о дублях сохранена.'"));
	НайтиДублиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаменитьДублиНаСервере()
	АвтозаменаЭлементов(НепосредственноУдалятьОбъекты);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьДубли(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьДублиПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Внимание! Операция ""Замена и удаления ссылок"" необратима.
                                             |Продолжить выполнение? '"), РежимДиалогаВопрос.ОКОтмена,,, НСтр("ru = 'Подтверждение удаления дублей!'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьДублиПродолжение(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ЗаменитьДублиНаСервере();
		Если НепосредственноУдалятьОбъекты Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Операция замены дублей завершена.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Дубли помечены на удаление.'"));
		КонецЕсли;
		Оповестить("ОбновлениеДублейКлиентовКонтактов");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АвтозаменаЭлементов(НепосредственноУдалятьОбъекты)
	Помеченные = Элементы.ДеревоДублейПоказатьПомеченныеНаУдаление.Пометка;
	Дерево = РеквизитФормыВЗначение("ДеревоДублей");
	Исключить = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.МассивИсключаемыхМетаданных();
	УдалитьСтрокиОригинал = Новый Массив;
	Для Каждого СтрокаПравильного Из Дерево.Строки Цикл
		
		МассивСсылок = Новый Массив;
		Для Каждого СтрокаНеправильного Из СтрокаПравильного.Строки Цикл
			Если СтрокаНеправильного.Заменить Тогда
				Если Помеченные Тогда
					Если СтрокаНеправильного.ПометкаУдаления Тогда
						МассивСсылок.Добавить(СтрокаНеправильного.Контакт);
					КонецЕсли;
				Иначе
					МассивСсылок.Добавить(СтрокаНеправильного.Контакт);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДублей =
			Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаПравильного.Контакт);
		Если ТаблицаДублей.Количество()>0 Тогда
			СтрОригинал = ТаблицаДублей.Найти(Истина, "ЭтоОригинал");
			Если СтрОригинал <> Неопределено Тогда
				РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(СтрокаПравильного.Контакт);
			КонецЕсли;
			Для Каждого СтрДубль Из ТаблицаДублей Цикл
				Если СтрокаПравильного.Строки.Найти(СтрДубль.Контакт) = Неопределено Тогда
					РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(СтрДубль.Контакт);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаДубль Из СтрокаПравильного.Строки Цикл
			РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(СтрокаПравильного.Контакт,
				СтрокаДубль.Контакт, СтрокаДубль.Заменить,
				СтрокаДубль.Комментарий);
		КонецЦикла;
		
		ЗаголовокИндикации = "";
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СтрокаПравильного.Контакт, НайтиПоСсылкам(МассивСсылок,
			, , Исключить),
			ЗаголовокИндикации);
		
		Если (ЗаменаВыполнена Или Не ВыполнятьВТранзакции) Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок,,, Исключить);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			УдалитьСтроки = Новый Массив;
			Для Каждого СтрокаНеправильного Из СтрокаПравильного.Строки Цикл
				Если Не СтрокаНеправильного.Заменить Тогда
					Продолжить;
				КонецЕсли;
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Контакт, "Ссылка") = Неопределено Тогда
					
					ПеренестиДанныеКонтактаВОригинал(СтрокаПравильного.Контакт, СтрокаНеправильного.Контакт);
					
					ОбъектКонтакт = СтрокаНеправильного.Контакт.ПолучитьОбъект();
					Если Не ОбъектКонтакт = Неопределено Тогда
						Попытка
							Если НепосредственноУдалятьОбъекты Тогда
								ОбъектКонтакт.Удалить();
								УдалитьСтроки.Добавить(СтрокаНеправильного);
							Иначе
								Если Не СтрокаНеправильного.ПометкаУдаления Тогда
									ОбъектКонтакт.УстановитьПометкуУдаления(Истина);
									СтрокаНеправильного.ПометкаУдаления = Истина;
									СтрокаНеправильного.Заменить = Ложь;
								КонецЕсли;
							КонецЕсли;
						Исключение
							ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдалитьСтроку Из УдалитьСтроки Цикл
				СтрокаПравильного.Строки.Удалить(УдалитьСтроку);
			КонецЦикла;
			Если СтрокаПравильного.Строки.Количество() = 0 Тогда
				УдалитьСтрокиОригинал.Добавить(СтрокаПравильного);
			Иначе
				СтрокаПравильного.ЕстьДублиКУдалению = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из УдалитьСтрокиОригинал Цикл
		Дерево.Строки.Удалить(УдалитьСтроку);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДублей");
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеКонтактаВОригинал(Оригинал, Дубль)
	ОригиналОбъект = Оригинал.ПолучитьОбъект();
	ЗаписыватьОъект = Ложь;
	Для Каждого СтрокаТЧ Из Дубль.КонтактнаяИнформация Цикл
		СтруктураОтбора = Новый Структура("Вид", СтрокаТЧ.Вид);
		Строки = ОригиналОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 0 Тогда
			СтрокаОригинал = ОригиналОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
			ЗаписыватьОъект = Истина;
		Иначе//Если СтрокаТЧ.Вид.РазрешитьВводНесколькихЗначений Тогда
			ДаннаяКИЕсть = Ложь;
			Для Каждого Строка Из Строки Цикл
				Если СтрокаТЧ.Представление = Строка.Представление Или СтрокаТЧ.ЗначенияПолей = Строка.ЗначенияПолей Тогда
					ДаннаяКИЕсть = Истина;
					Прервать;
				ИначеЕсли СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
					И СтрокаТЧ.НомерТелефона = Строка.НомерТелефона Тогда
					ДаннаяКИЕсть = Истина;
					Прервать;
				ИначеЕсли СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
					И СтрокаТЧ.АдресЭП = Строка.АдресЭП Тогда
					ДаннаяКИЕсть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ДаннаяКИЕсть Тогда
				СтрокаОригинал = ОригиналОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
				ЗаписыватьОъект = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Дубль.ДополнительныеРеквизиты Цикл
		СтруктураОтбора = Новый Структура("Свойство", СтрокаТЧ.Свойство);
		Строки = ОригиналОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 0 Тогда
			СтрокаОригинал = ОригиналОбъект.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
			ЗаписыватьОъект = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Оригинал) <> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Дубль, "CRM_Теги") Тогда
			Для Каждого СтрокаТЧ Из Дубль.CRM_Теги Цикл
				СтруктураОтбора = Новый Структура("Тег", СтрокаТЧ.Тег);
				Строки = ОригиналОбъект.CRM_Теги.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_Теги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Дубль, "CRM_ДополнительнаяИнформация") Тогда
			Для Каждого СтрокаТЧ Из Дубль.CRM_ДополнительнаяИнформация Цикл
				СтруктураОтбора = Новый Структура("Свойство", СтрокаТЧ.Свойство);
				Строки = ОригиналОбъект.CRM_ДополнительнаяИнформация.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_ДополнительнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(Оригинал) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Для Каждого СтрокаТЧ Из Дубль.CRM_ВидыДеятельности Цикл
				СтруктураОтбора = Новый Структура("ВидДеятельности", СтрокаТЧ.ВидДеятельности);
				Строки = ОригиналОбъект.CRM_ВидыДеятельности.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_ВидыДеятельности.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		
			Для Каждого СтрокаТЧ Из Дубль.CRM_ТипыОтношений Цикл
				СтруктураОтбора = Новый Структура("ТипОтношений", СтрокаТЧ.ТипОтношений);
				Строки = ОригиналОбъект.CRM_ТипыОтношений.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_ТипыОтношений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Оригинал) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			Для Каждого СтрокаТЧ Из Дубль.РолиКонтактногоЛица Цикл
				СтруктураОтбора = Новый Структура("РольКонтактногоЛица", СтрокаТЧ.РольКонтактногоЛица);
				Строки = ОригиналОбъект.РолиКонтактногоЛица.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.РолиКонтактногоЛица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		
			Для Каждого СтрокаТЧ Из Дубль.CRM_КлючевыеСобытия Цикл
				СтруктураОтбора = Новый Структура("ВидСобытия", СтрокаТЧ.ВидСобытия);
				Строки = ОригиналОбъект.CRM_КлючевыеСобытия.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_КлючевыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		
			Для Каждого СтрокаТЧ Из Дубль.CRM_Статусы Цикл
				СтруктураОтбора = Новый Структура("Статус", СтрокаТЧ.Статус);
				Строки = ОригиналОбъект.CRM_Статусы.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество() = 0 Тогда
					СтрокаОригинал = ОригиналОбъект.CRM_Статусы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаТЧ);
					ЗаписыватьОъект = Истина;
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Оригинал) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		
	КонецЕсли;
	
	Если ЗаписыватьОъект Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			ОригиналОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		ОригиналОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "")
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		// BSLLS:PairingBrokenTransaction-off
		НачатьТранзакцию();
		// BSLLS:PairingBrokenTransaction-on
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	ПараметрыЗамены = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		ПараметрыЗамены.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		ПараметрыЗамены.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	ПараметрыЗамены.Вставить("Объект", Неопределено);	
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и ПараметрыЗамены.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					ПараметрыЗамены.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					ПараметрыЗамены.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						// BSLLS:PairingBrokenTransaction-off
						ОтменитьТранзакцию();
						// BSLLS:PairingBrokenTransaction-on
						Возврат Ложь;
					КонецЕсли;
				КонецПопытки;
				ПараметрыЗамены.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и ПараметрыЗамены[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = ПараметрыЗамены.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "ДТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "КТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							КонецЦикла;
						Иначе
							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли; 
				КонецЦикла;
				
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по ПараметрыЗамены[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;					
				КонецЕсли;
								
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							// BSLLS:PairingBrokenTransaction-off
							ОтменитьТранзакцию();
							// BSLLS:PairingBrokenTransaction-on
							Возврат Ложь;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
							НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
						КонецЕсли;
					КонецЦикла;					
					Если НадоЗаписывать Тогда
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписи.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписи.Записать();
						Исключение
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								// BSLLS:PairingBrokenTransaction-off
								ОтменитьТранзакцию();
								// BSLLS:PairingBrokenTransaction-on
								Возврат Ложь;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные())
				И ПараметрыЗамены.Объект.Владелец = Ссылка Тогда
				ПараметрыЗамены.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И ПараметрыЗамены.Объект.Родитель = Ссылка Тогда
				ПараметрыЗамены.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  Или Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  Или Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  Или Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  Или Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ Из СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				// BSLLS:PairingBrokenTransaction-off
				НачатьТранзакцию();
				// BSLLS:PairingBrokenTransaction-on
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					// BSLLS:PairingBrokenTransaction-off
					ЗафиксироватьТранзакцию();
					// BSLLS:PairingBrokenTransaction-on
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					// BSLLS:PairingBrokenTransaction-off
					ОтменитьТранзакцию();
					// BSLLS:PairingBrokenTransaction-on
					Возврат Ложь;
				Иначе
					// BSLLS:PairingBrokenTransaction-off
					ОтменитьТранзакцию();
					// BSLLS:PairingBrokenTransaction-on
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
		ОбщегоНазначения.СообщитьПользователю("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗамены.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			ПараметрыЗамены.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			ПараметрыЗамены.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				// BSLLS:PairingBrokenTransaction-off
				ОтменитьТранзакцию();
				// BSLLS:PairingBrokenTransaction-on
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			// BSLLS:PairingBrokenTransaction-off
			ОтменитьТранзакцию();
			// BSLLS:PairingBrokenTransaction-on
		Иначе
			// BSLLS:PairingBrokenTransaction-off
			ЗафиксироватьТранзакцию();
			// BSLLS:PairingBrokenTransaction-on
		КонецЕсли;
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

&НаСервере
Процедура ВклВыклУсловноеОформлениеКУдалению()
	УсловноеОформление.Элементы[3].Использование = Не УсловноеОформление.Элементы[3].Использование;
КонецПроцедуры

&НаСервере
Процедура ВклВыклУсловноеОформлениеПомеченные()
	Помеченные = Не Элементы.ДеревоДублейПоказатьПомеченныеНаУдаление.Пометка;
	Элементы.ДеревоДублейПоказатьПомеченныеНаУдаление.Пометка = Помеченные;
	УсловноеОформление.Элементы[4].Использование = Помеченные;
	Элементы.ДеревоДублейПоказатьПомеченныеНаУдаление.Заголовок = ?(Помеченные, 
		НСтр("ru = 'Показать все'"), 
		НСтр("ru = 'Показать помеченные на удаление'"));
КонецПроцедуры

#КонецОбласти
