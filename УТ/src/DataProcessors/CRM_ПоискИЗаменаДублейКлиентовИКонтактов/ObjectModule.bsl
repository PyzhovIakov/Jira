#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура НайтиДублиВФоне(СтруктураПараметров, АдресДляРазмещенияРезультата = Неопределено) Экспорт
	ОбщееКоличество = 0;
	Обработано = 0;
	ТекПрогресс = 0;
	
	// Партнеры
	Если СтруктураПараметров.Настройки_ИскатьДублиКлиентов
		Или СтруктураПараметров.Настройки_Клиенты_ПоEmail Или СтруктураПараметров.Настройки_Клиенты_ПоНаименованию
		Или СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованию Или СтруктураПараметров.Настройки_Клиенты_ПоТелефону
		Или СтруктураПараметров.РеквизитыСравнения.Количество()>0 Тогда
		ПоНаименованию = СтруктураПараметров.Настройки_Клиенты_ПоНаименованию И СтруктураПараметров.Настройки_Клиенты_ПоНаименованиюПохожесть = 1;
		ПоПолномуНаименованию = СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованию И СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованиюПохожесть = 1;
		РеквизитыЗапроса = Новый Массив;
		Если ПоНаименованию Тогда
			РеквизитыЗапроса.Добавить("Наименование");
		КонецЕсли;
		Если ПоПолномуНаименованию Тогда
			РеквизитыЗапроса.Добавить("НаименованиеПолное");
		КонецЕсли;
		Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравнения Цикл
			РеквизитыЗапроса.Добавить(РеквизитСравнения.Значение);
		КонецЦикла;
		ТаблицаДанныхПартнеры = ПолучитьСсылки(СтруктураПараметров.СхемаКомпоновкиДанных, СтруктураПараметров.НастройкиКомпоновкиДанных, РеквизитыЗапроса);
		ОбщееКоличество = ОбщееКоличество + ТаблицаДанныхПартнеры.Количество();
	КонецЕсли;
	// +CRM_Модуль
	// Контрагенты
	Если СтруктураПараметров.Настройки_ИскатьДублиКонтр
		Или СтруктураПараметров.Настройки_Контр_ПоEmail Или СтруктураПараметров.Настройки_Контр_ПоНаименованию
		Или СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованию Или СтруктураПараметров.Настройки_Контр_ПоТелефону
		Или СтруктураПараметров.РеквизитыСравненияКонтр.Количество()>0 Тогда
		ПоНаименованиюКонтр = СтруктураПараметров.Настройки_Контр_ПоНаименованию И СтруктураПараметров.Настройки_Контр_ПоНаименованиюПохожесть = 1;
		ПоПолномуНаименованиюКонтр = СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованию И СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованиюПохожесть = 1;
		РеквизитыЗапроса = Новый Массив;
		Если ПоНаименованиюКонтр Тогда
			РеквизитыЗапроса.Добавить("Наименование");
		КонецЕсли;
		Если ПоПолномуНаименованиюКонтр Тогда
			РеквизитыЗапроса.Добавить("НаименованиеПолное");
		КонецЕсли;
		Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияКонтр Цикл
			РеквизитыЗапроса.Добавить(РеквизитСравнения.Значение);
		КонецЦикла;
		ТаблицаДанныхКонтр = ПолучитьСсылки(СтруктураПараметров.СхемаКомпоновкиДанныхКонтр, СтруктураПараметров.НастройкиКомпоновкиДанныхКонтр, РеквизитыЗапроса);
		ОбщееКоличество = ОбщееКоличество + ТаблицаДанныхКонтр.Количество();
	КонецЕсли;
	// -CRM_Модуль
		
	// Контакты
	Если СтруктураПараметров.Настройки_ИскатьДублиКонтактов
		Или СтруктураПараметров.Настройки_Контакты_ПоEmail Или СтруктураПараметров.Настройки_Контакты_ПоТелефону
		Или СтруктураПараметров.Настройки_Контакты_ПоФамилии Или СтруктураПараметров.Настройки_Контакты_ПоФИО
		Или СтруктураПараметров.РеквизитыСравненияКЛ.Количество()>0 Тогда
		ПоФИО = СтруктураПараметров.Настройки_Контакты_ПоФИО И СтруктураПараметров.Настройки_Контакты_ПоФИОПохожесть = 1;
		РеквизитыЗапроса = Новый Массив;
		Если ПоФИО Тогда
			РеквизитыЗапроса.Добавить("Наименование");
		КонецЕсли;
		Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияКЛ Цикл
			РеквизитыЗапроса.Добавить(РеквизитСравнения.Значение);
		КонецЦикла;
		ТаблицаДанныхКЛ = ПолучитьСсылки(СтруктураПараметров.СхемаКомпоновкиДанныхКЛ, СтруктураПараметров.НастройкиКомпоновкиДанныхКЛ, РеквизитыЗапроса);
		ОбщееКоличество = ОбщееКоличество + ТаблицаДанныхКЛ.Количество();
	КонецЕсли;
	
	// Потенциальные клиенты
	Если СтруктураПараметров.Настройки_ИскатьДублиПК
		Или СтруктураПараметров.Настройки_ПК_ПоEmail Или СтруктураПараметров.Настройки_ПК_ПоНаименованию
		Или СтруктураПараметров.Настройки_ПК_ПоТелефону Или СтруктураПараметров.РеквизитыСравненияПК.Количество() > 0 Тогда
		
		ПоНаименованиюПК = СтруктураПараметров.Настройки_ПК_ПоНаименованию И СтруктураПараметров.Настройки_ПК_ПоНаименованиюПохожесть = 1;
		
		РеквизитыЗапроса = Новый Массив;
		Если ПоНаименованиюПК Тогда
			РеквизитыЗапроса.Добавить("Наименование");
		КонецЕсли;
		
		Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияПК Цикл
			РеквизитыЗапроса.Добавить(РеквизитСравнения.Значение);
		КонецЦикла;
		
		ТаблицаДанныхПК = ПолучитьСсылки(СтруктураПараметров.СхемаКомпоновкиДанныхПК, СтруктураПараметров.НастройкиКомпоновкиДанныхПК, РеквизитыЗапроса);
		ОбщееКоличество = ОбщееКоличество + ТаблицаДанныхПК.Количество();
		
	КонецЕсли;
	
	// Партнеры
	Если СтруктураПараметров.Настройки_ИскатьДублиКлиентов
		Или СтруктураПараметров.Настройки_Клиенты_ПоEmail Или СтруктураПараметров.Настройки_Клиенты_ПоНаименованию
		Или СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованию Или СтруктураПараметров.Настройки_Клиенты_ПоТелефону
		Или СтруктураПараметров.РеквизитыСравнения.Количество()>0 Тогда
		НайтиДублиКлиентов(ТаблицаДанныхПартнеры, СтруктураПараметров, ПоНаименованию, ПоПолномуНаименованию, ОбщееКоличество, Обработано, ТекПрогресс);
	КонецЕсли;
	
	// +CRM_Модуль
	// Контрагенты
	Если СтруктураПараметров.Настройки_ИскатьДублиКонтр
		Или СтруктураПараметров.Настройки_Контр_ПоEmail Или СтруктураПараметров.Настройки_Контр_ПоНаименованию
		Или СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованию Или СтруктураПараметров.Настройки_Контр_ПоТелефону
		Или СтруктураПараметров.РеквизитыСравненияКонтр.Количество()>0 Тогда
		НайтиДублиКонтрагентов(ТаблицаДанныхКонтр, СтруктураПараметров, ПоНаименованиюКонтр, ПоПолномуНаименованиюКонтр, ОбщееКоличество, Обработано, ТекПрогресс);
	КонецЕсли;
	// -CRM_Модуль
	
	// Контакты
	Если СтруктураПараметров.Настройки_ИскатьДублиКонтактов
		Или СтруктураПараметров.Настройки_Контакты_ПоEmail Или СтруктураПараметров.Настройки_Контакты_ПоТелефону
		Или СтруктураПараметров.Настройки_Контакты_ПоФамилии Или СтруктураПараметров.Настройки_Контакты_ПоФИО
		Или СтруктураПараметров.РеквизитыСравненияКЛ.Количество()>0 Тогда
		НайтиДублиКонтактов(ТаблицаДанныхКЛ, СтруктураПараметров, ПоФИО, ОбщееКоличество, Обработано, ТекПрогресс);
	КонецЕсли;
	
	// Потенциальные клиенты
	Если СтруктураПараметров.Настройки_ИскатьДублиПК
		Или СтруктураПараметров.Настройки_ПК_ПоEmail Или СтруктураПараметров.Настройки_ПК_ПоНаименованию
		Или СтруктураПараметров.Настройки_ПК_ПоТелефону Или СтруктураПараметров.РеквизитыСравненияПК.Количество() > 0 Тогда
		НайтиДублиПК(ТаблицаДанныхПК, СтруктураПараметров, ПоНаименованиюПК, ОбщееКоличество, Обработано, ТекПрогресс);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров.Дерево, АдресДляРазмещенияРезультата);
	
КонецПроцедуры

Процедура НайтиДублиКлиентов(ТаблицаДанных, СтруктураПараметров, ПоНаименованию, ПоПолномуНаименованию, ОбщееКоличество, Обработано, ТекПрогресс)
	
	Исключить = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.МассивИсключаемыхМетаданных();
	
	НайденыПо = Новый Соответствие;
	
	Если СтруктураПараметров.Настройки_Клиенты_ПоискТолькоПоОтбору Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос("ВЫБРАТЬ *
		                      |	ПОМЕСТИТЬ ТаблицаДанных
		                      |ИЗ
		                      |	&ТаблицаДанных КАК ТаблицаДанных");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.Выполнить();
	КонецЕсли;
		
	Если ПоНаименованию Или ПоПолномуНаименованию Тогда
		
		Если ПоНаименованию Тогда
			ТаблицаДанных.Колонки.Добавить("СловаНаименование");
		КонецЕсли;
		Если ПоПолномуНаименованию Тогда
			ТаблицаДанных.Колонки.Добавить("СловаПолноеНаименование");
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Если ПоНаименованию Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["Наименование"]);
				СтрокаТаблицы["СловаНаименование"] = СписокСлов;
			КонецЕсли;
			Если ПоПолномуНаименованию Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["НаименованиеПолное"]);
				СтрокаТаблицы["СловаПолноеНаименование"] = СписокСлов;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ТаблицаДанных.Количество() > 0 Цикл
		
		//ОбработкаПрерыванияПользователя();
		Оригинал = Неопределено;
		ОбрабатываемаяСтрока = ТаблицаДанных[0];
		СписокСтрок = Новый Массив;
		МассивДублей = Новый Массив;
		
		Если СтруктураПараметров.Настройки_ИскатьДублиКлиентов	Тогда
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(ОбрабатываемаяСтрока.Ссылка);
			Если ТаблицаДублей.Количество() > 0 Тогда
				Для Каждого Дубль Из ТаблицаДублей цикл
					Если Дубль.ЭтоОригинал Тогда
						Оригинал = Дубль.Контакт;
						НайденыПо.Вставить(ОбрабатываемаяСтрока.Ссылка, "Сопоставлены");
					ИначеЕсли Дубль.Контакт <> ОбрабатываемаяСтрока.Ссылка Тогда
						СтрокаВДанных = ТаблицаДанных.Найти(Дубль.Контакт, "Ссылка");
						Если СтрокаВДанных<>Неопределено Тогда
							ТаблицаДанных.Удалить(СтрокаВДанных);
						КонецЕсли;
						НайденыПо.Вставить(Дубль.Контакт, "Сопоставлены");
					КонецЕсли;
					МассивДублей.Добавить(Дубль.Контакт);
				КонецЦикла;
				Если Не ЗначениеЗаполнено(Оригинал) Тогда
					Оригинал = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтрок = ТаблицаДанных.Количество();
		
		Если ПоНаименованию Или ПоПолномуНаименованию Тогда
			
			ТаблицаБукв = Новый ТаблицаЗначений;
			ТаблицаБукв.Колонки.Добавить("Позиция");
			ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
			ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
			ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
	
			Если ПоНаименованию Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок - 1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					СписокСловСравнения = СтрокаСравнения["СловаНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество() = 0 И СписокСловСравнения.Количество() = 0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов>0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСлов*14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					Если МассивДублей.Найти(СтрокаИзСписка.Ссылка) = Неопределено Тогда
						МассивДублей.Добавить(СтрокаИзСписка.Ссылка);	
						НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование");
					КонецЕсли;
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
			КоличествоСтрок = ТаблицаДанных.Количество();
			Если ПоПолномуНаименованию Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаПолноеНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок-1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					СписокСловСравнения = СтрокаСравнения["СловаПолноеНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов>0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСлов*14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					Если МассивДублей.Найти(СтрокаИзСписка.Ссылка) = Неопределено Тогда
						МассивДублей.Добавить(СтрокаИзСписка.Ссылка);	
						НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование полное");
					КонецЕсли;
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Настройки_Клиенты_ПоEmail Или СтруктураПараметров.Настройки_Клиенты_ПоТелефону
			Или (СтруктураПараметров.Настройки_Клиенты_ПоНаименованию И Не ПоНаименованию)
			Или (СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованию И Не ПоПолномуНаименованию)
			Или СтруктураПараметров.РеквизитыСравнения.Количество()>0 Тогда
			РеквизитыПоиска = Новый Соответствие;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбрабатываемаяСтрока.Ссылка);
			Если СтруктураПараметров.Настройки_Клиенты_ПоEmail Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Адрес Из КИОбъекта Цикл
						Если СтруктураПараметров.Настройки_Клиенты_ПоEmailВариант = 0 Тогда
							ВариантПоиска = "=";
							ЗначениеПоиска = Адрес.Представление;
						Иначе
							Домен = НРег(Сред(Адрес.Представление, СтрНайти(Адрес.Представление, "@")));
							Если СтруктураПараметров.ПубличныеДомены.НайтиПоЗначению(Домен)<>Неопределено Тогда
								Продолжить;;
							КонецЕсли;
							ВариантПоиска = "Подобно";
							ЗначениеПоиска = Домен;
						КонецЕсли;
						МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Клиенты_ПоТелефону Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Телефон Из КИОбъекта Цикл
						Если ЗначениеЗаполнено(Телефон.Значение) Тогда
							ВариантПоиска = "=";
							СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Телефон.Значение);
							Если СтруктураКИ.Свойство("areaCode") И СтруктураКИ.Свойство("number") Тогда
								ЗначениеПоиска = СтруктураКИ.areaCode+СтруктураКИ.number;
							ИначеЕсли СтруктураКИ.Свойство("value") Тогда
								ЗначениеПоиска = СтруктураКИ.value;
							Иначе
								Продолжить;
							КонецЕсли;
							МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
						КонецЕсли;
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Клиенты_ПоПолномуНаименованию И Не ПоПолномуНаименованию Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.НаименованиеПолное;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.НаименованиеПолное, МассивРеквизитов);
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Клиенты_ПоНаименованию И Не ПоНаименованию Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.Наименование;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование, МассивРеквизитов);
			КонецЕсли;
			
			Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравнения Цикл
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка[РеквизитСравнения.Значение];
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(РеквизитСравнения.Значение, МассивРеквизитов);
			КонецЦикла;
			
			Если РеквизитыПоиска.Количество()>0 Тогда
				ТЗДублейПоРеквизитам = НайтиДублиПоРеквизитам(РеквизитыПоиска, "Партнеры", ОбрабатываемаяСтрока.Ссылка, 
					?(СтруктураПараметров.Настройки_Клиенты_ПоискТолькоПоОтбору, МенеджерВременныхТаблиц, Неопределено));
				Для Каждого Дубль Из ТЗДублейПоРеквизитам Цикл
					Если МассивДублей.Найти(Дубль.Контакт) = Неопределено Тогда
						МассивДублей.Добавить(Дубль.Контакт);	
						НайденыПо.Вставить(Дубль.Контакт, "Реквизиты поиска");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДублей.Количество()>0 Тогда
			МассивДублей.Добавить(ОбрабатываемаяСтрока.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивДублей,,, Исключить);
			ТаблицаСсылокСвернуто = ТаблицаСсылок.Скопировать();
			ТаблицаСсылокСвернуто.Колонки.Добавить("Количество");
			Для Каждого СтрокаТЗ Из ТаблицаСсылокСвернуто Цикл
				СтрокаТЗ.Количество = 1;
			КонецЦикла;
			ТаблицаСсылокСвернуто.Свернуть("Ссылка", "Количество");
			ТаблицаСсылокСвернуто.Сортировать("Количество убыв");
			
			СтрокаОсновной = СтруктураПараметров.Дерево.Строки.Добавить();
			СтрокаОсновной.Оригинал = Истина;
			Если ЗначениеЗаполнено(Оригинал) Тогда
				СтрокаОригинала = ТаблицаСсылокСвернуто.Найти(Оригинал, "Ссылка");
				Если СтрокаОригинала = Неопределено Тогда
					СтрокаОсновной.Контакт = Оригинал;
				Иначе	
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				КонецЕсли;
			Иначе
				Если ТаблицаСсылокСвернуто.Количество() > 0 Тогда
					СтрокаОригинала = ТаблицаСсылокСвернуто[0];
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				Иначе
					СтрокаОсновной.Контакт = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли; 
			СтрокаОсновной.ПометкаУдаления = СтрокаОсновной.Контакт.ПометкаУдаления;
			СтрокаОсновной.Код = СтрокаОсновной.Контакт.Код;
			Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаОсновной.Контакт));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
			Для Каждого Ссылка Из Ссылки Цикл
				СтрокаСсылки = СтрокаОсновной.НайденныеСсылки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
					СтрокаСсылки.Код = Ссылка.Данные["Код"];
				КонецЕсли;
			КонецЦикла;
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаОсновной.Контакт);
			Для Каждого Дубликат Из МассивДублей Цикл
				Если Дубликат <> СтрокаОсновной.Контакт Тогда
					СтрокаТЗ = ТаблицаСсылокСвернуто.Найти(Дубликат, "Ссылка");
					СтрокаДубликат = СтрокаОсновной.Строки.Добавить();
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Контакт = СтрокаТЗ.Ссылка;
						СтрокаДубликат.Количество = СтрокаТЗ.Количество;
					Иначе
						СтрокаДубликат.Контакт = Дубликат;
					КонецЕсли;
					СтрокаДубликат.ПометкаУдаления = СтрокаДубликат.Контакт.ПометкаУдаления;
					СтрокаДубликат.Код = СтрокаДубликат.Контакт.Код;
					СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаДубликат.Контакт);
					Если Не ЗначениеЗаполнено(СтрокаДубликат.НайденыПо) Тогда
						СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаОсновной.Контакт);
					КонецЕсли;
					СтрокаТЗ = ТаблицаДублей.Найти(Дубликат, "Контакт");
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Комментарий = СтрокаТЗ.Комментарий;
						СтрокаДубликат.Заменить = СтрокаТЗ.Заменить;
						СтрокаДубликат.Автор = СтрокаТЗ.Автор;
						СтрокаДубликат.Дата = СтрокаТЗ.Дата;
					Иначе
						СтрокаДубликат.Комментарий = НСтр("ru = 'Дубль найден автоматически'");
					КонецЕсли;
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
					Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаДубликат.Контакт));
					Для Каждого Ссылка Из Ссылки Цикл
						СтрокаСсылки = СтрокаДубликат.НайденныеСсылки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
							СтрокаСсылки.Код = Ссылка.Данные["Код"];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				СтрокаТЗ = ТаблицаДанных.Найти(Дубликат, "Ссылка");
				Если СтрокаТЗ <> Неопределено Тогда
					Если Дубликат = СтрокаОсновной.Контакт Тогда
						ЗаполняемаяСтрока = СтрокаОсновной;
					Иначе
						ЗаполняемаяСтрока = СтрокаДубликат;
					КонецЕсли;
					ЗаполнитьЗначенияРеквизитов(ЗаполняемаяСтрока, СтрокаТЗ, СтруктураПараметров.РеквизитыСравнения);
					ТаблицаДанных.Удалить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
		Иначе	
			ТаблицаДанных.Удалить(ОбрабатываемаяСтрока);
		КонецЕсли;
		Обработано = Обработано + 1;
		Процент = Окр(Обработано*100/ОбщееКоличество, 0);
		Если Процент>ТекПрогресс Тогда
			ТекПрогресс = Процент;
			ДлительныеОперации.СообщитьПрогресс(ТекПрогресс, Строка(ОбщееКоличество));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиДублиКонтактов(ТаблицаДанных, СтруктураПараметров, ПоФИО, ОбщееКоличество, Обработано, ТекПрогресс)
	
	Исключить = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.МассивИсключаемыхМетаданных();
	
	НайденыПо = Новый Соответствие;
	
	Если СтруктураПараметров.Настройки_Контакты_ПоискТолькоПоОтбору Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос("ВЫБРАТЬ *
		                      |	ПОМЕСТИТЬ ТаблицаДанных
		                      |ИЗ
		                      |	&ТаблицаДанных КАК ТаблицаДанных");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.Выполнить();
	КонецЕсли;
		
	Если ПоФИО Тогда
		
		Если ПоФИО Тогда
			ТаблицаДанных.Колонки.Добавить("СловаНаименование");
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Если ПоФИО Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["Наименование"]);
				СтрокаТаблицы["СловаНаименование"] = СписокСлов;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ТаблицаДанных.Количество() > 0 Цикл
		
		//ОбработкаПрерыванияПользователя();
		Оригинал = Неопределено;
		ОбрабатываемаяСтрока = ТаблицаДанных[0];
		СписокСтрок = Новый Массив;
		МассивДублей = Новый Массив;
		
		Если СтруктураПараметров.Настройки_ИскатьДублиКонтактов	Тогда
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(ОбрабатываемаяСтрока.Ссылка);
			Если ТаблицаДублей.Количество() > 0 Тогда
				Для Каждого Дубль Из ТаблицаДублей Цикл
					Если Дубль.ЭтоОригинал Тогда
						Оригинал = Дубль.Контакт;
						НайденыПо.Вставить(ОбрабатываемаяСтрока.Ссылка, "Сопоставлены");
					ИначеЕсли Дубль.Контакт <> ОбрабатываемаяСтрока.Ссылка Тогда
						СтрокаВДанных = ТаблицаДанных.Найти(Дубль.Контакт, "Ссылка");
						Если СтрокаВДанных<>Неопределено Тогда
							ТаблицаДанных.Удалить(СтрокаВДанных);
						КонецЕсли;
						НайденыПо.Вставить(Дубль.Контакт, "Сопоставлены");
					КонецЕсли;
					МассивДублей.Добавить(Дубль.Контакт);
				КонецЦикла;
				Если Не ЗначениеЗаполнено(Оригинал) Тогда
					Оригинал = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
			КонецЕсли;
		
		КоличествоСтрок = ТаблицаДанных.Количество();
		
		Если ПоФИО Тогда
			
			ТаблицаБукв = Новый ТаблицаЗначений;
			ТаблицаБукв.Колонки.Добавить("Позиция");
			ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
			ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
			ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
	
			Если ПоФИО Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок-1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					
					Если СтруктураПараметров.Настройки_Контакты_ПоВладельцу Тогда
						Если ОбрабатываемаяСтрока.Ссылка.Владелец <> СтрокаСравнения.Ссылка.Владелец Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				
					СписокСловСравнения = СтрокаСравнения["СловаНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов>0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСловКЛ*14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					Если МассивДублей.Найти(СтрокаИзСписка.Ссылка) = Неопределено Тогда
						МассивДублей.Добавить(СтрокаИзСписка.Ссылка);	
						НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование");
					КонецЕсли;
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
			КоличествоСтрок = ТаблицаДанных.Количество();
		КонецЕсли;
		Если СтруктураПараметров.Настройки_Контакты_ПоEmail Или СтруктураПараметров.Настройки_Контакты_ПоТелефону
			Или (СтруктураПараметров.Настройки_Контакты_ПоФИО И Не ПоФИО) Или СтруктураПараметров.Настройки_Контакты_ПоФамилии
			Или СтруктураПараметров.РеквизитыСравненияКЛ.Количество()>0 Тогда
			РеквизитыПоиска = Новый Соответствие;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбрабатываемаяСтрока.Ссылка);
			Если СтруктураПараметров.Настройки_Контакты_ПоEmail Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Адрес Из КИОбъекта Цикл
						Если СтруктураПараметров.Настройки_Контакты_ПоEmailВариант = 0 Тогда
							ВариантПоиска = "=";
							ЗначениеПоиска = Адрес.Представление;
						Иначе
							Домен = НРег(Сред(Адрес.Представление, СтрНайти(Адрес.Представление, "@")));
							Если СтруктураПараметров.ПубличныеДомены.НайтиПоЗначению(Домен)<>Неопределено Тогда
								Продолжить;;
							КонецЕсли;
							ВариантПоиска = "Подобно";
							ЗначениеПоиска = Домен;
						КонецЕсли;
						МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контакты_ПоТелефону Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Телефон Из КИОбъекта Цикл
						Если ЗначениеЗаполнено(Телефон.Значение) Тогда
							ВариантПоиска = "=";
							СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Телефон.Значение);
							Если СтруктураКИ.Свойство("areaCode") И СтруктураКИ.Свойство("number") Тогда
								ЗначениеПоиска = СтруктураКИ.areaCode+СтруктураКИ.number;
							ИначеЕсли СтруктураКИ.Свойство("value") Тогда
								ЗначениеПоиска = СтруктураКИ.value;
							Иначе
								Продолжить;
							КонецЕсли;
							МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
						КонецЕсли;
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контакты_ПоФИО И Не ПоФИО Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.Наименование;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование, МассивРеквизитов);
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контакты_ПоФамилии Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.CRM_Фамилия;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить("CRM_Фамилия", МассивРеквизитов);
			КонецЕсли;
			
			Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияКЛ Цикл
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка[РеквизитСравнения.Значение];
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(РеквизитСравнения.Значение, МассивРеквизитов);
			КонецЦикла;
			
			Если РеквизитыПоиска.Количество()>0 Тогда
				Если СтруктураПараметров.Настройки_Контакты_ПоВладельцу Тогда
					МассивРеквизитов = Новый Массив;
					ВариантПоиска = "=";
					ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.Владелец;
					МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
					РеквизитыПоиска.Вставить("Владелец", МассивРеквизитов);
				КонецЕсли;
				
				ТЗДублейПоРеквизитам = НайтиДублиПоРеквизитам(РеквизитыПоиска, "КонтактныеЛицаПартнеров", ОбрабатываемаяСтрока.Ссылка, 
					?(СтруктураПараметров.Настройки_Контакты_ПоискТолькоПоОтбору, МенеджерВременныхТаблиц, Неопределено));
				Для Каждого Дубль Из ТЗДублейПоРеквизитам Цикл
					Если МассивДублей.Найти(Дубль.Контакт) = Неопределено Тогда
						МассивДублей.Добавить(Дубль.Контакт);	
						НайденыПо.Вставить(Дубль.Контакт, "Реквизиты поиска");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДублей.Количество()>0 Тогда
			МассивДублей.Добавить(ОбрабатываемаяСтрока.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивДублей,,, Исключить);
			ТаблицаСсылокСвернуто = ТаблицаСсылок.Скопировать();
			ТаблицаСсылокСвернуто.Колонки.Добавить("Количество");
			Для Каждого СтрокаТЗ Из ТаблицаСсылокСвернуто Цикл
				СтрокаТЗ.Количество = 1;
			КонецЦикла;
			ТаблицаСсылокСвернуто.Свернуть("Ссылка", "Количество");
			ТаблицаСсылокСвернуто.Сортировать("Количество убыв");
			
			СтрокаОсновной = СтруктураПараметров.Дерево.Строки.Добавить();
			СтрокаОсновной.Оригинал = Истина;
			Если ЗначениеЗаполнено(Оригинал) Тогда
				СтрокаОригинала = ТаблицаСсылокСвернуто.Найти(Оригинал, "Ссылка");
				Если СтрокаОригинала = Неопределено Тогда
					СтрокаОсновной.Контакт = Оригинал;
				Иначе	
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				КонецЕсли;
			Иначе
				Если ТаблицаСсылокСвернуто.Количество() > 0 Тогда
					СтрокаОригинала = ТаблицаСсылокСвернуто[0];
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				Иначе
					СтрокаОсновной.Контакт = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
			СтрокаОсновной.ПометкаУдаления = СтрокаОсновной.Контакт.ПометкаУдаления;
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
			Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаОсновной.Контакт));
			Для Каждого Ссылка Из Ссылки Цикл
				СтрокаСсылки = СтрокаОсновной.НайденныеСсылки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
					СтрокаСсылки.Код = Ссылка.Данные["Код"];
				КонецЕсли;
			КонецЦикла;
			Если СтрокаОсновной.НайденныеСсылки.Найти(СтрокаОсновной.Контакт.Владелец, "Данные") = Неопределено Тогда
				СтрокаСсылки = СтрокаОсновной.НайденныеСсылки.Вставить(0);
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Новый Структура("Данные, Метаданные", СтрокаОсновной.Контакт.Владелец, Метаданные.Справочники.Партнеры));
				СтрокаСсылки.Код = СтрокаОсновной.Контакт.Владелец["Код"];
			КонецЕсли;
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаОсновной.Контакт);
			Для Каждого Дубликат Из МассивДублей Цикл
				Если Дубликат <> СтрокаОсновной.Контакт Тогда
					СтрокаТЗ = ТаблицаСсылокСвернуто.Найти(Дубликат, "Ссылка");
					СтрокаДубликат = СтрокаОсновной.Строки.Добавить();
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Контакт = СтрокаТЗ.Ссылка;
						СтрокаДубликат.Количество = СтрокаТЗ.Количество;
					Иначе
						СтрокаДубликат.Контакт = Дубликат;
					КонецЕсли;
					СтрокаДубликат.ПометкаУдаления = СтрокаДубликат.Контакт.ПометкаУдаления;
					//СтрокаДубликат.Код = СтрокаДубликат.Контакт.Код;
					СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаДубликат.Контакт);
					Если Не ЗначениеЗаполнено(СтрокаДубликат.НайденыПо) Тогда
						СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаОсновной.Контакт);
					КонецЕсли;
					СтрокаТЗ = ТаблицаДублей.Найти(Дубликат, "Контакт");
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Комментарий = СтрокаТЗ.Комментарий;
						СтрокаДубликат.Заменить = СтрокаТЗ.Заменить;
						СтрокаДубликат.Автор = СтрокаТЗ.Автор;
						СтрокаДубликат.Дата = СтрокаТЗ.Дата;
					Иначе
						СтрокаДубликат.Комментарий = НСтр("ru = 'Дубль найден автоматически'");
					КонецЕсли;
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
					
					Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаДубликат.Контакт));
					Для Каждого Ссылка Из Ссылки Цикл
						СтрокаСсылки = СтрокаДубликат.НайденныеСсылки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
							СтрокаСсылки.Код = Ссылка.Данные["Код"];
						КонецЕсли;
					КонецЦикла;
					Если СтрокаДубликат.НайденныеСсылки.Найти(СтрокаДубликат.Контакт.Владелец, "Данные") = Неопределено Тогда
						СтрокаСсылки = СтрокаДубликат.НайденныеСсылки.Вставить(0);
						ЗаполнитьЗначенияСвойств(СтрокаСсылки, Новый Структура("Данные, Метаданные", СтрокаДубликат.Контакт.Владелец, Метаданные.Справочники.Партнеры));
						СтрокаСсылки.Код = СтрокаОсновной.Контакт.Владелец["Код"];
					КонецЕсли;
				КонецЕсли;
				СтрокаТЗ = ТаблицаДанных.Найти(Дубликат, "Ссылка");
				Если СтрокаТЗ <> Неопределено Тогда
					Если Дубликат = СтрокаОсновной.Контакт Тогда
						ЗаполняемаяСтрока = СтрокаОсновной;
					Иначе
						ЗаполняемаяСтрока = СтрокаДубликат;
					КонецЕсли;
					ЗаполнитьЗначенияРеквизитов(ЗаполняемаяСтрока, СтрокаТЗ, СтруктураПараметров.РеквизитыСравненияКЛ);
					ТаблицаДанных.Удалить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
		Иначе	
			ТаблицаДанных.Удалить(ОбрабатываемаяСтрока);
		КонецЕсли;
		Обработано = Обработано + 1;
		Процент = Окр(Обработано*100/ОбщееКоличество, 0);
		Если Процент>ТекПрогресс Тогда
			ТекПрогресс = Процент;
			ДлительныеОперации.СообщитьПрогресс(ТекПрогресс, Строка(ОбщееКоличество));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиДублиПК(ТаблицаДанных, СтруктураПараметров, ПоНаименованию, ОбщееКоличество, Обработано, ТекПрогресс)
	
	Исключить = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.МассивИсключаемыхМетаданных();
	
	НайденыПо = Новый Соответствие;
	
	Если СтруктураПараметров.Настройки_ПК_ПоискТолькоПоОтбору Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос("ВЫБРАТЬ *
		                      |	ПОМЕСТИТЬ ТаблицаДанных
		                      |ИЗ
		                      |	&ТаблицаДанных КАК ТаблицаДанных");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.Выполнить();
	КонецЕсли;
		
	Если ПоНаименованию Тогда
		
		Если ПоНаименованию Тогда
			ТаблицаДанных.Колонки.Добавить("СловаНаименование");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Если ПоНаименованию Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["Наименование"]);
				СтрокаТаблицы["СловаНаименование"] = СписокСлов;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ТаблицаДанных.Количество() > 0 Цикл
		
		//ОбработкаПрерыванияПользователя();
		Оригинал = Неопределено;
		ОбрабатываемаяСтрока = ТаблицаДанных[0];
		СписокСтрок = Новый Массив;
		МассивДублей = Новый Массив;
		
		Если СтруктураПараметров.Настройки_ИскатьДублиПК	Тогда
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(ОбрабатываемаяСтрока.Ссылка);
			Если ТаблицаДублей.Количество() > 0 Тогда
				Для Каждого Дубль Из ТаблицаДублей Цикл
					Если Дубль.ЭтоОригинал Тогда
						Оригинал = Дубль.Контакт;
						НайденыПо.Вставить(ОбрабатываемаяСтрока.Ссылка, "Сопоставлены");
					ИначеЕсли Дубль.Контакт <> ОбрабатываемаяСтрока.Ссылка Тогда
						СтрокаВДанных = ТаблицаДанных.Найти(Дубль.Контакт, "Ссылка");
						Если СтрокаВДанных <> Неопределено Тогда
							ТаблицаДанных.Удалить(СтрокаВДанных);
						КонецЕсли;
						НайденыПо.Вставить(Дубль.Контакт, "Сопоставлены");
					КонецЕсли;
					МассивДублей.Добавить(Дубль.Контакт);
				КонецЦикла;
				Если Не ЗначениеЗаполнено(Оригинал) Тогда
					Оригинал = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтрок = ТаблицаДанных.Количество();
		
		Если ПоНаименованию Тогда
			
			ТаблицаБукв = Новый ТаблицаЗначений;
			ТаблицаБукв.Колонки.Добавить("Позиция");
			ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
			ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
			ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
	
			Если ПоНаименованию Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок - 1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					СписокСловСравнения = СтрокаСравнения["СловаНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество() = 0 И СписокСловСравнения.Количество() = 0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов > 0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСловПК * 14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					Если МассивДублей.Найти(СтрокаИзСписка.Ссылка) = Неопределено Тогда
						МассивДублей.Добавить(СтрокаИзСписка.Ссылка);	
						НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование");
					КонецЕсли;
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
			КоличествоСтрок = ТаблицаДанных.Количество();
			
		КонецЕсли;
		
		Если СтруктураПараметров.Настройки_ПК_ПоEmail Или СтруктураПараметров.Настройки_ПК_ПоТелефону
			Или (СтруктураПараметров.Настройки_ПК_ПоНаименованию И Не ПоНаименованию)
			Или СтруктураПараметров.РеквизитыСравненияПК.Количество() > 0 Тогда
			
			РеквизитыПоиска = Новый Соответствие;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбрабатываемаяСтрока.Ссылка);
			
			Если СтруктураПараметров.Настройки_ПК_ПоEmail Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Адрес Из КИОбъекта Цикл
						Если СтруктураПараметров.Настройки_ПК_ПоEmailВариант = 0 Тогда
							ВариантПоиска = "=";
							ЗначениеПоиска = Адрес.Представление;
						Иначе
							Домен = НРег(Сред(Адрес.Представление, СтрНайти(Адрес.Представление, "@")));
							Если СтруктураПараметров.ПубличныеДомены.НайтиПоЗначению(Домен) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							ВариантПоиска = "Подобно";
							ЗначениеПоиска = Домен;
						КонецЕсли;
						МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураПараметров.Настройки_ПК_ПоТелефону Тогда
				
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ);
				
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Телефон Из КИОбъекта Цикл
						Если ЗначениеЗаполнено(Телефон.Значение) Тогда
							ВариантПоиска = "=";
							СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Телефон.Значение);
							Если СтруктураКИ.Свойство("areaCode") И СтруктураКИ.Свойство("number") Тогда
								ЗначениеПоиска = СтруктураКИ.areaCode + СтруктураКИ.number;
							ИначеЕсли СтруктураКИ.Свойство("value") Тогда
								ЗначениеПоиска = СтруктураКИ.value;
							Иначе
								Продолжить;
							КонецЕсли;
							МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
						КонецЕсли;
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураПараметров.Настройки_ПК_ПоНаименованию И Не ПоНаименованию Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.Наименование;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование, МассивРеквизитов);
			КонецЕсли;
			
			Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияПК Цикл
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка[РеквизитСравнения.Значение];
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(РеквизитСравнения.Значение, МассивРеквизитов);
			КонецЦикла;
			
			Если РеквизитыПоиска.Количество() > 0 Тогда
				ТЗДублейПоРеквизитам = НайтиДублиПоРеквизитам(РеквизитыПоиска, "CRM_ПотенциальныеКлиенты", ОбрабатываемаяСтрока.Ссылка, 
					?(СтруктураПараметров.Настройки_ПК_ПоискТолькоПоОтбору, МенеджерВременныхТаблиц, Неопределено));
				Для Каждого Дубль Из ТЗДублейПоРеквизитам Цикл
					Если МассивДублей.Найти(Дубль.Контакт) = Неопределено Тогда
						МассивДублей.Добавить(Дубль.Контакт);	
						НайденыПо.Вставить(Дубль.Контакт, "Реквизиты поиска");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДублей.Количество() > 0 Тогда
			
			МассивДублей.Добавить(ОбрабатываемаяСтрока.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивДублей, , , Исключить);
			ТаблицаСсылокСвернуто = ТаблицаСсылок.Скопировать();
			ТаблицаСсылокСвернуто.Колонки.Добавить("Количество");
			Для Каждого СтрокаТЗ Из ТаблицаСсылокСвернуто Цикл
				СтрокаТЗ.Количество = 1;
			КонецЦикла;
			ТаблицаСсылокСвернуто.Свернуть("Ссылка", "Количество");
			ТаблицаСсылокСвернуто.Сортировать("Количество убыв");
			
			СтрокаОсновной = СтруктураПараметров.Дерево.Строки.Добавить();
			СтрокаОсновной.Оригинал = Истина;
			Если ЗначениеЗаполнено(Оригинал) Тогда
				СтрокаОригинала = ТаблицаСсылокСвернуто.Найти(Оригинал, "Ссылка");
				Если СтрокаОригинала = Неопределено Тогда
					СтрокаОсновной.Контакт = Оригинал;
				Иначе	
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				КонецЕсли;
			Иначе
				Если ТаблицаСсылокСвернуто.Количество() > 0 Тогда
					СтрокаОригинала = ТаблицаСсылокСвернуто[0];
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				Иначе
					СтрокаОсновной.Контакт = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли; 
			
			СтрокаОсновной.ПометкаУдаления = СтрокаОсновной.Контакт.ПометкаУдаления;
			СтрокаОсновной.Код = СтрокаОсновной.Контакт.Код;
			Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаОсновной.Контакт));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
			
			Для Каждого Ссылка Из Ссылки Цикл
				
				СтрокаСсылки = СтрокаОсновной.НайденныеСсылки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
					СтрокаСсылки.Код = Ссылка.Данные["Код"];
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаОсновной.Контакт);
			
			Для Каждого Дубликат Из МассивДублей Цикл
				
				Если Дубликат <> СтрокаОсновной.Контакт Тогда
					
					СтрокаТЗ = ТаблицаСсылокСвернуто.Найти(Дубликат, "Ссылка");
					СтрокаДубликат = СтрокаОсновной.Строки.Добавить();
					
					Если СтрокаТЗ <> Неопределено Тогда
						СтрокаДубликат.Контакт = СтрокаТЗ.Ссылка;
						СтрокаДубликат.Количество = СтрокаТЗ.Количество;
					Иначе
						СтрокаДубликат.Контакт = Дубликат;
					КонецЕсли;
					
					СтрокаДубликат.ПометкаУдаления = СтрокаДубликат.Контакт.ПометкаУдаления;
					СтрокаДубликат.Код = СтрокаДубликат.Контакт.Код;
					СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаДубликат.Контакт);
					
					Если Не ЗначениеЗаполнено(СтрокаДубликат.НайденыПо) Тогда
						СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаОсновной.Контакт);
					КонецЕсли;
					
					СтрокаТЗ = ТаблицаДублей.Найти(Дубликат, "Контакт");
					Если СтрокаТЗ <> Неопределено Тогда
						СтрокаДубликат.Комментарий = СтрокаТЗ.Комментарий;
						СтрокаДубликат.Заменить = СтрокаТЗ.Заменить;
						СтрокаДубликат.Автор = СтрокаТЗ.Автор;
						СтрокаДубликат.Дата = СтрокаТЗ.Дата;
					Иначе
						СтрокаДубликат.Комментарий = НСтр("ru = 'Дубль найден автоматически'");
					КонецЕсли;
					
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
					
					Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаДубликат.Контакт));
					Для Каждого Ссылка Из Ссылки Цикл
						СтрокаСсылки = СтрокаДубликат.НайденныеСсылки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.Данные, "Код") Тогда
							СтрокаСсылки.Код = Ссылка.Данные["Код"];
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаТЗ = ТаблицаДанных.Найти(Дубликат, "Ссылка");
				Если СтрокаТЗ <> Неопределено Тогда
					Если Дубликат = СтрокаОсновной.Контакт Тогда
						ЗаполняемаяСтрока = СтрокаОсновной;
					Иначе
						ЗаполняемаяСтрока = СтрокаДубликат;
					КонецЕсли;
					ЗаполнитьЗначенияРеквизитов(ЗаполняемаяСтрока, СтрокаТЗ, СтруктураПараметров.РеквизитыСравнения);
					ТаблицаДанных.Удалить(СтрокаТЗ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе	
			
			ТаблицаДанных.Удалить(ОбрабатываемаяСтрока);
			
		КонецЕсли;
		
		Обработано = Обработано + 1;
		Процент = Окр(Обработано * 100 / ОбщееКоличество, 0);
		Если Процент > ТекПрогресс Тогда
			ТекПрогресс = Процент;
			//ДлительныеОперации.СообщитьПрогресс(ТекПрогресс, Строка(ОбщееКоличество));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСсылки(СхемаКД, НастройкиКД, РеквизитыЗапроса)
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);

	НастройкиКД = КомпоновщикНастроек.Настройки;
	
	ДетальнаяГруппировка = НастройкиКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	ВыбранныеПоляДетальнаяГруппировка = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных("Ссылка");
	Для Каждого РеквизитЗапроса Из РеквизитыЗапроса Цикл
		ВыбранныеПоляДетальнаяГруппировка = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(РеквизитЗапроса);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаРезультат;
КонецФункции

Функция НайтиДублиПоРеквизитам(МассивРеквизитов, ИмяСправочника, ТекОбъект, МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц<>Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ДанныеДляПоискаКонтактов.Ссылка КАК Контакт
		               |ИЗ
		               |	Справочник."+ИмяСправочника+" КАК ДанныеДляПоискаКонтактов
		               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанных КАК ТаблицаДанных
		               |	ПО ТаблицаДанных.Ссылка = ДанныеДляПоискаКонтактов.Ссылка
		               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДанныеДляПоискаКонтактов КАК CRM_ДанныеДляПоискаКонтактов
					   |	ПО CRM_ДанныеДляПоискаКонтактов.Контакт = ДанныеДляПоискаКонтактов.Ссылка
		               |ГДЕ
		               |	ДанныеДляПоискаКонтактов.Ссылка <> &ТекОбъект";
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ДанныеДляПоискаКонтактов.Ссылка КАК Контакт
		               |ИЗ
		               |	Справочник."+ИмяСправочника+" КАК ДанныеДляПоискаКонтактов
		               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДанныеДляПоискаКонтактов КАК CRM_ДанныеДляПоискаКонтактов
					   |	ПО CRM_ДанныеДляПоискаКонтактов.Контакт = ДанныеДляПоискаКонтактов.Ссылка
		               |ГДЕ
		               |	ДанныеДляПоискаКонтактов.Ссылка <> &ТекОбъект";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекОбъект", ТекОбъект);
	РеквизитПоиска = МассивРеквизитов.Получить("Владелец");
	Если РеквизитПоиска <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
					|	И ДанныеДляПоискаКонтактов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", РеквизитПоиска[0].ЗначениеПоиска);
		МассивРеквизитов.Удалить("Владелец");
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + " И (";
	
	Ном = 0;
	НомКлюч = 0;
	Для Каждого РеквизитПоиска Из МассивРеквизитов Цикл
		НомКлюч = НомКлюч+1;
		НомКлючСтр = Строка(НомКлюч);
		Если ТипЗнч(РеквизитПоиска.Ключ) = Тип("Строка") Тогда
			Для Каждого ЗначениеПоиска Из РеквизитПоиска.Значение Цикл
				Ном= Ном + 1;
				НомСтр = Строка(Ном);
				
				Если ТипЗнч(ЗначениеПоиска.ЗначениеПоиска) = Тип("Строка") Тогда
					ДлинаСтрокиПоиска = Макс(1, СтрДлина(ЗначениеПоиска.ЗначениеПоиска));
					Запрос.Текст = Запрос.Текст + "	
					               |	"+?(НомКлюч>1, "И", "")+" Выразить(ДанныеДляПоискаКонтактов." + РеквизитПоиска.Ключ + " КАК Строка(" + ДлинаСтрокиПоиска + "))" + ЗначениеПоиска.ВариантПоиска + "&ЗначениеПоиска"+НомКлючСтр;
				Иначе
					Запрос.Текст = Запрос.Текст + "	
					               |	"+?(НомКлюч>1, "И", "")+" ДанныеДляПоискаКонтактов."+РеквизитПоиска.Ключ + ЗначениеПоиска.ВариантПоиска + "&ЗначениеПоиска"+НомКлючСтр;
				КонецЕсли;
				
				Запрос.УстановитьПараметр("ЗначениеПоиска"+НомСтр, ЗначениеПоиска.ЗначениеПоиска);
			КонецЦикла;
		Иначе
			Если ТипЗнч(РеквизитПоиска.Ключ) = Тип("ПеречислениеСсылка.CRM_ПоляПоискаКонтактов") Тогда
				Запрос.Текст = Запрос.Текст + "	
			               |	"+?(НомКлюч>1, "И", "")+" CRM_ДанныеДляПоискаКонтактов.ПолеПоиска = &КлючПоиска"+НомКлючСтр+" И (";
			ИначеЕсли ТипЗнч(РеквизитПоиска.Ключ) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
				Запрос.Текст = Запрос.Текст + "	
			               |	"+?(НомКлюч>1, "И", "")+" CRM_ДанныеДляПоискаКонтактов.ВидКонтактнойИнформации.Тип = &КлючПоиска"+НомКлючСтр+" И (";
			КонецЕсли;
			Запрос.УстановитьПараметр("КлючПоиска"+НомКлючСтр, РеквизитПоиска.Ключ);
			УсловияПоиска = "";
			Для Каждого ЗначениеПоиска Из РеквизитПоиска.Значение Цикл
				Ном= Ном + 1;
				НомСтр = Строка(Ном);
				УсловияПоиска = УсловияПоиска + "	
			               |	"+?(ЗначениеЗаполнено(УсловияПоиска), "И", "")
							+" (CRM_ДанныеДляПоискаКонтактов.СтрокаПоиска "+ ЗначениеПоиска.ВариантПоиска+" &ЗначениеПоиска"+НомСтр
							+" ИЛИ CRM_ДанныеДляПоискаКонтактов.ЗначениеПоиска "+ ЗначениеПоиска.ВариантПоиска+" &ЗначениеПоиска"+НомСтр + ")";
				Если ЗначениеПоиска.ВариантПоиска = "=" Тогда
					Запрос.УстановитьПараметр("ЗначениеПоиска"+НомСтр, ЗначениеПоиска.ЗначениеПоиска);
				Иначе
					Запрос.УстановитьПараметр("ЗначениеПоиска"+НомСтр, "%"+ЗначениеПоиска.ЗначениеПоиска);
				КонецЕсли;
			КонецЦикла;
			Запрос.Текст = Запрос.Текст + УсловияПоиска+ ")";
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + ")";	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

Функция ЭтоБуква (Символ)
	
	Код = КодСимвола(Символ);
	
	Если (Код<=47) Или (Код>=58 И Код<=64) Или (Код>=91 И Код<=96)  Или (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСлов(ЗначениеРеквизита) Экспорт
	
	СписокСлов = Новый СписокЗначений;
	Слово = "";
	Для индекс = 1 По СтрДлина(ЗначениеРеквизита) Цикл
		Символ = Сред(ЗначениеРеквизита, индекс, 1);
		Если ЭтоБуква(Символ) Тогда
			Слово = Слово + Символ;
		Иначе
			Если Слово<>"" Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));
			Слово = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Слово<>"" Тогда
		СписокСлов.Добавить(ВРЕГ(Слово));
	КонецЕсли;
	СписокСлов.СортироватьПоЗначению();
	Возврат СписокСлов;
	
КонецФункции // ()

Функция АнализРазличийВСловах(Список1, Список2, ПолныйСписок, ОдинаковыхСлов,ДопустимоеРазличиеСлов, ТаблицаБукв) Экспорт
	Если Список1.Количество() = ПолныйСписок.Количество()
		 Или Список2.Количество() = ПолныйСписок.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПолныйСписок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Список1.Количество() = Список2.Количество() Тогда
		ЕстьОтличия = ПроверитьСловаНаОтличие(Список1, Список2, ДопустимоеРазличиеСлов, ТаблицаБукв);
		Если  Не ЕстьОтличия Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЦелоеСлово = "";
	Для Каждого Слово Из ПолныйСписок Цикл
		ЦелоеСлово = ЦелоеСлово + Слово.Значение;
	КонецЦикла;
	Слово1 = "";
	Для Каждого Слово Из Список1 Цикл
		Слово1 = Слово1 + Слово.Значение;
	КонецЦикла;
	Слово2 = "";
	Для Каждого Слово Из Список2 Цикл
		Слово2 = Слово2 + Слово.Значение;
	КонецЦикла;
	
	Если Окр(СтрДлина(Слово1)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов
		И Окр(СтрДлина(Слово2)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция СравнитьСлова(Слово1, Слово2, ДопустимоеРазличиеСлов, ТаблицаБукв)
	ТаблицаБукв.Очистить();
	ТаблицаБуквПустая = Истина;
		
	Если СтрДлина(Слово1)<=СтрДлина(Слово2) Тогда
		Слово = ВРЕГ(Слово1);
		ИскомоеСлово = ВРЕГ(Слово2);
	Иначе
		Слово = ВРЕГ(Слово2);
		ИскомоеСлово = ВРЕГ(Слово1);
	КонецЕсли;
	
	Для индекс = 1 По СтрДлина(Слово) Цикл
		Символ = Сред(Слово, индекс, 1);
		Если ТаблицаБуквПустая  Тогда
			поз = СтрНайти(ИскомоеСлово, Символ);
			поправка = 0;
			Пока поз>0 Цикл
				ТаблицаБуквПустая = Ложь;
				НовСтр = ТаблицаБукв.Добавить();
				НовСтр.Позиция = поз + поправка;
				НовСтр.ДлинаСлова = 1;
				НовСтр.КолвоПропущенных = 0;
				поправка = поправка + поз;
				поз = СтрНайти(Сред(ИскомоеСлово, поправка+1), Символ);
			КонецЦикла;
		Иначе
			Для Каждого Вхождение Из ТаблицаБукв Цикл
				Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
				ИначеЕсли Сред(Слово, Вхождение.Позиция + Вхождение.ДлинаСлова - Вхождение.КолвоПропущенных, 1) = Вхождение.ПропущеноНа Тогда
					Вхождение.ПропущеноНа = "";
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				Иначе
					Если Окр((Вхождение.КолвоПропущенных + 1) / СтрДлина(ИскомоеСлово) * 100)<=ДопустимоеРазличиеСлов Тогда
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
						Вхождение.ПропущеноНа = Символ;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;		
	КонецЦикла;
	
	Если ТаблицаБуквПустая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ТаблицаБукв.Сортировать("ДлинаСлова УБЫВ, КолвоПропущенных ВОЗР");
	
	СовпалоСимволов = ТаблицаБукв[0].ДлинаСлова - ТаблицаБукв[0].КолвоПропущенных;
	
	Возврат (Окр(СовпалоСимволов / СтрДлина(ИскомоеСлово) * 100) >= (100 - ДопустимоеРазличиеСлов));
		
КонецФункции

Функция ПроверитьСловаНаОтличие(СписокСлов1, СписокСлов2, ДопустимоеРазличиеСлов, ТаблицаБукв) Экспорт
	СписокРазличающихсяСлов = Новый СписокЗначений;
	Для Каждого Слово1 Из СписокСлов1 Цикл
		ЕстьПара = Ложь;
		Для Каждого Слово2 Из СписокСлов2 Цикл
			Если СравнитьСлова(Слово1.Значение, Слово2.Значение, ДопустимоеРазличиеСлов, ТаблицаБукв) Тогда
				ЕстьПара = Истина;
				СписокСлов2.Удалить(Слово2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьПара Тогда
			СписокРазличающихсяСлов.Добавить(Слово1.Значение);
		КонецЕсли;
	КонецЦикла;	
	
	СписокСлов1 = СписокРазличающихсяСлов;
	
	Возврат Не (СписокСлов1.Количество() = 0 И СписокСлов2.Количество() = 0)
	
КонецФункции

Процедура ЗаполнитьЗначенияРеквизитов(Приемник, Источник, РеквизитыСравнения)
	Для Каждого Реквизит Из РеквизитыСравнения Цикл
		Приемник["Реквизит_" + Реквизит.Значение] = Источник[Реквизит.Значение]
	КонецЦикла;
КонецПроцедуры

// +CRM_Модуль
Процедура НайтиДублиКонтрагентов(ТаблицаДанных, СтруктураПараметров, ПоНаименованию, ПоПолномуНаименованию, ОбщееКоличество, Обработано, ТекПрогресс)
	
	Исключить = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.МассивИсключаемыхМетаданных();
	
	НайденыПо = Новый Соответствие;
	
	Если СтруктураПараметров.Настройки_Контр_ПоискТолькоПоОтбору Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос("ВЫБРАТЬ *
		                      |	ПОМЕСТИТЬ ТаблицаДанных
		                      |ИЗ
		                      |	&ТаблицаДанных КАК ТаблицаДанных");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.Выполнить();
	КонецЕсли;
		
	Если ПоНаименованию Или ПоПолномуНаименованию Тогда
		
		Если ПоНаименованию Тогда
			ТаблицаДанных.Колонки.Добавить("СловаНаименование");
		КонецЕсли;
		Если ПоПолномуНаименованию Тогда
			ТаблицаДанных.Колонки.Добавить("СловаПолноеНаименование");
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Если ПоНаименованию Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["Наименование"]);
				СтрокаТаблицы["СловаНаименование"] = СписокСлов;
			КонецЕсли;
			Если ПоПолномуНаименованию Тогда
				СписокСлов = ПолучитьСписокСлов(СтрокаТаблицы["НаименованиеПолное"]);
				СтрокаТаблицы["СловаПолноеНаименование"] = СписокСлов;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ТаблицаДанных.Количество() > 0 Цикл
		
		//ОбработкаПрерыванияПользователя();
		Оригинал = Неопределено;
		ОбрабатываемаяСтрока = ТаблицаДанных[0];
		СписокСтрок = Новый Массив;
		МассивДублей = Новый Массив;
		
		Если СтруктураПараметров.Настройки_ИскатьДублиКонтр	Тогда
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(ОбрабатываемаяСтрока.Ссылка);
			Если ТаблицаДублей.Количество() > 0 Тогда
				Для Каждого Дубль Из ТаблицаДублей Цикл
					Если Дубль.ЭтоОригинал Тогда
						Оригинал = Дубль.Контакт;
						НайденыПо.Вставить(ОбрабатываемаяСтрока.Ссылка, "Сопоставлены");
					ИначеЕсли Дубль.Контакт <> ОбрабатываемаяСтрока.Ссылка Тогда
						СтрокаВДанных = ТаблицаДанных.Найти(Дубль.Контакт, "Ссылка");
						Если СтрокаВДанных<>Неопределено Тогда
							ТаблицаДанных.Удалить(СтрокаВДанных);
						КонецЕсли;
						НайденыПо.Вставить(Дубль.Контакт, "Сопоставлены");
					КонецЕсли;
					МассивДублей.Добавить(Дубль.Контакт);
				КонецЦикла;
				Если Не ЗначениеЗаполнено(Оригинал) Тогда
					Оригинал = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтрок = ТаблицаДанных.Количество();
		
		Если ПоНаименованию Или ПоПолномуНаименованию Тогда
			
			ТаблицаБукв = Новый ТаблицаЗначений;
			ТаблицаБукв.Колонки.Добавить("Позиция");
			ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
			ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
			ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
	
			Если ПоНаименованию Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок-1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					СписокСловСравнения = СтрокаСравнения["СловаНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов>0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСловКонтр*14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					МассивДублей.Добавить(СтрокаИзСписка.Ссылка);
					НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование");
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
			КоличествоСтрок = ТаблицаДанных.Количество();
			Если ПоПолномуНаименованию Тогда
				ТекущийСписокСлов = ОбрабатываемаяСтрока["СловаПолноеНаименование"].Скопировать();
				
				Для индекс = 1 По КоличествоСтрок-1 Цикл
					СтрокаСравнения = ТаблицаДанных[индекс];
					СписокСловСравнения = СтрокаСравнения["СловаПолноеНаименование"].Скопировать();
					СписокНеНайденных = Новый СписокЗначений;
					
					ОдинаковыхСлов = 0;
					Для Каждого Слово Из ТекущийСписокСлов Цикл
						ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
						Если ЭлементСпискаСравнения = Неопределено Тогда
							СписокНеНайденных.Добавить(Слово.Значение);
						Иначе
							СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
							ОдинаковыхСлов = ОдинаковыхСлов + 1;
						КонецЕсли;
					КонецЦикла;
					
					
					Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
						ЕстьОтличия = Ложь;
					Иначе
						Если ОдинаковыхСлов>0 Тогда
							ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, СтруктураПараметров.ДопустимоеРазличиеСловКонтр*14, ТаблицаБукв);
						Иначе
							ЕстьОтличия = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЕстьОтличия Тогда
						СписокСтрок.Добавить(СтрокаСравнения);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаИзСписка Из СписокСтрок Цикл
					МассивДублей.Добавить(СтрокаИзСписка.Ссылка);
					НайденыПо.Вставить(СтрокаИзСписка.Ссылка, "Наименование полное");
					ТаблицаДанных.Удалить(СтрокаИзСписка);
				КонецЦикла;
				СписокСтрок.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Настройки_Контр_ПоEmail Или СтруктураПараметров.Настройки_Контр_ПоТелефону
			Или (СтруктураПараметров.Настройки_Контр_ПоНаименованию И Не ПоНаименованию)
			Или (СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованию И Не ПоПолномуНаименованию)
			Или СтруктураПараметров.РеквизитыСравненияКонтр.Количество()>0 Тогда
			РеквизитыПоиска = Новый Соответствие;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбрабатываемаяСтрока.Ссылка);
			Если СтруктураПараметров.Настройки_Контр_ПоEmail Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ,, Дата(1,1,1));
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Адрес Из КИОбъекта Цикл
						Если СтруктураПараметров.Настройки_Контр_ПоEmailВариант = 0 Тогда
							ВариантПоиска = "=";
							ЗначениеПоиска = Адрес.Представление;
						Иначе
							Домен = НРег(Сред(Адрес.Представление, СтрНайти(Адрес.Представление, "@")));
							Если СтруктураПараметров.ПубличныеДомены.НайтиПоЗначению(Домен)<>Неопределено Тогда
								Продолжить;;
							КонецЕсли;
							ВариантПоиска = "Подобно";
							ЗначениеПоиска = Домен;
						КонецЕсли;
						МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контр_ПоТелефону Тогда
				МассивРеквизитов = Новый Массив;
				МассивТиповКИ = Новый Массив;
				МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ,, Дата(1,1,1));
				Если КИОбъекта.Количество() > 0 Тогда
					Для Каждого Телефон Из КИОбъекта Цикл
						Если ЗначениеЗаполнено(Телефон.Значение) Тогда
							ВариантПоиска = "=";
							СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Телефон.Значение);
							Если СтруктураКИ.Свойство("areaCode") И СтруктураКИ.Свойство("number") Тогда
								ЗначениеПоиска = СтруктураКИ.areaCode+СтруктураКИ.number;
							ИначеЕсли СтруктураКИ.Свойство("value") Тогда
								ЗначениеПоиска = СтруктураКИ.value;
							Иначе
								Продолжить;
							КонецЕсли;
							МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
						КонецЕсли;
					КонецЦикла;
					Если МассивРеквизитов.Количество() > 0 Тогда
						РеквизитыПоиска.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, МассивРеквизитов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контр_ПоПолномуНаименованию И Не ПоПолномуНаименованию Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.НаименованиеПолное;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.НаименованиеПолное, МассивРеквизитов);
			КонецЕсли;
			Если СтруктураПараметров.Настройки_Контр_ПоНаименованию И Не ПоНаименованию Тогда
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка.Наименование;
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование, МассивРеквизитов);
			КонецЕсли;
			
			Для Каждого РеквизитСравнения Из СтруктураПараметров.РеквизитыСравненияКонтр Цикл
				МассивРеквизитов = Новый Массив;
				ВариантПоиска = "=";
				ЗначениеПоиска = ОбрабатываемаяСтрока.Ссылка[РеквизитСравнения.Значение];
				МассивРеквизитов.Добавить(Новый Структура("ВариантПоиска,  ЗначениеПоиска", ВариантПоиска, ЗначениеПоиска));
				РеквизитыПоиска.Вставить(РеквизитСравнения.Значение, МассивРеквизитов);
			КонецЦикла;
			
			Если РеквизитыПоиска.Количество()>0 Тогда
				ТЗДублейПоРеквизитам = НайтиДублиПоРеквизитам(РеквизитыПоиска, "Контрагенты", ОбрабатываемаяСтрока.Ссылка, 
					?(СтруктураПараметров.Настройки_Контр_ПоискТолькоПоОтбору, МенеджерВременныхТаблиц, Неопределено));
				Для Каждого Дубль Из ТЗДублейПоРеквизитам Цикл
					МассивДублей.Добавить(Дубль.Контакт);	
					НайденыПо.Вставить(Дубль.Контакт, "Реквизиты поиска");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДублей.Количество()>0 Тогда
			МассивДублей.Добавить(ОбрабатываемаяСтрока.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивДублей,,, Исключить);
			ТаблицаСсылокСвернуто = ТаблицаСсылок.Скопировать();
			ТаблицаСсылокСвернуто.Колонки.Добавить("Количество");
			Для Каждого СтрокаТЗ Из ТаблицаСсылокСвернуто Цикл
				СтрокаТЗ.Количество = 1;
			КонецЦикла;
			ТаблицаСсылокСвернуто.Свернуть("Ссылка", "Количество");
			ТаблицаСсылокСвернуто.Сортировать("Количество убыв");
			
			СтрокаОсновной = СтруктураПараметров.Дерево.Строки.Добавить();
			СтрокаОсновной.Оригинал = Истина;
			Если ЗначениеЗаполнено(Оригинал) Тогда
				СтрокаОригинала = ТаблицаСсылокСвернуто.Найти(Оригинал, "Ссылка");
				Если СтрокаОригинала = Неопределено Тогда
					СтрокаОсновной.Контакт = Оригинал;
				Иначе	
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				КонецЕсли;
			Иначе
				Если ТаблицаСсылокСвернуто.Количество() > 0 Тогда
					СтрокаОригинала = ТаблицаСсылокСвернуто[0];
					СтрокаОсновной.Контакт = СтрокаОригинала.Ссылка;
					СтрокаОсновной.Количество = СтрокаОригинала.Количество;
					ТаблицаСсылокСвернуто.Удалить(СтрокаОригинала);
				Иначе
					СтрокаОсновной.Контакт = ОбрабатываемаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли; 
			СтрокаОсновной.ПометкаУдаления = СтрокаОсновной.Контакт.ПометкаУдаления;
			СтрокаОсновной.Код = СтрокаОсновной.Контакт.Код;
			Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаОсновной.Контакт));
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
			СтрокаОсновной.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
			Для Каждого Ссылка Из Ссылки Цикл
				СтрокаСсылки = СтрокаОсновной.НайденныеСсылки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
			КонецЦикла;
			ТаблицаДублей = Обработки.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.ПолучитьЗарегистрированныеДубли(СтрокаОсновной.Контакт);
			Для Каждого Дубликат Из МассивДублей Цикл
				Если Дубликат <> СтрокаОсновной.Контакт Тогда
					СтрокаТЗ = ТаблицаСсылокСвернуто.Найти(Дубликат, "Ссылка");
					СтрокаДубликат = СтрокаОсновной.Строки.Добавить();
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Контакт = СтрокаТЗ.Ссылка;
						СтрокаДубликат.Количество = СтрокаТЗ.Количество;
					Иначе
						СтрокаДубликат.Контакт = Дубликат;
					КонецЕсли;
					СтрокаДубликат.ПометкаУдаления = СтрокаДубликат.Контакт.ПометкаУдаления;
					СтрокаДубликат.Код = СтрокаДубликат.Контакт.Код;
					СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаДубликат.Контакт);
					Если Не ЗначениеЗаполнено(СтрокаДубликат.НайденыПо) Тогда
						СтрокаДубликат.НайденыПо = НайденыПо.Получить(СтрокаОсновной.Контакт);
					КонецЕсли;
					СтрокаТЗ = ТаблицаДублей.Найти(Дубликат, "Контакт");
					Если СтрокаТЗ<>Неопределено Тогда
						СтрокаДубликат.Комментарий = СтрокаТЗ.Комментарий;
						СтрокаДубликат.Заменить = СтрокаТЗ.Заменить;
						СтрокаДубликат.Автор = СтрокаТЗ.Автор;
						СтрокаДубликат.Дата = СтрокаТЗ.Дата;
					Иначе
						СтрокаДубликат.Комментарий = НСтр("ru = 'Дубль найден автоматически'");
					КонецЕсли;
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Данные", Новый ОписаниеТипов());
					СтрокаДубликат.НайденныеСсылки.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
					Ссылки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", СтрокаДубликат.Контакт));
					Для Каждого Ссылка Из Ссылки Цикл
						СтрокаСсылки = СтрокаДубликат.НайденныеСсылки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСсылки, Ссылка, "Данные, Метаданные");
					КонецЦикла;
				КонецЕсли;
				СтрокаТЗ = ТаблицаДанных.Найти(Дубликат, "Ссылка");
				Если СтрокаТЗ <> Неопределено Тогда
					Если Дубликат = СтрокаОсновной.Контакт Тогда
						ЗаполняемаяСтрока = СтрокаОсновной;
					Иначе
						ЗаполняемаяСтрока = СтрокаДубликат;
					КонецЕсли;
					ЗаполнитьЗначенияРеквизитов(ЗаполняемаяСтрока, СтрокаТЗ, СтруктураПараметров.РеквизитыСравненияКонтр);
					ТаблицаДанных.Удалить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
		Иначе	
			ТаблицаДанных.Удалить(ОбрабатываемаяСтрока);
		КонецЕсли;
		Обработано = Обработано + 1;
		Процент = Окр(Обработано*100/ОбщееКоличество, 0);
		Если Процент>ТекПрогресс Тогда
			ТекПрогресс = Процент;
			ДлительныеОперации.СообщитьПрогресс(ТекПрогресс, Строка(ОбщееКоличество));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// -CRM_Модуль
#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid call of object on client.'");
#КонецЕсли