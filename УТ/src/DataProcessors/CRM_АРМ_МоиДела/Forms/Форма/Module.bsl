
#Область ОписаниеПеременных

&НаКлиенте
Перем ИмяИсходнойТаблицы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Мои дела""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	Попытка
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	ТекущаяРоль = Справочники.РолиИсполнителей.ПустаяСсылка();
	ОтборПоРолиУстановлен = Истина;
	
	Элементы.ДекорацияДобавитьНовыйВиджет.Видимость = Истина;
	
	ТекущаяДатаВремя = ТекущаяДатаСеанса();

	ВидАРМ = "Канбан";
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПриСозданииНаСервере(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	// +Виджеты
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоказатели") Тогда
		ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
		ПоказыватьВиджетыПриОткрытии = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
		Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
		Элементы.СкрытьОтобразитьВиджеты.Пометка = ПоказыватьВиджетыПриОткрытии;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Истина;
	Иначе
		ВидимостьВиджетов = Ложь;
		ПоказыватьВиджетыПриОткрытии = Ложь;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Ложь;
		Элементы.ГруппаВиджеты.Видимость = Ложь;
	КонецЕсли;
	
	Если ПоказыватьВиджетыПриОткрытии Тогда
		CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	КонецЕсли;
	// -Виджеты
	
	ТекущийПользовательПриИзмененииНаСервере();
	
	СоздатьКнопкиВидАРМ();
	СоздатьКнопиОтборПросроченные();
	
	СписокПериодов.Добавить("ПроизвольныйПериод", НСтр("ru='Произвольный период';en='Custom Period'"));
	СписокПериодов.Добавить("Сегодня", НСтр("ru='Сегодня';en='Today'"));
	СписокПериодов.Добавить("3 дня", НСтр("ru='3 дня';en='3 days'"));
	СписокПериодов.Добавить("Неделя", НСтр("ru='Неделя';en='Week'"));
	СписокПериодов.Добавить("Месяц", НСтр("ru='Месяц';en='Month'"));
	
	ШиринаКолонокКанбан = 30;
	
	КлючОбъекта = "Обработка.CRM_АРМ_МоиДела.Форма.Форма/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "", Новый Соответствие);
	
	Если Настройки.Количество() > 0 Тогда
		
		ВариантПериода = Настройки.Получить("ВариантПериода");
		ПериодОтбора =  Настройки.Получить("ПериодОтбора");
		Если ОтборСозданы.НайтиПоЗначению(ПериодОтбора) = Неопределено Тогда
			ОтборСозданы[0].Значение = ПериодОтбора;
		КонецЕсли;
		
		ОтборВключатьПросроченные = Настройки.Получить("ОтборВключатьПросроченные");
		
		Если Не ЗначениеЗаполнено(ОтборВключатьПросроченные) Тогда
			ОтборВключатьПросроченные = 2;
		КонецЕсли;
		
		ЗначениеНастройки = Настройки.Получить("ВидАРМ");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ВидАРМ = ЗначениеНастройки;
			ИзменитьВидАРМНаСервере();
		КонецЕсли;
		
	Иначе
		
		ВариантПериода = "Месяц";
		
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ПокраситьКнопкиПросроченныеНаСервере();
	
	СформироватьПредставлениеПериода();
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("CRM_РазрешитьРучнуюНастройкуВажностиИСрочностиЗадач") Тогда
		РазрешитьРучнуюНастройкуВажностиИСрочностиЗадач();
	КонецЕсли;
	
	НастроитьВидимостьЭлементовРежимаМатрица();
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	ПриПолученииВнешнихБиблиотек = Новый ОписаниеОповещения(
		"Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета", ЭтотОбъект);
	
	CRM_РаботаСВнешнимиБиблиотекамиКлиент.ПриОткрытииФормы(ЭтотОбъект, ПриПолученииВнешнихБиблиотек);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	// +Виджеты
	Если ПоказыватьВиджетыПриОткрытии Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	КонецЕсли;
	// -Виджеты
	
	ОбновитьОтборы();
	
	// обновление реквизита "ТекущаяДатаВремя"
	ПодключитьОбработчикОжидания("ОбновлениеТекущаяДатаВремя", 60);
	УстановитьШиринуКолонокКанбанСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		ОбновитьВсеВиджеты();
	ИначеЕсли ИмяСобытия = "CRM_УстановленФлагОбработано" Тогда
		ОбновитьОтборы();
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" Или ИмяСобытия = "ЗадачаВыполнена" Тогда
		ОбновитьОтборы();
		ОбновитьТаблицыМатрицы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаЗавершенныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	НовыйКлюч = ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Отложенные", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Отложенные");
	Элементы.ТаблицаОтложенные.ТекущаяСтрока = НовыйКлюч;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	НовыйКлюч = ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Текущие", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Текущие");
	Элементы.ТаблицаТекущие.ТекущаяСтрока = НовыйКлюч;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	// обработать завершение задачи
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	Если ТипЗнч(ОбъектДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектДействия, "CRM_Личная")
			 И ТипЗнч(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектДействия,
			 "Предмет")) <> Тип("ДокументСсылка.CRM_Интерес") Тогда
			ЗавершитьЗадачу(ОбъектДействия);
			ОбновитьОтборы();
			ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Завершенные", Строка);
		Иначе
			ТекущаяАктивность = ОбъектДействия;
			ПодключитьОбработчикОжидания("ОткрытьФормуТекущейАктивности", 0.1, Истина);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ТекущаяАктивность = ОбъектДействия;
		ПодключитьОбработчикОжидания("ОткрытьФормуТекущейАктивности", 0.1, Истина);
		Возврат;
	ИначеЕсли ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		Если ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания.Значение, "Завершенные") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаРезультата", ЭтотОбъект, ПараметрыПеретаскивания.Значение);
			ПоказатьВводСтроки(ОписаниеОповещения,
				 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектДействия, "Результат"),
				 НСтр("ru='Введите результат';en='Enter result'"), ,
				 Истина);
		КонецЕсли;
		Возврат;
	Иначе		
		ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Завершенные", Строка);
	КонецЕсли;
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Завершенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СтруктураСтроки.Объект),
			 ЭтотОбъект);
	ИначеЕсли ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СтруктураСтроки.Объект),
			 ЭтотОбъект);
	Иначе
		ПоказатьЗначение(, СтруктураСтроки.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанныеОбъект = ПолучитьОбъектСтроки(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанныеОбъект <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанныеОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьПолосуРегулированияНажатие(Элемент)
	Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость = Ложь;
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Виджеты

&НаКлиенте
Процедура ДобавитьВиджет(Элемент)
	
	CRM_РаботаСВиджетамиКлиент.ОткрытьВыборВариантаВиджета(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьВиджет()

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(ВыбранныйВариантВиджета, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариантВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВиджетНаФорму(ВыбранныйВариантВиджета);
	
КонецПроцедуры // ДобавитьВиджетЗавершение()

&НаКлиенте
Процедура Подключаемый_HTMLВиджетаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	ДанныеВиджета = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьДанныеВиджета(
		ЭтотОбъект, Элемент.Имя);
	
	Если ДанныеВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	Если СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
			"CRM_Статистика.Показатели.Виджеты.Удобства.КоличествоНажатийЗнакОбновить");
		
		ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		
		ОписаниеОповещенияОИзмененииНастроек = Новый ОписаниеОповещения(
			"ПриИзмененииНастроекВариантаВиджета", ЭтотОбъект);
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьНастройкиВиджета(
			ЭтотОбъект, ДанныеВиджета, ОписаниеОповещенияОИзмененииНастроек);
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "СкрытьВиджет") Тогда
		
		УдалитьВиджетНаФорме(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьРасшифровкуВиджета(ЭтотОбъект, ДанныеВиджета);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_HTMLВиджетаПриНажатии()

&НаКлиенте
Процедура ПриИзмененииНастроекВариантаВиджета(ДанныеВиджета, ДополнительныеПараметры) Экспорт
	
	ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
	
КонецПроцедуры // ПриИзмененииНастроекВариантаВиджета()

#КонецОбласти

&НаКлиенте
Процедура ТаблицаВходящиеПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаВходящие.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьКоманд = Ложь;
	
	ТекущийОбъект = Элементы.ТаблицаВходящие.ТекущиеДанные.Объект;
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.ТелефонныйЗвонок") 
		Или ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		Или ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		Или ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") 
		Или ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.CRM_Заявка")
		Или ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.CRM_Диалоги") 
		Или ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		ДоступностьКоманд = Истина;
	КонецЕсли;
	
	Элементы.ТаблицаВходящиеКонтекстноеМенюСкрытьПисьмоИзАРМПланировщик1.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

#Область Матрица

&НаКлиенте
Процедура МатрицаВажныеСрочныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсходнойТаблицы = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсходнойТаблицы = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсходнойТаблицы = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсходнойТаблицы = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеСрочныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеСрочныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Ссылка = ПолучитьСсылкуНаОбъект(ПараметрыПеретаскивания.Значение);
	ЗаписатьВажностьСрочность(Ссылка, Истина, Истина);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[ИмяИсходнойТаблицы]);
	ИмяТекущейТаблицы = Элемент.Имя;
	КлючЗаписи = ПараметрыПеретаскивания.Значение;
	ПодключитьОбработчикОжидания("АРМВыделениеТекущейСтрокиПриПеретаскивании", 0.3, Истина);
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Ссылка = ПолучитьСсылкуНаОбъект(ПараметрыПеретаскивания.Значение);
	ЗаписатьВажностьСрочность(Ссылка, Ложь, Истина);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[ИмяИсходнойТаблицы]);
	ИмяТекущейТаблицы = Элемент.Имя;
	КлючЗаписи = ПараметрыПеретаскивания.Значение;
	ПодключитьОбработчикОжидания("АРМВыделениеТекущейСтрокиПриПеретаскивании", 0.3, Истина);
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Ссылка = ПолучитьСсылкуНаОбъект(ПараметрыПеретаскивания.Значение);
	ЗаписатьВажностьСрочность(Ссылка, Истина, Ложь);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[ИмяИсходнойТаблицы]);
	ИмяТекущейТаблицы = Элемент.Имя;
	КлючЗаписи = ПараметрыПеретаскивания.Значение;
	ПодключитьОбработчикОжидания("АРМВыделениеТекущейСтрокиПриПеретаскивании", 0.3, Истина);
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Ссылка = ПолучитьСсылкуНаОбъект(ПараметрыПеретаскивания.Значение);
	ЗаписатьВажностьСрочность(Ссылка, Ложь, Ложь);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[ИмяИсходнойТаблицы]);
	ИмяТекущейТаблицы = Элемент.Имя;
	КлючЗаписи = ПараметрыПеретаскивания.Значение;
	ПодключитьОбработчикОжидания("АРМВыделениеТекущейСтрокиПриПеретаскивании", 0.3, Истина);
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеСрочныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МатрицаВажныеСрочныеРучнаяУстановкаВажностиИСрочности" 
		И ТекущиеДанные.РучнаяУстановкаВажностиИСрочности 
		И РазрешенаРучнаяНастройкаВажностиИСрочностиЗадач Тогда
		ПоказатьВопросОбОтменеРучнойУстановкиВажностиИСрочности(ТекущиеДанные);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МатрицаНеважныеСрочныеРучнаяУстановкаВажностиИСрочности" 
		И ТекущиеДанные.РучнаяУстановкаВажностиИСрочности 
		И РазрешенаРучнаяНастройкаВажностиИСрочностиЗадач Тогда
		ПоказатьВопросОбОтменеРучнойУстановкиВажностиИСрочности(ТекущиеДанные);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МатрицаВажныеНесрочныеРучнаяУстановкаВажностиИСрочности" 
		И ТекущиеДанные.РучнаяУстановкаВажностиИСрочности 
		И РазрешенаРучнаяНастройкаВажностиИСрочностиЗадач Тогда
		ПоказатьВопросОбОтменеРучнойУстановкиВажностиИСрочности(ТекущиеДанные);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МатрицаНеважныеНесрочныеРучнаяУстановкаВажностиИСрочности" 
		И ТекущиеДанные.РучнаяУстановкаВажностиИСрочности 
		И РазрешенаРучнаяНастройкаВажностиИСрочностиЗадач Тогда
		ПоказатьВопросОбОтменеРучнойУстановкиВажностиИСрочности(ТекущиеДанные);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеСрочныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеСрочныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеСрочныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаВажныеНесрочныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МатрицаНеважныеНесрочныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти // Матрица

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.АРММоиДела.ДлительностьСценариев.ВремяОбновленияАРМ");
	
	ОбновитьОтборы();
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.АРММоиДела.ДлительностьСценариев.ВремяОбновленияАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМПланировщикЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
			 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные();
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Показатели.Виджеты.ОткрытиеВОдинКлик.ОткрытиеИзРазделаМоиДела");
	
	ПоказыватьВиджетыПриОткрытии = НЕ ПоказыватьВиджетыПриОткрытии;
	Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
	СохранитьНастройкуПоказыватьВиджеты(ИмяФормы, ПоказыватьВиджетыПриОткрытии);
	
	Элементы.СкрытьОтобразитьВиджеты.Пометка = ПоказыватьВиджетыПриОткрытии;
	
	Если ПоказыватьВиджетыПриОткрытии Тогда
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВариантыВиджетовФормы") Тогда
			ИнициализироватьМеханизмВиджетов();
		Иначе
			ОбновитьВсеВиджеты();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов");
	КонецЕсли;
	
КонецПроцедуры // СкрытьОтобразитьВиджеты()

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРММоиДела"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичнуюЗадачу(Команда)
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачиКраткая", , ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПроекта(Команда)
	ДобавитьЭтапКонтрольнуюТочку(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКТПроекта(Команда)
	ДобавитьЭтапКонтрольнуюТочку(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый структура;
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборВключен", ОтборВключен);
	СтруктураФильтра.Вставить("ОтображатьЗвонки", ОтображатьЗвонки);
	СтруктураФильтра.Вставить("ОтображатьПисьма", ОтображатьПисьма);
	СтруктураФильтра.Вставить("ОтображатьСообщенияЧатов", ОтображатьСообщенияЧатов);
	СтруктураФильтра.Вставить("ОтображатьТелемаркетинг", ОтображатьТелемаркетинг);
	СтруктураФильтра.Вставить("ВариантПериода", ВариантПериода);
	СтруктураФильтра.Вставить("ПоискКлиент", ПоискКлиент);
	СтруктураФильтра.Вставить("ТекущийПользователь", ТекущийПользователь);
	СтруктураФильтра.Вставить("ТекущаяРоль", ТекущаяРоль);
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", ОтборПоРолиУстановлен);
	СтруктураФильтра.Вставить("ПоискПодразделение", ПоискПодразделение);
	ПараметрыОткрытия.Вставить("СтруктураФильтра", СтруктураФильтра);
	ОткрытьФорму("Обработка.CRM_АРМ_МоиДела.Форма.ФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияФильтра,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	//ОткрытьФорму("ВнешняяОбработка.CRM_АРМ_МоиДела.Форма.ФормаФильтра", ПараметрыОткрытия,
		// ЭтотОбъект,,,, ОписаниеОповещенияФильтра,
		// РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере(Результат)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	СформироватьПредставлениеПериода();	
	
	ОбновитьОтборыНаСервере("Все");
	ОбновитьЗаголовкиТаблиц();
	Заголовок = НСтр("ru='Мои дела';en='My Affairs'") + " / " + ТекущийПользователь + " / " + ПредставлениеПериода;
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеПериода()
	Если ВариантПериода = "" Тогда
		ПериодОтбора = Новый СтандартныйПериод;
		ОтборСозданы[0].Значение = ПериодОтбора;
		ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
	Иначе
		Если ВариантПериода = "ПроизвольныйПериод" Тогда
			НомерПериода = 0;
		ИначеЕсли ВариантПериода = "Сегодня" Тогда
			НомерПериода = 1;
		ИначеЕсли ВариантПериода = "3 дня" Тогда
			НомерПериода = 2;
		ИначеЕсли ВариантПериода = "Неделя" Тогда
			НомерПериода = 3;
		ИначеЕсли ВариантПериода = "Месяц" Тогда
			НомерПериода = 4;
		КонецЕсли;
		
		Период = ОтборСозданы[НомерПериода];
		ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
		ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
		Если ЗначениеПериода <> Неопределено Тогда
			ПредставлениеПериода = ЗначениеПериода.Представление;
		КонецЕсли;
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	ОчиститьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборВключен", Ложь);
	СтруктураФильтра.Вставить("ВариантПериода", "");
	СтруктураФильтра.Вставить("ПоискКлиент", Справочники.Партнеры.ПустаяСсылка());
	СтруктураФильтра.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	СтруктураФильтра.Вставить("ТекущаяРоль", Справочники.РолиИсполнителей.ПустаяСсылка());
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", Истина);
	СтруктураФильтра.Вставить("ПоискПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	УстановитьФильтрНаСервере(СтруктураФильтра);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРаспределенияЗадач(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаЗакрытияНастроекРаспределенияЗадач", 
		ЭтотОбъект, Новый Структура);
	ОткрытьФорму("РегистрСведений.CRM_НастройкиРаспределенияЗадач.Форма.ФормаНастроек", , , , , ,
		ОписаниеОповещенияОЗакрытии);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьЗаголовок()
	
	Заголовок = НСтр("ru='Мои дела';en='My Affairs'") + " / " + ТекущийПользователь + " / " + ПредставлениеПериода;
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыделенныестроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяТаблица = Элемент.Имя; 
	ПодключитьОбработчикОжидания("АРМПриАктивизацииСтрокиОбработка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АРМПриАктивизацииСтрокиОбработка()
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	МассивТаблиц.Добавить("МатрицаВажныеСрочные");
	МассивТаблиц.Добавить("МатрицаВажныеНесрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеСрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеНесрочные");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		
		Если АктивнаяТаблица = ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
		Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиТаблиц()
	
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "ТаблицаВходящие");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокВходящие"].Заголовок = НСтр("ru='Входящие';en='Incoming'") + ": " + КоличествоОбъектов;
	Иначе	
		Элементы["ЗаголовокВходящие"].Заголовок = НСтр("ru='Входящие';en='Incoming'");
	КонецЕсли;	
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "ТаблицаОтложенные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокОтложенные"].Заголовок = НСтр("ru='Отложенные';en='Deferred'") + ": " + КоличествоОбъектов;
	Иначе	
		Элементы["ЗаголовокОтложенные"].Заголовок = НСтр("ru='Отложенные';en='Deferred'");
	КонецЕсли;
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "ТаблицаТекущие");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокТекущие"].Заголовок = НСтр("ru='Текущие';en='Current'") + ": " + КоличествоОбъектов;
	Иначе	
		Элементы["ЗаголовокТекущие"].Заголовок = НСтр("ru='Текущие';en='Current'");
	КонецЕсли;
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "ТаблицаЗавершенные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокЗавершенные"].Заголовок = НСтр("ru='Завершенные';en='Completed'") + ": " + КоличествоОбъектов;
	Иначе	
		Элементы["ЗаголовокЗавершенные"].Заголовок = НСтр("ru='Завершенные';en='Completed'");
	КонецЕсли;
	
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "МатрицаВажныеСрочные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокВажныеСрочные"].Заголовок = НСтр("ru='Важно, Срочно';en='Important, Urgent'") + ": " 
			+ КоличествоОбъектов;
	Иначе
		Элементы["ЗаголовокВажныеСрочные"].Заголовок = НСтр("ru='Важно, Срочно';en='Important, Urgent'");
	КонецЕсли;
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "МатрицаВажныеНесрочные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокВажныеНесрочные"].Заголовок = НСтр("ru='Важно, Не срочно';en='Important, Not Urgent'") + ": " 
			+ КоличествоОбъектов;
	Иначе
		Элементы["ЗаголовокВажныеНесрочные"].Заголовок = НСтр("ru='Важно, Не срочно';en='Important, Not Urgent'");
	КонецЕсли;
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "МатрицаНеважныеСрочные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокНеважныеСрочные"].Заголовок = НСтр("ru='Не важно, Срочно';en='Not Important, Urgent'") + ": " 
			+ КоличествоОбъектов;
	Иначе
		Элементы["ЗаголовокНеважныеСрочные"].Заголовок = НСтр("ru='Не важно, Срочно';en='Not Important, Urgent'");
	КонецЕсли;
	КоличествоОбъектов = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 "МатрицаНеважныеНесрочные");
	Если КоличествоОбъектов > 0 Тогда
		Элементы["ЗаголовокНеважныеНесрочные"].Заголовок = НСтр("ru='Не важно, Не срочно';en='Not Important, Not Urgent'") + ": "
			+ КоличествоОбъектов;
	Иначе
		Элементы["ЗаголовокНеважныеНесрочные"].Заголовок = НСтр("ru='Не важно, Не срочно';en='Not Important, Not Urgent'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ПричинаОтказа = Неопределено, Комментарий = "",
	 ПереноситьПисьмаВОбработанные = Истина)
	Если Элементы.ТаблицаВходящие.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок")
					 ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
					ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
						 ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_Заявка")
					ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.CRM_Диалоги")
						 ИЛИ ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
					
					СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(ТекСтрока.Объект);
					
					СсылкаЯвляетсяЛидом = РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ТекСтрока.Объект);
					Если СсылкаЯвляетсяЛидом Тогда
						РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ТекСтрока.Объект,
							 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
							 Комментарий); 
					ИначеЕсли СостояниеЛида <> Неопределено И СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Повторный Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ТекСтрока.Объект,
																						Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный,
																						СостояниеЛида.СконвертированВОбъект);
					КонецЕсли;
					Об = ТекСтрока.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Если Не СсылкаЯвляетсяЛидом Тогда
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Об, "CRM_РольОтветственного") Тогда
							Об.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
						КонецЕсли;
						Об.Ответственный = Пользователи.ТекущийПользователь();
					КонецЕсли;
					Об.Записать();
					
					Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
						
						// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
						// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
						Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
							Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
							Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
							
							ПрочитанныеПисьма = Новый Массив;
							ПрочитанныеПисьма.Добавить(Об.Ссылка);
							CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(ТекСтрока.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщикЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(Результат);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, Результат);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		СкрытьПисьмоИзАРМНаСервере(ДополнительныеПараметры.ПричинаОтказа,
			 ДополнительныеПараметры.Комментарий,
			 ПереноситьПисьмаВОбработанные);
	Иначе
		СкрытьПисьмоИзАРМНаСервере(, , ПереноситьПисьмаВОбработанные);
	КонецЕсли;
	
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ТаблицаВходящие);

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаСервере
Функция НеобходимоЗадатьВопросПриПереносеВОбработанные()
		
	Для Каждого ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
		Если ТекСтрока <> Неопределено Тогда
			Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				УчетнаяЗапись = ТекСтрока.Объект.УчетнаяЗапись;
				Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
					
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Откуда, Куда)
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы["Таблица" + Откуда]);
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюЛичнуюЗадачуВФоне(ЗвонокПисьмо, НовоеИзмерение)
	
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор						= ТекущийПользователь;
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ЗвонокПисьмо.Тема;
	ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
	Если НовоеИзмерение = "Завершенные" Тогда
		ОбъектЗадача.Выполнена 				= Истина;
	Иначе
		ОбъектЗадача.Выполнена 				= Ложь;
	КонецЕсли;
	ОбъектЗадача.ДатаИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.СрокИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.CRM_Личная					= Истина;
	ОбъектЗадача.Предмет					= ЗвонокПисьмо;
	ОбъектЗадача.ПредметСтрокой				= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ЗвонокПисьмо);
	ОбъектЗадача.Описание = "Тема: " + ЗвонокПисьмо.Тема + "
											|Введено на основании: " + ЗвонокПисьмо.Ссылка;
	Если ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.ОтправительКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.CRM_ОтправительКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.CRM_ОтправительКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.CRM_ОтправительКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.Контакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
		ОбъектЗадача.Описание = "Сообщение: " + ЗвонокПисьмо.ТекстСообщения;
	Иначе
		Если ЗначениеЗаполнено(ЗвонокПисьмо.АбонентКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	ОбъектЗадача.Записать();
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = ОбъектЗадача.Ссылка;
	Менеджер.НаименованиеАРМ = "МоиДела";
	Менеджер.ИзмерениеАРМ = "Текущие";
	Менеджер.Пользователь = ТекущийПользователь;
	Менеджер.Прочитать();
	Менеджер.ИзмерениеАРМ = НовоеИзмерение;
	Менеджер.Записать(Истина);
	
	ЗвонокПисьмоОбъект = ЗвонокПисьмо.ПолучитьОбъект();
	ЗвонокПисьмоОбъект.CRM_СкрытьВАРМ = Истина;
	ЗвонокПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	Если Не ЗначениеЗаполнено(ЗвонокПисьмоОбъект.Ответственный) Тогда
		ЗвонокПисьмоОбъект.Ответственный = ТекущийПользователь;
	КонецЕсли;
	ЗвонокПисьмоОбъект.Записать();

КонецПроцедуры

&НаСервере
Функция ПроверкаПеретаскиванияНаСервере(Строка, НовоеИзмерение, СтрокаПереноса = Неопределено, Результат = "")
	Если ТипЗнч(Строка) = Тип("Массив") Тогда
		Строка =  Строка[0];
	КонецЕсли;
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") 
		ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") 
		ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		СоздатьНовуюЛичнуюЗадачуВФоне(Строка.Объект, НовоеИзмерение);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаПереноса = Неопределено Тогда
		ДатаПереноса = Неопределено;
	ИначеЕсли ТипЗнч(СтрокаПереноса) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ") Тогда
		
		ДатаПереноса = ПолучитьДатуЗаписи(СтрокаПереноса);
	Иначе
		ДатаПереноса = СтрокаПереноса.Ключ;
	КонецЕсли;
	Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Пользователь = Строка.Пользователь;
	Если Строка.ИзмерениеАРМ = "Входящие" И ТипЗнч(Строка.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И Не Строка.Объект.ПринятаКИсполнению Тогда
		
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Строка.Объект);
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
		Пользователь = Строка.Объект.Исполнитель;
	КонецЕсли;
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		ДанныеЭтапаКалендарногоПлана = Новый Структура;
		Если НовоеИзмерение = "Завершенные" Тогда
				
			Если НЕ ЗначениеЗаполнено(Строка.Объект.ФактическаяДатаНачала) Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", Строка.Объект.ПлановаяДатаНачала);
				ФактическаяДатаНачала = Строка.Объект.ПлановаяДатаНачала;
			Иначе
				ФактическаяДатаНачала = Строка.Объект.ФактическаяДатаНачала;
			КонецЕсли;
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаОкончания", ТекущаяДатаСеанса());
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДлительность",
				 (КонецДня(ТекущаяДатаСеанса()) - НачалоДня(ФактическаяДатаНачала) 
				+ 1) / 86400);
			Если Пользователи.ЭтоПолноправныйПользователь() ИЛИ Строка.Объект.Проект.Ответственный = ТекущийПользователь Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена);
			Иначе
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат) Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Результат", Результат);
			КонецЕсли;
			ИзменитьЭтапКалендарногоПлана(Строка.Объект, ДанныеЭтапаКалендарногоПлана);
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Строка.Объект.Проект);
			Если Строка.Объект.Проект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				ПроектОбъект = Строка.Объект.Проект.ПолучитьОбъект();
				ПроектОбъект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				ПроектОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли НовоеИзмерение = "Текущие" Тогда
			
			Если Строка.Объект.Проект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для смены статуса проект должен иметь статус ""В работе""';
					|en='Project must have the status ""In progress"" to change status'"));
				Возврат Неопределено;
			КонецЕсли;
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", ТекущаяДатаСеанса());
			Если Строка.Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
			КонецЕсли;
			ИзменитьЭтапКалендарногоПлана(Строка.Объект, ДанныеЭтапаКалендарногоПлана);
			
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
	НаборЗаписей.Отбор.НаименованиеАРМ.Установить(Строка.НаименованиеАРМ);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].ИзмерениеАРМ = НовоеИзмерение;
	НаборЗаписей.Записать(Истина);
	
	СтруктураНовогоКлюча = Новый Структура("НаименованиеАРМ,ИзмерениеАРМ,Пользователь,СостояниеИнтереса,Объект");
	ЗаполнитьЗначенияСвойств(СтруктураНовогоКлюча, Строка);
	СтруктураНовогоКлюча.ИзмерениеАРМ = НовоеИзмерение;
	
	Возврат РегистрыСведений.CRM_ОбъектыАРМ.СоздатьКлючЗаписи(СтруктураНовогоКлюча);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана)
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачу(СсылкаИлиСтруктура, СнятьСКонтроля = Ложь)
	
	Если ТипЗнч(СсылкаИлиСтруктура) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если СсылкаИлиСтруктура.CRM_Личная Тогда
			тОбъект = СсылкаИлиСтруктура.ПолучитьОбъект();
			тОбъект.Выполнена = Истина;
			тОбъект.Записать();
		Иначе
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("Структура") И СсылкаИлиСтруктура.Свойство("Успех")
		 И НЕ СсылкаИлиСтруктура.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СсылкаИлиСтруктура.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуЗаписи(СтрокаЗаписи)
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = СтрокаЗаписи.Объект;
	Менеджер.НаименованиеАРМ = СтрокаЗаписи.НаименованиеАРМ;
	Менеджер.ИзмерениеАРМ = СтрокаЗаписи.ИзмерениеАРМ;
	Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
	Менеджер.Прочитать();
	Возврат Менеджер.ДатаДляСортировки;
	
КонецФункции	

&НаСервере
Функция ПолучитьИмяИзмерения(Значение)
	
	Возврат Значение.ИзмерениеАРМ;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектДействия(СтрокаСписка)
	Если ТипЗнч(СтрокаСписка) = Тип("Массив") Тогда
		Возврат СтрокаСписка[0].Объект; 
	Иначе
		Возврат СтрокаСписка.Объект;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТекущейАктивности()
	Если ТипЗнч(ТекущаяАктивность) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяАктивность);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	ИначеЕсли ТипЗнч(ТекущаяАктивность) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяАктивность);
		ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	ТекущаяАктивность = Неопределено;
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПеретаскивания(Строка, НовоеИзмерение)
	
	Если ТипЗнч(Строка) = Тип("Массив") Тогда
		Строка = Строка[0];
	КонецЕсли;
	
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		Если НовоеИзмерение = "Завершенные" Тогда
			Если Строка.Объект.Проект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
				ИЛИ Строка.Объект.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для смены статуса проект и этап должны иметь статус ""В работе""';
					|en='Project and stage must be in status ""In progress"" to change it'"));
				Возврат Ложь;
			КонецЕсли;
			
			УстановкаРазрешена = Истина;
		
			// Проверим наличие файлов с необходимым контекстом
			СписокНедостающихКонтекстов = Новый СписокЗначений;
				
			CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Строка.Объект,
				 СписокНедостающихКонтекстов);
				
			Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
				УстановкаРазрешена = Ложь; 
			КонецЕсли;
				
			Если НЕ УстановкаРазрешена Тогда
				Если Строка.Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
					Сообщение =
						НСтр("ru='Для завершения задачи необходимо присоединить файл(ы) следующего контекста:';en='It is necessary to attach the file(s) to complete task in following context:'");
				Иначе
					Сообщение = НСтр("ru='Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:';en='To complete checkpoint,
						| attach file(s) of following context:'");
				КонецЕсли;
				Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
					Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
				КонецЦикла;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПослеВводаРезультата(Результат, Строка) Экспорт
	Если Результат <> Неопределено Тогда
		ПроверкаПеретаскиванияНаСервере(Строка, "Завершенные", , Результат);
		ОбновитьДанные(ПолучитьИмяИзмерения(Строка), "Завершенные");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Объект);
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	
	РолиПользователя = Новый Массив;
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		РолиПользователя.Добавить(ТекущийПользователь);
	Иначе
		РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь).ВыгрузитьЗначения();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Измерение", "Входящие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьЗвонки", НЕ ОтображатьЗвонки,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьПисьма", НЕ ОтображатьПисьма,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Пользователь",
		 ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "РолиПользователя", РолиПользователя,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ПериодПросроченных", ТекущаяДатаВремя,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ПустаяДата",
		 Дата('00010101'),
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Измерение",
		 "Завершенные",
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные,
		 "Пользователь", ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные,
		 "РолиПользователя", РолиПользователя,
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Измерение",
		 "Отложенные",
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные,
		 "Пользователь", ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные,
		 "ПериодПросроченных", ТекущаяДатаВремя,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ПустаяДата",
		 Дата('00010101'),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные,
		 "РолиПользователя", РолиПользователя,
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Измерение", "Текущие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Пользователь",
		 ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие,
		 "ПериодПросроченных", ТекущаяДатаВремя,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ПустаяДата",
		 Дата('00010101'),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие,
		 "РолиПользователя", РолиПользователя,
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "Пользователь",
		 ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПериодПросроченных", ТекущаяДатаВремя,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПустаяДата",
		 Дата('00010101'),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "РолиПользователя", РолиПользователя,
		 Истина);
		 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МатрицаВажныеСрочные, "ПериодПросроченных",
		 ТекущаяДатаВремя, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МатрицаВажныеНесрочные, "ПериодПросроченных",
		 ТекущаяДатаВремя, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МатрицаНеважныеСрочные, "ПериодПросроченных",
		 ТекущаяДатаВремя, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МатрицаНеважныеНесрочные, "ПериодПросроченных",
		 ТекущаяДатаВремя, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектСтроки(СтрокаРС)
	Если СтрокаРС <> Неопределено Тогда
		Возврат СтрокаРС.Объект;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ОбновитьТаблицы()
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	МассивТаблиц.Добавить("МатрицаВажныеСрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеСрочные");
	МассивТаблиц.Добавить("МатрицаВажныеНесрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеНесрочные");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
				Элемент.Элементы.Очистить();
				
				Если ОтборВключатьПросроченные <> -1 Тогда
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
					УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 1,
						 НаправлениеСортировкиКомпоновкиДанных.Возр,
						 НаправлениеСортировкиКомпоновкиДанных.Убыв);
					УсловиеСортировки.Использование = Истина;
				КонецЕсли;
				
				УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				УсловиеСортировки.Использование = Истина;
				УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Если (Элементы.ГруппаАРМ.Видимость И ИмяТаблицы = "ТаблицаСписок") Или
			(Элементы.ГруппаСписок.Видимость И Не ИмяТаблицы = "ТаблицаСписок") Тогда
			Продолжить;
		КонецЕсли;
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[ИмяТаблицы]);
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;
	
	СформироватьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыНаСервере(ВидОтборов)
	
	ОтборыУстановлены = Ложь;
	КоличествоФильтров = 0;
	Если ЗначениеЗаполнено(ПоискПодразделение) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоискКлиент) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Если НЕ ОтборПоРолиУстановлен Или ЗначениеЗаполнено(ТекущаяРоль) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	// Роли для отбора
	РолиПользователя = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
		РолиПользователя.Добавить(ТекущаяРоль);
	ИначеЕсли ОтборПоРолиУстановлен Тогда
		РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	КонецЕсли;
	ОтборПоРолиЗаполнен = (РолиПользователя.Количество() > 0);
	
	// Ответственные для отбора
	ПользователиОтбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ПользователиОтбора.ЗагрузитьЗначения(РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь));
	Иначе
		ПользователиОтбора = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ТекущаяРоль);
	КонецЕсли;
	ОтборПоПользователюУстановлен = (ПользователиОтбора.Количество() > 0);
	
	ТекущаяДатаВремя = ТекущаяДатаСеанса();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	МассивТаблиц.Добавить("МатрицаВажныеСрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеСрочные");
	МассивТаблиц.Добавить("МатрицаВажныеНесрочные");
	МассивТаблиц.Добавить("МатрицаНеважныеНесрочные");
	
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ГруппаОтборКрайнегоСрока = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ЭтотОбъект[ИмяТаблицы].Отбор.Элементы, "ОтборКрайнийСрок", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтборКрайнегоСрока,
			"КрайнийСрокОкончание",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			Период.Значение.ДатаОкончания, ,
			Период.Пометка,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Если ИмяТаблицы = "ТаблицаЗавершенные" И ЗначениеЗаполнено(Период.Значение.ДатаНачала) Тогда
			Если ВариантПериода = "Сегодня" Тогда
				ПериодНачалаОтбора = ПериодОтбора.ДатаНачала;
			Иначе
				ДлительностьПериодаОтбора	= Период.Значение.ДатаОкончания - Период.Значение.ДатаНачала;
				ПериодНачалаОтбора			= НачалоДня(Период.Значение.ДатаНачала - ДлительностьПериодаОтбора);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтборКрайнегоСрока,
				"КрайнийСрокОкончание",
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				ПериодНачалаОтбора, ,
				Период.Пометка,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
		
		ГруппаОтборСтрокаПоиска = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭтотОбъект[ИмяТаблицы].Отбор.Элементы,
			 "ОтборСтрокаПоиска",
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заголовок");
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекстОснования");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "Заголовок", "%" + СтрокаПоискаОтбор + "%", ВидСравненияКомпоновкиДанных.Подобно, ,
			  ЗначениеЗаполнено(СтрокаПоискаОтбор),
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "ТекстОснования", "%" + СтрокаПоискаОтбор + "%", ВидСравненияКомпоновкиДанных.Подобно, ,
			  ЗначениеЗаполнено(СтрокаПоискаОтбор),
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "ПустаяДата", Дата('00010101'),
			 Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "ПериодПросроченных", ТекущаяДатаВремя,
			 Истина);
		
		Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(ЭтотОбъект[ИмяТаблицы]);
		ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
			 НСтр("ru = 'Отбор по ответственному'; en = 'Filter by Responsible'"),
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ, "Пользователь",
			 ВидСравненияКомпоновкиДанных.ВСписке, ПользователиОтбора, , ОтборПоПользователюУстановлен,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ, "Пользователь",
			 ВидСравненияКомпоновкиДанных.ВСписке, РолиПользователя, , ОтборПоРолиЗаполнен,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "Клиент", ПоискКлиент, ВидСравненияКомпоновкиДанных.Равно, ,  ЗначениеЗаполнено(ПоискКлиент),
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
			 "Подразделение", ПоискПодразделение, ВидСравненияКомпоновкиДанных.Равно, ,
			 ЗначениеЗаполнено(ПоискПодразделение));
		
	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Измерение", "Входящие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьЗвонки", НЕ ОтображатьЗвонки,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьПисьма", НЕ ОтображатьПисьма,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьСообщенияЧатов", НЕ ОтображатьСообщенияЧатов,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
		 "ОтображатьТелемаркетинг", НЕ ОтображатьТелемаркетинг,
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Измерение",
		 "Завершенные",
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Измерение",
		 "Отложенные",
		 Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Измерение", "Текущие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
																		"СтрокаТелефонныйЗвонок",
																		НСтр("ru = 'Телефонный звонок'"), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие,
																		"СтрокаПропущенныйТелефонныйЗвонок",
																		НСтр("ru = 'Пропущенный телефонный звонок'"), Истина);
	
	Элементы.ОткрытьФильтр.Заголовок = ?(ОтборыУстановлены, НСтр("ru='Фильтр: ';en='Filter: '") 
		+ КоличествоФильтров,
		 НСтр("ru='Фильтр';en='Filter'"));
	Элементы.ОткрытьФильтр.Картинка = ?(ОтборыУстановлены, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.ОткрытьФильтр.ЦветТекста = ?(ОтборыУстановлены, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборы()
	
	ОбновитьОтборыНаСервере("все");
	
	ОбновитьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеТекущаяДатаВремя()
	ТекущаяДатаВремя = ВернутьДатуСеанса();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьДатуСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаКлиенте
Процедура ОткрытьФильтрЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьФильтрНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСЭлементамиФормы

&НаСервере
Процедура СоздатьКнопкиВидАРМ()
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаГруппаВидАРМ");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаВидАРМ");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаВидАРМ");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	ИмяДействияИзменитьВидАРМ = "ИзменитьВидАРМ";
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Канбан';en='Kanban'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", ИмяДействияИзменитьВидАРМ);
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	СтруктураКнопка.Вставить("Пометка", Истина);

	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Список';en='List'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", ИмяДействияИзменитьВидАРМ);
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидМатрица";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Матрица';en='Matrix'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", ИмяДействияИзменитьВидАРМ);
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопиОтборПросроченные()
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаОтборВключатьПросроченные");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаОтборПросроченные");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаОтборВключатьПросроченные");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Внизу';en='Down'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВнизу");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Вверху';en='Up'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВверху");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиВидАРМНаСервере(ВидАрм)
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидМатрица";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
КонецПроцедуры	

&НаСервере
Процедура ПокраситьКнопкиПросроченныеНаСервере()
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборВключатьПросроченные = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборВключатьПросроченные = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
КонецПроцедуры	

&НаКлиенте
Процедура ПросроченныеВнизу(Команда)
	ОтборВключатьПросроченные = 1;
	ОбновитьОтборы();
	ПокраситьКнопкиПросроченныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВверху(Команда)
	ОтборВключатьПросроченные = 2;
	ОбновитьОтборы();
	ПокраситьКнопкиПросроченныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидАРМ(Команда)
	
	ВидАРМ = СтрЗаменить(Команда.Имя, "Вид", "");
	ИзменитьВидАРМНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидАРМНаСервере()
	
	Если ВидАРМ = "Канбан" Тогда
		НомерВидАРМ = 1;
	ИначеЕсли ВидАРМ = "Список" Тогда
		НомерВидАРМ = 2;
	ИначеЕсли ВидАРМ = "Матрица" Тогда
		НомерВидАРМ = 3;
	КонецЕсли;
	
	Элементы.ГруппаАРМ.Видимость                            = (ВидАРМ = "Канбан");
	Элементы.НастроитьШиринуКолонок.Видимость               = (ВидАРМ = "Канбан");
	Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость = (ВидАРМ = "Канбан");
	
	Элементы.ГруппаСписок.Видимость                         = (ВидАРМ = "Список");
	Элементы.ДекорацияРазделительРегулировки.Видимость      = (ВидАРМ = "Список");
	
	Элементы.ГруппаМатрица.Видимость                        = (ВидАРМ = "Матрица");
	
	Если ВидАРМ = "Канбан" Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыть();
	КонецЕсли;
	
	ПокраситьКнопкиВидАРМНаСервере(НомерВидАРМ);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонокКанбан()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	Иначе
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("Входящие");
	МассивТаблиц.Добавить("Отложенные");
	МассивТаблиц.Добавить("Текущие");
	МассивТаблиц.Добавить("Завершенные");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы["Таблица" + ИмяТаблицы].Ширина   = ШиринаКолонокКанбан;
		Элементы["Заголовок" + ИмяТаблицы].Ширина = ШиринаКолонокКанбан;
		Элементы["ЗаголовокЧерта" + ИмяТаблицы].Ширина = ШиринаКолонокКанбан;
		Элементы["ТаблицаЗаголовок_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
		Элементы["ТаблицаТекстОснования_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
		Элементы["ТаблицаЗаголовок_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШиринуКолонокКанбанСервер()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	Иначе
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("Входящие");
	МассивТаблиц.Добавить("Отложенные");
	МассивТаблиц.Добавить("Текущие");
	МассивТаблиц.Добавить("Завершенные");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы["Таблица" + ИмяТаблицы].Ширина   = ШиринаКолонокКанбан;
		Элементы["Заголовок" + ИмяТаблицы].Ширина = ШиринаКолонокКанбан;
		Элементы["ЗаголовокЧерта" + ИмяТаблицы].Ширина = ШиринаКолонокКанбан;
		Элементы["ТаблицаЗаголовок_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
		Элементы["ТаблицаТекстОснования_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
		Элементы["ТаблицаЗаголовок_Этап_" + ИмяТаблицы].Ширина = ШиринаЭлемента;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаКолонокКанбанПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИзменениеШириныКолонокКанбан", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеШириныКолонокКанбан()
	УстановитьШиринуКолонокКанбан();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонок(Команда)
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		ОтключитьОбработчикОжидания("ЗакрытьПанельРегулирования");
		ТекущийЭлемент = Элементы.НастроитьШиринуКолонок;
	Иначе
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "СоздатьКТПроекта" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	Иначе
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	
	// Если ЗначениеЗаполнено(ОтборПроект) Тогда
	//	ЗначенияЗаполнения.Вставить("Проект", ОтборПроект);
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

#КонецОбласти // РаботаСЭлементамиФормы

#Область Виджеты

&НаСервере
Процедура ДобавитьВиджетНаФорму(ВариантВиджета)
	
	CRM_РаботаСВиджетамиСервер.ДобавитьВиджет(
		ЭтотОбъект, ВариантВиджета, "ГруппаЭлементыВиджетов");
	
КонецПроцедуры // ДобавитьВиджетНаФорму()

&НаСервере
Процедура УдалитьВиджетНаФорме(ИдентификаторСтрокиДанных)
	
	CRM_РаботаСВиджетамиСервер.УдалитьВиджет(
		ЭтотОбъект, ИдентификаторСтрокиДанных);
	
КонецПроцедуры // УдалитьВиджетНаФорме()

&НаСервере
Процедура ОбновитьВиджет(ИдентификаторСтрокиДанных)
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВиджет(ЭтотОбъект, ИдентификаторСтрокиДанных);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВиджет()

&НаСервере
Процедура ОбновитьВсеВиджеты()
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВсеВиджеты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВсеВиджеты()

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьВиджеты(КлючОбъекта, Настройка)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ПоказыватьПанельВиджетов", Настройка);
	
КонецПроцедуры // СохранитьНастройкуПоказыватьВиджеты()

&НаСервере
Процедура ИнициализироватьМеханизмВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	
КонецПроцедуры // ИнициализироватьМеханизмВиджетов()

&НаСервере
Процедура Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета(ИсточникиВнешнихБиблиотек, ДополнительныеПараметры) Экспорт
	
	Если ИсточникиВнешнихБиблиотек.Количество() = 0 Или Не ПоказыватьВиджетыПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийВиджетФормы Из ЭтотОбъект.ВариантыВиджетовФормы Цикл
		
		Если ТекущийВиджетФормы.Переопределяемый Тогда
			
			ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных] = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
				ИсточникиВнешнихБиблиотек, ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных]);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета()

&НаКлиенте
Процедура Подключаемый_ОбработчикАвтообновленияВиджетов() Экспорт
	
	// Обновление реквизитов - обновление виджетов.
	ОбработчикАвтообновленияВиджетов();
	
КонецПроцедуры //Подключаемый_ОбработчикАвтообновленияВиджетов()

&НаСервере
Функция ОбработчикАвтообновленияВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ОбработатьАвтообновлениеВиджетов(ЭтотОбъект);
	
КонецФункции // ОбработчикАвтообновленияВиджетов()

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область Матрица

// Процедура разрешает ручную настройку важности и срочности задач путем перетаскивания
// задачи между таблицами
//
&НаСервере
Процедура РазрешитьРучнуюНастройкуВажностиИСрочностиЗадач()
	
	РазрешенаРучнаяНастройкаВажностиИСрочностиЗадач = Истина;
	Элементы.МатрицаВажныеСрочные.РазрешитьНачалоПеретаскивания = Истина;
	Элементы.МатрицаНеважныеСрочные.РазрешитьНачалоПеретаскивания = Истина;
	Элементы.МатрицаВажныеНесрочные.РазрешитьНачалоПеретаскивания = Истина;
	Элементы.МатрицаНеважныеНесрочные.РазрешитьНачалоПеретаскивания = Истина;
	
КонецПроцедуры

// Функция возвращает ссылку на задачу из ключа записи регистра
//
// Параметры:
//  Значение  - РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ - ключ записи со ссылкой на задачу
//
// Возвращаемое значение:
//  ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу
//
&НаСервере
Функция ПолучитьСсылкуНаОбъект(Значение)
	Возврат Значение.Объект;
КонецФункции

&НаСервере
Процедура ЗаписатьВажностьСрочность(Ссылка, Важная, Срочная)
	CRM_БизнесПроцессыИЗадачиСервер.ЗаписатьВажностьСрочность(Ссылка, Важная, Срочная);
КонецПроцедуры
	
// Процедура показывает вопрос об отмене ручной установки важности и срочности задачи
//
// Параметры:
//  КлючЗаписи  - РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ - ключ записи со ссылкой на задачу
//
&НаКлиенте
Процедура ПоказатьВопросОбОтменеРучнойУстановкиВажностиИСрочности(КлючЗаписи)
	
	ДополнительныеПараметры = Новый Структура("КлючЗаписи", КлючЗаписи);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОбОтменеРучнойУстановкиВажностиИСрочности", 
		ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru='Отменить ручную установку важности и срочности задачи?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик ответа на вопрос об отмене ручной установки важности и срочности задачи
//
// Параметры:
//  Результат  - КодВозвратаДиалога
//  Дополнительные параметры  - Структура
//
&НаКлиенте
Процедура ОбработкаОтветаОбОтменеРучнойУстановкиВажностиИСрочности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяТаблицы = Неопределено;
		ОтменитьРучнуюУстановкуВажностиИСрочности(ДополнительныеПараметры.КлючЗаписи, ИмяТаблицы);
		ОбновитьТаблицыМатрицы();
		ОбновитьЗаголовкиТаблиц();
		//Если ИмяТаблицы <> Неопределено Тогда
		//	Элементы[ИмяТаблицы].ТекущаяСтрока = ДополнительныеПараметры.Ссылка;
		//КонецЕсли;
		ИмяТекущейТаблицы = ИмяТаблицы;
		ПодключитьОбработчикОжидания("АРМВыделениеТекущейСтрокиПриПеретаскивании", 0.3, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура отменяет ручную установку важности и срочности задачи
//
// Параметры:
//  КлючЗаписи  - РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ - ключ записи со ссылкой на задачу
//
&НаСервере
Процедура ОтменитьРучнуюУстановкуВажностиИСрочности(ДанныеКлючаЗаписи, ИмяТаблицы)
	
	Запрос = Новый Запрос;
	Условие = "CRM_ОбъектыАРМ.Объект = &Ссылка";
	Запрос.Текст = CRM_БизнесПроцессыИЗадачиСервер.ТекстЗапросаДляРасчетаВажностиИСрочностиЗадач(Условие);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеКлючаЗаписи.Объект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	CRM_БизнесПроцессыИЗадачиСервер.ОбработатьРезультатЗапросаВажностиИСрочностиЗадач(РезультатЗапроса);
	
	МенеджерЗаписи = РегистрыСведений.CRM_ВажностьСрочностьЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = ДанныеКлючаЗаписи.Объект;
	МенеджерЗаписи.Прочитать();
	Важная = МенеджерЗаписи.Важная;
	Срочная = МенеджерЗаписи.Срочная;
	
	Если Важная И Срочная Тогда
		ИмяТаблицы = "МатрицаВажныеСрочные";
	ИначеЕсли Не Важная И Срочная Тогда
		ИмяТаблицы = "МатрицаНеважныеСрочные";
	ИначеЕсли Важная И Не Срочная Тогда
		ИмяТаблицы = "МатрицаВажныеНесрочные";
	Иначе
		ИмяТаблицы = "МатрицаНеважныеНесрочные";
	КонецЕсли;
	
	СтруктураКлюча = Новый Структура("НаименованиеАРМ, ИзмерениеАРМ, Пользователь, СостояниеИнтереса, Объект");
	ЗаполнитьЗначенияСвойств(СтруктураКлюча, ДанныеКлючаЗаписи);
	КлючЗаписи = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецПроцедуры

// Процедура обновляет данные динамических списков режима Матрица
//
&НаКлиенте
Процедура ОбновитьТаблицыМатрицы()
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МатрицаВажныеСрочные);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МатрицаНеважныеСрочные);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МатрицаВажныеНесрочные);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МатрицаНеважныеНесрочные);
	
КонецПроцедуры

// Процедура-обработчик оповещения о закрытии настроек распределения задач
//
// Параметры:
//  Результат  - Неопределено
//  ДополнительныеПараметры  - Структура - пустая структура
//
&НаКлиенте
Процедура ОбработкаЗакрытияНастроекРаспределенияЗадач(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьТаблицыМатрицы();
	ОбновитьЗаголовкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура АРМВыделениеТекущейСтрокиПриПеретаскивании()
	ТекущийЭлемент = Элементы[ИмяТекущейТаблицы];
	Элементы[ИмяТекущейТаблицы].ТекущаяСтрока = КлючЗаписи;
КонецПроцедуры

// Процедура включает или отключает видимость колонки Ручная установка
// таблиц режима Матрица
//
&НаСервере
Процедура НастроитьВидимостьЭлементовРежимаМатрица()
	
	РассчитыватьВажностьИСрочностьЗадач = ПолучитьФункциональнуюОпцию("CRM_РассчитыватьВажностьИСрочностьЗадачАвтоматически");
	Элементы.МатрицаВажныеСрочныеРучнаяУстановкаВажностиИСрочности.Видимость = РассчитыватьВажностьИСрочностьЗадач;
	Элементы.МатрицаНеважныеСрочныеРучнаяУстановкаВажностиИСрочности.Видимость = РассчитыватьВажностьИСрочностьЗадач;
	Элементы.МатрицаВажныеНесрочныеРучнаяУстановкаВажностиИСрочности.Видимость = РассчитыватьВажностьИСрочностьЗадач;
	Элементы.МатрицаНеважныеНесрочныеРучнаяУстановкаВажностиИСрочности.Видимость = РассчитыватьВажностьИСрочностьЗадач;
	Элементы.ОткрытьНастройкиРаспределенияЗадач.Видимость = РассчитыватьВажностьИСрочностьЗадач;
	
КонецПроцедуры

#КонецОбласти // Матрица

#КонецОбласти
