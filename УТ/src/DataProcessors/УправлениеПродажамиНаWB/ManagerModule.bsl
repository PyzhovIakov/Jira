
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыгрузкаЗагрузкаДанных

// Задает использование процедур и функций.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных.
//
Функция ОпределитьИспользуемыеМетоды() Экспорт

	Методы = ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных();

	// Основные методы
	Методы.ВыполнитьПроверкуИнформацииПоКолонкам                    = Истина;
	Методы.УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть        = Истина;
	Методы.ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных    = Ложь;
	Методы.НастроитьДинамическийСписокОтображенияРезультатаЗагрузки = Ложь;
	Методы.ПолучитьДанныеИнтеграционнымиМетодами                    = Ложь;
	Методы.СопоставитьЗагружаемыеДанные                             = Ложь;
	Методы.ЗаписатьЗагружаемыеДанные                                = Ложь;

	// Выгрузка в файл - см. СформироватьТабличныйДокументПоИмениМакетаСШаблоном
	Методы.НаименованиеСохраняемогоФайла                            = Ложь;
	Методы.ЗаполнитьШапкуМакета                                     = Ложь;
	Методы.ЗаполнитьЗаголовокТаблицыМакета                          = Ложь;
	Методы.ПолучитьДанныеСтрокТаблицыМакета                         = Ложь;
	Методы.ВывестиТаблицуМакета                                     = Ложь;
	Методы.ЗаполнитьПодвалМакета                                    = Ложь;

	Возврат Методы;

КонецФункции

// Выполняет проверку таблицы с информацией по колонка на соответствие последней версии содержимого таблицы.
//
// Параметры:
//   ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ИмяТабличнойЧасти    - Строка - имя табличной части объекта метаданных.
//
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция ВыполнитьПроверкуИнформацииПоКолонкам(ИнформацияПоКолонкам, ИмяТабличнойЧасти) Экспорт
	
	ПроверкаПройдена = Истина;
	
	// Проверка наличия удаленной колонки
	ИскомаяКолонка = "";
	Если ИмяТабличнойЧасти = "АктПриемкиТоваров" Тогда
		ИскомаяКолонка = "Артикул";
	КонецЕсли;
	
	Если ПроверкаПройдена И Не ПустаяСтрока(ИскомаяКолонка) Тогда
		ПроверкаПройдена = (ИнформацияПоКолонкам.Найти(ИскомаяКолонка, "ИмяКолонки") = Неопределено);
	КонецЕсли;
	
	// Иные проверки
	
	Возврат ПроверкаПройдена;
	
КонецФункции

// Устанавливает параметры загрузки.
// При дополнении состава Основных колонок в табличной части или дополнительных колонок в текущей процедуре необходимо 
// добавлять проверку в ВыполнитьПроверкуИнформацииПоКолонкам(), в противном случае информация по колонкам будет взята 
// из сохраненных настроек, и может возникнуть ошибка при обращении к новым колонкам в заложенных алгоритмах.
//
// Параметры:
//   Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть(Параметры) Экспорт
	
	ОсновныеКолонки      = Параметры.ОсновныеКолонки;		// Массив
	ПустыеВИтогахКолонки = Параметры.ПустыеВИтогахКолонки;	// Массив
	
	Если Параметры.ИмяТабличнойЧасти = "АктПриемкиТоваров" Тогда
		Параметры.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 3;
		Параметры.ВысотаЗаголовкаТаблицыМакетаСШаблоном    = 2;
		
		ОсновныеКолонки.Добавить("НоменклатураНаименование");
		ОсновныеКолонки.Добавить("Артикул");
		ОсновныеКолонки.Добавить("КоличествоУпаковок");
		
		ПустыеВИтогахКолонки.Добавить("НоменклатураНаименование");
		ПустыеВИтогахКолонки.Добавить("ХарактеристикаНаименование");
		ПустыеВИтогахКолонки.Добавить("УпаковкаНаименование");
		ПустыеВИтогахКолонки.Добавить("Артикул");
		ПустыеВИтогахКолонки.Добавить("Штрихкод");
		ПустыеВИтогахКолонки.Добавить("КИЗ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// Определяет параметры прикладного электронного документа по данным файла.
//
// Параметры:
//   ДанныеФайла - ТабличныйДокумент - данные файла прикладного электронного документа.
//   Параметры   - Структура - параметры файла прикладного электронного документа:
//     * ТипЭлектронногоДокумента         - Неопределено, ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - 
//                                            прикладной тип электронного документа.
//     * НаименованиеДокументаОтправителя - Строка - наименование документа по данным отправителя.
//     * НомерДокументаОтправителя        - Строка - номер документа по данным отправителя.
//     * ДатаДокументаОтправителя         - Дата  - дата документа по данным отправителя.
//     * СуммаДокумента                   - Число - сумма документа по данным отправителя 
//     * Отправитель                      - см. ФорматыЭДО.НовоеОписаниеУчастникаЭДО.
//     * Получатель                       - см. ФорматыЭДО.НовоеОписаниеУчастникаЭДО.
//     * ЕстьМаркировка                   - Булево - присутствуют ли сведения о маркировке.
//     * ВидТорговойПлощадки              - ПеречислениеСсылка.ВидыМаркетплейсов, Неопределено - вид торговой площадки.
//     * Представление                    - ТабличныйДокумент - представление файла.
//     * Результат                        - ТаблицаЗначений - результат чтения файла в виде таблицы.
//
Процедура ПрочитатьАктСверки(Знач ДанныеФайла, Параметры) Экспорт
	
	ПараметрыЗагрузкиВТабличнуюЧасть = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяОбъектаМетаданных = "Обработка.УправлениеПродажамиНаWB";
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяТабличнойЧасти    = "АктПриемкиТоваров";
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном   = "АктПриемкиТоваров";
	
	ПараметрыШапки       = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();
	ИнформацияПоКолонкам = ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам();
	
	Лист1 = Новый Структура;
	Лист1.Вставить("ИмяЛиста",                                 НСтр("ru = 'Акт принятого товара'"));
	Лист1.Вставить("ИмяМакетаСШаблоном",                       "АктПриемкиТоваров");
	Лист1.Вставить("ПараметрыШапки",                           ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыШапки));
	Лист1.Вставить("ИнформацияПоКолонкам",                     ОбщегоНазначения.СкопироватьРекурсивно(ИнформацияПоКолонкам));
	Лист1.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    4);
	Лист1.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 2);
	Лист1.Вставить("ШаблонСДанными",                           Новый ТабличныйДокумент);
	Лист1.Вставить("ЗаполняемыйШаблон",                        Неопределено);
	Лист1.Вставить("Служебный",                                1);
	
	ЛистыШаблона = Новый Структура;
	ЛистыШаблона.Вставить("Акт_принятого_товара", Лист1);
	
	Если ДанныеФайла.Области.Количество() > 1 Тогда
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном = КлючИЗначение.Значение.ИмяМакетаСШаблоном;
			
			ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
				ПараметрыЗагрузкиВТабличнуюЧасть,
				КлючИЗначение.Значение.ИнформацияПоКолонкам,
				КлючИЗначение.Значение.ПараметрыШапки);
		КонецЦикла;
		
		Для Каждого Область Из ДанныеФайла.Области Цикл
			ОбластьИмя = СтрЗаменить(Область.Имя, "ё", "е");
			
			Если ЛистыШаблона.Свойство(ОбластьИмя) Тогда
				ШаблонСДанными = Новый ТабличныйДокумент;
				ШаблонСДанными.Вывести(ДанныеФайла.ПолучитьОбласть(Область.Имя));
				
				ЛистыШаблона[ОбластьИмя].ШаблонСДанными = ШаблонСДанными;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
			ПараметрыЗагрузкиВТабличнуюЧасть,
			ИнформацияПоКолонкам,
			ПараметрыШапки);
	КонецЕсли;
	
	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(
		Новый УникальныйИдентификатор);
	
	Если ДанныеФайла.Области.Количество() > 1 Тогда
		ПараметрыЗагрузки.ЛистыШаблона = ОбщегоНазначения.СкопироватьРекурсивно(ЛистыШаблона);
	Иначе
		ПараметрыЗагрузки.ПараметрыШапки                           = ПараметрыШапки;
		ПараметрыЗагрузки.ИнформацияПоКолонкам                     = ИнформацияПоКолонкам;
		ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыМакетаСШаблоном    = 4;
		ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 2;
	КонецЕсли;
	
	РезультатЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ТабличныйДокументВТаблицу(ДанныеФайла, 
		ПараметрыЗагрузки, 
		Истина,
		Истина);
		
	Если РезультатЗагрузки.Количество() > 0 Тогда
		ПараметрыШапки.Параметры.ДатаДокумента = СтрЗаменить(ПараметрыШапки.Параметры.ДатаДокумента, """", "");
		ПараметрыШапки.Параметры.ДатаДокумента = СтрЗаменить(ПараметрыШапки.Параметры.ДатаДокумента, " ", ".");
		
		Параметры.ТипЭлектронногоДокумента         = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Документ.АктОРасхожденияхПослеОтгрузки", Ложь);
		Параметры.ЕстьМаркировка                   = Истина;
		Параметры.ВидТорговойПлощадки              = Перечисления.ВидыМаркетплейсов.МаркетплейсWildberries;
		Параметры.ДанныеРазбора                    = РезультатЗагрузки;
		Параметры.НаименованиеДокументаОтправителя = ПараметрыШапки.Параметры.НаименованиеДокумента;
		Параметры.НомерДокументаОтправителя        = ПараметрыШапки.Параметры.НомерДокумента;
		Параметры.ДатаДокументаОтправителя         = СтроковыеФункцииКлиентСервер.СтрокаВДату(
			ПараметрыШапки.Параметры.ДатаДокумента);
		Параметры.Отправитель.Наименование         = ПараметрыШапки.Параметры.Отправитель;
		Параметры.Отправитель.ИНН                  = ПараметрыШапки.Параметры.Отправитель_ИНН;
		Параметры.Получатель.Наименование          = ПараметрыШапки.Параметры.Получатель;
		Параметры.Получатель.ИНН                   = ПараметрыШапки.Параметры.Получатель_ИНН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
