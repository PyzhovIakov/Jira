
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФорму;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();

	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Планирование продаж""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	ДобавитьПереопределяемыеКолонкиПлана();
	
	Если Параметры.Свойство("CRM_НастройкиРабочегоСтола") Тогда
		ОткрытаИзРабочегоСтола = Истина;
		Для Каждого Эл Из Параметры.CRM_НастройкиРабочегоСтола Цикл
			Если Эл.ИмяФормы = ИмяФормы Тогда
				ИдентификаторФормыРабочегоСтола = Эл.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(ИдентификаторФормыРабочегоСтола) Тогда
			ЭлементыРабочегоСтола = CRM_РабочийСтолСервер.ПолучитьТаблицуСкрытыхНастроекРабочегоСтола();
			Для Каждого Эл Из ЭлементыРабочегоСтола Цикл
				Если Эл.ИмяФормы = ИмяФормы Тогда
					ИдентификаторФормыРабочегоСтола = Эл.Идентификатор;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИдентификаторФормыРабочегоСтола) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден идентификатор формы Рабочего стола'"));
		КонецЕсли;
	КонецЕсли;
	
	ОбсужденияПодключены = Обсуждения.ОбсужденияДоступны();
	
	Если ОбсужденияПодключены И Параметры.Свойство("ДанныеОбсуждения") Тогда
		Объект.ПланПродаж = Параметры.ДанныеОбсуждения.ПланПродаж;
		ТекущийПользователь = Параметры.ДанныеОбсуждения.Пользователь;
		УстановитьОбсуждение(Параметры.ДанныеОбсуждения.Собеседник,
			 Параметры.ДанныеОбсуждения.СобеседникЯвляетсяРуководителем);
		МойУровеньСлужебный = Истина;
		ОтображениеОбсуждений = ОтображениеОбсужденийФормы.Отображать;
	Иначе
		Объект.ПланПродаж = CRM_ХранилищеНастроек.Загрузить(ИмяФормы, "ПланПродаж");
		ОтображениеОбсуждений = ОтображениеОбсужденийФормы.НеОтображать;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		
		Попытка
			ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	ПодразделенияПользователя =
		Новый ФиксированныйМассив(CRM_УправлениеДоступомПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь));

	ЦветОтрицательногоЧисла = ЦветаСтиля.ЦветОтрицательногоЧисла;
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	Если ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		ИзменитьПланПродаж();
	Иначе
		НастроитьУровеньИерархии();
		НастроитьВидимостьКолонокРазрезов();
	КонецЕсли;
	
	ЭлементУООтбораСтрокПоПодразделению = Неопределено;
	
	ПоказыватьСлужебныеРеквизиты = Ложь;
	НастроитьВидимостьСлужебныхРеквизитов();
	ДополнитьПодменюЗаполнить();
	
	Элементы.ТекущееПодразделение.Видимость = ИспользоватьПодразделения;
	Элементы.ЗаписиПланаПродажПодразделение.Видимость = ИспользоватьПодразделения;
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	Если Параметры.Свойство("CRM_КонтекстВызова") Тогда
		Если Параметры.CRM_КонтекстВызова = "УниверсальныйРабочийСтол" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.ОткрытиеВОдинКлик.ОткрытиеИзУниверсальногоРабочегоСтола");
		ИначеЕсли Параметры.CRM_КонтекстВызова = "РазделКлиенты" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.ОткрытиеВОдинКлик.ОткрытиеИзРазделаКлиенты");
		КонецЕсли;
	Иначе
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_ЛоготипРабочегоСтола") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.ОткрытиеВОдинКлик.ОткрытиеБезКонтекста");
		КонецЕсли;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отказ = Не CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	СформироватьЗаголовок(ЭтотОбъект, РежимАРМСтрокой());
	
	Если ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");
		
	Иначе
		
		Если ЗакрытьФорму <> Истина Тогда
			
			Отказ = Истина;
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеОЗакрытии, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
				 РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаборЗаписей();
		Модифицированность = Ложь;
		ЗакрытьФорму = Истина;
		Закрыть();
		ПовторноОткрытьФорму();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		ЗакрытьФорму = Истина;
		Закрыть();
		ПовторноОткрытьФорму();
		
	Иначе
		
		ЗакрытьФорму = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ПланПродаж") Тогда
		Объект.ПланПродаж = НовыйОбъект;
		ПланПродажПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПлан(Команда)
	ОткрытьФорму("Справочник.CRM_ПланПродаж.ФормаОбъекта",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаПрименить");
	
	Если ЗаписатьНаборЗаписей() Тогда
		Модифицированность = Ложь;
		ЗаполнитьТаблицыЗаписейПланаПродаж(ВключаяПодчиненные);
		ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапись(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаДобавить");
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) И ЭтоАдминистраторПлана Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗаписьПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Вернуть план продаж в режим Планирования?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбработатьПередНачаломДобавления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьПослеВопроса(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьПередНачаломДобавления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапись(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаУдалить");
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) И ЭтоАдминистраторПлана Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЗаписьПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Вернуть план продаж в режим Планирования?'"),
			 РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;

	ИдентификаторТекущейСтроки = Элементы.ЗаписиПланаПродаж.ТекущаяСтрока;
	
	Если ИдентификаторТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = ЗаписиПланаПродаж.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиПланаПродаж.Удалить(ЗаписиПланаПродаж.Индекс(Запись));
	
	//ЗаписатьНаборЗаписей();
	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтоги", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписьПослеВопроса(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РежимАРМ = 1;
		НастроитьФорму();
		НастроитьФормуПоУровнюИерархии(ТекущийУровеньИерархии);
		УдалитьЗапись(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	ТЭ = Элементы.ЗаписиПланаПродаж.ТекущийЭлемент;
	ЗаписиПланаПродаж.Сортировать(СтрЗаменить(ТЭ.Имя, "ЗаписиПланаПродаж", "") + " Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	ТЭ = Элементы.ЗаписиПланаПродаж.ТекущийЭлемент;
	ЗаписиПланаПродаж.Сортировать(СтрЗаменить(ТЭ.Имя, "ЗаписиПланаПродаж", "") + " Убыв");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтервалПериодаНажатие(Команда)
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала необходимо Применить сделанные изменения'"),
			 , , ,
			 Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИнтервалПериода = 0;
	
	РазделеннаяСтрока = СтрРазделить(Команда.Имя, "_");
	ТекущийИнтервалПериода = Число(РазделеннаяСтрока[РазделеннаяСтрока.Количество() - 1]);
	
	Элементы.ЗаписиПланаПродажСуммаОснования.Видимость = (ТекущийИнтервалПериода = 0);
	
	ЗаполнитьТаблицыЗаписейПланаПродаж(ВключаяПодчиненные);
	
КонецПроцедуры

&НаКлиенте
Процедура МойУровень(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаМойУровень");
	ПерейтиНаУровень(Истина);
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАРМ(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаОбновитьАРМ");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьАРМПродолжение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'При обновлении данных,
			| внесенные изменения будут потеряны! Продолжить?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАРМПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.ПланированиеПродаж.ДлительностьСценариев.ВремяОбновленияАРМ");
	
	ИзменитьПланПродаж();
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.ПланированиеПродаж.ДлительностьСценариев.ВремяОбновленияАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДанныйУровень(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюПерейтиНаДанныйУровень");
	ПерейтиНаУровень();
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаУровеньВыше(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюВернутьсяНаУровеньВыше");
	ПерейтиНаУровень(Ложь, Истина);
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РуководительПодразделения(Подразделение)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Подразделение.ТекущийРуководитель;
	Иначе
		Возврат ПользовательФизическогоЛица(Подразделение.ТекущийРуководитель);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеУровняВыше()
	
	Результат = Новый Структура("Подразделение, Руководитель");
	
	Если НЕ РаботаетРуководительПодразделения Тогда // менеджер (администратору плана эта команда недоступна)
		Результат.Подразделение = ТекущееПодразделение; // в том же подразделении поднимается до уровня руководителя
	Иначе
		Результат.Подразделение = ТекущееПодразделение.Родитель;
	КонецЕсли;
	Результат.Руководитель = РуководительПодразделения(Результат.Подразделение);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаУровень(МойУровень = Ложь, УровеньВыше = Ложь)
	
	ЭтоПереходНаУровеньПодразделения = Ложь;
	
	Если МойУровень Тогда
		
		Если РаботаНаМоемУровне И Не ЭтоПереходНаУровеньМенеджера Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоПереходНаУровеньМенеджера = Ложь;
		Если ЭтоАдресВременногоХранилища(АдресДанныхМойУровень) Тогда
			
			ДанныеМойУровень = ПолучитьИзВременногоХранилища(АдресДанныхМойУровень);
			АдресДанныхМойУровень = Неопределено;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеМойУровень);
			Объект.ПланПродаж = ДанныеМойУровень.ПланПродаж;
			
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не найдены данные для перехода на уровень. Пожалуйста,
				| перезапустите АРМ Планирование продаж'"));
			Возврат;
		КонецЕсли;
			
	Иначе

		ЭтоПереходНаУровеньМенеджера = Ложь;
	
		Если УровеньВыше Тогда
		
			ДанныеВыше = ДанныеУровняВыше();
			ТекущийПользователь = ДанныеВыше.Руководитель;
			ТекущееПодразделение = ДанныеВыше.Подразделение;
			ПодразделенияПользователя =
				Новый ФиксированныйМассив(CRM_УправлениеДоступомПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь));
			
		Иначе
			
			Если Элементы.ЗаписиПланаПродаж.ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ТекущийУровеньИерархии = КоличествоУровнейСхемы() Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Достигнут максимальный уровень иерархии'"));
				Возврат;
			КонецЕсли;
			
			Если НЕ ЭтоАдресВременногоХранилища(АдресДанныхМойУровень) Тогда
				
				ДанныеМойУровень = Новый Структура("ТекущийПользователь, ТекущееПодразделение, ПланПродаж");
				ЗаполнитьЗначенияСвойств(ДанныеМойУровень, ЭтотОбъект);
				ДанныеМойУровень.ПланПродаж = Объект.ПланПродаж;
				
				АдресДанныхМойУровень = ПоместитьВоВременноеХранилище(ДанныеМойУровень, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ТекущееПодразделение = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Подразделение;
			ТекущийПользователь = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Менеджер;
			Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
				ТекущийПользователь = РуководительПодразделения(ТекущееПодразделение);
				ПодразделенияПользователя =
					Новый ФиксированныйМассив(CRM_УправлениеДоступомПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь));
				ЭтоПереходНаУровеньПодразделения = Истина;
			Иначе
				ЭтоПереходНаУровеньМенеджера = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПланПродаж();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательФизическогоЛица(ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ДатыПланаПродаж()
	Возврат Новый Структура("ДатаНачалаПлана, ДатаОкончанияПлана",
							Объект.ПланПродаж.НачалоПериода, Объект.ПланПродаж.ОкончаниеПериода);
КонецФункции

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаВыбратьПериод");
	//ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	
	ДатаНачалаПериода = ДатаНачалаПодчиненногоПериода(ТекущаяПериодичностьОкнаКолонок, ДатыПланаПродаж().ДатаНачалаПлана);
	
	ДатаНачалаОкна = СледующаяДатаНачалаПериода(ТекущаяПериодичностьОкнаКолонок, ДатаНачалаПериода,
		 ТекущийИнтервалОкнаКолонок - 1);
	ДатаОкончанияОкна = ДатаОкончанияПериода(ТекущаяПериодичностьОкнаКолонок, ДатаНачалаОкна);
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ДатыПлана, МинимальнаяПериодичность",
										ДатаНачалаОкна, ДатаОкончанияОкна, ДатыПланаПродаж(), ПериодичностьПодчиненногоУровняСхемы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.CRM_ПланированиеПродаж.Форма.ВыборПериода", ПараметрыВыбора,
		 Элементы.ВыбратьПериод, , , ,
		 ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(РезультатВыбора.ПериодичностьКонтроля,
		 ПериодичностьПодчиненногоУровняСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалПоДате = ИнтервалОкнаПоДате(РезультатВыбора.ПериодичностьКонтроля,
		 ДатаОкончанияПериода(РезультатВыбора.ПериодичностьКонтроля, РезультатВыбора.КонецПериода) 
		+ 1);
	УстановитьПериодичностьОкнаКолонок(РезультатВыбора.ПериодичностьКонтроля, ИнтервалПоДате);
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ИнтервалОкнаПоДате(Периодичность, ДатаНачалаИнтервала)
	
	НачалоПериода = НачалоДня(Объект.ПланПродаж.НачалоПериода);
	ОкончаниеПериода = КонецДня(Объект.ПланПродаж.ОкончаниеПериода);
	
	Если Периодичность = Перечисления.Периодичность.Неделя
		ИЛИ Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		ПериодыПериодичности = МассивПериодов(Периодичность, НачалоПериода, ОкончаниеПериода);
		РезультатИнтервал = ПериодыПериодичности.Найти(ДатаНачалаИнтервала);
		Если РезультатИнтервал = Неопределено Тогда
			РезультатИнтервал = -1;
		КонецЕсли;
		Возврат РезультатИнтервал;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("НачалоИнтервала", ДатаНачалаИнтервала);

		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РАЗНОСТЬДАТ(&НачалоПериода, &НачалоИнтервала, <Периодичность>) КАК КоличествоИнтервалов";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "<Периодичность>", ВРег(Периодичность));

		Возврат Запрос.Выполнить().Выгрузить()[0].КоличествоИнтервалов;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ПланированиеПродаж"));
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПрогноз(Команда)
	РассчитатьПрогнозПланаВверх();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбсуждениеДанныеСверху(Команда)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаОбсудитьСРуководителемСлеваНадСписком");
	ОткрытьОбсуждение(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбсуждениеПодчиненные(Команда)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюОбсудитьСПодчиненным");
	ОткрытьОбсуждение(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательАдминистраторПлана(ПланПродаж)
	Возврат ПланПродаж.Администраторы[0].Пользователь;
КонецФункции

&НаСервереБезКонтекста
Функция РодительПодразделения(Подразделение)
	Возврат Подразделение.Родитель;
КонецФункции

&НаКлиенте
Процедура ОткрытьОбсуждение(СобеседникЯвляетсяРуководителем)
	
	Если НЕ ОбсужденияПодключены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен План продаж. Открытие обсуждения невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Собеседник = Неопределено;
	Если СобеседникЯвляетсяРуководителем Тогда
		Если ТекущийУровеньИерархии = 1 Тогда
			Собеседник = ПользовательАдминистраторПлана(Объект.ПланПродаж);
		ИначеЕсли НЕ РаботаетРуководительПодразделения Тогда // Менеджер находится в том же подразделении, что
															// и его руководитель
			Собеседник = РуководительПодразделения(ТекущееПодразделение);
		Иначе
			Собеседник = РуководительПодразделения(РодительПодразделения(ТекущееПодразделение));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Менеджер) Тогда
			Собеседник = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Менеджер;
		Иначе
			Собеседник = РуководительПодразделения(Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Собеседник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось определить собеседника. Открытие обсуждения невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ДанныеОбсуждения", Новый Структура);
	ПараметрыОткрытия.ДанныеОбсуждения.Вставить("ПланПродаж", Объект.ПланПродаж);
	ПараметрыОткрытия.ДанныеОбсуждения.Вставить("СобеседникЯвляетсяРуководителем", СобеседникЯвляетсяРуководителем);
	ПараметрыОткрытия.ДанныеОбсуждения.Вставить("Собеседник", Собеседник);
	ПараметрыОткрытия.ДанныеОбсуждения.Вставить("Пользователь", ТекущийПользователь);
	
	АдресПараметровПовторногоОткрытия = ПоместитьВоВременноеХранилище(ПараметрыОткрытия, УникальныйИдентификатор);
	
	Закрыть();
	
	Если НЕ Модифицированность Тогда
		ПовторноОткрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

&НаКлиенте
Процедура ДобавитьЗаписьКМ(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюДобавить");
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) И ЭтоАдминистраторПлана Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗаписьПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Вернуть план продаж в режим Планирования?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбработатьПередНачаломДобавления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапись(Команда)
	Элементы.ЗаписиПланаПродаж.ИзменитьСтроку();
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюИзменить");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписьКМ(Команда)
	
	МассивУдаляемыхСтрок = Элементы.ЗаписиПланаПродаж.ВыделенныеСтроки; 
	КоличествоСтрок = МассивУдаляемыхСтрок.Количество();
	Пока КоличествоСтрок > 0 Цикл
		НайденнаяСтрока = ЗаписиПланаПродаж.НайтиПоИдентификатору(МассивУдаляемыхСтрок[КоличествоСтрок - 1]);
		ЗаписиПланаПродаж.Удалить(НайденнаяСтрока); 
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюУдалить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануПрошлыйПериод(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран план продаж!'"), , "ПланПродаж");
		Возврат;
	КонецЕсли;
	
	МассивПланов = ПланыПрошлогоПериода();
	Если МассивПланов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет подходящих планов в прошлых периодах!'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаписиПланаПродаж.ОтборСтрок = Неопределено Тогда
		ЕстьСтроки = (ЗаписиПланаПродаж.Количество() > 0);
	Иначе
		ЕстьСтроки = (ЗаписиПланаПродаж.НайтиСтроки(Новый Структура(Элементы.ЗаписиПланаПродаж.ОтборСтрок)).Количество() > 0);
	КонецЕсли;
	
	Если ЕстьСтроки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПлануПрошлыйПериодПродолжение", ЭтотОбъект, МассивПланов);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить текущие данные планирования?'"),
			 РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьПоПлануПрошлыйПериодПродолжение(КодВозвратаДиалога.Нет, МассивПланов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануПрошлыйПериодПродолжение(Ответ, МассивПланов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТекщиеДанные = Истина;
	Иначе
		ОчиститьТекщиеДанные = Ложь;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПлануПрошлыйПериодЗавершение",
		 ЭтотОбъект,
		 ОчиститьТекщиеДанные);
	ОткрытьФорму("Справочник.CRM_ПланПродаж.ФормаВыбора", Новый Структура("МассивПланов", МассивПланов), 
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануПрошлыйПериодЗавершение(ВыбранныйПлан, ОчиститьТекщиеДанные) Экспорт
	
	Если ВыбранныйПлан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ЗаполнитьПоПлануСервер(ВыбранныйПлан, ОчиститьТекщиеДанные);

	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродажамПрошлыйПериод(Команда)

	Если Не ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран план продаж!'"), , "ПланПродаж");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПродажамПрошлыйПериодПродолжение", ЭтотОбъект);
	ПараметрыВыбора = Новый Структура("НачалоПериода", "КонецПериода");
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок,
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ПланПродаж, "НачалоПериода"),
		ТекущийИнтервалОкнаКолонок);	
	ДатаНачалаОкна = ДатыОкнаКолонок.ДатаНачала;
	ПоказатьВыборПериода(ДатаНачалаОкна, ТекущаяПериодичностьОкнаКолонок, Ложь, ОписаниеОповещения,
		 Элементы.ЗаписиПланаПродаж);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродажамПрошлыйПериодПродолжение(ВыбранныйПериод, ДопПараметры) Экспорт
	
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаписиПланаПродаж.ОтборСтрок = Неопределено Тогда
		ЕстьСтроки = (ЗаписиПланаПродаж.Количество() > 0);
	Иначе
		ЕстьСтроки = (ЗаписиПланаПродаж.НайтиСтроки(Новый Структура(Элементы.ЗаписиПланаПродаж.ОтборСтрок)).Количество() > 0);
	КонецЕсли;
	
	Если ЕстьСтроки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПродажамПрошлыйПериодЗавершение",
			 ЭтотОбъект,
			 ВыбранныйПериод);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить текущие данные планирования?'"),
			 РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьПоПродажамПрошлыйПериодЗавершение(КодВозвратаДиалога.Нет, ВыбранныйПериод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродажамПрошлыйПериодЗавершение(Ответ, ВыбранныйПериод) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТекщиеДанные = Истина;
	Иначе
		ОчиститьТекщиеДанные = Ложь;
	КонецЕсли;
	
    ЗаполнитьПоПродажамСервер(ВыбранныйПериод, ОчиститьТекщиеДанные);

	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьСлужебныеРеквизитыПриИзменении(Элемент)
	
	НастроитьВидимостьСлужебныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСлужебныхРеквизитов()
	
	Элементы.ТекущийИнтервалПериода.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ОснованиеПланаПродаж.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.СхемаПланаПродаж.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ТекущийУровеньИерархии.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ОтключитьОтборСтрок.Видимость = ПоказыватьСлужебныеРеквизиты;
	
	Элементы.ГруппаПериодКП.Видимость = ПоказыватьСлужебныеРеквизиты;
	
	Элементы.ЗаписиПланаПродажНомерСтроки.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажКомментарий.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажДатаИзменения.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажАвторИзменения.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажПорядокСтроки.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажПериодПлана.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажУровеньИерархии.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажСумма.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажКоличество.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажКоличествоПрогноз.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажСуммаПрогноз.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажСуммаОснования.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажОтклонениеСумма.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажАналитикаУчетаПланаПродаж.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажПланПродаж.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажИдентификаторСтроки.Видимость = ПоказыватьСлужебныеРеквизиты;
	Элементы.ЗаписиПланаПродажИдентификаторСтрокиРодителя.Видимость = ПоказыватьСлужебныеРеквизиты;
	
КонецПроцедуры

&НаСервере
Процедура ПланПродажПриИзмененииНаСервере()
	
	НастроитьУровеньИерархии();
	
	СхемаПланаПродаж = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		
		СхемаПланаПродаж = Объект.ПланПродаж.СхемаПланаПродаж;
		
		ИспользоватьСумму = Объект.ПланПродаж.ИспользоватьСумму;
		ИспользоватьКоличество = Объект.ПланПродаж.ИспользоватьКоличество;
		
	КонецЕсли;
	
	ЗаполнитьТаблицыЗаписейПланаПродаж(ВключаяПодчиненные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПродажПриИзменении(Элемент)
	
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ПланПродаж", Объект.ПланПродаж);
	ОтображениеОбсуждений = ОтображениеОбсужденийФормы.НеОтображать;
	ИзменитьПланПродаж(Истина);
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПродажАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоВыбораРеквизитПланПродаж");
КонецПроцедуры

&НаСервере
Процедура ИзменитьПланПродаж(ПриИзменении = Ложь)
	
	Если ПриИзменении Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		АдресДанныхМойУровень = "";
	КонецЕсли;
	ИндексТекДанныхСверху = 0;
	ПланПродажПриИзмененииНаСервере();
	УсловноеОформление();
	НастроитьФорму();
	ЗаписиСОтменойСогласования.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	
	ТекущееПодразделение = Неопределено;
	Объект.ПланПродаж = Неопределено;
	
	ТекущийПользовательПриИзмененииНаСервере();
	
	ПланПродажПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущееПодразделение = ТекущийПользователь.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПодразделениеПриИзменении(Элемент)
	
	Объект.ПланПродаж = Неопределено;
	ПланПродажПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеСверху

&НаКлиенте
Процедура ДанныеСверхуАктивизацияСтроки()
	ДанныеСверхуПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСверхуПриАктивизацииСтроки(Знач ЗначениеОтбора = "")
	
	Если ЭтоАдминистраторПлана ИЛИ (НЕ РаботаетРуководительПодразделения И АРМВРежимеПланирования(РежимАРМ)) Тогда
		
		ЗначениеОтбора = ""; // отображать все без родителя, т.к. таблица "Записей Сверху" у Администратора
								// и Менеджера (в режиме планирования) - не заполнены
		
	ИначеЕсли ДанныеСверху.Количество() = 0 Тогда
		
		ЗначениеОтбора = "00000000-0000-0000-0000-000000000000"; // не отображать ничего
		
	ИначеЕсли ЗначениеОтбора = "" Тогда
		
		ЗначениеОтбора = ДанныеСверху[ИндексТекДанныхСверху].ИдентификаторСтроки;
		
	КонецЕсли;

	НайденныеСтроки = ДанныеСверху.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ЗначениеОтбора));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ИндексТекДанныхСверху = ДанныеСверху.Индекс(НайденныеСтроки[0]);
	Иначе
		ИндексТекДанныхСверху = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Элементы.ЗаписиПланаПродаж.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиРодителя", ЗначениеОтбора);
	Иначе
		Элементы.ЗаписиПланаПродаж.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementsByClassName("current");
	Если ТекСтр.length = 0 Или ЗначениеОтбора <> ТекСтр[0].id Тогда
		Если ТекСтр.length > 0 Тогда
			ТекСтр[0].classList.remove("current");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementById(ЗначениеОтбора);
			Если ТекСтр <> Неопределено Тогда
				ТекСтр.classList.add("current");
			КонецЕсли;
		Иначе
			ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementsByClassName("plan");
			Если ТекСтр.length > 0 Тогда
				ТекСтр[0].classList.add("current");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДоступностьКолонокАналитик", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтоги", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПланированияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.className <> "content"
		И CRM_РаботаСHTMLКлиент.Полифил_closest(ДанныеСобытия.Element, ".content") <> Неопределено Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоВыбораЭлементаСпискаСлева");
	КонецЕсли;
	Если ДанныеСобытия.Element.className = "check_item" Тогда
		НайденныеСтроки = ДанныеСверху.НайтиСтроки(Новый Структура("ИдентификаторСтроки",
			 СтрЗаменить(ДанныеСобытия.Element.id, "check_",
			 "")));
		Для каждого СтрокаДС Из НайденныеСтроки Цикл
			СтрокаДС.Согласовано = ДанныеСобытия.Element.checked;
			СтрокаДС.СтрокаИзменена = Истина;
			ДанныеСверхуИзменены = Истина;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Если ДанныеСверху.Количество() > 1 Тогда
			ИдентификаторСтроки = Прав(ДанныеСобытия.Href, 36);
			ДанныеСверхуПриАктивизацииСтроки(ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаписиПланаПродаж

&НаКлиенте
Процедура ЗаписиПланаПродажПриИзменении(Элемент)
	
	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяРеквизитаТаблицы = СтрЗаменить(Поле.Имя, "ЗаписиПланаПродаж", "");
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		
		Если РаботаетМенеджер() Тогда
			
			Если ДанныеСверху.Количество() = 0 Тогда
				
				СтандартнаяОбработка = Ложь;
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Данные планирования не заполнены для данного периода. Редактирование невозможно.'"));
				
			Иначе
	
				ИменаКолонок = ИменаКолонокРазрезов();
				Если ИменаКолонок.Найти(ИмяРеквизитаТаблицы) = Неопределено Тогда
					Возврат;
				КонецЕсли;
			
				СтандартнаяОбработка = КолонкаАналитикиДоступнаДляРедактирования(ИмяРеквизитаТаблицы);
				
			КонецЕсли;
		
		Иначе
			СтандартнаяОбработка = Ложь; // Для пользователей, не являющихся менеджером, изменения запрещены
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьИтогиПоСтроке", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Согласовано И Не Элемент.ТекущиеДанные.ЭтоПрогноз Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменаСогласованияВетки", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'При изменении строки, ее согласование будет отменено! Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменаСогласованияВетки(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекДанные = Элементы.ЗаписиПланаПродаж.ТекущиеДанные;
		
		Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
		
		ТекДанные.Согласовано = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.ИдентификаторСтрокиРодителя) Тогда
			ЗаписиСОтменойСогласования.Добавить(ТекДанные.ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Не Элементы.ДобавитьЗапись.Доступность Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКонтекстноеМенюСкопировать");
		НоваяСтрока = ЗаписиПланаПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.ТекущиеДанные, , "ИдентификаторСтроки, НомерСтроки");
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	Иначе
		ОбработатьПередНачаломДобавления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.УдалитьЗапись.Доступность Тогда
		УдалитьЗапись(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПередНачаломДобавления()
	
	// в этом случае строка создается только на основании строки плана "сверху"
	Если НЕ ЭтоАдминистраторПлана Тогда
		
		Если ДанныеСверху.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка-источник'"));
			Возврат;
		КонецЕсли;
		
		Если ДанныеСверху[ИндексТекДанныхСверху].УровеньИерархии <> ТекущийУровеньИерархии Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка,
				| соответствующая текущему уровню иерархии'"));
			Возврат;
		КонецЕсли;
		
		Если ТекущийУровеньИерархии + 1 > КоличествоУровнейСхемы()
			
			 	 И АРМВРежимеПланирования(РежимАРМ) Тогда // на ввод Менеджером корректировки суммы для разведения записей в регистре по измерениям
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Превышено количество уровней схемы'"));
			Возврат;
		КонецЕсли;
		
		ПодготовитьСтрокуСДанными();
		
	КонецЕсли;
	
	Отказ = Истина;
	ЗаписиПланаПродажПередНачаломДобавленияНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтоги", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПрогнозированияДаннымиПлана(ИдентификаторСтроки, НС)
	
	ПериодичностьПланирования = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
		 ТекущийУровеньИерархии);
	ПериодичностьПрогнозирования =
		Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
	
	ПараметрыЗапроса = Новый Структура("Периодичность, ИдентификаторСтроки",
											ПериодичностьПланирования,
											ИдентификаторСтроки);
	Запрос = СформироватьЗапросТаблицыЗаписейПланаПродаж(ПараметрыЗапроса, Истина);
		
	ВыборкаРезультат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРезультат.Следующий() Цикл
		
		ДетальныеЗаписи = ВыборкаРезультат.Выбрать();
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			Подпериоды = Новый Массив;
			Если ПериодичностьПланирования = ПериодичностьПрогнозирования Тогда
				Подпериоды.Добавить(ДетальныеЗаписи.ПериодПлана);
			Иначе
				Подпериоды = МассивПериодов(ПериодичностьПрогнозирования, ДетальныеЗаписи.ПериодПлана,
					 ДатаОкончанияПериода(ПериодичностьПланирования,
					 ДетальныеЗаписи.ПериодПлана));
			КонецЕсли;
			
			//ЗначениеКРаспределениюСумма = ДетальныеЗаписи.Сумма;
			//ЗначениеКРаспределениюКоличество = ДетальныеЗаписи.Количество;
			ЗначениеКРаспределениюСумма = 0;
			ЗначениеКРаспределениюКоличество = 0;
			
			СреднееЗаПериодСумма = Окр(ЗначениеКРаспределениюСумма / Подпериоды.Количество(), 0, 1);
			СреднееЗаПериодКоличество = Окр( ЗначениеКРаспределениюКоличество / Подпериоды.Количество(), 0, 1);
			
			СчКолонок = 1;
			Для Каждого Подпериод Из Подпериоды Цикл
			
				// Сумма
				Если ЗначениеКРаспределениюСумма < СреднееЗаПериодСумма
					ИЛИ СчКолонок = Подпериоды.Количество() Тогда
					ЗначениеПериодаСумма = ЗначениеКРаспределениюСумма;
				Иначе
					ЗначениеПериодаСумма = СреднееЗаПериодСумма;
				КонецЕсли;
				
				ЗначениеКРаспределениюСумма = ЗначениеКРаспределениюСумма - ЗначениеПериодаСумма;
				
				ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма()) + Формат(Подпериод, "ДФ=yyyyMMdd");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НС, ИмяКолонкиСумма) Тогда
					НС[ИмяКолонкиСумма] = КонвертироватьЗначениеПоказателя(ЗначениеПериодаСумма, ВидПоказателяСумма());
				КонецЕсли;
				
				// Количество
				Если ЗначениеКРаспределениюКоличество < СреднееЗаПериодКоличество
					ИЛИ СчКолонок = Подпериоды.Количество() Тогда
					ЗначениеПериодаКоличество = ЗначениеКРаспределениюКоличество;
				Иначе
					ЗначениеПериодаКоличество = СреднееЗаПериодКоличество;
				КонецЕсли;
				
				ЗначениеКРаспределениюКоличество = ЗначениеКРаспределениюКоличество - ЗначениеПериодаКоличество;
				
				ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество()) + Формат(Подпериод, "ДФ=yyyyMMdd");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НС, ИмяКолонкиКоличество) Тогда
					НС[ИмяКолонкиКоличество] = КонвертироватьЗначениеПоказателя(ЗначениеПериодаКоличество, ВидПоказателяКоличество());
				КонецЕсли;
				
				СчКолонок = СчКолонок + 1;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтрокуСДанными()
	
	Запись = ДанныеСверху[ИндексТекДанныхСверху];
	
	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийСписокИсключаемыхСвойств = ", АналитикаУчетаПланаПродаж, ДатаИзменения, АвторИзменения, Комментарий, Согласовано";
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		
		СтруктураТаблицы = ЗаписиПланаПродаж.Выгрузить();
		СтруктураТаблицы.Очистить();
		
		НС = СтруктураТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Запись, , ОбщийСписокИсключаемыхСвойств);
		ЗаполнитьСтрокуПрогнозированияДаннымиПлана(Запись.ИдентификаторСтроки, НС);
		
	Иначе
		
		//ОбщийСписокИсключаемыхСвойств = ОбщийСписокИсключаемыхСвойств + ", ИдентификаторСтроки"; 
		
		СтруктураТаблицы = ДанныеСверху.Выгрузить();
		СтруктураТаблицы.Очистить();
		
		НС = СтруктураТаблицы.Добавить();
		Если РаботаСЗаписямиКонечныхУровней() Тогда
			ЗаполнитьЗначенияСвойств(НС, Запись, , ОбщийСписокИсключаемыхСвойств);
		Иначе
			ЗаполнитьЗначенияСвойств(НС, Запись, , "Подразделение, Менеджер" + ОбщийСписокИсключаемыхСвойств);
		КонецЕсли;

		Если Запись.Согласовано Тогда
			Запись.Согласовано = Ложь;
			Запись.СогласованоПодчиненные = Ложь;
			Запись.СтрокаИзменена = Истина;
			ДанныеСверхуИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//ПериодичностьПрогнозирования = Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
	// Если АРМВРежимеПрогнозирования(РежимАРМ)
	//	И Запись.Периодичность = ПериодичностьПрогнозирования
	//	И КоличествоУровнейСхемы() > 1 Тогда
	//	НС.ИдентификаторСтрокиРодителя = Запись.ИдентификаторСтрокиРодителя; // устанавливается ссылка на запись уровнем выше
	// Иначе
	//	НС.ИдентификаторСтрокиРодителя = Запись.ИдентификаторСтроки;
	//КонецЕсли;
	НС.ИдентификаторСтрокиРодителя = Запись.ИдентификаторСтроки;
	
	ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НС);
	АдресДанныхСтрокиПлана = ПоместитьВоВременноеХранилище(ДанныеСтроки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписиПланаПродажПередНачаломДобавленияНаСервере()
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) И ЭтоАдминистраторПлана Тогда
		РежимАРМ = 1;
		НастроитьФорму();
		НастроитьФормуПоУровнюИерархии(ТекущийУровеньИерархии);
	КонецЕсли;
	ДобавитьЗаписьНаборЗаписей();
	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажИтогоЗаПериодыСуммаПриИзменении(Элемент)
	
	РаспределитьИтогоПоПериодам(ВидПоказателяСумма());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажИтогоЗаПериодыКоличествоПриИзменении(Элемент)
	
	РаспределитьИтогоПоПериодам(ВидПоказателяКоличество());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажИтогоЗаПериодыОкнаСуммаПриИзменении(Элемент)
	
	РаспределитьИтогоПоПериодам(ВидПоказателяСумма(), Истина);
	ОбновитьИтогиПериодовЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажИтогоЗаПериодыОкнаКоличествоПриИзменении(Элемент)
	
	РаспределитьИтогоПоПериодам(ВидПоказателяКоличество(), Истина);
	ОбновитьИтогиПериодовЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиПланаПродажМенеджерПриИзменении(Элемент)
	
	Если Элементы.ЗаписиПланаПродаж.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдминистраторПлана Тогда // В данном случае не требуется дополнительных проверок, т.к. выполнение данного кода возможно только,
									// если в типе иерархии Схемы плана продаж задан Менеджер (т.е. колонка Менеджер доступна для изменения).
		Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Подразделение =
			ПодразделениеПользователя(Элементы.ЗаписиПланаПродаж.ТекущиеДанные.Менеджер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УровеньДоступаСхемыПланаПродаж

&НаКлиенте
Процедура ВключаяПодчиненныеПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ВключаяПодчиненные = НЕ ВключаяПодчиненные; // откат значения флага
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала необходимо Применить сделанные изменения'"));
	Иначе
		ЗаполнитьТаблицыЗаписейПланаПродаж(ВключаяПодчиненные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТЗРегистра

&НаСервере
Процедура ДобавитьЗаписьНаборЗаписей()
	
	Запись = ЗаписиПланаПродаж.Добавить();
	
	ЗаполнитьЗаписьПланаПродаж(Запись);
	
	ОбновитьИтогиОкнаПериодов();
	
	//ЗаписатьНаборЗаписей();
	
	Элементы.ЗаписиПланаПродаж.ТекущаяСтрока = Запись.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьПланаПродаж(Запись)
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхСтрокиПлана) Тогда
		
		ДанныеСтроки = ПолучитьИзВременногоХранилища(АдресДанныхСтрокиПлана);
		АдресДанныхСтрокиПлана = Неопределено;
	
		Если ДанныеСтроки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Запись, ДанныеСтроки);
			ЗаписиПланаПродаж.Сдвинуть(ЗаписиПланаПродаж.Количество() - 1,
				 ДанныеСтроки.НомерСтроки - (ЗаписиПланаПродаж.Количество() - 1));
		КонецЕсли;
		
	КонецЕсли;
	
	Запись.ПланПродаж = Объект.ПланПродаж;
	
	Запись.УровеньИерархии = ТекущийУровеньИерархии + 1; // должно быть после заполнения по строке из временного хранилища
														// заполнение всегда идет на след уровень, поэтому +1
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		Запись.Периодичность = 
			Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
		Запись.Согласовано = Истина;
		Запись.ЭтоПрогноз = Истина;
	Иначе
		Запись.Периодичность = 
			Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
				 Запись.УровеньИерархии);
	КонецЕсли;
	Запись.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	
	Если НЕ ЗначениеЗаполнено(Запись.ИдентификаторСтрокиРодителя) Тогда
		Запись.ИдентификаторСтрокиРодителя = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("", 255,
			 " "); // для корректного отбора через ОтборСтрок в элементе ТЗ
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПередЗаписью(ТаблицаДвижений)
	
	// Уровни иерархии введенных подразделений должны совпадать:
	ТаблицаПроверки = ТаблицаДвижений.Скопировать(, "Подразделение");
	
	Для Каждого СтрТаблицаПроверки Из ТаблицаПроверки Цикл
		СтрТаблицаПроверки.Подразделение = СтрТаблицаПроверки.Подразделение.Родитель;
	КонецЦикла;
	
	ТаблицаПроверки.Свернуть("Подразделение");
	
	Если ТаблицаПроверки.Количество() <> 1 
		И Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, 0,
			 Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подразделения должны совпадать по уровню иерархии'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Если это не АдминистраторПлана
		// и не менеджер, введенные подразделения должны быть непосредственными подчиненными Текущего Подразделения
	Если НЕ (ЭтоАдминистраторПлана Или РаботаСЗаписямиКонечныхУровней()) Тогда
		
		Если ТаблицаПроверки[0].Подразделение <> ТекущееПодразделение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подразделения должны быть непосредственно подчинены подразделению пользователя'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии + 1,
		 Тип("СправочникСсылка.Пользователи")) Тогда
		Для Каждого СтрТаблицыДвижений Из ТаблицаДвижений Цикл
			Если НЕ ЗначениеЗаполнено(СтрТаблицыДвижений.Менеджер) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Есть строки с незаполненным полем Менеджер'"));
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УдалитьНаборЗаписей(ТекущаяТаблицаЗаписей)
	
	Если ЭтоАдресВременногоХранилища(АдресИсходнойТаблицыЗаписей) Тогда
		
		ИсходнаяТаблицаЗаписей = ПолучитьИзВременногоХранилища(АдресИсходнойТаблицыЗаписей);
		АдресИсходнойТаблицыЗаписей = Неопределено;
	
		Если ИсходнаяТаблицаЗаписей <> Неопределено Тогда
			
			// ОставитьСтрокиКЗаписи(ИсходнаяТаблицаЗаписей); // более не актуально, т.к. в таблице содержатся ТОЛЬКО подчиненные строки // по аналогии с текущей таблицей
			
			Для Каждого СтрИсхТЗ Из ИсходнаяТаблицаЗаписей Цикл
				ПараметрыПоиска = Новый Структура("ПланПродаж,АналитикаУчетаПланаПродаж,УровеньИерархии,Периодичность",
													СтрИсхТЗ.ПланПродаж, СтрИсхТЗ.АналитикаУчетаПланаПродаж, СтрИсхТЗ.УровеньИерархии, СтрИсхТЗ.Периодичность);
				Если ТекущаяТаблицаЗаписей.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
					
					НаборЗаписей = РегистрыСведений.CRM_ПланПродаж.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ПланПродаж.Установить(СтрИсхТЗ.ПланПродаж);
					// НаборЗаписей.Отбор.ПериодПлана.Установить(СтрИсхТЗ.ПериодПлана); // закомментировано, т.к. должны удалиться ВСЕ периоды по данной строке
					НаборЗаписей.Отбор.АналитикаУчетаПланаПродаж.Установить(СтрИсхТЗ.АналитикаУчетаПланаПродаж);
					НаборЗаписей.Отбор.УровеньИерархии.Установить(СтрИсхТЗ.УровеньИерархии);
					НаборЗаписей.Отбор.Периодичность.Установить(СтрИсхТЗ.Периодичность);
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						Возврат Ложь;
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНаборЗаписей()
	
	// Подготовка:
	ВсеПериодыСоответствие = Новый Соответствие;
	Для Каждого ИмяГруппыПериода Из ИменаГруппПериодов Цикл
		ПериодПланаКолонкиСтрока = СтрЗаменить(ИмяГруппыПериода, ПрефиксГруппыПериода(), "");
		ПериодПланаКолонки = Дата(ПериодПланаКолонкиСтрока);
		ВсеПериодыСоответствие.Вставить(ПериодПланаКолонки, ПериодПланаКолонкиСтрока);
	КонецЦикла;
	ВсеПериодыСоответствиеИсточник = Новый ФиксированноеСоответствие(ВсеПериодыСоответствие);
	
	Если ДанныеСверхуИзменены Тогда
		ДанныеСверхуСохранитьИзменения();
	КонецЕсли;
	
	ТаблицаДвижений = ЗаписиПланаПродаж.Выгрузить();
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		УдалитьНаборЗаписей(ТаблицаДвижений); // могут быть удаленные строки
		Если НЕ УдалитьСтрокиБезРодителей() Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ПроверитьПередЗаписью(ТаблицаДвижений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьНумерациюСтрокТаблицы(ТаблицаДвижений);
	
	// Запись:

	ИменаПолей = РегистрыСведений.CRM_АналитикаУчетаПланаПродаж.ИменаПолейКоллекцииПоУмолчанию();
	Попытка
		РегистрыСведений.CRM_АналитикаУчетаПланаПродаж.ЗаполнитьВКоллекции(ТаблицаДвижений);
		
		// Удаление должно идти после создания новых ключей аналитики
		УдалитьНаборЗаписей(ТаблицаДвижений);
		
		ДатаИзменения = ТекущаяДатаСеанса(); // дата изменения вынесена за цикл,
											// т.к. если она будет разной (по причине времени обхода цикла) - не получится сгруппировать записи при чтении (ЗаписиСверху)
		
		// Для оптимизации разбиение происходит в цикле ниже
		ПериодичностьРодителя = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
			 ТекущийУровеньИерархии);
		ПериодичностьПрогнозирования =
			Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
		
		Для Каждого Движение Из ТаблицаДвижений Цикл
			
			НаборЗаписей = РегистрыСведений.CRM_ПланПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланПродаж.Установить(Объект.ПланПродаж);
			НаборЗаписей.Отбор.АналитикаУчетаПланаПродаж.Установить(Движение.АналитикаУчетаПланаПродаж);
			
			Если РаботаетМенеджер() Тогда
				Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
					УровеньИерархииДляЗаписи = ТекущийУровеньИерархии + 1; // Запись прогнозов
				Иначе
					УровеньИерархииДляЗаписи = ТекущийУровеньИерархии; // Запись колонки Согласовано
				КонецЕсли;
			Иначе
				УровеньИерархииДляЗаписи = ТекущийУровеньИерархии + 1;
			КонецЕсли;
			НаборЗаписей.Отбор.УровеньИерархии.Установить(УровеньИерархииДляЗаписи);
			НаборЗаписей.Отбор.Периодичность.Установить(Движение.Периодичность);
			
			ВсеПериодыСоответствие = Новый Соответствие(ВсеПериодыСоответствиеИсточник);
			
			Для Каждого ЗначениеСоответствия Из ВсеПериодыСоответствие Цикл
				
				НЗ_НС = НаборЗаписей.Добавить();
				НЗ_НС.ПериодПлана = ЗначениеСоответствия.Ключ;
				
				ЗаполнитьЗаписьРегистра(НЗ_НС, Движение, Истина, ЗначениеСоответствия.Значение,
					 ПериодичностьРодителя,
					 ДатаИзменения);
				
			КонецЦикла;
			
			Если НаборЗаписей.Количество() > 0 
				И ЗаписиСОтменойСогласования.НайтиПоЗначению(НаборЗаписей[0].ИдентификаторСтроки) <> Неопределено Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменитьСогласованиеВверх", Истина);
			КонецЕсли;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ УдалитьСтрокиБезРодителей() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		РассчитатьПрогнозПланаВверх();
	КонецЕсли;
	
	ЗаписиСОтменойСогласования.Очистить();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаписьРегистра(НЗ_НС, Движение, ЗаполнитьВсюСтроку = Ложь,
	 ПериодПланаКолонкиСтрока, ПериодичностьРодителя,
	 ДатаИзменения)
	
	ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма()) + ПериодПланаКолонкиСтрока;
	СуммаЗначение = КонвертироватьЗначениеПоказателя(Движение[ИмяКолонкиСумма], ВидПоказателяСумма(), Истина);
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		НЗ_НС.СуммаПрогноз = СуммаЗначение;
	Иначе
		НЗ_НС.Сумма = СуммаЗначение;
	КонецЕсли;
	
	ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество()) + ПериодПланаКолонкиСтрока;
	КоличествоЗначение = КонвертироватьЗначениеПоказателя(Движение[ИмяКолонкиКоличество],
		 ВидПоказателяКоличество(),
		 Истина);
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		НЗ_НС.КоличествоПрогноз = КоличествоЗначение;
	Иначе
		НЗ_НС.Количество = КоличествоЗначение;
	КонецЕсли;
	
	ИсключаемыеСвойстваПоказатели = "ПериодПлана,Сумма,Количество,СуммаПрогноз,КоличествоПрогноз";
	
	Если ЗаполнитьВсюСтроку Тогда
		ЗаполнитьЗначенияСвойств(НЗ_НС, Движение, , ИсключаемыеСвойстваПоказатели);
	Иначе
		НЗ_НС.ИдентификаторСтроки = Движение.ИдентификаторСтроки;
		НЗ_НС.ИдентификаторСтрокиРодителя = Движение.ИдентификаторСтрокиРодителя;
		НЗ_НС.Комментарий = Движение.Комментарий;
		НЗ_НС.Согласовано = Движение.Согласовано;
	КонецЕсли;
	
	НЗ_НС.ДатаИзменения = ДатаИзменения;
	НЗ_НС.АвторИзменения = Пользователи.ТекущийПользователь();
	
	// В режиме планирования Менеджер при нажатии кнопки Применить по сути перезаписывает записи, на уровень выше (от своего руководителя),
	// однако Периодичность используется его родителя, а не родителя подразделения выше. Из-за этого
	// Период плана родителя перезаписывается на некорректный.
	Если НЕ (АРМВРежимеПланирования(РежимАРМ) И РаботаетМенеджер()) Тогда
		НЗ_НС.ПериодПланаРодителя = ДатаНачалаПодчиненногоПериода(
										ПериодичностьРодителя,
										НЗ_НС.ПериодПлана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьСтрокиБезРодителей()
	
	УдаленоЗаписей = 1;
	
	Пока УдаленоЗаписей > 0 Цикл
	
		Запрос = Новый Запрос;
		Если КоличествоУровнейСхемы() = 1 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
			|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
			|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
			|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО) КАК ИдентификаторСтрокиРодителя
			|ИЗ
			|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж1
			|		ПО CRM_ПланПродаж.ИдентификаторСтрокиРодителя = CRM_ПланПродаж1.ИдентификаторСтроки
			|			И CRM_ПланПродаж.ПланПродаж = CRM_ПланПродаж1.ПланПродаж
			|ГДЕ
			|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
			|	И CRM_ПланПродаж.ПланПродаж = &ПланПродаж
			|	И CRM_ПланПродаж.ИдентификаторСтрокиРодителя <> """"
			|
			|СГРУППИРОВАТЬ ПО
			|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
			|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО),
			|	CRM_ПланПродаж.ПланПродаж,
			|	CRM_ПланПродаж.УровеньИерархии";
		Иначе
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
				|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
				|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
				|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО) КАК ИдентификаторСтрокиРодителя
				|ИЗ
				|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж1
				|		ПО CRM_ПланПродаж.ИдентификаторСтрокиРодителя = CRM_ПланПродаж1.ИдентификаторСтроки
				|			И CRM_ПланПродаж.ПланПродаж = CRM_ПланПродаж1.ПланПродаж
				|ГДЕ
				|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
				|	И CRM_ПланПродаж.ПланПродаж = &ПланПродаж
				|	И CRM_ПланПродаж.УровеньИерархии > 1
				|
				|СГРУППИРОВАТЬ ПО
				|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
				|	ЕСТЬNULL(CRM_ПланПродаж1.ИдентификаторСтроки, НЕОПРЕДЕЛЕНО),
				|	CRM_ПланПродаж.ПланПродаж,
				|	CRM_ПланПродаж.УровеньИерархии";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
		
		РезультатЗапроса = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.CRM_ПланПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланПродаж.Установить(ВыборкаДетальныеЗаписи.ПланПродаж);
			НаборЗаписей.Отбор.АналитикаУчетаПланаПродаж.Установить(ВыборкаДетальныеЗаписи.АналитикаУчетаПланаПродаж);
			НаборЗаписей.Отбор.УровеньИерархии.Установить(ВыборкаДетальныеЗаписи.УровеньИерархии);
							
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		УдаленоЗаписей = ВыборкаДетальныеЗаписи.Количество();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаЗаписейПланаПродаж(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.АРМВрежимеПрогнозирования Тогда
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПоляФакт = ",
			|	СУММА(ЕСТЬNULL(CRM_ПродажиОбороты.КоличествоОборот, 0)) КАК КоличествоФакт,
			|	СУММА(ВЫБОР
			|		КОГДА ТаблицаПлан.ВариантФакта = 0
			|		ТОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0)
			|		КОГДА ТаблицаПлан.ВариантФакта = 1
			|		ТОГДА ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|		КОГДА ТаблицаПлан.ВариантФакта = 2
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0) < ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|			ТОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0)
			|			ИНАЧЕ ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|			КОНЕЦ
			|	КОНЕЦ) КАК СуммаФакт";

			СоединениеФакт = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.CRM_Продажи.Обороты(&Параметр_НачалоПериодаСверху, &Параметр_ОкончаниеПериодаСверху, Период, &ПодразделениеНеЗадано ИЛИ Подразделение В ИЕРАРХИИ(&Подразделение)) КАК CRM_ПродажиОбороты
			|		ПО (ТаблицаПлан.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|				ИЛИ ТаблицаПлан.Подразделение = CRM_ПродажиОбороты.Подразделение
			|				ИЛИ ТаблицаПлан.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель
			|				ИЛИ ТаблицаПлан.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель.Родитель
			|				ИЛИ ТаблицаПлан.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель.Родитель.Родитель)
			|			И (CRM_ПродажиОбороты.Партнер = ТаблицаПлан.Партнер
			|				ИЛИ ТаблицаПлан.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
			|			И (CRM_ПродажиОбороты.Номенклатура = ТаблицаПлан.Номенклатура
			|				ИЛИ ТаблицаПлан.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
			
			НомАналитики = 1;
			Для Каждого ДопАналитика Из ДополнительныеАналитики Цикл
				СоединениеФакт = СоединениеФакт + "
				|			И CRM_ПродажиОбороты." + ДопАналитика.ПутьКРеквизиту + " = ТаблицаПлан.Аналитика" + Строка(НомАналитики);
				НомАналитики = НомАналитики + 1;
			КонецЦикла;
			
			СоединениеФакт = СоединениеФакт + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.CRM_РасчетыСПокупателями.Обороты(&Параметр_НачалоПериодаСверху, &Параметр_ОкончаниеПериодаСверху, Период) КАК CRM_Расчеты
			|		ПО ТаблицаПлан.ВариантФакта > 0
			|			И CRM_Расчеты.Контрагент = ТаблицаПлан.Партнер";
		Иначе
			ПоляФакт = ",
			|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.КоличествоОборот, 0)) КАК КоличествоФакт,
			|	СУММА(ВЫБОР
			|		КОГДА ТаблицаПлан.ВариантФакта = 0
			|		ТОГДА ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручкиОборот, 0)
			|		КОГДА ТаблицаПлан.ВариантФакта = 1
			|		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгРасход, 0) + ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаПриход, 0)
			|		КОГДА ТаблицаПлан.ВариантФакта = 2
			|		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгРасход, 0)
			|	КОНЕЦ) КАК СуммаФакт";

			СоединениеФакт = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&Параметр_НачалоПериодаСверху, &Параметр_ОкончаниеПериодаСверху, Период, &ПодразделениеНеЗадано ИЛИ Подразделение В ИЕРАРХИИ(&Подразделение)) КАК ВыручкаИСебестоимостьПродаж
			|		ПО (ТаблицаПлан.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|				ИЛИ ТаблицаПлан.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение
			|				ИЛИ ТаблицаПлан.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель
			|				ИЛИ ТаблицаПлан.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель.Родитель
			|				ИЛИ ТаблицаПлан.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель.Родитель.Родитель)
			|			И (ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПлан.Партнер
			|				ИЛИ ТаблицаПлан.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
			|			И (ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура = ТаблицаПлан.Номенклатура
			|				ИЛИ ТаблицаПлан.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
			
			НомАналитики = 1;
			Для Каждого ДопАналитика Из ДополнительныеАналитики Цикл
				СоединениеФакт = СоединениеФакт + "
				|			И CRM_ПродажиОбороты." + ДопАналитика.ПутьКРеквизиту + " = ТаблицаПлан.Аналитика" + Строка(НомАналитики);
				НомАналитики = НомАналитики + 1;
			КонецЦикла;
			
			СоединениеФакт = СоединениеФакт + "
			|			И (ВыручкаИСебестоимостьПродаж.Склад = ТаблицаПлан.Склад
			|				ИЛИ ТаблицаПлан.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Обороты(&Параметр_НачалоПериодаСверху, &Параметр_ОкончаниеПериодаСверху, Период,
			|			ДатаВозникновения >= &Параметр_НачалоПериодаСверху И ДатаВозникновения <= &Параметр_ОкончаниеПериодаСверху) КАК РасчетыСКлиентамиПоСрокам
			|		ПО ТаблицаПлан.ВариантФакта > 0
			|			И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПлан.Партнер";
		КонецЕсли;
		
	Иначе
		ПоляФакт = "";
		СоединениеФакт = "";
	КонецЕсли;
	
	Если ДанныеЗаполнения.ЗаписиСверху Тогда
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
		// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность КАК Периодичность,
		|	СУММА(CRM_ПланПродаж.Количество) КАК Количество,
		|	СУММА(CRM_ПланПродаж.Сумма) КАК Сумма,
		|	СУММА(CRM_ПланПродаж.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	СУММА(CRM_ПланПродаж.СуммаПрогноз) КАК СуммаПрогноз,
		|	СУММА(CRM_ПланПродаж.СуммаПрогноз - CRM_ПланПродаж.Сумма) КАК СуммаОтклонение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение КАК Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер КАК Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер КАК Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура КАК Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1 КАК Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2 КАК Аналитика2,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3 КАК Аналитика3,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад КАК Склад,
		|	CRM_ПланПродаж.Комментарий КАК Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения КАК ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения КАК АвторИзменения,
		|	МАКСИМУМ(CRM_ПланПродаж.ИдентификаторСтроки) КАК ИдентификаторСтроки,
		|	МАКСИМУМ(CRM_ПланПродаж.ИдентификаторСтрокиРодителя) КАК ИдентификаторСтрокиРодителя,
		|	МИНИМУМ(CRM_ПланПродаж.Согласовано) КАК Согласовано,
		|	МИНИМУМ(ЕСТЬNULL(ПланСледующегоУровня.Количество, 0)) КАК КоличествоПодчиненные,
		|	МИНИМУМ(ЕСТЬNULL(ПланСледующегоУровня.Сумма, 0)) КАК СуммаПодчиненные,
		|	МИНИМУМ(ЕСТЬNULL(ПланСледующегоУровня.КоличествоПрогноз, 0)) КАК КоличествоПрогнозПодчиненные,
		|	МИНИМУМ(ЕСТЬNULL(ПланСледующегоУровня.СуммаПрогноз, 0)) КАК СуммаПрогнозПодчиненные,
		|	МИНИМУМ(ЕСТЬNULL(ПланСледующегоУровня.СуммаПрогноз, 0) - ЕСТЬNULL(ПланСледующегоУровня.Сумма, 0)) КАК СуммаОтклонениеПодчиненные,
		|	МИНИМУМ(ПланСледующегоУровня.Согласовано) КАК СогласованоПодчиненные,
		|   МАКСИМУМ(ВЫБОР
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке)
		|    	ТОГДА 0
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоОплате)
		|    	ТОГДА 1
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.Меньшее)
		|    	ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ВариантФакта
		|ПОМЕСТИТЬ ТаблицаПлан
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(CRM_ПланПродажПодчиненный.Согласовано) КАК Согласовано,
		|			СУММА(CRM_ПланПродажПодчиненный.Количество) КАК Количество,
		|			СУММА(CRM_ПланПродажПодчиненный.Сумма) КАК Сумма,
		|			СУММА(CRM_ПланПродажПодчиненный.КоличествоПрогноз) КАК КоличествоПрогноз,
		|			СУММА(CRM_ПланПродажПодчиненный.СуммаПрогноз) КАК СуммаПрогноз,
		|			CRM_ПланПродажПодчиненный.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя
		|		ИЗ
		|			РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродажПодчиненный
		|		ГДЕ
		|			CRM_ПланПродажПодчиненный.ПланПродаж = &ПланПродаж
		|			И (CRM_ПланПродажПодчиненный.Сумма <> 0
		|					ИЛИ CRM_ПланПродажПодчиненный.Количество <> 0)
		|			И CRM_ПланПродажПодчиненный.УровеньИерархии = &УровеньИерархииПодчиненный
		|			И CRM_ПланПродажПодчиненный.ПериодПлана МЕЖДУ &Параметр_НачалоПериода И &Параметр_ОкончаниеПериода
		|		
		|		СГРУППИРОВАТЬ ПО
		|			CRM_ПланПродажПодчиненный.ИдентификаторСтрокиРодителя) КАК ПланСледующегоУровня
		|		ПО CRM_ПланПродаж.ИдентификаторСтроки = ПланСледующегоУровня.ИдентификаторСтрокиРодителя
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение В(&Подразделение)
		|	И CRM_ПланПродаж.ПериодПлана МЕЖДУ &Параметр_НачалоПериода И &Параметр_ОкончаниеПериода
		|	// Исключаются записи, добавленные в режим Прогнозирования:
		|	И (CRM_ПланПродаж.Сумма <> 0
		|			ИЛИ CRM_ПланПродаж.Количество <> 0)
		|	И &ПрочиеУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.Комментарий,
		|	CRM_ПланПродаж.АвторИзменения,
		|	CRM_ПланПродаж.ДатаИзменения,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.ПланПродаж,
		|	CRM_ПланПродаж.УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПлан.ПланПродаж КАК ПланПродаж,
		|	ТаблицаПлан.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	ТаблицаПлан.УровеньИерархии КАК УровеньИерархии,
		|	ТаблицаПлан.Периодичность КАК Периодичность,
		|	МИНИМУМ(ТаблицаПлан.Количество) КАК Количество,
		|	МИНИМУМ(ТаблицаПлан.Сумма) КАК Сумма,
		|	МИНИМУМ(ТаблицаПлан.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	МИНИМУМ(ТаблицаПлан.СуммаПрогноз) КАК СуммаПрогноз,
		|	МИНИМУМ(ТаблицаПлан.СуммаОтклонение) КАК СуммаОтклонение,
		|	ТаблицаПлан.Подразделение КАК Подразделение,
		|	ТаблицаПлан.Менеджер КАК Менеджер,
		|	ТаблицаПлан.Партнер КАК Партнер,
		|	ТаблицаПлан.Номенклатура КАК Номенклатура,
		|	ТаблицаПлан.Аналитика1 КАК Аналитика1,
		|	ТаблицаПлан.Аналитика2 КАК Аналитика2,
		|	ТаблицаПлан.Аналитика3 КАК Аналитика3,
		|	ТаблицаПлан.Склад КАК Склад,
		|	ТаблицаПлан.Комментарий КАК Комментарий,
		|	ТаблицаПлан.ДатаИзменения КАК ДатаИзменения,
		|	ТаблицаПлан.АвторИзменения КАК АвторИзменения,
		|	ТаблицаПлан.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаПлан.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	ТаблицаПлан.Согласовано КАК Согласовано,
		|	МИНИМУМ(ТаблицаПлан.КоличествоПодчиненные) КАК КоличествоПодчиненные,
		|	МИНИМУМ(ТаблицаПлан.СуммаПодчиненные) КАК СуммаПодчиненные,
		|	МИНИМУМ(ТаблицаПлан.КоличествоПрогнозПодчиненные) КАК КоличествоПрогнозПодчиненные,
		|	МИНИМУМ(ТаблицаПлан.СуммаПрогнозПодчиненные) КАК СуммаПрогнозПодчиненные,
		|	МИНИМУМ(ТаблицаПлан.СуммаОтклонениеПодчиненные) КАК СуммаОтклонениеПодчиненные,
		|	ТаблицаПлан.СогласованоПодчиненные КАК СогласованоПодчиненные" + ПоляФакт + "
		|ИЗ
		|	ТаблицаПлан КАК ТаблицаПлан" + СоединениеФакт + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПлан.СогласованоПодчиненные,
		|	ТаблицаПлан.Комментарий,
		|	ТаблицаПлан.Номенклатура,
		|	ТаблицаПлан.Подразделение,
		|	ТаблицаПлан.Периодичность,
		|	ТаблицаПлан.АналитикаУчетаПланаПродаж,
		|	ТаблицаПлан.ПланПродаж,
		|	ТаблицаПлан.Партнер,
		|	ТаблицаПлан.Менеджер,
		|	ТаблицаПлан.ДатаИзменения,
		|	ТаблицаПлан.ИдентификаторСтрокиРодителя,
		|	ТаблицаПлан.Согласовано,
		|	ТаблицаПлан.ИдентификаторСтроки,
		|	ТаблицаПлан.АвторИзменения,
		|	ТаблицаПлан.УровеньИерархии,
		|	ТаблицаПлан.Склад,
		|	ТаблицаПлан.Аналитика1,
		|	ТаблицаПлан.Аналитика2,
		|	ТаблицаПлан.Аналитика3";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
		
		ПрочиеУсловия = "ИСТИНА";
		
		Если ДанныеЗаполнения.УсловиеПо = УсловиеПоМенеджеру() Тогда
			ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Менеджер";
		ИначеЕсли ДанныеЗаполнения.ВСхемеЕстьУровеньМенеджер Тогда
			ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.УровеньИерархии <= &КонечныйУровеньСхемы - 1"; // иначе сразу будут видны строки, введенные для Менеджеров
																												// и самими Менеджерами
																					// даже без флага ВключаяПодчиненные (т.к. Подразделения совпадают).
																					// Для схем, оканчивающихся Подразделением, это работать не будет
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, "&ПрочиеУсловия", ПрочиеУсловия);
		
	Иначе
		
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность КАК Периодичность,
		|	СУММА(CRM_ПланПродаж.Количество) КАК Количество,
		|	СУММА(CRM_ПланПродаж.Сумма) КАК Сумма,
		|	СУММА(CRM_ПланПродаж.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	СУММА(CRM_ПланПродаж.СуммаПрогноз) КАК СуммаПрогноз,
		|	СУММА(CRM_ПланПродаж.СуммаПрогноз - CRM_ПланПродаж.Сумма) КАК СуммаОтклонение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение КАК Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер КАК Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер КАК Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура КАК Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1 КАК Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2 КАК Аналитика2,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3 КАК Аналитика3,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад КАК Склад,
		|	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.Комментарий КАК Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения КАК ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения КАК АвторИзменения,
		|	CRM_ПланПродаж.Согласовано КАК Согласовано,
		|	CRM_ПланПродаж.ЭтоПрогноз КАК ЭтоПрогноз,
		|   МАКСИМУМ(ВЫБОР
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке)
		|    	ТОГДА 0
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоОплате)
		|    	ТОГДА 1
		|    	КОГДА CRM_ПланПродаж.ПланПродаж.ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.Меньшее)
		|    	ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ВариантФакта
		|ПОМЕСТИТЬ ТаблицаПлан
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И &ПрочиеУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.ПланПродаж,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.ДатаИзменения,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.ПериодПлана,
		|	CRM_ПланПродаж.ИдентификаторСтроки,
		|	CRM_ПланПродаж.АвторИзменения,
		|	CRM_ПланПродаж.Согласовано,
		|	CRM_ПланПродаж.Комментарий,
		|	CRM_ПланПродаж.УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность,
		|	CRM_ПланПродаж.ЭтоПрогноз,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПлан.ПланПродаж КАК ПланПродаж,
		|	ТаблицаПлан.ПериодПлана КАК ПериодПлана,
		|	ТаблицаПлан.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	ТаблицаПлан.УровеньИерархии КАК УровеньИерархии,
		|	ТаблицаПлан.Периодичность КАК Периодичность,
		|	МИНИМУМ(ТаблицаПлан.Количество) КАК Количество,
		|	МИНИМУМ(ТаблицаПлан.Сумма) КАК Сумма,
		|	МИНИМУМ(ТаблицаПлан.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	МИНИМУМ(ТаблицаПлан.СуммаПрогноз) КАК СуммаПрогноз,
		|	МИНИМУМ(ТаблицаПлан.СуммаОтклонение) КАК СуммаОтклонение,
		|	ТаблицаПлан.Подразделение КАК Подразделение,
		|	ТаблицаПлан.Менеджер КАК Менеджер,
		|	ТаблицаПлан.Партнер КАК Партнер,
		|	ТаблицаПлан.Номенклатура КАК Номенклатура,
		|	ТаблицаПлан.Аналитика1 КАК Аналитика1,
		|	ТаблицаПлан.Аналитика2 КАК Аналитика2,
		|	ТаблицаПлан.Аналитика3 КАК Аналитика3,
		|	ТаблицаПлан.Склад КАК Склад,
		|	ТаблицаПлан.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаПлан.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	ТаблицаПлан.Комментарий КАК Комментарий,
		|	ТаблицаПлан.ДатаИзменения КАК ДатаИзменения,
		|	ТаблицаПлан.АвторИзменения КАК АвторИзменения,
		|	ТаблицаПлан.Согласовано КАК Согласовано,
		|	ТаблицаПлан.ЭтоПрогноз КАК ЭтоПрогноз" + ПоляФакт + "
		|ИЗ
		|	ТаблицаПлан КАК ТаблицаПлан" + СоединениеФакт + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПлан.ИдентификаторСтрокиРодителя,
		|	ТаблицаПлан.ЭтоПрогноз,
		|	ТаблицаПлан.Менеджер,
		|	ТаблицаПлан.Подразделение,
		|	ТаблицаПлан.Периодичность,
		|	ТаблицаПлан.ПериодПлана,
		|	ТаблицаПлан.Номенклатура,
		|	ТаблицаПлан.Комментарий,
		|	ТаблицаПлан.ИдентификаторСтроки,
		|	ТаблицаПлан.АналитикаУчетаПланаПродаж,
		|	ТаблицаПлан.Партнер,
		|	ТаблицаПлан.ПланПродаж,
		|	ТаблицаПлан.ДатаИзменения,
		|	ТаблицаПлан.Согласовано,
		|	ТаблицаПлан.АвторИзменения,
		|	ТаблицаПлан.Склад,
		|	ТаблицаПлан.Аналитика1,
		|	ТаблицаПлан.Аналитика2,
		|	ТаблицаПлан.Аналитика3,
		|	ТаблицаПлан.УровеньИерархии
		|ИТОГИ ПО
		|	ИдентификаторСтроки";
		
		ПрочиеУсловия = "ИСТИНА";
		
		Если НЕ ДанныеЗаполнения.ЭтоАдминистраторПлана Тогда
			// Если это не Администратор плана, то должно также соблюдаться условие по Подразделению, иначе
			// руководители параллельных подразделений будут видеть все подчиненные уровни других подразделений
			Если ДанныеЗаполнения.ВключаяПодчиненные Тогда
				ПрочиеУсловия = ПрочиеУсловия 
					+ " И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение.Родитель В (&Подразделение)
					|	ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение.Родитель.Родитель В (&Подразделение)
					|	ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение В (&Подразделение))";
			Иначе
				ПрочиеУсловия = ПрочиеУсловия 
					+ " И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение.Родитель В (&Подразделение)
					|	ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение В (&Подразделение))"; // данное условие необходимо, для строк, где уже не меняется Подразделение
																										// таких, как ввод менеджеров или финальные строки плана, схема которого
																										// заканчивается Подразделением, а не Менеджером
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.УсловиеПо = УсловиеПоМенеджеру() Тогда
			ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Менеджер
				|	И CRM_ПланПродаж.Периодичность = &Периодичность";
			
			Если ДанныеЗаполнения.АРМВрежимеПрогнозирования И НЕ ДанныеЗаполнения.ЗаполнениеСтрокиДаннымиПрогнозирования Тогда
				ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.ЭтоПрогноз";
			ИначеЕсли НЕ ДанныеЗаполнения.АРМВрежимеПрогнозирования Тогда	
				ПрочиеУсловия = ПрочиеУсловия + " И Не CRM_ПланПродаж.ЭтоПрогноз";
			КонецЕсли;
			
		Иначе
			Если ДанныеЗаполнения.ВключаяПодчиненные Тогда
				ПрочиеУсловия = ПрочиеУсловия + " И (CRM_ПланПродаж.УровеньИерархии = &УровеньИерархии + 1
					|	ИЛИ CRM_ПланПродаж.УровеньИерархии = (&УровеньИерархии + 2))
					|	И CRM_ПланПродаж.Периодичность = &Периодичность";
			Иначе
				ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.УровеньИерархии = &УровеньИерархии + 1
				|	И CRM_ПланПродаж.Периодичность = &Периодичность";
			КонецЕсли;
			
			// Исключаются записи, добавленные в режим Прогнозирования:
			ПрочиеУсловия = ПрочиеУсловия + " И Не CRM_ПланПродаж.ЭтоПрогноз";
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.ИдентификаторСтроки <> Неопределено Тогда
			ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.ИдентификаторСтроки = &ИдентификаторСтроки";
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, "&ПрочиеУсловия", ПрочиеУсловия);
	
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция СтруктураПараметровТекстаЗапроса(УсловиеПо, ЗаполнениеСтрокиДаннымиПрогнозирования = Ложь)
	
	РезультатСтруктура = Новый Структура;
	
	РезультатСтруктура.Вставить("ЗаписиСверху", Ложь);
	РезультатСтруктура.Вставить("УсловиеПо", УсловиеПо);
	РезультатСтруктура.Вставить("ВключаяПодчиненные", ВключаяПодчиненные);
	РезультатСтруктура.Вставить("ЭтоАдминистраторПлана", Ложь);
	РезультатСтруктура.Вставить("ВСхемеЕстьУровеньМенеджер", ВСхемеЕстьУровеньМенеджер());
	РезультатСтруктура.Вставить("ТекущийИнтервалПериода", ТекущийИнтервалПериода);
	РезультатСтруктура.Вставить("ИдентификаторСтроки", Неопределено);
	РезультатСтруктура.Вставить("АРМВрежимеПрогнозирования", АРМВрежимеПрогнозирования(РежимАРМ));
	РезультатСтруктура.Вставить("ТекущийУровеньИерархии", ТекущийУровеньИерархии);
	РезультатСтруктура.Вставить("СхемаПланаПродаж", Объект.ПланПродаж.СхемаПланаПродаж);
	РезультатСтруктура.Вставить("ЗаполнениеСтрокиДаннымиПрогнозирования", ЗаполнениеСтрокиДаннымиПрогнозирования);
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УсловиеПоПодразделению()
	
	Возврат "УсловиеПоПодразделению";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УсловиеПоМенеджеру()
	
	Возврат "УсловиеПоМенеджеру";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УсловиеПоУровнюИерархии()
	
	Возврат "УсловиеПоУровнюИерархии";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицыЗаписейПланаПродаж(ВключаяПодчиненные)
	
	Отказ = Ложь;
	
	ДанныеСверху.Очистить();
	ЗаписиПланаПродаж.Очистить();
	
	РаботаНаМоемУровне = (Пользователи.АвторизованныйПользователь() = ТекущийПользователь)
						Или МойУровеньСлужебный;
	
	ЭтоАдминистраторПлана = ЭтоАдминистраторПлана(Объект.ПланПродаж, ТекущийПользователь)
		И Не ЭтоПереходНаУровеньПодразделения И Не ЭтоПереходНаУровеньМенеджера;
	
	РежимАРМ = ?(ПланСогласован(), 2, 1); // 1 - Планирование, 2 - Прогнозирование
	
	ЗаполнитьТаблицуЗаписейПланаПродажСверху(ЭтоАдминистраторПлана, Отказ);
	
	Если Отказ Или ТекущийУровеньИерархии = -1 Тогда
		СформироватьHTMLДанныеСверху();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоАдминистраторПлана Тогда
		
		Если АРМВРежимеПрогнозирования(РежимАРМ) И НЕ РаботаетРуководительПодразделения Тогда // Работает менеджер
			ПериодичностьУровняСхемы =
				Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
		Иначе
			// после чтения записей в процедуре выше ТекущийУровеньИерархии уже определен:
			ПериодичностьУровняСхемы = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
				 ТекущийУровеньИерархии);
		КонецЕсли;
		
		ТекущийИнтервалПериода = 1;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуЗаписейПланаПродаж(ЭтоАдминистраторПлана, ВключаяПодчиненные);
	
	НастроитьВидимостьКолонокРазрезов();
	
КонецПроцедуры

&НаСервере
Функция УровеньИерархииПоРегистру(Подразделение, Менеджер = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(CRM_ПланПродаж.УровеньИерархии),-1) КАК УровеньИерархии
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение = &Подразделение
		|	И &ПрочиеУсловия";
	
	Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("КонечныйУровеньСхемы", КоличествоУровнейСхемы());
	
	ПрочиеУсловия = "ИСТИНА";
		
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ПрочиеУсловия = ПрочиеУсловия 
			+ " И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Менеджер И НЕ CRM_ПланПродаж.ЭтоПрогноз";
	ИначеЕсли ВСхемеЕстьУровеньМенеджер() Тогда
		ПрочиеУсловия = ПрочиеУсловия + " И CRM_ПланПродаж.УровеньИерархии <= &КонечныйУровеньСхемы - 1"; // иначе сразу будут видны строки, введенные для Менеджеров
																										// и самими Менеджерами
																				// даже без флага ВключаяПодчиненные (т.к. Подразделения совпадают).
																				// Для схем, оканчивающихся Подразделением, это работать не будет
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПрочиеУсловия", ПрочиеУсловия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.УровеньИерархии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗаписейПланаПродажСверху(Знач ЭтоАдминистраторПлана, Отказ)
	
	ДанныеСверху.Очистить();
	
	// Чтение строк плана, "спущенных сверху".
	// На АдминистраторПлана это чтение не распространяется, т.к.:
	// а) его уровень уже задан;
	// б) он может находиться в любом подразделении, или оно может быть вообще не указано
	Если НЕ ЭтоАдминистраторПлана Тогда
		
		Отказ = Ложь;
			
		Если НЕ ЗначениеЗаполнено(ТекущееПодразделение.ТекущийРуководитель) Тогда
			ТекстСообщенияОбОшибке = СтрШаблон(НСтр("ru = 'У подразделения %1 не заполнен руководитель'"), ТекущееПодразделение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке, , , , Отказ);
		КонецЕсли;
		
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если НЕ ЗначениеЗаполнено(ТекущийПользователь.ФизическоеЛицо) Тогда
				ТекстСообщенияОбОшибке = СтрШаблон(НСтр("ru = 'У пользователя %1 не заполнено физическое лицо'"),
					 ТекущийПользователь);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке, , , , Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		РаботаетРуководительПодразделения = (ПодразделенияПользователя.Найти(ТекущееПодразделение) <> Неопределено
			 И НЕ ЭтоПереходНаУровеньМенеджера
					И Объект.ПланПродаж.СхемаПланаПродаж.ЭлементыСхемы.Найти(ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Подразделение, "Разрез") <> Неопределено);
		
		///
		ТекущийУровеньИерархии = УровеньИерархииПоРегистру(ТекущееПодразделение,
			 ?(РаботаетРуководительПодразделения, Неопределено,
			 ТекущийПользователь));
			
		Параметр_НачалоПериода = Объект.ПланПродаж.НачалоПериода;
		Параметр_ОкончаниеПериода = Объект.ПланПродаж.ОкончаниеПериода;
		ПропорциональныйДелитель = 1;
		Если ТекущийУровеньИерархии > 0 И ЗначениеЗаполнено(ТекущаяПериодичностьОкнаКолонок) Тогда
			
			ПериодичностьУровняСверху = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
				 ТекущийУровеньИерархии);
			Если РаботаетРуководительПодразделения Тогда
				ПериодичностьУровняПланирования = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
					 ТекущийУровеньИерархии 
					+ 1);
			Иначе
				ПериодичностьУровняПланирования = ПериодичностьУровняСверху;
			КонецЕсли;
			
			ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок,
				 Объект.ПланПродаж.НачалоПериода,
				 ТекущийИнтервалОкнаКолонок);
			
			Параметр_НачалоПериода = ДатыОкнаКолонок.ДатаНачала;
			Параметр_ОкончаниеПериода = ДатыОкнаКолонок.ДатаОкончания;
			// Периодичность окна колонок может быть детальнее Периодичности уровня сверху только, если
			// Периодичность уровня планирования детальнее Периодичности уровня сверху
			Если CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(ТекущаяПериодичностьОкнаКолонок,
				 ПериодичностьУровняСверху) Тогда
				Параметр_НачалоПериода = ДатаНачалаПодчиненногоПериода(ПериодичностьУровняСверху, ДатыОкнаКолонок.ДатаНачала);
				// Параметр_ОкончаниеПериода = Параметр_НачалоПериода; // т.к. период все равно больше периодичности окна колонок
				ПропорциональныйДелитель = МассивПериодов(ТекущаяПериодичностьОкнаКолонок, 
															Параметр_НачалоПериода,
															ДатаОкончанияПериода(ПериодичностьУровняСверху, Параметр_НачалоПериода)).Количество();
			КонецЕсли;
														
		КонецЕсли;
		///
		
		Если РаботаетРуководительПодразделения Тогда
			
			Запрос = Новый Запрос;
			
			ПараметрыТекстаЗапроса = СтруктураПараметровТекстаЗапроса(УсловиеПоПодразделению());
			ПараметрыТекстаЗапроса.ЗаписиСверху = Истина;
			
			Запрос.Текст = ТекстЗапросаЗаписейПланаПродаж(ПараметрыТекстаЗапроса);
			Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
            Если ТекущийПользователь = Пользователи.АвторизованныйПользователь() Тогда
				Запрос.УстановитьПараметр("Подразделение", ПодразделенияПользователя);
			Иначе
				Запрос.УстановитьПараметр("Подразделение", ТекущееПодразделение);
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодразделениеНеЗадано", Не ЗначениеЗаполнено(Запрос.Параметры.Подразделение));
			Запрос.УстановитьПараметр("КонечныйУровеньСхемы", КоличествоУровнейСхемы());
			Запрос.УстановитьПараметр("УровеньИерархииПодчиненный", ТекущийУровеньИерархии + 1);
			Запрос.УстановитьПараметр("Параметр_НачалоПериода", Параметр_НачалоПериода);
			Запрос.УстановитьПараметр("Параметр_ОкончаниеПериода", Параметр_ОкончаниеПериода);
			Запрос.УстановитьПараметр("Параметр_НачалоПериодаСверху", НачалоПериодаСверху);
			Запрос.УстановитьПараметр("Параметр_ОкончаниеПериодаСверху", ОкончаниеПериодаСверху);
			РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
			
			// Если РезультатЗапросаТЗ.Количество() > 0 Тогда
			//	ТекущийУровеньИерархии = РезультатЗапросаТЗ[0].УровеньИерархии;
			//КонецЕсли;
			
			Для Каждого СтрТЗ Из РезультатЗапросаТЗ Цикл
				
				НС = ДанныеСверху.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрТЗ);
				НС.СуммаЦель = КонвертироватьЗначениеПоказателя(СтрТЗ.Сумма / ПропорциональныйДелитель, ВидПоказателяСумма());
				НС.КоличествоЦель = КонвертироватьЗначениеПоказателя(СтрТЗ.Количество / ПропорциональныйДелитель,
					 ВидПоказателяКоличество());
				НС.СуммаПлан = КонвертироватьЗначениеПоказателя(СтрТЗ.СуммаПодчиненные / ПропорциональныйДелитель,
					 ВидПоказателяСумма());
				НС.КоличествоПлан = КонвертироватьЗначениеПоказателя(СтрТЗ.КоличествоПодчиненные / ПропорциональныйДелитель,
					 ВидПоказателяКоличество());
				Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
					НС.СуммаФакт = КонвертироватьЗначениеПоказателя(СтрТЗ.СуммаФакт, ВидПоказателяСумма());
					НС.КоличествоФакт = КонвертироватьЗначениеПоказателя(СтрТЗ.КоличествоФакт, ВидПоказателяКоличество());
				КонецЕсли;
				// Значения прогноза заполняются в ОбновитьТаблицуЗаписейПланаПродажСверху, т.к. параметры Параметр_НачалоПериода
					// и Параметр_ОкончаниеПериода
				// устанавливаются в соответствии с периодичностью на уровень вышего текущей,
					// и если они не равны - это приведет к получению некорректных данных.
				
			КонецЦикла;
				
		Иначе // работает менеджер
		
			Запрос = Новый Запрос;
			
			ПараметрыТекстаЗапроса = СтруктураПараметровТекстаЗапроса(УсловиеПоМенеджеру());
			ПараметрыТекстаЗапроса.ЗаписиСверху = Истина;
			
			Запрос.Текст = ТекстЗапросаЗаписейПланаПродаж(ПараметрыТекстаЗапроса);
			Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
			Запрос.УстановитьПараметр("Подразделение", ТекущееПодразделение);
			Запрос.УстановитьПараметр("ПодразделениеНеЗадано", Не ЗначениеЗаполнено(ТекущееПодразделение));
			Запрос.УстановитьПараметр("КонечныйУровеньСхемы", КоличествоУровнейСхемы());
			Запрос.УстановитьПараметр("УровеньИерархииПодчиненный", ТекущийУровеньИерархии + 1);
			Запрос.УстановитьПараметр("Менеджер", ТекущийПользователь);
			Запрос.УстановитьПараметр("Параметр_НачалоПериода", Параметр_НачалоПериода);
			Запрос.УстановитьПараметр("Параметр_ОкончаниеПериода", Параметр_ОкончаниеПериода);
			Запрос.УстановитьПараметр("Параметр_НачалоПериодаСверху", НачалоПериодаСверху);
			Запрос.УстановитьПараметр("Параметр_ОкончаниеПериодаСверху", ОкончаниеПериодаСверху);
			РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрТЗ Из РезультатЗапросаТЗ Цикл
				
				Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда
					
					НС = ДанныеСверху.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрТЗ);
					НС.СуммаЦель = КонвертироватьЗначениеПоказателя(СтрТЗ.Сумма / ПропорциональныйДелитель, ВидПоказателяСумма());
					НС.КоличествоЦель = КонвертироватьЗначениеПоказателя(СтрТЗ.Количество / ПропорциональныйДелитель,
						 ВидПоказателяКоличество());
					НС.СуммаПлан = КонвертироватьЗначениеПоказателя(СтрТЗ.СуммаПодчиненные / ПропорциональныйДелитель,
						 ВидПоказателяСумма());
					НС.КоличествоПлан = КонвертироватьЗначениеПоказателя(СтрТЗ.КоличествоПодчиненные / ПропорциональныйДелитель,
						 ВидПоказателяКоличество());
					НС.СуммаФакт = КонвертироватьЗначениеПоказателя(СтрТЗ.СуммаФакт, ВидПоказателяСумма());
					НС.КоличествоФакт = КонвертироватьЗначениеПоказателя(СтрТЗ.КоличествоФакт, ВидПоказателяКоличество());
					
				Иначе
					// В режим Планирования "Данные сверху" для Менеджера не заполняются,
					// однако в любом случае в данном цикле определился ТекущийУровеньИерархии
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаписейПланаПродажСверху()
	
	// Дозаполнение таблицы данными из основной Таблицы записей.
	РаботаетНеМенеджерРежимеПрогнозирования = (АРМВРежимеПрогнозирования(РежимАРМ) И НЕ РаботаетМенеджер());
	РаботаетМенеджерВРежимеПланирования = (АРМВРежимеПланирования(РежимАРМ) И НЕ РаботаетРуководительПодразделения);
	
	Если ЭтоАдминистраторПлана ИЛИ РаботаетНеМенеджерРежимеПрогнозирования ИЛИ РаботаетМенеджерВРежимеПланирования Тогда
		
		КолонкиЗначенийПлана =
			"ИтогоЗаПериодыСумма,  ИтогоЗаПериодыКоличество, ИтогоЗаПериодыОкнаСумма, ИтогоЗаПериодыОкнаКоличество";
		КолонкиЗначенийПрогноза = "ИтогоЗаПериодыОкнаСуммаПрогноз, ИтогоЗаПериодыОкнаКоличествоПрогноз";
		КолонкиЗначенийФакта = "ИтогоЗаПериодыОкнаСуммаФакт, ИтогоЗаПериодыОкнаКоличествоФакт";
		
		Если ЭтоАдминистраторПлана ИЛИ РаботаетМенеджерВРежимеПланирования Тогда
			
			ТЗ = ЗаписиПланаПродаж.Выгрузить(, "ПланПродаж, " + КолонкиЗначенийПлана + ", " + КолонкиЗначенийПрогноза + ", " 
				+ КолонкиЗначенийФакта);
			ТЗ.Свернуть("ПланПродаж", КолонкиЗначенийПлана + ", " + КолонкиЗначенийПрогноза + ", " + КолонкиЗначенийФакта);
			
			// отображение не всего периода плана, а только выбранного в таблице справа "окна" периодов
			//ТЗ.Колонки.ИтогоЗаПериодыСумма.Имя = "Сумма";
			//ТЗ.Колонки.ИтогоЗаПериодыКоличество.Имя = "Количество";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаСумма.Имя = "СуммаЦель";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаКоличество.Имя = "КоличествоЦель";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаСуммаПрогноз.Имя = "СуммаПрогноз";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаКоличествоПрогноз.Имя = "КоличествоПрогноз";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаСуммаФакт.Имя = "СуммаФакт";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаКоличествоФакт.Имя = "КоличествоФакт";
			
			ДанныеСверху.Загрузить(ТЗ);
			
		ИначеЕсли РаботаетНеМенеджерРежимеПрогнозирования Тогда
			// Расчет прогнозирования для менеджера не производится в таблице слева, т.к.
			// 1. При совпадении периодичностей прогнозирования
				// и последнего уровня планирования строки прогнозирования привязаны к строкам предпоследнего уровня планирования;
			// 2. Итоговые данные выводятся в подвале таблицы справа.
			
			// В режиме Прогнозирования для Менеджера и Руководителя подразделения данные Плана таблицы Данные Сверху
			// заполняется в процедуре ЗаполнитьТаблицуЗаписейПланаПродажСверху
			
			ТЗ = ЗаписиПланаПродаж.Выгрузить(, "ИдентификаторСтрокиРодителя, " + КолонкиЗначенийПрогноза + ", " 
				+ КолонкиЗначенийФакта);
			ТЗ.Свернуть("ИдентификаторСтрокиРодителя", КолонкиЗначенийПрогноза + ", " + КолонкиЗначенийФакта);
			
			ТЗ.Колонки.ИтогоЗаПериодыОкнаСуммаПрогноз.Имя = "СуммаПрогноз";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаКоличествоПрогноз.Имя = "КоличествоПрогноз";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаСуммаФакт.Имя = "СуммаФакт";
			ТЗ.Колонки.ИтогоЗаПериодыОкнаКоличествоФакт.Имя = "КоличествоФакт";
			
			// Очищение значений показателей
			Для Каждого СтрДанныеСверху Из ДанныеСверху Цикл
				СтрДанныеСверху.СуммаПрогноз = 0;
				СтрДанныеСверху.КоличествоПрогноз = 0;
			КонецЦикла;
			
			Для Каждого СтрТЗ Из ТЗ Цикл
				НайденныеСтроки = ДанныеСверху.НайтиСтроки(Новый Структура("ИдентификаторСтроки",
					 СтрТЗ.ИдентификаторСтрокиРодителя));
				Если НайденныеСтроки.Количество() <> 1 Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось найти строку-родителя для строки '") 
						+ СтрТЗ.ИдентификаторСтрокиРодителя);
					Продолжить;
				КонецЕсли;
				НайденныеСтроки[0].СуммаПрогноз = НайденныеСтроки[0].СуммаПрогноз + СтрТЗ.СуммаПрогноз;
				НайденныеСтроки[0].КоличествоПрогноз = НайденныеСтроки[0].КоличествоПрогноз + СтрТЗ.КоличествоПрогноз;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьHTMLДанныеСверху()
	
	РаботаетМенеджер = РаботаетМенеджер();
	АРМВРежимеПланирования = АРМВРежимеПланирования(РежимАРМ);
	АРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);

	ДанныеПланированияHTML_Шаблон = Обработки.CRM_ПланированиеПродаж.ПолучитьМакет(?(РежимАРМ = 1,
		 "ДанныеСверхуHTMLПлан",
		 "ДанныеСверхуHTMLФакт")).ПолучитьТекст();
	
	Колонки  = Новый СписокЗначений;
	Колонки.Добавить("Склад", НСтр("ru = 'Склад'"));
	Колонки.Добавить("Партнер", НСтр("ru = 'Партнер'"));
	Колонки.Добавить("Номенклатура", НСтр("ru = 'Номенклатура'"));
	Для Каждого Элемент Из ДополнительныеАналитики Цикл
		Колонки.Добавить(Элемент.Имя, Элемент.Заголовок);
	КонецЦикла;
	
	Если Не РаботаетМенеджер И ПодразделенияПользователя.Количество() > 1 Тогда
		Колонки.Добавить("Подразделение", НСтр("ru = 'Подразделение'"));
	КонецЕсли;
	
	ШаблонЭлементы = "
					|		<div class=""plan_item"">
					|			<div class=""plan_item-title"">Заголовок:</div>
					|			<div class=""plan_item-text"">Значение</div>
					|		</div>";

	ШаблонСуммаЗаголовок = "
					|	<div class=""plan_summ"">
					|		<div class=""plan_summ-title"">Заголовок:</div>";

	ШаблонСумма = "
					|		<div class=""plan_summ-text""><span id=""value_Id"">Значение</span><span id=""percent_Id"" class=""percent Класс_цвет"">Процент</span></div>";

	ТекстHTMLШапка = "";
	
	Если ДанныеСверху.Количество() > 0 Тогда
		ТекстHTMLШапка = "
					|	<div class=""plan_top"";
					|		<div class=""plan_items_top"">";
		ЭлементТекстHTML = СтрЗаменить(ШаблонСуммаЗаголовок, "Заголовок:", НСтр("ru = 'За '") + ПредставлениеПериода);
		ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "<div class=""plan_summ"">", "<div class=""plan_summ_top"">");
		ТекстHTMLШапка = ТекстHTMLШапка + ЭлементТекстHTML;
		Если ИспользоватьСумму Или ИспользоватьКоличество Тогда
			ДопДанные = "";
			ДетализацияИмениПоказателя(ДопДанные, ВидПоказателяСумма());
			ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", НСтр("ru = 'Цель'"));
	        ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
			ТекстHTMLШапка = ТекстHTMLШапка + ЭлементТекстHTML;
			
			Если (ИспользоватьСумму Или ИспользоватьКоличество) Тогда
				Если АРМВРежимеПрогнозирования Тогда
					ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", НСтр("ru = 'Прогноз'"));
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
					ТекстHTMLШапка = ТекстHTMLШапка + ЭлементТекстHTML;
					
					ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", НСтр("ru = 'Факт'"));
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
					ТекстHTMLШапка = ТекстHTMLШапка + ЭлементТекстHTML;
				ИначеЕсли Не РаботаетМенеджер Тогда
					ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", НСтр("ru = 'План'"));
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
					ТекстHTMLШапка = ТекстHTMLШапка + ЭлементТекстHTML;
				КонецЕсли;
			КонецЕсли;
			ТекстHTMLШапка = ТекстHTMLШапка + "
								|	</div>";
		КонецЕсли;
		ТекстHTMLШапка = ТекстHTMLШапка + "
								|	</div>";
	КонецЕсли;

	ТекстHTML = "";
	Для каждого Строка Из ДанныеСверху Цикл
		ТекстHTML = ТекстHTML + "
								|	<a href=""" + Строка.ИдентификаторСтроки + """>
								|	<div class=""plan"" id=""" + Строка.ИдентификаторСтроки + """>
								|	<div class=""plan_items"">";

		Для каждого Элемент Из Колонки Цикл
			Если ЗначениеЗаполнено(Строка[Элемент.Значение]) Тогда
				ЭлементТекстHTML = СтрЗаменить(ШаблонЭлементы, "Заголовок", Элемент.Представление);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Значение", Строка(Строка[Элемент.Значение]));
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			КонецЕсли;
		КонецЦикла;

		Если ИспользоватьСумму Тогда
			ДопДанныеСумма = "";
			ДетализацияИмениПоказателя(ДопДанныеСумма, ВидПоказателяСумма());
			ТекстHTML = ТекстHTML + СтрЗаменить(ШаблонСуммаЗаголовок, "Заголовок", НСтр("ru = 'Сумма'") + ", " + ДопДанныеСумма);
			ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.СуммаЦель);
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Значение", Строка.СуммаЦель);
            ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
            ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "summ_" + Строка.ИдентификаторСтроки);
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "");
			ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			
			Если АРМВРежимеПрогнозирования Тогда
				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.СуммаПрогноз);
				
				Процент = ?(Строка.СуммаЦель = 0, 0, Строка.СуммаПрогноз / Строка.СуммаЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "deviation_summ_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "deviation_summ_percent_" 
					+ Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;

				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.СуммаФакт);
				
				Процент = ?(Строка.СуммаЦель = 0, 0, Строка.СуммаФакт / Строка.СуммаЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "deviation_summ_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "deviation_summ_percent_" 
					+ Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			ИначеЕсли Не РаботаетМенеджер Тогда
				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.СуммаПлан);
				
				Процент = ?(Строка.СуммаЦель = 0, 0, Строка.СуммаПлан / Строка.СуммаЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "plan_summ_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "plan_summ_percent_" + Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			КонецЕсли;
			ТекстHTML = ТекстHTML + "
								|	</div>";
		КонецЕсли;
		Если ИспользоватьКоличество Тогда
			ДопДанныеКоличество = "";
			ДетализацияИмениПоказателя(ДопДанныеКоличество, ВидПоказателяКоличество());
			ТекстHTML = ТекстHTML + СтрЗаменить(ШаблонСуммаЗаголовок, "Заголовок", НСтр("ru = 'Объем'") + ",
				| " + ДопДанныеКоличество 
				+ ".");
			ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.КоличествоЦель);
            ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", "");
            ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", "");
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "quantity_" + Строка.ИдентификаторСтроки);
			ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "quantity_percent_" + Строка.ИдентификаторСтроки);
			ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			
			Если АРМВРежимеПрогнозирования Тогда
				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.КоличествоПрогноз);
				
				Процент = ?(Строка.КоличествоЦель = 0, 0, Строка.КоличествоПрогноз / Строка.КоличествоЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "deviation_quantity_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "deviation_quantity_percent_" 
					+ Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;

				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.КоличествоФакт);
				
				Процент = ?(Строка.КоличествоЦель = 0, 0, Строка.КоличествоФакт / Строка.КоличествоЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "deviation_quantity_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "deviation_quantity_percent_" 
					+ Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			ИначеЕсли Не РаботаетМенеджер Тогда
				ЭлементТекстHTML = СтрЗаменить(ШаблонСумма, "Значение", Строка.КоличествоПлан);
				
				Процент = ?(Строка.КоличествоЦель = 0, 0, Строка.КоличествоПлан / Строка.КоличествоЦель * 100);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "Процент", Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"));
				Если Процент >= 75 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_green");
				ИначеЕсли Процент >= 50 Тогда
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_yellow");
				Иначе
					ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, " Класс_цвет", " text_red");
				КонецЕсли;
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "value_Id", "plan_quantity_" + Строка.ИдентификаторСтроки);
				ЭлементТекстHTML = СтрЗаменить(ЭлементТекстHTML, "percent_Id", "plan_quantity_percent_" 
					+ Строка.ИдентификаторСтроки);
				ТекстHTML = ТекстHTML + ЭлементТекстHTML;
			КонецЕсли;
			ТекстHTML = ТекстHTML + "
								|		</div>";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "
								|	</div>";

		Если АРМВРежимеПланирования И Не РаботаетМенеджер И ТекущийУровеньИерархии <> 0 И РаботаНаМоемУровне Тогда
			ТекстHTML = ТекстHTML + "
									|	<div class=""check_div"">
									|		<input type=""checkbox"" class=""check_item"" id=""check_" + Строка.ИдентификаторСтроки 
										+ """ name=""check""" + ?(Строка.Согласовано, " checked", "") + ?(Не Строка.СогласованоПодчиненные,
										 " disabled", "") + ">
									|		<label for=""check_" + Строка.ИдентификаторСтроки + """></label>
									|	</div>";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "
								|	</div>
								|	</a>";
	КонецЦикла;

	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML_Шаблон, "ДанныеШапки", ТекстHTMLШапка);
	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ДанныеПлана", ТекстHTML);

	Если АРМВРежимеПланирования Тогда
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокИтого", НСтр("ru = 'Итого'"));
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокОтклонение", НСтр("ru = 'Отклонение'"));
	Иначе
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокПлан", НСтр("ru = 'Итого план'"));
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокПрогноз", НСтр("ru = 'Итого прогноз'"));
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокФакт", НСтр("ru = 'Итого факт'"));
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокОтклонениеПрогноз",
			 НСтр("ru = 'Отклонение прогноза'"));
		ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЗаголовокОтклонениеФакт",
			 НСтр("ru = 'Отклонение факта'"));
	КонецЕсли;

	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "/*Ширина_items*/",
		 ?(АРМВРежимеПланирования, "width: 90%;",
		 "width: 100%;"));
	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "/*Ширина_item-title*/",
		  ?(АРМВРежимеПланирования, "width: 40%;",
		 "width: 40%;"));

	ДетализацияИмениПоказателя(ЕдиницаСумма, ВидПоказателяСумма(), Истина);
	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЕдиницаСумма", ЕдиницаСумма);
	ДетализацияИмениПоказателя(ЕдиницаКоличество, ВидПоказателяКоличество(), Истина);
	ДанныеПланированияHTML = СтрЗаменить(ДанныеПланированияHTML, "ЕдиницаКоличество", ЕдиницаКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеЭлементаHTML(id, Значение)
	ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementById(id);
	Если ТекСтр <> Неопределено Тогда
		ТекСтр.innerHTML = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАтрибутЭлементаHTML(id, ИмяАтрибута, Значение)
	ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementById(id);
	Если ТекСтр <> Неопределено Тогда
		ТекСтр[ИмяАтрибута] = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКлассЭлементаHTML(id, Класс, Добавить = Ложь)
	ТекСтр = Элементы.ДанныеПланированияHTML.Документ.getElementById(id);
	Если ТекСтр <> Неопределено Тогда
		Если Не Добавить Тогда
			ТекКлассы = СтрРазделить(ТекСтр.classList.value, " ");
			Для каждого ТекКласс Из ТекКлассы Цикл
				ТекСтр.classList.remove(ТекКласс);
			КонецЦикла;
		КонецЕсли;
		ТекКлассы = СтрРазделить(Класс, " ");
		Для каждого ТекКласс Из ТекКлассы Цикл
			ТекСтр.classList.add(ТекКласс);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиПоСтроке()
	ТекСтр = Элементы.ЗаписиПланаПродаж.ТекущиеДанные;
	Если ТекСтр = Неопределено Или ТекущиеАналитики.Количество() = 0 Тогда
		УстановитьКлассЭлементаHTML("ByLine", "hidden");
		Возврат;
	КонецЕсли;
	
    СтрИтогHTML = "";
	Для Каждого Аналитика Из ТекущиеАналитики Цикл
		Если ЗначениеЗаполнено(ТекСтр[Аналитика.Значение]) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиРодителя, " + Аналитика.Значение,
				ТекСтр.ИдентификаторСтрокиРодителя, ТекСтр[Аналитика.Значение]);
			СтрокиСАналитикой = ЗаписиПланаПродаж.НайтиСтроки(СтруктураПоиска); 
			Если СтрокиСАналитикой.Количество() > 1 Тогда
				ИтогСумма = 0;
				ИтогКоличество = 0;
				Для Каждого Стр Из СтрокиСАналитикой Цикл
					ИтогСумма = ИтогСумма + Стр["ИтогоЗаПериодыОкнаСумма"];
					ИтогКоличество = ИтогКоличество + Стр["ИтогоЗаПериодыОкнаКоличество"];
				КонецЦикла;
				Если ИспользоватьСумму Тогда
					СтрИтогHTML = СтрИтогHTML + "<div>"
													+ "<span class = 'plan_item-title'>" + ТекСтр[Аналитика.Значение] + ": " + "</span>" 
													+ "<span class = ''>" + ИтогСумма + "</span>"
													+ "<span class = 'unit'>" + ЕдиницаСумма + "</span>"
													+ "</div>";
				КонецЕсли;
				Если ИспользоватьКоличество Тогда
					СтрИтогHTML = СтрИтогHTML + "<div>"
													+ "<span class = 'plan_item-title'>" + ТекСтр[Аналитика.Значение] + ": " + "</span>" 
													+ "<span class = ''>" + ИтогКоличество + "</span>"
													+ "<span class = 'unit'>" + ЕдиницаКоличество + "</span>"
													+ "</div>";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрИтогHTML <> "" Тогда
		УстановитьЗначениеЭлементаHTML("ItemsByLine", СтрИтогHTML);
		УстановитьКлассЭлементаHTML("ByLine", "item_amount");
	Иначе	
		УстановитьКлассЭлементаHTML("ByLine", "hidden");
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьИтоги()
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Если ДанныеСверху.Количество() = 0 Тогда
		
		ИтогоСумма = 0;
		ИтогоОтклонениеСумма = 0;
		ИтогоКоличество = 0;
		ИтогоОтклонениеКоличество = 0;

		// Прогноз
		ИтогоПрогнозСумма = 0;
		ИтогоПрогнозОтклонениеСумма = 0;
			
		ИтогоПрогнозКоличество = 0;
		ИтогоПрогнозОтклонениеКоличество = 0;

		// Факт
		ИтогоФактСумма = 0;
		ИтогоФактОтклонениеСумма = 0;
			
		ИтогоФактКоличество = 0;
		ИтогоФактОтклонениеКоличество = 0;

		ТекСтрИтогоСумма = 0;
		ТекСтрИтогоКоличество = 0;
		
	Иначе
		
		Если АРМВРежимеПланирования(РежимАРМ) Тогда
			ИтогоСумма = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяСумма());
			ИтогоОтклонениеСумма = ИтогоСумма - ИтогТаблицыДанныеСверху(ВидПоказателяСумма());
			
			ИтогоКоличество = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяКоличество());
			ИтогоОтклонениеКоличество = ИтогоКоличество - ИтогТаблицыДанныеСверху(ВидПоказателяКоличество());

			ТекСтрИтогоСумма = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяСумма(), Истина);
			ТекСтрИтогоКоличество = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяКоличество(), Истина);
		Иначе	
			
			// Прогноз
			ИтогоСумма = ИтогТаблицыДанныеСверху(ВидПоказателяСумма());
			ИтогоКоличество = ИтогТаблицыДанныеСверху(ВидПоказателяКоличество());

			// Прогноз
			ИтогоПрогнозСумма = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяСуммаПрогноз(Ложь));
			ИтогоПрогнозОтклонениеСумма = ИтогоПрогнозСумма - ИтогоСумма;
			
			ИтогоПрогнозКоличество = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяКоличествоПрогноз(Ложь));
			ИтогоПрогнозОтклонениеКоличество = ИтогоПрогнозКоличество - ИтогоКоличество;

			// Факт
			ИтогоФактСумма = ДанныеСверху.Итог("СуммаФакт");
			ИтогоФактОтклонениеСумма = ИтогоСумма - ИтогоФактСумма;
			
			ИтогоФактКоличество = ДанныеСверху.Итог("КоличествоФакт");
			ИтогоФактОтклонениеКоличество = ИтогоКоличество - ИтогоФактКоличество;
			
			ТекСтрИтогоСумма = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяСуммаПрогноз(НЕ (ЭтоАдминистраторПлана
				 ИЛИ РаботаетРуководительПодразделения)), Истина);
			ТекСтрИтогоКоличество = ИтогТаблицыЗаписиПланаПродаж(ВидПоказателяКоличествоПрогноз(НЕ (ЭтоАдминистраторПлана
				 ИЛИ РаботаетРуководительПодразделения)), Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если АРМВРежимеПланирования(РежимАРМ) Тогда
		УстановитьЗначениеЭлементаHTML("amount_summ", ?(ИспользоватьСумму, Формат(ИтогоСумма, "ЧН=0; ЧФ=Ч"), ""));
		УстановитьЗначениеЭлементаHTML("amount_quantity", ?(ИспользоватьКоличество,
			 Формат(ИтогоКоличество, "ЧН=0; ЧФ=Ч"),
			 ""));
		УстановитьЗначениеЭлементаHTML("deviation_summ", ?(ИспользоватьСумму, Формат(ИтогоОтклонениеСумма,
			 "ЧН=0; ЧФ=Ч"),
			 ""));
		УстановитьЗначениеЭлементаHTML("deviation_quantity", ?(ИспользоватьКоличество,
			 Формат(ИтогоОтклонениеКоличество, "ЧН=0; ЧФ=Ч"),
			 ""));

	    УстановитьКлассЭлементаHTML("deviation_summ", ?(ИтогоОтклонениеСумма < 0, "text_red", "text_green"));
	    УстановитьКлассЭлементаHTML("deviation_quantity", ?(ИтогоОтклонениеКоличество < 0, "text_red", "text_green"));
	Иначе
		УстановитьЗначениеЭлементаHTML("amount_summ", ?(ИспользоватьСумму, Формат(ИтогоСумма, "ЧН=0; ЧФ=Ч"), ""));
		УстановитьЗначениеЭлементаHTML("amount_quantity", ?(ИспользоватьКоличество,
			 Формат(ИтогоКоличество, "ЧН=0; ЧФ=Ч"),
			 ""));
		
		// Прогноз
		УстановитьЗначениеЭлементаHTML("amount_prognoz_summ", ?(ИспользоватьСумму,
			 Формат(ИтогоПрогнозСумма, "ЧН=0; ЧФ=Ч"),
			 ""));
		УстановитьЗначениеЭлементаHTML("amount_prognoz_quantity", ?(ИспользоватьКоличество,
			 Формат(ИтогоПрогнозКоличество, "ЧН=0; ЧФ=Ч"),
			 ""));
		УстановитьЗначениеЭлементаHTML("deviation_prognoz_summ", 
			?(ИспользоватьСумму, Формат(Макс(ИтогоПрогнозОтклонениеСумма, -ИтогоПрогнозОтклонениеСумма), "ЧН=0; ЧФ=Ч"), ""));
		УстановитьЗначениеЭлементаHTML("deviation_prognoz_quantity", 
			?(ИспользоватьКоличество, Формат(Макс(ИтогоПрогнозОтклонениеКоличество, -ИтогоПрогнозОтклонениеКоличество), "ЧН=0; ЧФ=Ч"), ""));

		УстановитьКлассЭлементаHTML("deviation_prognoz_summ", ?(ИтогоПрогнозОтклонениеСумма >= 0, "text_green", "text_red"));
	    УстановитьКлассЭлементаHTML("deviation_prognoz_quantity",
	    	 ?(ИтогоПрогнозОтклонениеКоличество >= 0, "text_green",
	    	 "text_red"));

		// Факт
		УстановитьЗначениеЭлементаHTML("amount_fakt_summ", ?(ИспользоватьСумму, Формат(ИтогоФактСумма, "ЧН=0; ЧФ=Ч"), ""));
		УстановитьЗначениеЭлементаHTML("amount_fakt_quantity", ?(ИспользоватьКоличество,
			 Формат(ИтогоФактКоличество, "ЧН=0; ЧФ=Ч"),
			 ""));

		УстановитьЗначениеЭлементаHTML("deviation_fakt_summ", 
			?(ИспользоватьСумму, Формат(Макс(ИтогоФактОтклонениеСумма, -ИтогоФактОтклонениеСумма), "ЧН=0; ЧФ=Ч"), ""));
		УстановитьЗначениеЭлементаHTML("deviation_fakt_quantity", 
			?(ИспользоватьКоличество, Формат(Макс(ИтогоФактОтклонениеКоличество, -ИтогоФактОтклонениеКоличество), "ЧН=0; ЧФ=Ч"), ""));

	    УстановитьКлассЭлементаHTML("deviation_fakt_summ", ?(ИтогоФактОтклонениеСумма <= 0, "text_green", "text_red"));
	    УстановитьКлассЭлементаHTML("deviation_fakt_quantity", ?(ИтогоФактОтклонениеКоличество <= 0,
	    	 "text_green",
	    	 "text_red"));
	КонецЕсли;

    Если ДанныеСверху.Количество() > 0 Тогда
		СтрокаДС = ДанныеСверху[ИндексТекДанныхСверху];
		ИдентификаторСтроки = СтрокаДС.ИдентификаторСтроки;
		Если АРМВРежимеПланирования(РежимАРМ) Тогда
			УстановитьЗначениеЭлементаHTML("summ_" + ИдентификаторСтроки, ?(ИспользоватьСумму,
				 Формат(СтрокаДС.СуммаЦель, "ЧН=0; ЧФ=Ч"), ""));
			УстановитьЗначениеЭлементаHTML("plan_summ_" + ИдентификаторСтроки, ?(ИспользоватьСумму,
				 Формат(ТекСтрИтогоСумма, "ЧН=0; ЧФ=Ч"), ""));
	        Процент = ?(СтрокаДС.СуммаЦель = 0, 0, ТекСтрИтогоСумма / СтрокаДС.СуммаЦель * 100);
			УстановитьЗначениеЭлементаHTML("plan_summ_percent_" + ИдентификаторСтроки, ?(ИспользоватьСумму,
				 Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"), ""));
			Если Процент >= 75 Тогда
			    УстановитьКлассЭлементаHTML("plan_summ_percent_" + ИдентификаторСтроки, "percent text_green");
			ИначеЕсли Процент >= 50 Тогда
			    УстановитьКлассЭлементаHTML("plan_summ_percent_" + ИдентификаторСтроки, "percent text_yellow");
			Иначе
			    УстановитьКлассЭлементаHTML("plan_summ_percent_" + ИдентификаторСтроки, "percent text_red");
			КонецЕсли;
			
			УстановитьЗначениеЭлементаHTML("quantity_" + ИдентификаторСтроки, ?(ИспользоватьКоличество,
				 Формат(СтрокаДС.КоличествоЦель, "ЧН=0; ЧФ=Ч"), ""));
			УстановитьЗначениеЭлементаHTML("plan_quantity_" + ИдентификаторСтроки, ?(ИспользоватьКоличество,
				 Формат(ТекСтрИтогоКоличество, "ЧН=0; ЧФ=Ч"), ""));
	        Процент = ?(СтрокаДС.КоличествоЦель = 0, 0, ТекСтрИтогоКоличество / СтрокаДС.КоличествоЦель * 100);
			УстановитьЗначениеЭлементаHTML("plan_quantity_percent_" + ИдентификаторСтроки,
				 ?(ИспользоватьСумму, Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"), ""));
			Если Процент >= 75 Тогда
			    УстановитьКлассЭлементаHTML("plan_quantity_percent_" + ИдентификаторСтроки, "percent text_green");
			ИначеЕсли Процент >= 50 Тогда
			    УстановитьКлассЭлементаHTML("plan_quantity_percent_" + ИдентификаторСтроки, "percent text_yellow");
			Иначе
			    УстановитьКлассЭлементаHTML("plan_quantity_percent_" + ИдентификаторСтроки, "percent text_red");
			КонецЕсли;
			
			УстановитьАтрибутЭлементаHTML("check_" + ИдентификаторСтроки, "checked", СтрокаДС.Согласовано);
			УстановитьАтрибутЭлементаHTML("check_" + ИдентификаторСтроки, "disabled", Не СтрокаДС.СогласованоПодчиненные);
		Иначе
			УстановитьЗначениеЭлементаHTML("deviation_summ_" + ИдентификаторСтроки, ?(ИспользоватьСумму,
				 Формат(ТекСтрИтогоСумма, "ЧН=0; ЧФ=Ч"), ""));
	        Процент = ?(СтрокаДС.СуммаЦель = 0, 0, ТекСтрИтогоСумма / СтрокаДС.СуммаЦель * 100);
			УстановитьЗначениеЭлементаHTML("deviation_summ_percent_" + ИдентификаторСтроки,
				 ?(ИспользоватьСумму, Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"), ""));
			Если Процент >= 75 Тогда
			    УстановитьКлассЭлементаHTML("deviation_summ_percent_" + ИдентификаторСтроки, "percent text_green");
			ИначеЕсли Процент >= 50 Тогда
			    УстановитьКлассЭлементаHTML("deviation_summ_percent_" + ИдентификаторСтроки, "percent text_yellow");
			Иначе
			    УстановитьКлассЭлементаHTML("deviation_summ_percent_" + ИдентификаторСтроки, "percent text_red");
			КонецЕсли;

			УстановитьЗначениеЭлементаHTML("deviation_quantity_" + ИдентификаторСтроки,
				 ?(ИспользоватьКоличество, Формат(ТекСтрИтогоКоличество, "ЧН=0; ЧФ=Ч"), ""));
	        Процент = ?(СтрокаДС.КоличествоЦель = 0, 0, ТекСтрИтогоКоличество / СтрокаДС.КоличествоЦель * 100);
			УстановитьЗначениеЭлементаHTML("deviation_quantity_percent_" + ИдентификаторСтроки,
				 ?(ИспользоватьСумму, Формат(Процент, "ЧДЦ=0; ЧН=' (0%)'; ЧФ=' (Ч%)'"), ""));
			Если Процент >= 75 Тогда
			    УстановитьКлассЭлементаHTML("deviation_quantity_percent_" + ИдентификаторСтроки, "percent text_green");
			ИначеЕсли Процент >= 50 Тогда
			    УстановитьКлассЭлементаHTML("deviation_quantity_percent_" + ИдентификаторСтроки, "percent text_yellow");
			Иначе
			    УстановитьКлассЭлементаHTML("deviation_quantity_percent_" + ИдентификаторСтроки, "percent text_red");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтогиПоСтроке();
	
КонецПроцедуры

&НаСервере
Функция ИтогТаблицыДанныеСверху(ВидПоказателя)
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) И РаботаетМенеджер() Тогда
	
		Возврат ИтогТаблицыДанныеСверхуНаСервере(ВидПоказателя);
	
	Иначе
		
		//Если ВидПоказателя = ВидПоказателяСумма() Тогда
		//	Возврат ДанныеСверху[ИндексТекДанныхСверху].СуммаЦель;
		//ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
		//	Возврат ДанныеСверху[ИндексТекДанныхСверху].КоличествоЦель;
		//КонецЕсли;
		Если ВидПоказателя = ВидПоказателяСумма() Тогда
			Возврат ДанныеСверху.Итог("СуммаЦель");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
			Возврат ДанныеСверху.Итог("КоличествоЦель");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ИтогТаблицыДанныеСверхуНаСервере(ВидПоказателя)
	
	ДанныеСверхуТЗ = ДанныеСверху.Выгрузить();
		
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
		Возврат ДанныеСверхуТЗ.Итог("СуммаЦель");
	ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
		Возврат ДанныеСверхуТЗ.Итог("КоличествоЦель");
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ИтогТаблицыЗаписиПланаПродаж(ВидПоказателя, ПоОтбору = Ложь)
	
	Результат = 0;
			
	Если ПоОтбору Тогда

		ПараметрыОтбора = Новый Структура(Элементы.ЗаписиПланаПродаж.ОтборСтрок);
		ТЗ = ЗаписиПланаПродаж.Выгрузить(ПараметрыОтбора);
		
		Если ВидПоказателя = ВидПоказателяСумма() Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаСумма");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаКоличество");
		ИначеЕсли ВидПоказателя = ВидПоказателяСуммаПрогноз(Ложь) Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаСуммаПрогноз");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличествоПрогноз(Ложь) Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаКоличествоПрогноз");
		ИначеЕсли ВидПоказателя = ВидПоказателяСуммаФакт() Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаСуммаФакт");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличествоФакт() Тогда
			Результат = ТЗ.Итог("ИтогоЗаПериодыОкнаКоличествоФакт");
		КонецЕсли;
		
	Иначе

		Если ВидПоказателя = ВидПоказателяСумма() Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаСумма");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаКоличество");
		ИначеЕсли ВидПоказателя = ВидПоказателяСуммаПрогноз(Ложь) Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаСуммаПрогноз");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличествоПрогноз(Ложь) Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаКоличествоПрогноз");
		ИначеЕсли ВидПоказателя = ВидПоказателяСуммаФакт() Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаСуммаФакт");
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличествоФакт() Тогда
			Результат = ЗаписиПланаПродаж.Итог("ИтогоЗаПериодыОкнаКоличествоФакт");
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаНачалаПодчиненногоПериода(Периодичность, НачалоПериода)
	
	Результат = НачалоПериода;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Результат = НачалоДня(Результат);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Результат = НачалоНедели(Результат);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = НачалоМесяца(Результат);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = НачалоКвартала(Результат);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Результат = ДатаПолугодия(Результат);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = НачалоГода(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаПолугодия(пДата, КонецПериода = Ложь)
	
	Результат = пДата;
	
	МесяцДаты = Месяц(Результат);
	Если МесяцДаты <= 6 Тогда
		Если КонецПериода Тогда
			Результат = КонецМесяца(ДобавитьМесяц(НачалоГода(Результат), 5));
		Иначе
			Результат = НачалоГода(Результат);
		КонецЕсли;
	Иначе
		Если КонецПериода Тогда
			Результат = КонецГода(Результат);
		Иначе
			Результат = ДобавитьМесяц(НачалоГода(Результат), 6);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаОкончанияПериода(Периодичность, ДатаНачалаПериода)
	
	Результат = ДатаНачалаПериода;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Результат = КонецДня(ДатаНачалаПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Результат = КонецНедели(ДатаНачалаПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = КонецМесяца(ДатаНачалаПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = КонецКвартала(ДатаНачалаПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Результат = ДатаПолугодия(ДатаНачалаПериода, Истина);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = КонецГода(ДатаНачалаПериода);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СледующаяДатаНачалаПериода(Периодичность, ДатаНачалаПериода, No = 1)
	
	Результат = ДатаНачалаПериода;
	
	Сутки = 60 * 60 * 24;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Результат = ДатаНачалаПериода + Сутки * No;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Результат = ДатаНачалаПериода + Сутки * 7 * No;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = ДобавитьМесяц(ДатаНачалаПериода, 1 * No);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = ДобавитьМесяц(ДатаНачалаПериода, 3 * No);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Результат = ДобавитьМесяц(ДатаНачалаПериода, 6 * No);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = ДобавитьМесяц(ДатаНачалаПериода, 12 * No);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивПериодов(Периодичность, НачалоПериода, ОкончаниеПериода)
	
	МассивПериодов = Новый Массив;
	
	ДатаНачалаПериода = ДатаНачалаПодчиненногоПериода(Периодичность, НачалоПериода);
		
	Пока ДатаОкончанияПериода(Периодичность, ДатаНачалаПериода)
			< ОкончаниеПериода Цикл
			
		МассивПериодов.Добавить(ДатаНачалаПериода);
		
		ДатаНачалаПериода = СледующаяДатаНачалаПериода(Периодичность, ДатаНачалаПериода);
	КонецЦикла;
		
	МассивПериодов.Добавить(ДатаНачалаПериода);
	
	Возврат МассивПериодов;
	
КонецФункции

&НаСервере
Процедура СоздатьПодчиненныеПериоды()
	
	НачалоПериодаСверху = Объект.ПланПродаж.НачалоПериода;
	
	ОкончаниеПериодаСверху = КонецДня(Объект.ПланПродаж.ОкончаниеПериода);
	//ОкончаниеПериодаСверху = ДатаОкончанияПериода(ПериодичностьУровняСхемы, НачалоПериодаСверху);
	
	пАРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);
	
	Если пАРМВРежимеПрогнозирования И РаботаетМенеджер() Тогда
		ПериодичностьПодчиненногоУровняСхемы =
			Справочники.CRM_СхемаПланаПродаж.ПериодичностьПрогнозирования(Объект.ПланПродаж.СхемаПланаПродаж);
	Иначе
		
		Если ТекущийУровеньИерархии < КоличествоУровнейСхемы() Тогда
			УровеньПолученияПериодичности = ТекущийУровеньИерархии + 1;
		Иначе
			УровеньПолученияПериодичности = ТекущийУровеньИерархии;
		КонецЕсли;
		
		ПериодичностьПодчиненногоУровняСхемы = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(СхемаПланаПродаж,
			 УровеньПолученияПериодичности);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьПодчиненногоУровняСхемы) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить Периодичность планирования или прогнозирования'");
	КонецЕсли;
	
	МассивПериодов = Новый Массив;
		
	ДатаНачалаПодчиненногоПериода = ДатаНачалаПодчиненногоПериода(ПериодичностьПодчиненногоУровняСхемы,
		 НачалоПериодаСверху);
		
	Пока ДатаОкончанияПериода(ПериодичностьПодчиненногоУровняСхемы, ДатаНачалаПодчиненногоПериода)
			< ОкончаниеПериодаСверху Цикл
			
		МассивПериодов.Добавить(ДатаНачалаПодчиненногоПериода);
		
		ДатаНачалаПодчиненногоПериода = СледующаяДатаНачалаПериода(ПериодичностьПодчиненногоУровняСхемы,
			 ДатаНачалаПодчиненногоПериода);
	КонецЦикла;
		
	МассивПериодов.Добавить(ДатаНачалаПодчиненногоПериода);
	
	// удаление существующих колонок:
	МассивКУдалению = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого ЭлементГруппы Из Элементы.ЗаписиПланаПродажГруппаПериод.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ЭлементГруппы.Имя, ПрефиксГруппыПериода()) > 0 Тогда
			
			МассивКУдалению.Добавить(ЭлементГруппы);
			
			Для Каждого ЭлементГруппыПериода Из ЭлементГруппы.ПодчиненныеЭлементы Цикл
				МассивУдаляемыхРеквизитов.Добавить(ЭлементГруппыПериода.ПутьКДанным);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементКУдалению Из МассивКУдалению Цикл
		Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ИменаКолонокПериодов.Очистить();
	ИменаГруппПериодов.Очистить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Период Из МассивПериодов Цикл
		
		ГруппаПериода = СоздатьГруппуПериода(Период);
		// Всегда создаются колонки обоих показателей, однако одна из них может быть скрыта
		СоздатьКолонкуПериода(ВидПоказателяСумма(), Период, ГруппаПериода, МассивДобавляемыхРеквизитов, , 10);
		СоздатьКолонкуПериода(ВидПоказателяКоличество(), Период, ГруппаПериода, МассивДобавляемыхРеквизитов, , 8);
		Если пАРМВРежимеПрогнозирования Тогда
			СоздатьКолонкуПериода(ВидПоказателяСумма(), Период, ГруппаПериода, МассивДобавляемыхРеквизитов,
				 СуффиксПрогноз(),
				 10);
			СоздатьКолонкуПериода(ВидПоказателяКоличество(), Период, ГруппаПериода,
				 МассивДобавляемыхРеквизитов, СуффиксПрогноз(),
				 8);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для Каждого ИмяКолонки Из ИменаКолонокПериодов Цикл
		Элементы["ЗаписиПланаПродаж" + ИмяКолонки].ПутьКДанным = "ЗаписиПланаПродаж." + ИмяКолонки;
	КонецЦикла;
	
	//Элементы.ЗаписиПланаПродажГруппаПериод.Заголовок = ПредставлениеПериода;
	//Элементы.ЗаписиПланаПродажИтогоЗаПериодыСумма.Заголовок = "Итого"; // + ПредставлениеПериода;
	//Элементы.ЗаписиПланаПродажИтогоЗаПериодыКоличество.Заголовок = "Итого";
	// Заголовок указан в группе
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыСумма.Заголовок = "";
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыКоличество.Заголовок = "";
	
	ДетализацияИмениПоказателя(Элементы.ЗаписиПланаПродажИтогоЗаПериодыСумма.Заголовок, ВидПоказателяСумма());
	ДетализацияИмениПоказателя(Элементы.ЗаписиПланаПродажИтогоЗаПериодыКоличество.Заголовок, ВидПоказателяКоличество());
	
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаСумма.Заголовок = "";
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаКоличество.Заголовок = "";
	
	ДетализацияИмениПоказателя(Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаСумма.Заголовок, ВидПоказателяСумма());
	ДетализацияИмениПоказателя(Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаКоличество.Заголовок,
		 ВидПоказателяКоличество());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПериодаПриИзменении(Элемент)
	
	ОбновитьИтогиПериодовЗаписи();
	
КонецПроцедуры

&НаСервере
Функция СформироватьЗапросТаблицыЗаписейПланаПродаж(ПараметрыЗапроса = Неопределено,
	 ЗаполнениеСтрокиДаннымиПрогнозирования = Ложь)
	
	Запрос = Новый Запрос;
		
	Если ЭтоАдминистраторПлана ИЛИ РаботаетРуководительПодразделения Тогда // НЕ РаботаСЗаписямиКонечногоУровня()
		
		ПараметрыТекстаЗапроса = СтруктураПараметровТекстаЗапроса(УсловиеПоУровнюИерархии());
		ПараметрыТекстаЗапроса.ЭтоАдминистраторПлана = ЭтоАдминистраторПлана;
		
		Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
		Если ТекущийПользователь = Пользователи.АвторизованныйПользователь() Тогда
			Запрос.УстановитьПараметр("Подразделение", ПодразделенияПользователя);
		Иначе
			Запрос.УстановитьПараметр("Подразделение", ТекущееПодразделение);
		КонецЕсли;
		Запрос.УстановитьПараметр("УровеньИерархии", ТекущийУровеньИерархии);
		Запрос.УстановитьПараметр("Периодичность", ПериодичностьПодчиненногоУровняСхемы);
		
	Иначе // здесь только Менеджер, НЕ последнее подразделение в схеме
		
		ПараметрыТекстаЗапроса = СтруктураПараметровТекстаЗапроса(УсловиеПоМенеджеру(),
			 ЗаполнениеСтрокиДаннымиПрогнозирования);
		
		Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
		Запрос.УстановитьПараметр("Подразделение", ТекущееПодразделение);
		Запрос.УстановитьПараметр("Менеджер", ТекущийПользователь);
		Запрос.УстановитьПараметр("Периодичность", ПериодичностьПодчиненногоУровняСхемы);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодразделениеНеЗадано", (Не ЗначениеЗаполнено(Запрос.Параметры.Подразделение)
		Или ЭтоАдминистраторПлана));
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из ПараметрыЗапроса Цикл
			ПараметрыТекстаЗапроса.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок, Объект.ПланПродаж.НачалоПериода,
		 ТекущийИнтервалОкнаКолонок);	
	ДатаНачалаОкна = ДатыОкнаКолонок.ДатаНачала;
	ДатаОкончанияОкна = ДатыОкнаКолонок.ДатаОкончания;
	Запрос.УстановитьПараметр("Параметр_НачалоПериодаСверху", НачалоПериодаСверху);
	Запрос.УстановитьПараметр("Параметр_ОкончаниеПериодаСверху", ОкончаниеПериодаСверху);
	
	Запрос.Текст = ТекстЗапросаЗаписейПланаПродаж(ПараметрыТекстаЗапроса);
	
	Возврат Запрос;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗаписейПланаПродаж(Знач ЭтоАдминистраторПлана, ВключаяПодчиненные)
	
	ЗаписиПланаПродаж.Очистить();
	
	СоздатьПодчиненныеПериоды();
	
	Если ТекущийУровеньИерархии <> -1 ИЛИ ЭтоАдминистраторПлана Тогда
		
		Запрос = СформироватьЗапросТаблицыЗаписейПланаПродаж();
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		пАРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);
		
		Пока ВыборкаРезультат.Следующий() Цикл
			
			НС = ЗаписиПланаПродаж.Добавить();
			// необходимо считать учитывая округление ниже
			//НС["ИтогоЗаПериоды"] = КонвертироватьЗначениеПоказателя(ВыборкаРезультат.Сумма);
			
			ИтогоЗаПериодыСумма = 0;
			ИтогоЗаПериодыКоличество = 0;
			ИтогоЗаПериодыСуммаПрогноз = 0;
			ИтогоЗаПериодыКоличествоПрогноз = 0;
			ИтогоЗаПериодыСуммаФакт = 0;
			ИтогоЗаПериодыКоличествоФакт = 0;
			
			ДетальныеЗаписи = ВыборкаРезультат.Выбрать();
			Пока ДетальныеЗаписи.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(НС,
					 ДетальныеЗаписи); // каждая следующая итерация просто представляет собой перезапись теми же данными с обновлением сумм,
																// которые раскладываются по колонкам в строке ниже
				
				Если пАРМВРежимеПрогнозирования И РаботаетМенеджер() Тогда
					ЗначениеПоказателяСумма = ДетальныеЗаписи.СуммаПрогноз;
					ЗначениеПоказателяКоличество = ДетальныеЗаписи.КоличествоПрогноз;
				Иначе
					ЗначениеПоказателяСумма = ДетальныеЗаписи.Сумма;
					ЗначениеПоказателяКоличество = ДетальныеЗаписи.Количество;
				КонецЕсли;
				
				ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма()) + Формат(ДетальныеЗаписи.ПериодПлана, "ДФ=yyyyMMdd");
				НС[ИмяКолонкиСумма] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяСумма, ВидПоказателяСумма());
				ИтогоЗаПериодыСумма = ИтогоЗаПериодыСумма + НС[ИмяКолонкиСумма];
				
				ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество()) 
					+ Формат(ДетальныеЗаписи.ПериодПлана, "ДФ=yyyyMMdd");
				НС[ИмяКолонкиКоличество] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяКоличество,
					 ВидПоказателяКоличество());
				ИтогоЗаПериодыКоличество = ИтогоЗаПериодыКоличество + НС[ИмяКолонкиКоличество];
				
				Если пАРМВРежимеПрогнозирования Тогда // заполняются дополнительно созданные колонки Прогноз
					
					// Прогноз
					ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма(), СуффиксПрогноз()) 
						+ Формат(ДетальныеЗаписи.ПериодПлана,
						 "ДФ=yyyyMMdd");
					НС[ИмяКолонкиСумма] = КонвертироватьЗначениеПоказателя(ДетальныеЗаписи.СуммаПрогноз, ВидПоказателяСумма());
					ИтогоЗаПериодыСуммаПрогноз = ИтогоЗаПериодыСуммаПрогноз + НС[ИмяКолонкиСумма];
					
					ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество(), СуффиксПрогноз()) 
						+ Формат(ДетальныеЗаписи.ПериодПлана,
						 "ДФ=yyyyMMdd");
					НС[ИмяКолонкиКоличество] = КонвертироватьЗначениеПоказателя(ДетальныеЗаписи.КоличествоПрогноз,
						 ВидПоказателяКоличество());
					ИтогоЗаПериодыКоличествоПрогноз = ИтогоЗаПериодыКоличествоПрогноз + НС[ИмяКолонкиКоличество];
					
					// Факт
					НС["ИтогоЗаПериодыСуммаФакт"] = КонвертироватьЗначениеПоказателя(ДетальныеЗаписи.СуммаФакт, ВидПоказателяСумма());
					НС["ИтогоЗаПериодыКоличествоФакт"] = КонвертироватьЗначениеПоказателя(ДетальныеЗаписи.КоличествоФакт,
						 ВидПоказателяКоличество());
					
				КонецЕсли;
				
			КонецЦикла;
			
			НС["ИтогоЗаПериодыСумма"] = ИтогоЗаПериодыСумма;
			НС["ИтогоЗаПериодыКоличество"] = ИтогоЗаПериодыКоличество;
			НС["ИтогоЗаПериодыСуммаПрогноз"] = ИтогоЗаПериодыСуммаПрогноз;
			НС["ИтогоЗаПериодыКоличествоПрогноз"] = ИтогоЗаПериодыКоличествоПрогноз;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьФормуПоУровнюИерархии(ТекущийУровеньИерархии);
	ОбновитьНумерациюСтрокТаблицы(ЗаписиПланаПродаж);
	ОбновитьСписокПериодичностиОкнаКолонок();
	
	Если РаботаетМенеджер() И АРМВрежимеПрогнозирования(РежимАРМ) Тогда
		УстановитьПериодичностьОкнаКолонок(ПериодичностьПодчиненногоУровняСхемы, 
			ИнтервалОкнаПоДате(ПериодичностьПодчиненногоУровняСхемы, ДатаОкончанияПериода(ПериодичностьПодчиненногоУровняСхемы, ТекущаяДатаСеанса()) + 1));
	Иначе
		
		Если ЗагрузитьНастройкиПользователя() Тогда
			УстановитьПериодичностьОкнаКолонок(ТекущаяПериодичностьОкнаКолонок, ТекущийИнтервалОкнаКолонок);
		Иначе
			УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
	АдресИсходнойТаблицыЗаписей = ПоместитьВоВременноеХранилище(ЗаписиПланаПродаж.Выгрузить(), УникальныйИдентификатор);

	СформироватьHTMLДанныеСверху();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНумерациюСтрокТаблицы(Таблица, НачинатьСНуля = Ложь)
	
	Если НачинатьСНуля Тогда
		Сч = 0;
	Иначе
		Сч = 1;
	КонецЕсли;
	Для Каждого Запись Из Таблица Цикл
		Запись.НомерСтроки = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеСверхуСохранитьИзменения()
	
	Для каждого СтрокаДС Из ДанныеСверху Цикл
		
		Если Не СтрокаДС.СтрокаИзменена Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ИдентификаторСтроки", СтрокаДС.ИдентификаторСтроки);
		Выборка = РегистрыСведений.CRM_ПланПродаж.Выбрать(СтруктураОтбора);
		Пока Выборка.Следующий() Цикл
			ЗаписьДС = РегистрыСведений.CRM_ПланПродаж.СоздатьМенеджерЗаписи();
			ЗаписьДС.ПланПродаж = Выборка.ПланПродаж;
			ЗаписьДС.ПериодПлана = Выборка.ПериодПлана;
			ЗаписьДС.АналитикаУчетаПланаПродаж = Выборка.АналитикаУчетаПланаПродаж;
			ЗаписьДС.УровеньИерархии = Выборка.УровеньИерархии;
			ЗаписьДС.Периодичность = Выборка.Периодичность;
			ЗаписьДС.Прочитать();
			Если ЗаписьДС.Выбран() И ЗаписьДС.Согласовано <> СтрокаДС.Согласовано Тогда
				ЗаписьДС.Согласовано = СтрокаДС.Согласовано;
				ЗаписьДС.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура ДобавитьПереопределяемыеКолонкиПлана()
	
	ПереопределяемыеКолонки = Новый Массив;
	ПереопределяемыеЭлементы = Новый Массив;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		НовРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("Число"), "ДанныеСверху"); 
		ПереопределяемыеКолонки.Добавить(НовРеквизит);
		НовРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("Число"), "ЗаписиПланаПродаж"); 
		ПереопределяемыеКолонки.Добавить(НовРеквизит);
 		ПереопределяемыеЭлементы.Добавить(НовРеквизит);
	Иначе	
		НовРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ДанныеСверху"); 
		ПереопределяемыеКолонки.Добавить(НовРеквизит);
		НовРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ЗаписиПланаПродаж"); 
		ПереопределяемыеКолонки.Добавить(НовРеквизит);
 		ПереопределяемыеЭлементы.Добавить(НовРеквизит);
	КонецЕсли;
	
	ИзменитьРеквизиты(ПереопределяемыеКолонки);
	
	Для каждого Реквизит Из ПереопределяемыеЭлементы Цикл
		Элемент = Элементы.Добавить("ЗаписиПланаПродаж" + Реквизит.Имя, Тип("ПолеФормы"),
			 Элементы.ЗаписиПланаПродажГруппаАналитика);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ЗаписиПланаПродаж." + Реквизит.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РедактированиеПрогнозаРазрешено()
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ РаботаетМенеджер() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьПодчиненногоУровняСхемы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИнтервалОкнаПоТекущейДате = ИнтервалОкнаПоДате(ПериодичностьПодчиненногоУровняСхемы,
		 ДатаОкончанияПериода(ПериодичностьПодчиненногоУровняСхемы, ТекущаяДатаСеанса()) 
		+ 1);
	Возврат ТекущийИнтервалОкнаКолонок >= ИнтервалОкнаПоТекущейДате; // Запрещено редактирование прогноза прошедших периодов
	
КонецФункции

&НаСервере
Функция ПланСогласован()
	
	Если ПланПустой() Тогда
		Возврат Ложь;
	КонецЕсли; // Еще не введена ни одна запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.Согласовано КАК Согласовано
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И CRM_ПланПродаж.Согласовано = ЛОЖЬ
		|	И CRM_ПланПродаж.УровеньИерархии = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.Согласовано";
	
	Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АРМВРежимеПланирования(РежимАРМЗначение)
	Возврат РежимАРМЗначение = 1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АРМВРежимеПрогнозирования(РежимАРМЗначение)
	Возврат РежимАРМЗначение = 2;
КонецФункции

&НаСервере
Функция РежимАРМСтрокой()
	
	Если АРМВРежимеПланирования(РежимАРМ) Тогда
		Возврат НСтр("ru = 'Планирование'");
	ИначеЕсли АРМВРежимеПрогнозирования(РежимАРМ) Тогда
		Возврат НСтр("ru = 'Прогнозирование'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовок(Форма, РежимАРМСтрокой)
	
	ШаблонЗаголовка = НСтр("ru = 'Планирование продаж(бета-версия)%1 / %2'");
	
	Если ЗначениеЗаполнено(РежимАРМСтрокой) Тогда
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, " - " 
			+ РежимАРМСтрокой,
			 Форма.ТекущийПользователь);
		Форма.Элементы.ДекорацияРежимАРМ.Заголовок = РежимАРМСтрокой;
	Иначе
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, "",
			 Форма.ТекущийПользователь);
		Форма.Элементы.ДекорацияРежимАРМ.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУровеньИерархии()

	Элементы.ФормаПрименить.Видимость = ЗначениеЗаполнено(Объект.ПланПродаж); 
	Элементы.СоздатьПлан.Видимость = Не ЗначениеЗаполнено(Объект.ПланПродаж); 

	ОпределитьТекущийУровеньИерархии();
	НастроитьФормуПоУровнюИерархии(ТекущийУровеньИерархии);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущийУровеньИерархии()
	
	// Определение уровня иерархии текущего пользователя
	ТекущийУровеньИерархии = -1;
	
	Если ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		
		Если ЭтоАдминистраторПлана(Объект.ПланПродаж, ТекущийПользователь) Тогда
			ТекущийУровеньИерархии = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоУровнюИерархии(УровеньИерархии)
	
	УровеньИерархииЗадан = (УровеньИерархии <> -1);
	Элементы.ФормаПрименить.Доступность = УровеньИерархииЗадан
		 И (НЕ АРМВРежимеПрогнозирования(РежимАРМ)
		 ИЛИ РаботаетМенеджер());
	Элементы.КоманднаяПанельЗаписиПланаПродаж.Доступность = УровеньИерархииЗадан;
	Элементы.ЗаписиПланаПродаж.Доступность = УровеньИерархииЗадан;
	Элементы.ДекорацияПредупреждение1.Видимость = НЕ УровеньИерархииЗадан;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоАдминистраторПлана(ПланПродаж, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродажАдминистраторы.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.CRM_ПланПродаж.Администраторы КАК CRM_ПланПродажАдминистраторы
		|ГДЕ
		|	CRM_ПланПродажАдминистраторы.Пользователь = &Пользователь
		|	И CRM_ПланПродажАдминистраторы.Ссылка = &ПланПродаж";
	
	Запрос.УстановитьПараметр("ПланПродаж", ПланПродаж);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Либо добавление этих записей, как плана для менеджера (тогда текущий уровень иерархии на 1 выше,
	// чем уровень с Менеджером),
// либо непосредственное редактирование менеджером
&НаСервере
Функция РаботаСЗаписямиКонечныхУровней()
	
	Если Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии + 1,
		 Тип("СправочникСсылка.Пользователи"))
		Или Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж,
			 ТекущийУровеньИерархии,
			 Тип("СправочникСсылка.Пользователи")) Тогда
		Возврат Истина;
	ИначеЕсли РаботаСЗаписямиКонечногоУровня() Тогда // для схем, оканичивающихся Подразделением
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция РаботаСЗаписямиКонечногоУровня()
	
	Возврат ТекущийУровеньИерархии = КоличествоУровнейСхемы();
	
КонецФункции

&НаСервере
Функция ВСхемеЕстьУровеньМенеджер()
	
	Возврат ЕстьУровеньМенеджер(СхемаПланаПродаж);
	
КонецФункции

// Перенести в модуль менеджера
&НаСервереБезКонтекста
Функция ЕстьУровеньМенеджер(Схема)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка КАК Ссылка,
		|	CRM_СхемаПланаПродажЭлементыСхемы.НомерСтроки КАК НомерСтроки,
		|	CRM_СхемаПланаПродажЭлементыСхемы.Разрез КАК Разрез,
		|	CRM_СхемаПланаПродажЭлементыСхемы.Родитель КАК Родитель,
		|	CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня КАК ИдентификаторУровня
		|ИЗ
		|	Справочник.CRM_СхемаПланаПродаж.ЭлементыСхемы КАК CRM_СхемаПланаПродажЭлементыСхемы
		|ГДЕ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка = &Схема
		|	И CRM_СхемаПланаПродажЭлементыСхемы.Разрез = &РазрезМенеджер";
	
	Запрос.УстановитьПараметр("Схема", Схема);
	Запрос.УстановитьПараметр("РазрезМенеджер", ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Менеджеры);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура УсловноеОформление()
	
	//УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	РаботаетМенеджер = РаботаетМенеджер();
	АРМВРежимеПланирования = АРМВРежимеПланирования(РежимАРМ);
	АРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);
	//Элементы.КоманднаяПанельЗаписиПланаПродаж.Доступность = РаботаНаМоемУровне И НЕ РаботаетМенеджер;
	Элементы.ДобавитьЗапись.Доступность = ЭтоАдминистраторПлана Или (РаботаНаМоемУровне
		 И ((АРМВРежимеПланирования
		 И НЕ РаботаетМенеджер)
											ИЛИ (АРМВРежимеПрогнозирования И РаботаетМенеджер)));
	Элементы.УдалитьЗапись.Доступность = ЭтоАдминистраторПлана Или (РаботаНаМоемУровне
		 И ((АРМВРежимеПланирования
		 И НЕ РаботаетМенеджер)
											ИЛИ (АРМВРежимеПрогнозирования И РаботаетМенеджер)));
	
	//Элементы.ЗаписиПланаПродаж.ТолькоПросмотр = РаботаетМенеджер Или НЕ РаботаНаМоемУровне;
	Для Каждого ЭлементТаблицы Из Элементы.ЗаписиПланаПродаж.ПодчиненныеЭлементы Цикл
		ЭлементТаблицы.ТолькоПросмотр = (РаботаетМенеджер И АРМВРежимеПланирования)
											Или НЕ РаботаНаМоемУровне
											Или (АРМВРежимеПрогнозирования И НЕ РедактированиеПрогнозаРазрешено());
	КонецЦикла;
	Элементы.ЗаписиПланаПродажСогласовано.ТолькоПросмотр = НЕ (РаботаетМенеджер И РаботаНаМоемУровне);
	Элементы.ЗаписиПланаПродажСогласовано.Видимость = АРМВРежимеПланирования;
	
	// Видимость элементов в зависимости от используемых показателей
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыСумма.Видимость = ИспользоватьСумму;
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыКоличество.Видимость = ИспользоватьКоличество;
	
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаСумма.Видимость = ИспользоватьСумму;
	Элементы.ЗаписиПланаПродажИтогоЗаПериодыОкнаКоличество.Видимость = ИспользоватьКоличество;
	
	Элементы.ЗаписиПланаПродажКонтекстноеМенюПерейтиНаДанныйУровень.Доступность =
		(ТекущийУровеньИерархии < КоличествоУровнейСхемы());
	Элементы.ЗаписиПланаПродажКонтекстноеМенюПерейтиНаУровеньВыше.Доступность = НЕ РаботаНаМоемУровне
		 Или ЭтоПереходНаУровеньМенеджера;
	
	Элементы.ЗаписиПланаПродажКонтекстноеМенюОткрытьОбсуждение.Доступность = РаботаНаМоемУровне
		 И ОбсужденияПодключены
		 И (ТекущийУровеньИерархии < КоличествоУровнейСхемы());
	Элементы.ОткрытьОбсуждениеДанныеСверху.Видимость = РаботаНаМоемУровне И ОбсужденияПодключены
		 И (ТекущийУровеньИерархии > 0);
	
	Элементы.ПодменюЗаполнить.Видимость = ЭтоАдминистраторПлана Или (РаботаНаМоемУровне
		 И (АРМВРежимеПланирования
		 И Не РаботаетМенеджер));
	
	СформироватьЗаголовок(ЭтотОбъект, РежимАРМСтрокой());
	
КонецПроцедуры

&НаСервере
Функция КоличествоУровнейСхемы()
	
	Результат = Справочники.CRM_СхемаПланаПродаж.КоличествоУровней(СхемаПланаПродаж);
	
	Если Результат = Null Тогда
		Возврат  -1;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// перенести в модуль менеджера плана продаж
&НаСервереБезКонтекста
Функция КоличествоИнтерваловПериодичности(ПланПродаж, Периодичность)
	
	ПериодичностьСтрока = ВРег(Периодичность);
	
	Отказ = Ложь;
	
	Если ПериодичностьСтрока = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить Периодичность уровня Схемы плана продаж'"),
			 , , ,
			 Отказ);
	КонецЕсли;
	Если НЕ (ЗначениеЗаполнено(ПланПродаж.НачалоПериода) И ЗначениеЗаполнено(ПланПродаж.ОкончаниеПериода)) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В Плане продаж не заполнены Начало и/или Окончание периода'"),
			 , , ,
			 Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
		
	НачалоПериода = НачалоДня(ПланПродаж.НачалоПериода);
	ОкончаниеПериода = КонецДня(ПланПродаж.ОкончаниеПериода);
	
	Если Периодичность = Перечисления.Периодичность.Неделя
		ИЛИ Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат МассивПериодов(Периодичность, НачалоПериода, ОкончаниеПериода).Количество();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ДатаОкончанияПериода(Периодичность, ОкончаниеПериода) + 1);
	
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РАЗНОСТЬДАТ(&НачалоПериода, &ОкончаниеПериода, <Периодичность>) КАК КоличествоИнтервалов";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "<Периодичность>", ПериодичностьСтрока);
	
		Возврат Запрос.Выполнить().Выгрузить()[0].КоличествоИнтервалов;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеПериодаПлана(Периодичность, ПериодПлана)
	
	Результат = Новый Структура("Название");
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		
		Результат.Название = НСтр("ru = ''") + Формат(ПериодПлана, "ДФ=dd.MM.yy");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Если Объект.ПланПродаж.ОтображатьНомерНедели Тогда
			
			НомерНедели = Строка(НеделяГода(ПериодПлана));
			
			// Неделя находится в разных годах
			Если Год(НачалоНедели(ПериодПлана)) <> Год(КонецНедели(ПериодПлана)) Тогда
				НомерНедели = НомерНедели + "/1";
			КонецЕсли;
			
			Результат.Название = НомерНедели + НСтр("ru = ' неделя'");
			
		Иначе
			
			Результат.Название = Формат(НачалоНедели(ПериодПлана), "ДФ=dd.MM") + " - " 
				+ Формат(КонецНедели(ПериодПлана),
				 "ДФ=dd.MM"); 
			
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Результат.Название = Формат(ПериодПлана, "ДФ='MMMM yyyy'");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		РимскоеОбозначение = НомерКвартала(ПериодПлана).Представление;
			
		Результат.Название = РимскоеОбозначение + " " + НСтр("ru = 'Квартал'") + " " + Формат(ПериодПлана, "ДФ='yyyy'"); 
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		РимскоеОбозначение = НомерПолугодия(ПериодПлана).Представление;
			
		Результат.Название = РимскоеОбозначение + " " + НСтр("ru = 'Полугодие'") + " " + Формат(ПериодПлана, "ДФ='yyyy'");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		Результат.Название = Формат(ПериодПлана, "ДФ=гггг") + " г.";
		
	КонецЕсли;
	
	Возврат Результат.Название;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерКвартала(ПериодПлана)
	
	Результат = Новый Структура("Номер, Представление");
	
	НомерКвартала = Число(Формат(ПериодПлана, "ДФ='к'"));
	РимскоеОбозначение = 0;
	
	Если НомерКвартала = 1 Тогда
		РимскоеОбозначение = "I";
	ИначеЕсли НомерКвартала = 2 Тогда
		РимскоеОбозначение = "II";
	ИначеЕсли НомерКвартала = 3 Тогда
		РимскоеОбозначение = "III";
	ИначеЕсли НомерКвартала = 4 Тогда
		РимскоеОбозначение = "IV";
	КонецЕсли;
	
	Результат.Номер = НомерКвартала;
	Результат.Представление = РимскоеОбозначение;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерПолугодия(ПериодПлана)
	
	Результат = Новый Структура("Номер, Представление");
	
	НомерПолугодия = Цел( (Месяц(ПериодПлана) - 1) / 6) + 1;
	РимскоеОбозначение = 0;
	
	Если НомерПолугодия = 1 Тогда
		РимскоеОбозначение = "I";
	ИначеЕсли НомерПолугодия = 2 Тогда
		РимскоеОбозначение = "II";
	КонецЕсли;
	
	Результат.Номер = НомерПолугодия;
	Результат.Представление = РимскоеОбозначение;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДетализацияИмениПоказателя(ИмяПоказателя, ВидПоказателя, ОчиститьЗаголовок = Ложь)
	
	Если ОчиститьЗаголовок Тогда
		ИмяПоказателя = "";
	КонецЕсли;
	
	Разделитель = ?(ЗначениеЗаполнено(ИмяПоказателя), ", ", "");
	
	// Очистка предыдущей детализаци
	ПозицияДетализации = СтрНайти(ИмяПоказателя, Разделитель);
	Если ПозицияДетализации > 0 Тогда
		ИмяПоказателя = Лев(ИмяПоказателя, ПозицияДетализации - 1);
	КонецЕсли;
	
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
		
		КратностьСтрока = Объект.ПланПродаж.КратностьЗначений;
		
		Если КратностьСтрока = "НеИзменять" Тогда
			КратностьСтрока = "";
		ИначеЕсли КратностьСтрока = "Тысячи" Тогда	
			КратностьСтрока = "(тыс.)";
		ИначеЕсли КратностьСтрока = "Миллионы" Тогда	
			КратностьСтрока = "(млн.)";
		КонецЕсли;
		
		ИмяПоказателя = ИмяПоказателя + Разделитель + ВалютаУправленческогоУчета.Наименование + " " + КратностьСтрока;
		
	ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
		ИмяПоказателя = ИмяПоказателя + Разделитель + Объект.ПланПродаж.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяСумма()
	Возврат "Сумма";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяКоличество()
	Возврат "Количество";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяСуммаПрогноз(РаботаетМенеджер)
	Если РаботаетМенеджер Тогда
		Возврат "Сумма";
	Иначе
		Возврат "СуммаПрогноз";
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяКоличествоПрогноз(РаботаетМенеджер)
	Если РаботаетМенеджер Тогда
		Возврат "Количество";
	Иначе
		Возврат "КоличествоПрогноз";
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяСуммаФакт()
	Возврат "СуммаФакт";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидПоказателяКоличествоФакт()
	Возврат "КоличествоФакт";
КонецФункции

#Область РаботаСОкномКолонок

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_День(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Неделя(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Месяц(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Квартал(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Полугодие(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Год(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОкнаКолонок_Нет(Команда)
	
	УстановитьПериодичностьОкнаКолонок(ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодичностьОкнаКолонок(НоваяПериодичность, ИнтервалОкнаКолонок = -1)
	
	ТекущаяПериодичностьОкнаКолонок = НоваяПериодичность;
	
	Если ЗначениеЗаполнено(НоваяПериодичность) Тогда
		Элементы.ГруппаПериодПодменю.Заголовок = ТекущаяПериодичностьОкнаКолонок;
	Иначе
		Элементы.ГруппаПериодПодменю.Заголовок = НСтр("ru = 'Нет отбора'");
	КонецЕсли;
	
	Элементы.ВыбратьПериод.Доступность = (ПериодичностьПодчиненногоУровняСхемы <> Перечисления.Периодичность.Год);
	Элементы.ВыбратьПериод.Видимость = НЕ (РаботаетМенеджер() И АРМВРежимеПрогнозирования(РежимАРМ));
											
	Если ИнтервалОкнаКолонок = -1 Тогда
		ТекущийИнтервалОкнаКолонок = 1;
	Иначе
		ТекущийИнтервалОкнаКолонок = ИнтервалОкнаКолонок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяПериодичность) Тогда // В случае, если выбрано "Нет отбора"
	
		КоличествоИнтерваловКолонок = КоличествоИнтерваловПериодичности(Объект.ПланПродаж, ТекущаяПериодичностьОкнаКолонок);
		
		Если КоличествоИнтерваловКолонок = 0 И ЗначениеЗаполнено(НоваяПериодичность) Тогда // НоваяПериодичность может быть
																						// не заполнена в случае, если выбран пункт
																						// "Нет отбора"
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка: количество интервалов колонок равно 0'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОкноКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиПериодовЗаписи()
	
	СуммаЗаВсеПериоды = 0;
	КоличествоЗаВсеПериоды = 0;
	
	СуммаЗаПериодыОкна = 0;
	КоличествоЗаПериодыОкна = 0;
	
	Для Каждого ИмяКолонкиПериода Из ИменаКолонокПериодов Цикл
		
		ЗначениеПоказателя = Элементы.ЗаписиПланаПродаж.ТекущиеДанные[ИмяКолонкиПериода.Значение];
		
		Если ЭтоКолонкаСуммы(ИмяКолонкиПериода) Тогда
			СуммаЗаВсеПериоды = СуммаЗаВсеПериоды + ЗначениеПоказателя;
			Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость Тогда
				СуммаЗаПериодыОкна = СуммаЗаПериодыОкна + ЗначениеПоказателя;
			КонецЕсли;
		ИначеЕсли ЭтоКолонкаКоличества(ИмяКолонкиПериода) Тогда
			КоличествоЗаВсеПериоды = КоличествоЗаВсеПериоды + ЗначениеПоказателя;
			Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость Тогда
				КоличествоЗаПериодыОкна = КоличествоЗаПериодыОкна + ЗначениеПоказателя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыСумма = СуммаЗаВсеПериоды;
	Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыКоличество = КоличествоЗаВсеПериоды;
	
	Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыОкнаСумма = СуммаЗаПериодыОкна;
	Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыОкнаКоличество = КоличествоЗаПериодыОкна;
	
	ОбновитьТаблицуЗаписейПланаПродажСверху();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиОкнаПериодов()
	
	Для Каждого СтрокаТаблицы Из ЗаписиПланаПродаж Цикл
		
		СуммаЗаПериодыОкна = 0;
		КоличествоЗаПериодыОкна = 0;
		
		СуммаЗаПериодыОкнаПрогноз = 0;
		КоличествоЗаПериодыОкнаПрогноз = 0;
		
		СуммаЗаПериодыОкнаФакт = 0;
		КоличествоЗаПериодыОкнаФакт = 0;
		
		Для Каждого ИмяКолонкиПериода Из ИменаКолонокПериодов Цикл
			
			ЭтоПрогноз = (СтрНайти(ИмяКолонкиПериода, СуффиксПрогноз()) > 0);
			
			ЗначениеПоказателя = СтрокаТаблицы[ИмяКолонкиПериода.Значение];
			
			Если ЭтоПрогноз Тогда
				ИмяКолонкиПериодаБезСуффикса = СтрЗаменить(ИмяКолонкиПериода, СуффиксПрогноз(), "");
				Если ЭтоКолонкаСуммы(ИмяКолонкиПериода) Тогда
					Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериодаБезСуффикса].Видимость Тогда
						СуммаЗаПериодыОкнаПрогноз = СуммаЗаПериодыОкнаПрогноз + ЗначениеПоказателя;
					КонецЕсли;
				ИначеЕсли ЭтоКолонкаКоличества(ИмяКолонкиПериода) Тогда
					Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериодаБезСуффикса].Видимость Тогда
						КоличествоЗаПериодыОкнаПрогноз = КоличествоЗаПериодыОкнаПрогноз + ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЭтоКолонкаСуммы(ИмяКолонкиПериода) Тогда
					Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость Тогда
						СуммаЗаПериодыОкна = СуммаЗаПериодыОкна + ЗначениеПоказателя;
					КонецЕсли;
				ИначеЕсли ЭтоКолонкаКоличества(ИмяКолонкиПериода) Тогда
					Если Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость Тогда
						КоличествоЗаПериодыОкна = КоличествоЗаПериодыОкна + ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТаблицы.ИтогоЗаПериодыОкнаСумма = СуммаЗаПериодыОкна;
		СтрокаТаблицы.ИтогоЗаПериодыОкнаКоличество = КоличествоЗаПериодыОкна;
		
		СтрокаТаблицы.ИтогоЗаПериодыОкнаСуммаПрогноз = СуммаЗаПериодыОкнаПрогноз;
		СтрокаТаблицы.ИтогоЗаПериодыОкнаКоличествоПрогноз = КоличествоЗаПериодыОкнаПрогноз;
		
		СтрокаТаблицы.ИтогоЗаПериодыОкнаСуммаФакт = СтрокаТаблицы.ИтогоЗаПериодыСуммаФакт;
		СтрокаТаблицы.ИтогоЗаПериодыОкнаКоличествоФакт = СтрокаТаблицы.ИтогоЗаПериодыКоличествоФакт;
		
	КонецЦикла;
	
	Элементы.ЗаписиПланаПродажГруппаПериодИтогоОкна.Заголовок = НСтр("ru = 'Итого, '") + ПредставлениеПериода;
	
	ОбновитьТаблицуЗаписейПланаПродажСверху();
	
КонецПроцедуры

////

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаПерейтиНазад");
	
	ТекущийИнтервалОкнаКолонок = ТекущийИнтервалОкнаКолонок - 1;
	
	Если ТекущийИнтервалОкнаКолонок <= 0 Тогда
		ТекущийИнтервалОкнаКолонок = КоличествоИнтерваловКолонок;
	КонецЕсли;
	
	ОбновитьОкноКолонок();
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПланированиеПродаж.Удобство.КоличествоНажатийКнопкаПерейтиВперед");
	
	ТекущийИнтервалОкнаКолонок = ТекущийИнтервалОкнаКолонок + 1;
	
	Если ТекущийИнтервалОкнаКолонок > КоличествоИнтерваловКолонок Тогда
		ТекущийИнтервалОкнаКолонок = 1;
	КонецЕсли;
	
	ОбновитьОкноКолонок();
	ПодключитьОбработчикОжидания("ДанныеСверхуАктивизацияСтроки", 0.1, Истина);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатыОкнаКолонок(Периодичность, НачалоПериодаПлана, ИнтервалОкнаКолонок)
	
	ДатаНачалаПериода = ДатаНачалаПодчиненногоПериода(Периодичность, НачалоПериодаПлана);
	
	ДатаНачалаОкна = СледующаяДатаНачалаПериода(Периодичность, ДатаНачалаПериода, ИнтервалОкнаКолонок - 1);
	ДатаОкончанияОкна = ДатаОкончанияПериода(Периодичность, ДатаНачалаОкна);
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаОкна, ДатаОкончанияОкна);
	
КонецФункции

&НаСервере
Процедура ОбновитьОкноКолонок()
	
	// Перечитать данные сверху
	Отказ = Ложь;
	ЗаполнитьТаблицуЗаписейПланаПродажСверху(ЭтоАдминистраторПлана, Отказ);
	
	// Основная часть:
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок, Объект.ПланПродаж.НачалоПериода,
		 ТекущийИнтервалОкнаКолонок);	
	ДатаНачалаОкна = ДатыОкнаКолонок.ДатаНачала;
	ДатаОкончанияОкна = ДатыОкнаКолонок.ДатаОкончания;
	
	ПредставлениеПериода = НазваниеПериодаПлана(ТекущаяПериодичностьОкнаКолонок, ДатаНачалаОкна);
	
	НетОтбора = НЕ ЗначениеЗаполнено(ТекущаяПериодичностьОкнаКолонок);
	
	// обход колонок периодов и скрытие
	Для Каждого ИмяКолонкиПериода Из ИменаКолонокПериодов Цикл
		
		Суффикс = "";
		Если СтрНайти(ИмяКолонкиПериода, СуффиксПрогноз()) > 0 Тогда
			Суффикс = СуффиксПрогноз();
		КонецЕсли;
		
		НачалоПланаКолонки = Дата(СтрЗаменить(ИмяКолонкиПериода,
			 ПрефиксКолонкиПериодаПоИмениКолонки(ИмяКолонкиПериода, Суффикс),
			 ""));
		ОкончаниеПланаКолонки = ДатаОкончанияПериода(ПериодичностьПодчиненногоУровняСхемы, НачалоПланаКолонки);
		
		ВидимостьПоИспользованиюПоказателя = (ИспользоватьСумму И ЭтоКолонкаСуммы(ИмяКолонкиПериода))
												Или (ИспользоватьКоличество И ЭтоКолонкаКоличества(ИмяКолонкиПериода));
		ВидимостьПоОкнуПериода = НетОтбора 
									Или (НачалоПланаКолонки >= ДатаНачалаОкна И НачалоПланаКолонки <= ДатаОкончанияОкна)
									Или (ОкончаниеПланаКолонки >= ДатаНачалаОкна И ОкончаниеПланаКолонки <= ДатаОкончанияОкна);
		
		Если Суффикс = "" Тогда
			Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость = (ВидимостьПоИспользованиюПоказателя
				 И ВидимостьПоОкнуПериода);
		ИначеЕсли Суффикс = СуффиксПрогноз() Тогда
			Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Видимость = Ложь;
		КонецЕсли;
		// Переключение видимости всей группы:
		Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода].Родитель.Видимость = ВидимостьПоОкнуПериода;
		
	КонецЦикла;
	
	// Необходимо для переключения доступности полей в режиме прогнозирования менеджером (см. РедактированиеПрогнозаРазрешено())
	НастроитьФорму();
	
	СохранитьНастройкиПользователяВн();
	
	ОбновитьИтогиОкнаПериодов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПериодичностиОкнаКолонок()
	
	МассивПериодичностей = CRM_ПланированиеПродаж.МассивПериодичностей();
	
	ИндексТекущейПериодичности = МассивПериодичностей.Найти(ПериодичностьПодчиненногоУровняСхемы);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.День);
	Элементы.ПериодичностьОкнаКолонок_День.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.Неделя);
	Элементы.ПериодичностьОкнаКолонок_Неделя.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.Месяц);
	Элементы.ПериодичностьОкнаКолонок_Месяц.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.Квартал);
	Элементы.ПериодичностьОкнаКолонок_Квартал.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.Полугодие);
	Элементы.ПериодичностьОкнаКолонок_Полугодие.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
	ИндексПериодичности = МассивПериодичностей.Найти(Перечисления.Периодичность.Год);
	Элементы.ПериодичностьОкнаКолонок_Год.Видимость = (ИндексПериодичности > ИндексТекущейПериодичности);
	
КонецПроцедуры
	
////
&НаКлиентеНаСервереБезКонтекста
Функция ИменаКолонокРазрезов()
	
	ИменаКолонок = Новый Массив;
	
	ИменаКолонок.Добавить("Менеджер");
	ИменаКолонок.Добавить("Партнер");
	ИменаКолонок.Добавить("Номенклатура");
	ИменаКолонок.Добавить("Склад");
	ИменаКолонок.Добавить("Аналитика1");
	ИменаКолонок.Добавить("Аналитика2");
	ИменаКолонок.Добавить("Аналитика3");
	
	Возврат ИменаКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНеСовпадающиеСРазрезом()
	
	Колонки = Новый Структура;
	
	Колонки.Вставить("Менеджер", "Менеджеры");
	Колонки.Вставить("Партнер", "Партнеры");
	
	Возврат Колонки;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьКолонокРазрезов()
	
	ИменаКолонок = ИменаКолонокРазрезов();
	
	СоздатьГруппыАналитики("ЗаписиПланаПродаж");
	НастроитьВидимостьКолонокРазрезовПоТаблице(ИменаКолонок,
		 ?(ТекущийУровеньИерархии = КоличествоУровнейСхемы(), ТекущийУровеньИерархии,
		 ТекущийУровеньИерархии 
		+ 1));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКолонокРазрезовПоТаблице(ИменаКолонок, УровеньИерархии)

	ИмяТаблицы = "ЗаписиПланаПродаж";

	СоответствиеИмен = Новый Соответствие;
	СтруктураТаблицы = РеквизитФормыВЗначение(ИмяТаблицы);
	ОсновныеАналитики = CRM_ПланированиеПродаж.ОсновныеАналитикиПланирования();
	Разрезы = Справочники.CRM_СхемаПланаПродаж.РазрезыУровняИерархии(СхемаПланаПродаж, УровеньИерархии, , Истина);
	КолонкиНеСовпадающие = КолонкиНеСовпадающиеСРазрезом();
	
	НомДопАналитики = 1;
	ДополнительныеАналитики.Очистить();
	Для Каждого СтрокаТаблицы Из Разрезы Цикл
		СтруктураРазреза = Новый Структура("Разрез, Уровень", СтрокаТаблицы.Разрез, СтрокаТаблицы.Уровень);
		Если ОсновныеАналитики.Найти(СтрокаТаблицы.Разрез) <> Неопределено Тогда
			СоответствиеИмен.Вставить(СтрокаТаблицы.Разрез.ИмяПредопределенныхДанных, СтруктураРазреза);
		Иначе	
			ИмяАналитики = "Аналитика"+Строка(НомДопАналитики);
			СоответствиеИмен.Вставить(ИмяАналитики, СтруктураРазреза);
			НомДопАналитики = НомДопАналитики + 1;
			СтрДопАналитика = ДополнительныеАналитики.Добавить();
			СтрДопАналитика.Имя = ИмяАналитики;
			СтрДопАналитика.Заголовок = Строка(СтрокаТаблицы.Разрез);
			СтрДопАналитика.ТипАналитики = СтрокаТаблицы.Разрез;
			СтрДопАналитика.ПутьКРеквизиту = CRM_ПланированиеПродаж.ПутьКРеквизитуАналитики(СтрокаТаблицы.Разрез);
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеАналитики.Очистить();
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		
		ТекЭлемент = Элементы[ИмяТаблицы + ИмяКолонки];
		
		Если КолонкиНеСовпадающие.Свойство(ИмяКолонки) Тогда
			СтруктураРазреза = СоответствиеИмен[КолонкиНеСовпадающие[ИмяКолонки]];
		Иначе
			СтруктураРазреза = СоответствиеИмен[ИмяКолонки];
		КонецЕсли;
		
		Если СтруктураРазреза = Неопределено Тогда
			ТекЭлемент.Видимость = Ложь;
		Иначе
			ИмяГруппы = ИмяГруппыАналитики(ИмяТаблицы, СтруктураРазреза.Уровень);
			Если Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
				Элементы.Переместить(ТекЭлемент, Элементы[ИмяГруппы]);
			КонецЕсли;
			ТекЭлемент.Видимость = Истина;
			ТекЭлемент.Заголовок = СтруктураРазреза.Разрез;
			ТекЭлемент.ОграничениеТипа = СтруктураРазреза.Разрез.ТипЗначения;
			Если СтруктураРазреза.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Номенклатура_Родитель Тогда
				ТекЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
			Иначе
				ТекЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
			КонецЕсли;
			
			ТекущиеАналитики.Добавить(ИмяКолонки);
		КонецЕсли;		

	КонецЦикла;
	
	Элементы[ИмяТаблицы 
		+ "Подразделение"].Видимость =
			Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, УровеньИерархии,
				 Тип("СправочникСсылка.СтруктураПредприятия"));
	Элементы[ИмяТаблицы + "Менеджер"].Видимость = Не РаботаетМенеджер()
		 И Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, УровеньИерархии,
		 	 Тип("СправочникСсылка.Пользователи"));

	Если Элементы[ИмяТаблицы + "Подразделение"].Видимость Тогда
		ТекущиеАналитики.Добавить("Подразделение");
	КонецЕсли;
	Если Элементы[ИмяТаблицы + "Менеджер"].Видимость Тогда
		ТекущиеАналитики.Добавить("Менеджер");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция КонвертироватьЗначениеПоказателя(Значение, ВидПоказателя, ОбратнаяКонвертация = Ложь)
	
	Результат = Значение;
	
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
	
		КратностьСтрока = Объект.ПланПродаж.КратностьЗначений;
		
		Если КратностьСтрока = "НеИзменять" Тогда
			КратностьЗначений = 1;
		ИначеЕсли КратностьСтрока = "Тысячи" Тогда	
			КратностьЗначений = 1000;
		ИначеЕсли КратностьСтрока = "Миллионы" Тогда	
			КратностьЗначений = 1000000;
		КонецЕсли;
		
		ДробнаяЧастьСтрока = Объект.ПланПродаж.ДробнаяЧасть;
		
		Если ДробнаяЧастьСтрока = "Целое" Тогда
			ДробнаяЧасть = 0;
		ИначеЕсли ДробнаяЧастьСтрока = "Десятые" Тогда	
			ДробнаяЧасть = 1;
		ИначеЕсли ДробнаяЧастьСтрока = "Сотые" Тогда	
			ДробнаяЧасть = 2;
		ИначеЕсли ДробнаяЧастьСтрока = "Тысячные" Тогда	
			ДробнаяЧасть = 3;
		КонецЕсли;
		
		Если ОбратнаяКонвертация Тогда
			Результат = Значение * КратностьЗначений;
		Иначе
			Результат = Окр(Значение / КратностьЗначений, ДробнаяЧасть, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПрефиксКолонкиПериода(ВидПоказателя, Суффикс = "")
	
	МеткаПоказателя = "";
	
	Если ВидПоказателя = ВидПоказателяКоличество() Тогда
		МеткаПоказателя = "Количество" + Суффикс + "_";
	КонецЕсли;
	
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
		МеткаПоказателя = "Сумма" + Суффикс + "_";
	КонецЕсли;
	
	Возврат "П_" + МеткаПоказателя;
	
КонецФункции

&НаСервере
Функция КвалификаторПоказателя(ВидПоказателя)
	
	Результат = Неопределено;
	
	Если ВидПоказателя = ВидПоказателяКоличество() Тогда
		Результат = Новый КвалификаторыЧисла(12, 0);
	КонецЕсли;
	
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
		Результат = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип.КвалификаторыЧисла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьКолонкуПериода(ВидПоказателя, Период, ГруппаПериода, МассивДобавляемыхРеквизитов,
	 Суффикс = "",
	 Ширина = 0)
	
	ИмяКолонки = ПрефиксКолонкиПериода(ВидПоказателя, Суффикс) + Формат(Период, "ДФ=yyyyMMdd");
	// ЗаголовокКолонки = НазваниеПериодаПлана(ПериодичностьПодчиненногоУровняСхемы, Период); // Заголовок указан в группе
	ЗаголовокКолонки = "";
	ДетализацияИмениПоказателя(ЗаголовокКолонки, ВидПоказателя);
	
	ИменаКолонокПериодов.Добавить(ИмяКолонки);
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Число",
		 КвалификаторПоказателя(ВидПоказателя)), "ЗаписиПланаПродаж",
		 ЗаголовокКолонки));
	
	НоваяКолонка = Элементы.Добавить("ЗаписиПланаПродаж" + ИмяКолонки, Тип("ПолеФормы"), ГруппаПериода);
	НоваяКолонка.Заголовок = ЗаголовокКолонки;
	// НоваяКолонка.ПутьКДанным = "ЗаписиПланаПродаж." 
	//	+ ИмяКолонки; // присваивается во внешней процедуре, после создания реквизитов формы
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НоваяКолонка.Видимость = Ложь;
	НоваяКолонка.Формат = "ЧДЦ=0";
	НоваяКолонка.ФорматРедактирования = "ЧДЦ=0";
	НоваяКолонка.Ширина = Ширина;
	
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеПериодаПриИзменении");
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуПериода(Период)
	
	ИмяГруппы = ПрефиксГруппыПериода() + Формат(Период, "ДФ=yyyyMMdd");
	
	ИменаГруппПериодов.Добавить(ИмяГруппы);
	
	НоваяГруппа = Элементы.Добавить("ЗаписиПланаПродаж" + ИмяГруппы, Тип("ГруппаФормы"),
		 Элементы.ЗаписиПланаПродажГруппаПериод);
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
	//НоваяГруппа.ФиксацияВТаблице = ФиксацияВТаблице.Право;
	НоваяГруппа.ОтображатьВШапке = Истина;
	НоваяГруппа.Заголовок = НазваниеПериодаПлана(ПериодичностьПодчиненногоУровняСхемы, Период);
	НоваяГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НоваяГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура СоздатьГруппыАналитики(ИмяТаблицы)
	
	Уровень = 1;
	ВсегоУровней = КоличествоУровнейСхемы();
	
	Если НЕ ЗначениеЗаполнено(ВсегоУровней) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдГруппы = Элементы.ЗаписиПланаПродажГруппаПериод;
	
	Пока Уровень <= ВсегоУровней Цикл
		
		ИмяГруппы = ИмяГруппыАналитики(ИмяТаблицы, Уровень);
		
		НоваяГруппа = Элементы.Найти(ИмяГруппы);
		
		Если НоваяГруппа = Неопределено Тогда
			НоваяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы[ИмяТаблицы]);
			НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
		КонецЕсли;
		
		Элементы.Переместить(НоваяГруппа, Элементы[ИмяТаблицы], ПредыдГруппы);
		
		ПредыдГруппы = НоваяГруппа;
		
		Уровень = Уровень + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьИтогоПоПериодам(ВидПоказателя, ПоОкнуПериодов = Ложь)
	
	ЗначениеКРаспределению = 0;
	
	Если ВидПоказателя = ВидПоказателяСумма() Тогда
		Если ПоОкнуПериодов Тогда
			ЗначениеКРаспределению = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыОкнаСумма;
		Иначе
			ЗначениеКРаспределению = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыСумма;
		КонецЕсли;
	ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
		Если ПоОкнуПериодов Тогда
			ЗначениеКРаспределению = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыОкнаКоличество;
		Иначе
			ЗначениеКРаспределению = Элементы.ЗаписиПланаПродаж.ТекущиеДанные.ИтогоЗаПериодыКоличество;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоОкнуПериодов Тогда
		
		КоличествоПериодов = 0;
		Для Каждого ИмяГруппыПериода Из ИменаГруппПериодов Цикл
			Если Элементы["ЗаписиПланаПродаж" + ИмяГруппыПериода].Видимость Тогда
				КоличествоПериодов = КоличествоПериодов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПериодов = ИменаГруппПериодов.Количество();
	КонецЕсли;
	
	// Работа только с целыми
	СреднееЗаПериод = Окр(ЗначениеКРаспределению / КоличествоПериодов, 0, 1);
	
	СчКолонок = 1;
	Для Каждого ИмяКолонкиПериода Из ИменаКолонокПериодов Цикл
		
		Если ПоОкнуПериодов И НЕ Элементы["ЗаписиПланаПродаж" + ИмяКолонкиПериода.Значение].Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидПоказателя = ВидПоказателяСумма() Тогда
			Если НЕ ЭтоКолонкаСуммы(ИмяКолонкиПериода) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ВидПоказателя = ВидПоказателяКоличество() Тогда
			Если НЕ ЭтоКолонкаКоличества(ИмяКолонкиПериода) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеКРаспределению < СреднееЗаПериод
				ИЛИ СчКолонок = КоличествоПериодов Тогда
			ЗначениеПериода = ЗначениеКРаспределению;
		Иначе
			ЗначениеПериода = СреднееЗаПериод;
		КонецЕсли;
		
		ЗначениеКРаспределению = ЗначениеКРаспределению - ЗначениеПериода;
		
		Элементы.ЗаписиПланаПродаж.ТекущиеДанные[ИмяКолонкиПериода.Значение] = ЗначениеПериода;
		
		СчКолонок = СчКолонок + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрефиксКолонкиПериодаПоИмениКолонки(ИмяКолонкиПериода, Суффикс = "")
	
	Результат = "";
		
	Если ЭтоКолонкаСуммы(ИмяКолонкиПериода) Тогда
		Результат = ПрефиксКолонкиПериода(ВидПоказателяСумма(), Суффикс);
	ИначеЕсли ЭтоКолонкаКоличества(ИмяКолонкиПериода) > 0 Тогда
		Результат = ПрефиксКолонкиПериода(ВидПоказателяКоличество(), Суффикс);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКолонкаСуммы(ИмяКолонкиПериода)
	Возврат СтрНайти(НРег(ИмяКолонкиПериода), "сумма") > 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКолонкаКоличества(ИмяКолонкиПериода)
	Возврат СтрНайти(НРег(ИмяКолонкиПериода), "количество") > 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксГруппыПериода()
	Возврат "П_Группа_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыАналитики(ИмяТаблицы, Уровень)

	Возврат ИмяТаблицы + "ГруппаАналитики" + Уровень;

КонецФункции

&НаСервере
Функция ЗагрузитьНастройкиПользователя()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючНастроек = "ПланированиеПродаж" + Объект.ПланПродаж.УникальныйИдентификатор();
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ПланированиеПродаж.НастройкиПериода",
		 КлючНастроек, Неопределено, ,
		 ТекущийПользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиПериода <> Неопределено
		 И НЕ (ЗначениеЗаполнено(НастройкиПериода.ТекущаяПериодичностьОкнаКолонок)
		 И ЗначениеЗаполнено(НастройкиПериода.ТекущийИнтервалОкнаКолонок)) Тогда
		НастройкиПериода = Неопределено; // Сброс некорректных настроек
	КонецЕсли;
	
	Если НастройкиПериода = Неопределено
			Или CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(НастройкиПериода.ТекущаяПериодичностьОкнаКолонок,
				 ПериодичностьПодчиненногоУровняСхемы) Тогда
			
		Если ЭтоАдминистраторПлана Тогда
			ТекущаяПериодичностьОкнаКолонок = ПериодичностьПодчиненногоУровняСхемы;
		ИначеЕсли НЕ РаботаетРуководительПодразделения Тогда // Менеджер
			Если КоличествоУровнейСхемы() = 1 Тогда
				ТекущаяПериодичностьОкнаКолонок = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
					 1);
			Иначе
				// Периодичность предыдущего уровня схемы
				ТекущаяПериодичностьОкнаКолонок = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж,
					 ТекущийУровеньИерархии - 1);
			КонецЕсли;
		Иначе
			ТекущаяПериодичностьОкнаКолонок = ПериодичностьУровняСхемы;
		КонецЕсли;
		
		ТекущийИнтервалОкнаКолонок = 1;
		
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПериода);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиПользователяВн()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланПродаж) Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастроек = "ПланированиеПродаж" + Объект.ПланПродаж.УникальныйИдентификатор();
	
	НастройкиПериода = Новый Структура("ТекущаяПериодичностьОкнаКолонок, ТекущийИнтервалОкнаКолонок",
		 ТекущаяПериодичностьОкнаКолонок,
		 ТекущийИнтервалОкнаКолонок);
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ПланированиеПродаж.НастройкиПериода",
		 КлючНастроек, НастройкиПериода, ,
		 ТекущийПользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция КолонкаАналитикиДоступнаДляРедактирования(ИмяКолонки)
	
	// Функция только для использования в режиме прогнозирования и работе менеджера.
	// Если аналитика не заполнена - значит, она не была заполнена в плане, и доступна для редактирования.
	// Если аналитика заполнена - если в таблице ДанныеСверху есть такая аналитика, значит, она была спущена сверху,
	// и редактирование недоступно. В ином случае - доступно редактирование.
	
	ЗначениеАналитики = Элементы.ЗаписиПланаПродаж.ТекущиеДанные[ИмяКолонки];
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат КолонкаАналитикиДоступнаДляРедактированияНаСервере(ИмяКолонки, ЗначениеАналитики);
	
КонецФункции

&НаСервере
Функция КолонкаАналитикиДоступнаДляРедактированияНаСервере(ИмяКолонки, ЗначениеАналитики)
	
	ДанныеСверхуТЗ = ДанныеСверху.Выгрузить();
	
	НайденныеСтроки = ДанныеСверхуТЗ.НайтиСтроки(Новый Структура(ИмяКолонки, ЗначениеАналитики));
	
	Возврат (НайденныеСтроки.Количество() = 0);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьДоступностьКолонокАналитик()
	
	ИменаКолонок = ИменаКолонокРазрезов();
	
	Если АРМВРежимеПрогнозирования(РежимАРМ) Тогда 
		
		// Доступность колонок в режиме Прогнозирования рассчитывается в обработчике события Выбор,
		// по умолчанию все колонки доступны для редактирования
		Если ДанныеСверху.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Элементы["ЗаписиПланаПродаж" + ИмяКолонки].ТолькоПросмотр = Ложь;
			Если ЗначениеЗаполнено(ДанныеСверху[ИндексТекДанныхСверху][ИмяКолонки]) Тогда
				Элементы["ЗаписиПланаПродаж" + ИмяКолонки].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Если ДанныеСверху.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Элементы["ЗаписиПланаПродаж" 
				+ ИмяКолонки].ТолькоПросмотр = ЗначениеЗаполнено(ДанныеСверху[ИндексТекДанныхСверху][ИмяКолонки]);
			Если ЗначениеЗаполнено(ДанныеСверху[ИндексТекДанныхСверху][ИмяКолонки]) Тогда
				Элементы["ЗаписиПланаПродаж" + ИмяКолонки].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПланПустой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(CRM_ПланПродаж.ПланПродаж) КАК КоличествоЗаписей
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И CRM_ПланПродаж.УровеньИерархии = &КоличествоУровней";
	
	Запрос.УстановитьПараметр("ПланПродаж", Объект.ПланПродаж);
	// Проверка на прогнозирование имеет смысл, только после ввода строк, которые
	// можно согласовать (строк конечного уровня)
	Запрос.УстановитьПараметр("КоличествоУровней", КоличествоУровнейСхемы());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.КоличествоЗаписей = 0;
	
КонецФункции

&НаСервере
Процедура РассчитатьПрогнозПланаВверх()
	
	ТекИД = ДанныеСверху[ИндексТекДанныхСверху].ИдентификаторСтроки;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность КАК Периодичность,
		|	СУММА(CRM_ПланПродажПрогноз.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	СУММА(CRM_ПланПродажПрогноз.СуммаПрогноз) КАК СуммаПрогноз,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродажПрогноз
		|		ПО CRM_ПланПродаж.ИдентификаторСтроки = CRM_ПланПродажПрогноз.ИдентификаторСтрокиРодителя
		|			И CRM_ПланПродаж.ПериодПлана = CRM_ПланПродажПрогноз.ПериодПланаРодителя
		|			И (CRM_ПланПродаж.ИдентификаторСтроки = &ИдентификаторСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии,
		|	CRM_ПланПродаж.Периодичность,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя";
	
	Пока ЗначениеЗаполнено(ТекИД) Цикл
		Запрос.УстановитьПараметр("ИдентификаторСтроки", ТекИД);
		
		// BSLLS:CreateQueryInCycle-off
		// Выполняется обратно рекурсивно для пересчета итогов
		Выборка = Запрос.Выполнить().Выбрать();
		// BSLLS:CreateQueryInCycle-on
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.CRM_ПланПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланПродаж.Установить(Выборка.ПланПродаж);
			НаборЗаписей.Отбор.ПериодПлана.Установить(Выборка.ПериодПлана);
			НаборЗаписей.Отбор.АналитикаУчетаПланаПродаж.Установить(Выборка.АналитикаУчетаПланаПродаж);
			НаборЗаписей.Отбор.УровеньИерархии.Установить(Выборка.УровеньИерархии);
			НаборЗаписей.Отбор.Периодичность.Установить(Выборка.Периодичность);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НЗ_НС = НаборЗаписей[0];
				НЗ_НС.КоличествоПрогноз = Выборка.КоличествоПрогноз;
				НЗ_НС.СуммаПрогноз = Выборка.СуммаПрогноз;
			КонецЕсли;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат; // Ложь;
			КонецПопытки;
			
			ТекИД = Выборка.ИдентификаторСтрокиРодителя;

		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция РаботаетМенеджер()
	Возврат НЕ (ЭтоАдминистраторПлана ИЛИ РаботаетРуководительПодразделения);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуффиксПрогноз()
	Возврат "Прогноз";
КонецФункции

&НаСервере
Процедура УстановитьОбсуждение(Собеседник, СобеседникЯвляетсяРуководителем)
	
	МЗ = РегистрыСведений.CRM_ОбсужденияПланаПродаж.СоздатьМенеджерЗаписи();
	
	МЗ.ПланПродаж = Объект.ПланПродаж;
	Если СобеседникЯвляетсяРуководителем Тогда
		МЗ.ПользовательРуководитель = Собеседник;
		МЗ.ПользовательПодчиненный = ТекущийПользователь;
	Иначе
		МЗ.ПользовательРуководитель = ТекущийПользователь;
		МЗ.ПользовательПодчиненный = Собеседник;
	КонецЕсли;
	
	МЗ.Записать();
	
	ЗначениеВРеквизитФормы(МЗ, "ТекущаяЗаписьОбсуждения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноОткрытьФорму()
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровПовторногоОткрытия) Тогда
		
		ПараметрыОткрытия = ПолучитьИзВременногоХранилища(АдресПараметровПовторногоОткрытия);
		АдресПараметровПовторногоОткрытия = Неопределено;
		
		Если ОткрытаИзРабочегоСтола Тогда
			ОбщиеПараметры = Новый Структура;
			ТаблицаНастроекРабочегоСтола = CRM_РабочийСтолСервер.ПолучитьТаблицуНастроекРабочегоСтола();
			ПараметрыОткрытия.Вставить("CRM_НастройкиРабочегоСтола", ТаблицаНастроекРабочегоСтола);
			ПараметрыОткрытия.Вставить("скОбщиеПараметры", ОбщиеПараметры);
			
			ПолученнаяФорма = ПолучитьФорму("Обработка.CRM_ПланированиеПродаж.Форма.Форма", ПараметрыОткрытия);
			Если ЗначениеЗаполнено(ИдентификаторФормыРабочегоСтола) Тогда
				ск_глСтекФормРабочегоСтола.Удалить(ИдентификаторФормыРабочегоСтола);
				ск_глСтекФормРабочегоСтола.Вставить(ИдентификаторФормыРабочегоСтола, ПолученнаяФорма);
			КонецЕсли;
			ПолученнаяФорма.Открыть();
		Иначе
			ОткрытьФорму("Обработка.CRM_ПланированиеПродаж.Форма.Форма", ПараметрыОткрытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеПользователя(Пользователь)
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Пользователь.Подразделение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДополнитьПодменюЗаполнить()

	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если ПравоДоступа("Чтение", Метаданные.Документы["ПланПродажПоКатегориям"])
			И Команды.Найти("CRM_Модуль_ЗаполнитьПоПлануПродажКатегории") = Неопределено Тогда
			НовКоманда = Команды.Добавить("CRM_Модуль_ЗаполнитьПоПлануПродажКатегории");
			НовКоманда.Заголовок = НСтр("ru = '... по плану продаж по категориям'");
			НовКоманда.Действие = "CRM_Модуль_ЗаполнитьПоПлануПродаж";
			
			НовЭлемент = Элементы.Добавить("CRM_Модуль_ЗаполнитьПоПлануПродажКатегории", Тип("КнопкаФормы"),
				 Элементы.ПодменюЗаполнить);
			НовЭлемент.ИмяКоманды = "CRM_Модуль_ЗаполнитьПоПлануПродажКатегории";
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы["ПланПродаж"])
			И Команды.Найти("CRM_Модуль_ЗаполнитьПоПлануПродажНоменклатура") = Неопределено Тогда
			НовКоманда = Команды.Добавить("CRM_Модуль_ЗаполнитьПоПлануПродажНоменклатура");
			НовКоманда.Заголовок = НСтр("ru = '... по плану продаж по номенклатуре'");
			НовКоманда.Действие = "CRM_Модуль_ЗаполнитьПоПлануПродаж";
			
			НовЭлемент = Элементы.Добавить("CRM_Модуль_ЗаполнитьПоПлануПродажНоменклатура",
				 Тип("КнопкаФормы"),
				 Элементы.ПодменюЗаполнить);
			НовЭлемент.ИмяКоманды = "CRM_Модуль_ЗаполнитьПоПлануПродажНоменклатура";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПланаПродаж

&НаСервере
Функция ДатаТекущегоПериода(Дата, НачалоПериода, Периодичность)
	
	Смещение = - ИнтервалОкнаПоДате(Периодичность, НачалоПериода);
	
	Если Периодичность = Перечисления.Периодичность.Неделя
		ИЛИ Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		ПериодыПериодичности = МассивПериодов(Периодичность, Дата, НачалоДня(Объект.ПланПродаж.НачалоПериода));
		РезультатИнтервал = ПериодыПериодичности.Количество();
		Если РезультатИнтервал = Неопределено Тогда
			РезультатИнтервал = -1;
		КонецЕсли;
		Возврат РезультатИнтервал;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Смещение", Смещение);

		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(&Дата, <Периодичность>, &Смещение) КАК Дата";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "<Периодичность>", ВРег(Периодичность));

		Возврат Запрос.Выполнить().Выгрузить()[0].Дата;
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПланыПрошлогоПериода()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ПланПродаж.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ПланПродаж КАК CRM_ПланПродаж
	                      |ГДЕ
	                      |	CRM_ПланПродаж.СхемаПланаПродаж = &СхемаПланаПродаж
	                      |	И CRM_ПланПродаж.НачалоПериода < &НачалоПериода");
	
	Запрос.УстановитьПараметр("СхемаПланаПродаж", Объект.ПланПродаж.СхемаПланаПродаж);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ПланПродаж.НачалоПериода);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПлануСервер(ПланИсточник, ОчиститьТекщиеДанные)
	
	пАРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);

	Если ОчиститьТекщиеДанные Тогда
		Если Элементы.ЗаписиПланаПродаж.ОтборСтрок = Неопределено Тогда
			ЗаписиПланаПродаж.Очистить();
		Иначе
			СтрокиПлана = ЗаписиПланаПродаж.НайтиСтроки(Новый Структура(Элементы.ЗаписиПланаПродаж.ОтборСтрок));
			Для каждого Строка Из СтрокиПлана Цикл
				ЗаписиПланаПродаж.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ СтрокаРодитель
	               |ИЗ
	               |	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
	               |ГДЕ
	               |	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
	               |	И CRM_ПланПродаж.ЭтоПрогноз = &РежимПрогнозирования
	               |	И CRM_ПланПродаж.УровеньИерархии = &УровеньИерархииРодитель
	               |	И ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение КАК Подразделение,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер КАК Менеджер,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер КАК Партнер,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура КАК Номенклатура,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1 КАК Аналитика1,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2 КАК Аналитика2,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3 КАК Аналитика3,
	               |	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад КАК Склад,
	               |	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
	               |	CRM_ПланПродаж.Периодичность КАК Периодичность,
	               |	CRM_ПланПродаж.Количество КАК Количество,
	               |	CRM_ПланПродаж.Сумма КАК Сумма,
	               |	CRM_ПланПродаж.КоличествоПрогноз КАК КоличествоПрогноз,
	               |	CRM_ПланПродаж.СуммаПрогноз КАК СуммаПрогноз,
	               |	CRM_ПланПродаж.Комментарий КАК Комментарий,
	               |	CRM_ПланПродаж.ЭтоПрогноз КАК ЭтоПрогноз,
	               |	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана
	               |ИЗ
	               |	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокаРодитель КАК СтрокаРодитель
	               |		ПО (СтрокаРодитель.ИдентификаторСтроки = CRM_ПланПродаж.ИдентификаторСтрокиРодителя)
	               |ГДЕ
	               |	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
	               |	И CRM_ПланПродаж.ЭтоПрогноз = &РежимПрогнозирования
	               |	И CRM_ПланПродаж.УровеньИерархии = &УровеньИерархии
	               |	И CRM_ПланПродаж.ПериодПлана >= &ДатаНачала
	               |	И CRM_ПланПродаж.ПериодПлана <= &ДатаОкончания
	               |ИТОГИ
	               |	МАКСИМУМ(АналитикаУчетаПланаПродаж),
	               |	МАКСИМУМ(Подразделение),
	               |	МАКСИМУМ(Менеджер),
	               |	МАКСИМУМ(Партнер),
	               |	МАКСИМУМ(Номенклатура),
	               |	МАКСИМУМ(Аналитика1),
	               |	МАКСИМУМ(Аналитика2),
	               |	МАКСИМУМ(Аналитика3),
	               |	МАКСИМУМ(Склад),
	               |	СУММА(Количество),
	               |	СУММА(Сумма),
	               |	СУММА(КоличествоПрогноз),
	               |	СУММА(СуммаПрогноз)
	               |ПО
	               |	ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("ПланПродаж", ПланИсточник);
	Запрос.УстановитьПараметр("УровеньИерархии", ТекущийУровеньИерархии + 1);
	Запрос.УстановитьПараметр("УровеньИерархииРодитель", ТекущийУровеньИерархии);
	Запрос.УстановитьПараметр("РежимПрогнозирования", пАРМВРежимеПрогнозирования);
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок, ПланИсточник.НачалоПериода,
			ТекущийИнтервалОкнаКолонок);	
	Запрос.УстановитьПараметр("ДатаНачала", ДатыОкнаКолонок.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатыОкнаКолонок.ДатаОкончания);

	Разрезы = ИменаКолонокРазрезов();
	Разрезы.Добавить("Подразделение");
	Если ТекущийУровеньИерархии > 0 Тогда
		Условие = "";
		СтрокаДанныхСверху = ДанныеСверху[ИндексТекДанныхСверху];
		Для каждого ИмяРазреза Из Разрезы Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхСверху[ИмяРазреза]) Тогда
				Условие = Условие + "
									|	И CRM_ПланПродаж.АналитикаУчетаПланаПродаж." + ИмяРазреза + " = &Параметр" + ИмяРазреза;
				Запрос.УстановитьПараметр("Параметр" + ИмяРазреза, СтрокаДанныхСверху[ИмяРазреза]);
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", Условие);
		Если ЗначениеЗаполнено(СтрокаДанныхСверху.ИдентификаторСтроки) Тогда
			ИдентификаторСтрокиРодителя = СтрокаДанныхСверху.ИдентификаторСтроки;
		Иначе
			ИдентификаторСтрокиРодителя = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("", 255,
				 " "); // для корректного отбора через ОтборСтрок в элементе ТЗ
		КонецЕсли;
	Иначе
		ИдентификаторСтрокиРодителя = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("", 255,
			 " "); // для корректного отбора через ОтборСтрок в элементе ТЗ
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ", "ЛЕВОЕ СОЕДИНЕНИЕ");
	КонецЕсли;
	
	Идентификаторы = Новый Соответствие;
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтроки.Следующий() Цикл
		ВыборкаДетали = ВыборкаСтроки.Выбрать();
		
		СтруктураПоиска = Новый Структура("ПланПродаж, ИдентификаторСтрокиРодителя", Объект.ПланПродаж,
			 ИдентификаторСтрокиРодителя);
		Для каждого ИмяРазреза Из Разрезы Цикл
			СтруктураПоиска.Вставить(ИмяРазреза, ВыборкаСтроки[ИмяРазреза]);
		КонецЦикла;
		Строки = ЗаписиПланаПродаж.НайтиСтроки(СтруктураПоиска);
		Если (Строки.Количество() > 0) Тогда
			НовСтр = Строки[0];
		Иначе
			НовСтр = ЗаписиПланаПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСтроки);
			НовСтр.ПланПродаж = Объект.ПланПродаж;
			НовСтр.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			НовСтр.ИдентификаторСтрокиРодителя = ИдентификаторСтрокиРодителя;
		КонецЕсли;
		НовСтр.ДатаИзменения = ТекущаяДатаСеанса();
		НовСтр.АвторИзменения = ТекущийПользователь;

		ИтогоЗаПериодыСумма = НовСтр["ИтогоЗаПериодыСумма"];
		ИтогоЗаПериодыКоличество = НовСтр["ИтогоЗаПериодыКоличество"];
		ИтогоЗаПериодыСуммаПрогноз = НовСтр["ИтогоЗаПериодыСуммаПрогноз"];
		ИтогоЗаПериодыКоличествоПрогноз = НовСтр["ИтогоЗаПериодыКоличествоПрогноз"];
		ИтогоЗаПериодыСуммаФакт = 0;
		ИтогоЗаПериодыКоличествоФакт = 0;
		Пока ВыборкаДетали.Следующий() Цикл

			Если пАРМВРежимеПрогнозирования И РаботаетМенеджер() Тогда
				ЗначениеПоказателяСумма = ВыборкаДетали.СуммаПрогноз;
				ЗначениеПоказателяКоличество = ВыборкаДетали.КоличествоПрогноз;
			Иначе
				ЗначениеПоказателяСумма = ВыборкаДетали.Сумма;
				ЗначениеПоказателяКоличество = ВыборкаДетали.Количество;
			КонецЕсли;
			
			ПериодТекущегоПлана = ДатаТекущегоПериода(ВыборкаДетали.ПериодПлана, ПланИсточник.НачалоПериода,
				 ВыборкаДетали.Периодичность);
			ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма()) + Формат(ПериодТекущегоПлана, "ДФ=yyyyMMdd");
			НовСтр[ИмяКолонкиСумма] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяСумма, ВидПоказателяСумма());
			ИтогоЗаПериодыСумма = ИтогоЗаПериодыСумма + НовСтр[ИмяКолонкиСумма];
			
			ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество()) + Формат(ПериодТекущегоПлана, "ДФ=yyyyMMdd");
			НовСтр[ИмяКолонкиКоличество] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяКоличество,
				 ВидПоказателяКоличество());
			ИтогоЗаПериодыКоличество = ИтогоЗаПериодыКоличество + НовСтр[ИмяКолонкиКоличество];
		
		КонецЦикла;

		НовСтр["ИтогоЗаПериодыСумма"] = ИтогоЗаПериодыСумма;
		НовСтр["ИтогоЗаПериодыКоличество"] = ИтогоЗаПериодыКоличество;
		НовСтр["ИтогоЗаПериодыСуммаПрогноз"] = ИтогоЗаПериодыСуммаПрогноз;
		НовСтр["ИтогоЗаПериодыКоличествоПрогноз"] = ИтогоЗаПериодыКоличествоПрогноз;
			
	КонецЦикла;

	ОбновитьИтогиОкнаПериодов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПродажамСервер(ВыбранныйПериод, ОчиститьТекщиеДанные)
	
	пАРМВРежимеПрогнозирования = АРМВРежимеПрогнозирования(РежимАРМ);

	Если ОчиститьТекщиеДанные Тогда
		Если Элементы.ЗаписиПланаПродаж.ОтборСтрок = Неопределено Тогда
			ЗаписиПланаПродаж.Очистить();
		Иначе
			СтрокиПлана = ЗаписиПланаПродаж.НайтиСтроки(Новый Структура(Элементы.ЗаписиПланаПродаж.ОтборСтрок));
			Для каждого Строка Из СтрокиПлана Цикл
				ЗаписиПланаПродаж.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ПродажиОбороты.Номенклатура КАК Номенклатура,
		               |	CRM_ПродажиОбороты.КоличествоОборот КАК Количество,
		               |	CRM_ПродажиОбороты.СтоимостьОборот КАК Сумма,
		               |	CRM_ПродажиОбороты.Период КАК Период
		               |ИЗ
		               |	РегистрНакопления.CRM_Продажи.Обороты(&НачалоПериода, &КонецПериода, Декада, &Условие) КАК CRM_ПродажиОбороты";
	Иначе
// BSLLS:QueryToMissingMetadata-off
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ВыручкаИСебестоимостьПродаж.КоличествоОборот КАК Количество,
		               |	ВыручкаИСебестоимостьПродаж.СуммаВыручкиОборот КАК Сумма,
		               |	ВыручкаИСебестоимостьПродаж.Период КАК Период
		               |ИЗ
		               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода,
					   |		Декада, &Условие) КАК ВыручкаИСебестоимостьПродаж";
// BSLLS:QueryToMissingMetadata-on
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", ВыбранныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ВыбранныйПериод.ДатаОкончания);

	Схема = Объект.ПланПродаж.СхемаПланаПродаж;
	Периодичность = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Схема, ТекущийУровеньИерархии + 1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ", Декада", ", " + Строка(Периодичность));
	Разрезы = Справочники.CRM_СхемаПланаПродаж.РазрезыУровняИерархии(Схема, ТекущийУровеньИерархии + 1, Ложь, Ложь);
	Измерения = "";
	МассивИзмерений = Новый Массив;
	Для каждого Разрез Из Разрезы Цикл
		ИмяИзмерения = Разрез.Разрез.ИмяПредопределенныхДанных;
		Измерения = Измерения + "
								|	CRM_ПродажиОбороты." + ИмяИзмерения + " КАК " + ИмяИзмерения + ",";
		МассивИзмерений.Добавить(ИмяИзмерения);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_ПродажиОбороты.Номенклатура КАК Номенклатура,", Измерения);
	
	Условие = "";
	Если (ТекущийУровеньИерархии > 0) Тогда
		СтрокаДанныхСверху = ДанныеСверху[ИндексТекДанныхСверху];
		РазрезыСверху = Справочники.CRM_СхемаПланаПродаж.РазрезыУровняИерархии(Схема, ТекущийУровеньИерархии, Ложь, Ложь);
		Для каждого Разрез Из РазрезыСверху Цикл
			ИмяРазреза = Разрез.Разрез.ИмяПредопределенныхДанных;
			Если ЗначениеЗаполнено(СтрокаДанныхСверху[ИмяРазреза]) Тогда
				Если ИмяРазреза = "Подразделение" Тогда
					Если МассивИзмерений.Найти(ИмяРазреза) = Неопределено Тогда
						Условие = Условие + ?(Условие = "", "", "И ") + ИмяРазреза + " = &Параметр" + ИмяРазреза;
					Иначе
						Условие = Условие + ?(Условие = "", "", "И ") + ИмяРазреза + ".Родитель = &Параметр" + ИмяРазреза;
					КонецЕсли;
				Иначе
					Условие = Условие + ?(Условие = "", "", "И ") + ИмяРазреза + " = &Параметр" + ИмяРазреза;
				КонецЕсли;
				Запрос.УстановитьПараметр("Параметр" + ИмяРазреза, СтрокаДанныхСверху[ИмяРазреза]);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаДанныхСверху.ИдентификаторСтроки) Тогда
			ИдентификаторСтрокиРодителя = СтрокаДанныхСверху.ИдентификаторСтроки;
		Иначе
			ИдентификаторСтрокиРодителя = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("", 255,
				 " "); // для корректного отбора через ОтборСтрок в элементе ТЗ
		КонецЕсли;
	Иначе
		ИдентификаторСтрокиРодителя = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("", 255,
			 " "); // для корректного отбора через ОтборСтрок в элементе ТЗ
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИдентификаторСтрокиРодителя", ИдентификаторСтрокиРодителя);
	Пока Выборка.Следующий() Цикл
		Для Каждого Измерение Из МассивИзмерений Цикл
			СтруктураОтбора.Вставить(Измерение, Выборка[Измерение]);
		КонецЦикла;
		
		Строки = ЗаписиПланаПродаж.НайтиСтроки(СтруктураОтбора);
		
		Если (Строки.Количество() = 0) Тогда
			НовСтр = ЗаписиПланаПродаж.Добавить();
			НовСтр.ПланПродаж = Объект.ПланПродаж;
			НовСтр.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			НовСтр.ИдентификаторСтрокиРодителя = ИдентификаторСтрокиРодителя;
			НовСтр.Периодичность = Периодичность;
			НовСтр.УровеньИерархии = ТекущийУровеньИерархии + 1;
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		Иначе
			НовСтр = Строки[0];
		КонецЕсли;
		НовСтр.ДатаИзменения = ТекущаяДатаСеанса();
		НовСтр.АвторИзменения = ТекущийПользователь;

		ЗначениеПоказателяСумма = Выборка.Сумма;
		ЗначениеПоказателяКоличество = Выборка.Количество;

		ПериодТекущегоПлана = ДатаТекущегоПериода(Выборка.Период, ВыбранныйПериод.ДатаНачала, Периодичность);
		ИмяКолонкиСумма = ПрефиксКолонкиПериода(ВидПоказателяСумма()) + Формат(ПериодТекущегоПлана, "ДФ=yyyyMMdd");
		НовСтр[ИмяКолонкиСумма] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяСумма, ВидПоказателяСумма());

		ИмяКолонкиКоличество = ПрефиксКолонкиПериода(ВидПоказателяКоличество()) + Формат(ПериодТекущегоПлана, "ДФ=yyyyMMdd");
		НовСтр[ИмяКолонкиКоличество] = КонвертироватьЗначениеПоказателя(ЗначениеПоказателяКоличество,
			 ВидПоказателяКоличество());

		НовСтр["ИтогоЗаПериодыСумма"] = НовСтр["ИтогоЗаПериодыСумма"] + НовСтр[ИмяКолонкиСумма];
		НовСтр["ИтогоЗаПериодыКоличество"] = НовСтр["ИтогоЗаПериодыКоличество"] + НовСтр[ИмяКолонкиКоличество];
		НовСтр["ИтогоЗаПериодыСуммаПрогноз"] = НовСтр["ИтогоЗаПериодыСумма"];
		НовСтр["ИтогоЗаПериодыКоличествоПрогноз"] = НовСтр["ИтогоЗаПериодыКоличество"];
			
	КонецЦикла;

	ОбновитьИтогиОкнаПериодов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодыВыбора(Начало, Периодичность, Вперед)
	
	Периоды = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин) КАК НачалоПериода1,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин), ГОД) КАК КонецПериода1,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*2) КАК НачалоПериода2,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*2), ГОД) КАК КонецПериода2,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*3) КАК НачалоПериода3,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*3), ГОД) КАК КонецПериода3,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*4) КАК НачалоПериода4,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*4), ГОД) КАК КонецПериода4,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*5) КАК НачалоПериода5,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*5), ГОД) КАК КонецПериода5,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*6) КАК НачалоПериода6,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*6), ГОД) КАК КонецПериода6,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*7) КАК НачалоПериода7,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*7), ГОД) КАК КонецПериода7,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*8) КАК НачалоПериода8,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*8), ГОД) КАК КонецПериода8,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*9) КАК НачалоПериода9,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*9), ГОД) КАК КонецПериода9,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*10) КАК НачалоПериода10,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*10), ГОД) КАК КонецПериода10,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*11) КАК НачалоПериода11,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*11), ГОД) КАК КонецПериода11,
	                      |	ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*12) КАК НачалоПериода12,
	                      |	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ГОД, &ПлюсМинусОдин*12), ГОД) КАК КонецПериода12");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГОД", Строка(Периодичность));
	Запрос.УстановитьПараметр("Дата", Начало);
	Запрос.УстановитьПараметр("ПлюсМинусОдин", ?(Вперед, 1, -1));

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода1, Выборка.КонецПериода1),
			ПредставлениеПериода(Выборка.НачалоПериода1, Выборка.КонецПериода1, "ФП = Истина")); 		
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода2, Выборка.КонецПериода2),
			ПредставлениеПериода(Выборка.НачалоПериода2, Выборка.КонецПериода2, "ФП = Истина")); 		
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода3, Выборка.КонецПериода3),
			ПредставлениеПериода(Выборка.НачалоПериода3, Выборка.КонецПериода3, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода4, Выборка.КонецПериода4),
			ПредставлениеПериода(Выборка.НачалоПериода4, Выборка.КонецПериода4, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода5, Выборка.КонецПериода5),
			ПредставлениеПериода(Выборка.НачалоПериода5, Выборка.КонецПериода5, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода6, Выборка.КонецПериода6),
			ПредставлениеПериода(Выборка.НачалоПериода6, Выборка.КонецПериода6, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода7, Выборка.КонецПериода7),
			ПредставлениеПериода(Выборка.НачалоПериода7, Выборка.КонецПериода7, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода8, Выборка.КонецПериода8),
			ПредставлениеПериода(Выборка.НачалоПериода8, Выборка.КонецПериода8, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода9, Выборка.КонецПериода9),
			ПредставлениеПериода(Выборка.НачалоПериода9, Выборка.КонецПериода9, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода10, Выборка.КонецПериода10),
			ПредставлениеПериода(Выборка.НачалоПериода10, Выборка.КонецПериода10, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода11, Выборка.КонецПериода11),
			ПредставлениеПериода(Выборка.НачалоПериода11, Выборка.КонецПериода11, "ФП = Истина"));
		Периоды.Добавить(Новый СтандартныйПериод(Выборка.НачалоПериода12, Выборка.КонецПериода12),
			ПредставлениеПериода(Выборка.НачалоПериода12, Выборка.КонецПериода12, "ФП = Истина"));
	КонецЕсли;
	
	Возврат Периоды;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборПериода(Начало, Периодичность, Вперед, ОписаниеОповещения, Элемент)
	
	Периоды = ПериодыВыбора(Начало, Периодичность, Вперед);
	НачалоПервого = Периоды[0].Значение.ДатаНачала;
	НачалоПоследнего = Периоды[11].Значение.ДатаНачала;
	Периоды.Добавить("Далее", НСтр("ru = 'Далее...'"));

	ПараметрыВыбора = Новый Структура("Начало, Периодичность, Вперед, ОписаниеОповещения, Элемент,
		| НачалоПервого, НачалоПоследнего",
		Начало, Периодичность, Вперед, ОписаниеОповещения, Элемент, НачалоПервого, НачалоПоследнего); 
	ОписаниеОповещенияДоп = Новый ОписаниеОповещения("ПоказатьВыборПериодаПродолжение", ЭтотОбъект, ПараметрыВыбора);
	ПоказатьВыборИзМеню(ОписаниеОповещенияДоп, Периоды, Элемент); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборПериодаПродолжение(ВыбранныйЭлемент, ПараметрыВыбора) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранныйЭлемент.Значение) = Тип("СтандартныйПериод") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыбора.ОписаниеОповещения, ВыбранныйЭлемент.Значение);
	Иначе
		Если ВыбранныйЭлемент.Значение = "Далее" Тогда
			Периоды = ПериодыВыбора(ПараметрыВыбора.НачалоПоследнего, ПараметрыВыбора.Периодичность, ПараметрыВыбора.Вперед);
		ИначеЕсли  ВыбранныйЭлемент.Значение = "Назад" Тогда
			Периоды = ПериодыВыбора(ПараметрыВыбора.НачалоПервого, ПараметрыВыбора.Периодичность, ПараметрыВыбора.Вперед);
		КонецЕсли;
		Периоды.Добавить("Далее", НСтр("ru = 'Далее...'"));
		
		ПараметрыВыбора.Вставить("НачалоПервого", Периоды[0].Значение.ДатаНачала);
		ПараметрыВыбора.Вставить("НачалоПоследнего", Периоды[11].Значение.ДатаНачала);
		ОписаниеОповещенияДоп = Новый ОписаниеОповещения("ПоказатьВыборПериодаПродолжение", ЭтотОбъект, ПараметрыВыбора);
		ПоказатьВыборИзМеню(ОписаниеОповещенияДоп, Периоды, ПараметрыВыбора.Элемент); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


// +CRM_Модуль
#Область CRM_Модуль

&НаКлиенте
Процедура CRM_Модуль_ЗаполнитьПоПлануПродаж(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_Модуль_ЗаполнитьПоПлануПродажПродолжение", ЭтотОбъект);
	ПараметрыВыбора = Новый Структура;
	Если Команда.Имя = "CRM_Модуль_ЗаполнитьПоПлануПродажКатегории" Тогда
		ФормаВыбора = ПолучитьФорму("Документ.ПланПродажПоКатегориям.ФормаВыбора", ПараметрыВыбора, ЭтотОбъект);
	ИначеЕсли Команда.Имя = "CRM_Модуль_ЗаполнитьПоПлануПродажНоменклатура" Тогда
		ФормаВыбора = ПолучитьФорму("Документ.ПланПродаж.ФормаВыбора", ПараметрыВыбора, ЭтотОбъект);
	КонецЕсли;
	ДатыПланаПродаж = ДатыПланаПродаж();
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок,
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ПланПродаж, "НачалоПериода"),
		ТекущийИнтервалОкнаКолонок);	
	ДатаНачалаОкна = ДатыОкнаКолонок.ДатаНачала;
	ДатаОкончанияОкна = ДатыОкнаКолонок.ДатаОкончания;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора.Список,
		"НачалоПериода", Макс(ДатаНачалаОкна, ДатыПланаПродаж.ДатаНачалаПлана), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора.Список,
		"ОкончаниеПериода", Мин(ДатаОкончанияОкна, ДатыПланаПродаж.ДатаОкончанияПлана), ВидСравненияКомпоновкиДанных.БольшеИлиРавно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора.Список,
		"Периодичность", ПериодичностьПодчиненногоУровняСхемы, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура CRM_Модуль_ЗаполнитьПоПлануПродажПродолжение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		CRM_Модуль_ЗаполнитьПоПлануПродажСервер(Результат);
		ОбновитьИтоги();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура CRM_Модуль_ЗаполнитьПоПлануПродажСервер(ПланПродаж)
	
	Если Не ЗначениеЗаполнено(ПланПродаж) Тогда Возврат; КонецЕсли;
	
	ИспользуетсяМенеджер = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.Пользователи"));
	ИспользуетсяНоменклатура = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.Номенклатура"));
	ИспользуетсяПодразделение = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.СтруктураПредприятия"));
	ИспользуетсяКатегория = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.ТоварныеКатегории"));
	ИспользуетсяСклад = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.Склады"));
	ИспользуетсяПартнер = Справочники.CRM_СхемаПланаПродаж.УровеньСодержитТипИерархии(СхемаПланаПродаж, ТекущийУровеньИерархии+1, Тип("СправочникСсылка.Партнеры"));
	
	Разрезы = Новый Массив;
	Если ТипЗнч(ПланПродаж) = Тип("ДокументСсылка.ПланПродаж") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПланыПродаж.Период КАК Период,
		                      |	"+?(ИспользуетсяНоменклатура, "ПланыПродаж.Номенклатура КАК Номенклатура,", "") +"
		                      |	"+?(ИспользуетсяПодразделение, "ПланыПродаж.Подразделение КАК Подразделение,", "") +"
		                      |	"+?(ИспользуетсяСклад, "ПланыПродаж.Склад КАК Склад,", "") +"
		                      |	"+?(ИспользуетсяПартнер, "ПланыПродаж.Партнер КАК Партнер,", "") +"
		                      |	"+?(ИспользуетсяМенеджер, "ПланыПродаж.Менеджер КАК Менеджер,", "") +"
		                      |	СУММА(ПланыПродаж.Количество) КАК Количество,
		                      |	СУММА(ПланыПродаж.Сумма) КАК Сумма
		                      |ИЗ
		                      |	РегистрНакопления.ПланыПродаж КАК ПланыПродаж
		                      |
		                      |ГДЕ
		                      |	ПланыПродаж.Регистратор = &ПланПродаж
		                      | И ПланыПродаж.Период >= &НачалоПериода
		                      |	И ПланыПродаж.Период <= &ОкончаниеПериода
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	"+?(ИспользуетсяНоменклатура, "ПланыПродаж.Номенклатура,", "") +"
		                      |	"+?(ИспользуетсяПодразделение, "ПланыПродаж.Подразделение,", "") +"
		                      |	"+?(ИспользуетсяСклад, "ПланыПродаж.Склад,", "") +"
		                      |	"+?(ИспользуетсяПартнер, "ПланыПродаж.Партнер,", "") +"
		                      |	"+?(ИспользуетсяМенеджер, "ПланыПродаж.Менеджер,", "") +"
		                      |	ПланыПродаж.Период");
		
		Если ИспользуетсяНоменклатура Тогда
			Разрезы.Добавить("Номенклатура");
		КонецЕсли;
		Если ИспользуетсяПодразделение Тогда
			Разрезы.Добавить("Подразделение");
		КонецЕсли;
		Если ИспользуетсяСклад Тогда
			Разрезы.Добавить("Склад");
		КонецЕсли;
		Если ИспользуетсяПартнер Тогда
			Разрезы.Добавить("Партнер");
		КонецЕсли;
		Если ИспользуетсяМенеджер Тогда
			Разрезы.Добавить("Менеджер");
		КонецЕсли;
		ЗаполнятьСумму = ИспользоватьСумму;
		ЗаполнятьКоличество = ИспользоватьКоличество;
	ИначеЕсли ТипЗнч(ПланПродаж) = Тип("ДокументСсылка.ПланПродажПоКатегориям") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПланыПродажПоКатегориям.Период КАК Период,
		                      |	"+?(ИспользуетсяКатегория, "ПланыПродажПоКатегориям.ТоварнаяКатегория КАК ТоварнаяКатегория,", "") +"
		                      |	"+?(ИспользуетсяСклад, "ПланыПродажПоКатегориям.Склад КАК Склад,", "") +"
		                      |	"+?(ИспользуетсяПодразделение, "ПланыПродажПоКатегориям.Подразделение КАК Подразделение,", "") +"
		                      |	СУММА(ПланыПродажПоКатегориям.Количество) КАК Количество
		                      |ИЗ
		                      |	РегистрНакопления.ПланыПродажПоКатегориям КАК ПланыПродажПоКатегориям
		                      |
		                      |ГДЕ
		                      |	ПланыПродажПоКатегориям.Регистратор = &ПланПродаж
		                      | И ПланыПродажПоКатегориям.Период >= &НачалоПериода
		                      |	И ПланыПродажПоКатегориям.Период <= &ОкончаниеПериода
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	"+?(ИспользуетсяКатегория, "ПланыПродажПоКатегориям.ТоварнаяКатегория,", "") +"
		                      |	"+?(ИспользуетсяСклад, "ПланыПродажПоКатегориям.Склад,", "") +"
		                      |	"+?(ИспользуетсяПодразделение, "ПланыПродажПоКатегориям.Подразделение,", "") +"
		                      |	ПланыПродажПоКатегориям.Период");
		
		Если ИспользуетсяКатегория Тогда
			Разрезы.Добавить("ТоварнаяКатегория");
		КонецЕсли;
		Если ИспользуетсяПодразделение Тогда
			Разрезы.Добавить("Подразделение");
		КонецЕсли;
		Если ИспользуетсяСклад Тогда
			Разрезы.Добавить("Склад");
		КонецЕсли;
		ЗаполнятьСумму = Ложь;
		ЗаполнятьКоличество = ИспользоватьКоличество;
	Иначе
		Возврат;
	КонецЕсли;
	ДатыПланаПродаж = ДатыПланаПродаж();
	ДатыОкнаКолонок = ДатыОкнаКолонок(ТекущаяПериодичностьОкнаКолонок,
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ПланПродаж, "НачалоПериода"),
		ТекущийИнтервалОкнаКолонок);	
	ДатаНачалаОкна = ДатыОкнаКолонок.ДатаНачала;
	ДатаОкончанияОкна = ДатыОкнаКолонок.ДатаОкончания;
	Запрос.УстановитьПараметр("ПланПродаж", ПланПродаж);
	Запрос.УстановитьПараметр("НачалоПериода", Макс(ДатаНачалаОкна, ДатыПланаПродаж.ДатаНачалаПлана));
	Запрос.УстановитьПараметр("ОкончаниеПериода", Мин(ДатаОкончанияОкна, ДатыПланаПродаж.ДатаОкончанияПлана));
	
	ДанныеЗаполнения = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеСверху.Количество() > 0 Тогда
		ЗаписьСверху = ДанныеСверху[ИндексТекДанныхСверху];
	Иначе
		ЗаписьСверху = Неопределено;
	КонецЕсли;
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ТекСтрока = Неопределено;
		Если Разрезы.Количество()>0 Тогда
			ПараметрыПоиска = Новый Структура;
			Для каждого Разрез Из Разрезы Цикл
				ПараметрыПоиска.Вставить(Разрез, Строка[Разрез]);
			КонецЦикла;
			НайденыСтр = ЗаписиПланаПродаж.НайтиСтроки(ПараметрыПоиска);
			Если НайденыСтр.Количество()>0 Тогда
				ТекСтрока = НайденыСтр[0];
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока = Неопределено Тогда
			
			ТекСтрока = ЗаписиПланаПродаж.Добавить();
			
			ТекСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ТекСтрока.ПланПродаж = Объект.ПланПродаж;
			ТекСтрока.УровеньИерархии = ТекущийУровеньИерархии + 1;
			ТекСтрока.Периодичность = 
				Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(Объект.ПланПродаж.СхемаПланаПродаж, ТекСтрока.УровеньИерархии);
			
			Если ЗаписьСверху <> Неопределено Тогда
			
				ОбщийСписокИсключаемыхСвойств = ", АналитикаУчетаПланаПродаж, ДатаИзменения, АвторИзменения, Комментарий, Согласовано, УровеньИерархии, ИдентификаторСтроки, Периодичность, ПланПродаж";
		
				Если РаботаСЗаписямиКонечныхУровней() Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрока, ЗаписьСверху,, ОбщийСписокИсключаемыхСвойств);
				Иначе
					ЗаполнитьЗначенияСвойств(ТекСтрока, ЗаписьСверху,,"Подразделение, Менеджер" + ОбщийСписокИсключаемыхСвойств);
				КонецЕсли;
				ТекСтрока.ИдентификаторСтрокиРодителя = ЗаписьСверху.ИдентификаторСтроки;
				
			КонецЕсли;
			
			Для каждого Разрез Из Разрезы Цикл
				ТекСтрока[Разрез] = Строка[Разрез];
			КонецЦикла;
			
		КонецЕсли;
		Если ЗаполнятьСумму Тогда
			ИмяКолонки = ПрефиксКолонкиПериода("Сумма", "") + Формат(Строка.Период, "ДФ=yyyyMMdd");
			
			СуммаЗаВсеПериоды = ТекСтрока.ИтогоЗаПериодыСумма - ТекСтрока[ИмяКолонки] + Строка["Сумма"];
			СуммаЗаПериодыОкна = ТекСтрока.ИтогоЗаПериодыОкнаСумма - ТекСтрока[ИмяКолонки] + Строка["Сумма"];
			
			ТекСтрока[ИмяКолонки] = Строка["Сумма"];
			
			ТекСтрока.ИтогоЗаПериодыСумма = СуммаЗаВсеПериоды;
			ТекСтрока.ИтогоЗаПериодыОкнаСумма = СуммаЗаПериодыОкна;
		КонецЕсли;
		
		Если ЗаполнятьКоличество Тогда
			ИмяКолонки = ПрефиксКолонкиПериода("Количество", "") + Формат(Строка.Период, "ДФ=yyyyMMdd");
			
			КоличествоЗаВсеПериоды = ТекСтрока.ИтогоЗаПериодыКоличество - ТекСтрока[ИмяКолонки] + Строка["Количество"];
			КоличествоЗаПериодыОкна = ТекСтрока.ИтогоЗаПериодыОкнаКоличество - ТекСтрока[ИмяКолонки] + Строка["Количество"];
			
			ТекСтрока[ИмяКолонки] = Строка["Количество"];
			
			ТекСтрока.ИтогоЗаПериодыКоличество = КоличествоЗаВсеПериоды;
			ТекСтрока.ИтогоЗаПериодыОкнаКоличество = КоличествоЗаПериодыОкна;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписьСверху <> Неопределено И ЗаписьСверху.Согласовано Тогда
		ЗаписьСверху.Согласовано = Ложь;
		ЗаписьСверху.СогласованоПодчиненные = Ложь;
		ЗаписьСверху.СтрокаИзменена = Истина;
		ДанныеСверхуИзменены = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуЗаписейПланаПродажСверху();
	
КонецПроцедуры

#КонецОбласти
// -CRM_Модуль
