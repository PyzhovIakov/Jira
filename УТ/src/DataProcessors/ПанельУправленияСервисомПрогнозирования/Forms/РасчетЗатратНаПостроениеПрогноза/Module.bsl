
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Сценарий = Параметры.Сценарий; // СправочникСсылка.СценарииТоварногоПланирования -
	ВидПлана = Параметры.ВидПлана; // СправочникСсылка.ВидыПланов -
	
	ТекстОшибки = Обработки.ПанельУправленияСервисомПрогнозирования.ОбновитьМодельВСервисе(ВидПлана);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СтоимостьОбучения = СервисПрогнозирования.ПолучитьСтоимостьОбученияМодели(ВидПлана);
	Если Не ПустаяСтрока(СтоимостьОбучения.ТекстОшибки) Тогда
		ТекстОшибки = СтоимостьОбучения.ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	НастройкиВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "Периодичность, ТипПлана, НачалоПрогнозирования,
		|ЗаполнятьСкладВТЧ, ЗаполнятьПартнераВТЧ, ЗаполнятьПоХарактеристикамНоменклатуры");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиВидаПлана);
	
	ЗаполнитьПеременныеРасчета(СтоимостьОбучения.ДесериализованноеЗначение);
	БалансОстаток = Параметры.Баланс - КоличествоНеобходимыхЕдиниц;
	
	УстановитьЗаголовкиЭлементовФормы();
	Элементы.ГруппаДанныеПрогноза.Скрыть();
	Элементы.ГруппаПравилаСписанияБаланса.Скрыть();
	
	ЗаполнитьСводкуДанныхПрогноза();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		// Отмена из-за ошибки в запросах по модели
		Оповестить("ЗапуститьОбучение", ТекстОшибки, ВладелецФормы);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапроситьПрогноз(Команда)
	
	Оповестить("ЗапуститьОбучение", "", ВладелецФормы);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВКалькулятор(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СервисПрогнозированияПереопределяемыйКлиентСервер.СсылкаНаКалькуляторРасчетаЗатратНаПостроениеПрогноза());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовкиЭлементовФормы()
	
	Элементы.СписаниеБаланса.Заголовок = СтрШаблон(Элементы.СписаниеБаланса.Заголовок,
		КоличествоНеобходимыхЕдиниц);
	Если БалансОстаток < 0 Тогда
		Элементы.ИзменениеБалансаПоложительный.Видимость = Ложь;
		Элементы.ИзменениеБалансаОтрицательный.Видимость = Истина;
		БалансВЗаголовке = БалансОстаток * -1;
		Элементы.ИзменениеБалансаОтрицательный.Заголовок = СтрШаблон(Элементы.ИзменениеБалансаОтрицательный.Заголовок,
			БалансВЗаголовке);
	Иначе
		Элементы.ИзменениеБалансаПоложительный.Видимость = Истина;
		Элементы.ИзменениеБалансаОтрицательный.Видимость = Ложь;
		БалансВЗаголовке = БалансОстаток;
		Элементы.ИзменениеБалансаПоложительный.Заголовок = СтрШаблон(Элементы.ИзменениеБалансаПоложительный.Заголовок,
			БалансВЗаголовке);
	КонецЕсли;
	
	Если ЗаполнятьСкладВТЧ
		Или ЗаполнятьПартнераВТЧ
		Или ЗаполнятьПоХарактеристикамНоменклатуры Тогда
		
		ПеречислениеДетализаций = НСтр("ru='по %1'");
		СтрокаДетализаций = "";
		Если ЗаполнятьСкладВТЧ Тогда
			СтрокаДетализаций = НСтр("ru='складам'");
		КонецЕсли;
		Если ЗаполнятьПартнераВТЧ Тогда
			Если ПустаяСтрока(СтрокаДетализаций) Тогда
				СтрокаДетализаций = НСтр("ru='клиентам'");
			Иначе
				СтрокаДетализаций = СтрокаДетализаций + ", " + НСтр("ru='клиентам'");
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнятьПоХарактеристикамНоменклатуры Тогда
			Если ПустаяСтрока(СтрокаДетализаций) Тогда
				СтрокаДетализаций = НСтр("ru='характеристикам'");
			Иначе
				СтрокаДетализаций = СтрокаДетализаций + ", " + НСтр("ru='характеристикам'");
			КонецЕсли;
		КонецЕсли;
		ПеречислениеДетализаций = СтрШаблон(ПеречислениеДетализаций, СтрокаДетализаций);
	Иначе
		ПеречислениеДетализаций = "";
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		ТекстОбъектыВПравилахСписания = НСтр("ru = 'пар категорий товаров'");
	Иначе
		ТекстОбъектыВПравилахСписания = НСтр("ru = 'пар товаров'");
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ТекстПериодичностьВИзменениеБаланса = НСтр("ru = 'дня'");
		ТекстПериодичностьВПравилахСписания = НСтр("ru = 'дней'");
		ТекстПериодичностьВДанныхПрогноза   = НСтр("ru = 'дням'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстПериодичностьВИзменениеБаланса = НСтр("ru = 'недели'");
		ТекстПериодичностьВПравилахСписания = НСтр("ru = 'недель'");
		ТекстПериодичностьВДанныхПрогноза   = НСтр("ru = 'неделям'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстПериодичностьВИзменениеБаланса = НСтр("ru = 'месяца'");
		ТекстПериодичностьВПравилахСписания = НСтр("ru = 'месяцев'");
		ТекстПериодичностьВДанныхПрогноза   = НСтр("ru = 'месяцам'");
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru = 'При расчете необходимого количества единиц, учитываются следующие данные:
		|1) Число объектов прогнозирования - количество %1 %2.
		|2) Горизонт прогнозирования - количество %3, на которые строится прогноз.
		|3) История объектов прогнозирования - количество %3 средней длины рядов истории продаж,
		|   где длина ряда - количество %3 продаж конкретного объекта.'");
	ШаблонСтроки = СтрШаблон(ШаблонСтроки,
		ТекстОбъектыВПравилахСписания, ПеречислениеДетализаций, ТекстПериодичностьВПравилахСписания);
	Элементы.ПеременныеСписанияБаланса.Заголовок = ШаблонСтроки;
	
	ШаблонСтроки = НСтр("ru = 'При построении прогноза каждые %1 %2, за год будет списано %3 единиц.'");
	ШаблонСтроки = СтрШаблон(ШаблонСтроки,
		КоличествоПериодовПрогноза, ТекстПериодичностьВИзменениеБаланса, КоличествоНеобходимыхЕдиницВГод);
	Элементы.ЗатратыИзменениеБалансаЗаГод.Заголовок = ШаблонСтроки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПеременныеРасчета(Переменные)
	
	КоличествоНеобходимыхЕдиниц       = Переменные["credit_units"];
	КоличествоПериодовПрогноза        = Переменные["horizon"];
	СредняяДлинаИсторииПродаж         = Переменные["mean_history"];
	КоличествоОбъектовПрогнозирования = Переменные["n_train_objs"];
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КоличествоПериодовВГоду = 365;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КоличествоПериодовВГоду = 52;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КоличествоПериодовВГоду = 12;
	КонецЕсли;
	
	КоличествоПрогнозовЗаГод        = Окр(КоличествоПериодовВГоду / КоличествоПериодовПрогноза);
	КоличествоНеобходимыхЕдиницВГод = КоличествоПрогнозовЗаГод * КоличествоНеобходимыхЕдиниц;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводкуДанныхПрогноза()
	
	СтрокиСводки = Новый Массив;
	
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Сценарий: %1'"),
		Сценарий);
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Вид плана: %1'"),
		ВидПлана);
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Начало прогнозирования: %1'"),
		Формат(НачалоПрогнозирования, "ДЛФ=D"));
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	
	Если Не ПустаяСтрока(ПеречислениеДетализаций) Тогда
		ШаблонСтроки = НСтр("ru='Детализация%1'");
		ШаблонСтроки = СтрШаблон(ШаблонСтроки, ПеречислениеДетализаций);
		СтрокиСводки.Добавить(ШаблонСтроки);
		СтрокиСводки.Добавить(Символы.ПС);
	КонецЕсли;
	
	СтрокиСводки.Добавить(Символы.ПС);
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		ШаблонСтроки = НСтр("ru='Количество прогнозируемых категорий: %1'");
	Иначе
		ШаблонСтроки = НСтр("ru='Количество прогнозируемых товаров: %1'");
	КонецЕсли;
	ШаблонСтроки = СтрШаблон(ШаблонСтроки, КоличествоОбъектовПрогнозирования);
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Прогнозировать по %1'"),
		ТекстПериодичностьВДанныхПрогноза);
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Прогнозировать на (горизонт): %1'"),
		КоличествоПериодовПрогноза);
	СтрокиСводки.Добавить(ШаблонСтроки);
	СтрокиСводки.Добавить(Символы.ПС);
	ШаблонСтроки = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Средняя длина истории продаж: %1'"),
		СредняяДлинаИсторииПродаж);
	СтрокиСводки.Добавить(ШаблонСтроки);
	
	СводкаДанныхПрогноза.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(СтрокиСводки));
	
КонецПроцедуры

#КонецОбласти
