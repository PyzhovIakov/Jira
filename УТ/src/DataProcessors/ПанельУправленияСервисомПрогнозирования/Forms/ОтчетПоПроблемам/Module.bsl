
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПереданныеОшибки = Параметры.ПереданныеОшибки; // см. СервисПрогнозирования.РезультатПроверкиКорректностиНастроекСервиса
	Если ПереданныеОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереданныеОшибки.Свойство("ЕстьПользовательскиеОшибки") Тогда
		// Наличие пользовательских ошибок в выгрузке или настройках.
		ПользовательскиеОшибки = Истина;
		Сценарий = Параметры.Сценарий; // СправочникСсылка.СценарииТоварногоПланирования -
		ВидПлана = Параметры.ВидПлана; // СправочникСсылка.ВидыПланов -
		ЗаполнитьПользовательскиеОшибки(ПереданныеОшибки);
	Иначе
		// Наличие технической ошибки выполнения запроса к сервису.
		ПользовательскиеОшибки = Ложь;
		ВидПлана = ПереданныеОшибки.ВидПлана; // СправочникСсылка.ВидыПланов -
		Сценарий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "Владелец"); // СправочникСсылка.СценарииТоварногоПланирования -
		ЗаполнитьТехническуюОшибку(Ошибки, ПереданныеОшибки, ВидПлана);
	КонецЕсли;
	УстановитьЗаголовкиЭлементовФормы();
	ОбновитьВидимостьЭлементовФормы();
	
	СброситьРазмерыИПоложениеОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияИсправитьОшибки) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗаданияИсправитьОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СформироватьИнформациюДляТехподдержкиНажатие(Элемент)
	
	Если ПользовательскиеОшибки Тогда
		Если Ошибки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ЕстьОшибкиНастроекВидаПлана = Ложь;
		Для Каждого Ошибка Из Ошибки Цикл
			
			ЕстьОшибкиНастроекВидаПлана = ОшибкаНастроекВидаПлана(Ошибка.Причина);
			Если ЕстьОшибкиНастроекВидаПлана Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		Информация = ИнформацияДляТехподдержки(ЕстьОшибкиНастроекВидаПлана);
	Иначе
		Информация = ИнформацияДляТехподдержки(Ложь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Информация",               Информация);
	ПараметрыФормы.Вставить("ПоказатьКнопкуСохранения", Истина);
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ФормаПроизвольнойИнформации",
		ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнформациюОТехническойОшибкеНажатие(Элемент)
	
	Оповестить("ОчиститьИнформациюОТехническойОшибке",, ВладелецФормы);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя <> "ОшибкиИсправление" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока.Исправление <> Неопределено
		И Не ПустаяСтрока(ТекущаяСтрока.Исправление) Тогда
		ОчиститьСообщения();
		ИсправитьОшибки(ТекущаяСтрока.Причина);
		Если Не ПустаяСтрока(ИдентификаторЗаданияИсправитьОшибки) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ИсправитьОшибкиНаКлиенте", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьАвтоматически(Команда)
	
	ОчиститьСообщения();
	
	ИсправитьОшибки();
	Если Не ПустаяСтрока(ИдентификаторЗаданияИсправитьОшибки) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ИсправитьОшибкиНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовкиЭлементовФормы()
	
	Если ПользовательскиеОшибки Тогда
		Заголовок = НСтр("ru = 'Отчет по проблемам'");
		Элементы.Предупреждение.Заголовок = НСтр("ru = 'Найдены некорректные настройки сервиса или модели, из-за которых построение прогноза невозможно.
			|Следуйте рекомендациям для их решения или воспользуйтесь командой автоматического исправления (не все настройки возможно исправить автоматически).
			|Строки ошибок удаляются при их успешном исправлении.'");
	Иначе
		Заголовок = НСтр("ru = 'К сожалению, возникла непредвиденная ситуация'");
		Элементы.Предупреждение.Заголовок = НСтр("ru = 'Попробуйте повторить операцию. В случае повторного возникновения ошибки, воспользуйтесь формированием информации для передачи в техподдержку.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовФормы()
	
	Элементы.ОчиститьИнформациюОТехническойОшибке.Видимость = Не ПользовательскиеОшибки;
	Если ПользовательскиеОшибки Тогда
		Элементы.ГруппаКнопокПользовательскиеОшибки.Видимость = ОшибокСВозможностьюИсправления > 0;
	Иначе
		Элементы.ГруппаКнопокПользовательскиеОшибки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользовательскиеОшибки(ПереданныеОшибки)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПереданныеОшибки.ДанныеНастроек);
	ОтсутствиеОжидаемыхДетализаций = ПереданныеОшибки.ОтсутствиеОжидаемыхДетализаций;
	КоличествоНеХватающихПериодов  = ПереданныеОшибки.ДанныеПоГоризонту.КоличествоНеХватающихПериодов;
	
	ДанныеЗапрета                  = ПереданныеОшибки.ДанныеЗапрета;
	ДатаЗапрета                    = ДанныеЗапрета.ДатаЗапрета;
	
	ДанныеПоДатам                  = ПереданныеОшибки.ДанныеПоДатам;
	ДатаНачалаПродаж               = ДанныеПоДатам.ДатаНачалаПродаж;
	МаксимальноДопустимаяДата      = ДанныеПоДатам.МаксимальноДопустимаяДата;
	
	ОшибокСВозможностьюИсправления = 0;
	
	СтатусПодключения = ПереданныеОшибки.СтатусПодключения;
	Если Не ПустаяСтрока(СтатусПодключения) Тогда
		СтрокаТаблицы = Ошибки.Добавить();
		Если СтатусПодключения = "НеАвторизован" Тогда
			СтрокаТаблицы.Описание      = НСтр("ru = 'Не найдена регистрация в сервисе'");
			СтрокаТаблицы.Рекомендация  = НСтр("ru = 'Откройте мастер подключения в расширенном режиме и нажмите команду ""Отправить заявку""'");
		ИначеЕсли СтатусПодключения = "НеАктивирован" Тогда
			СтрокаТаблицы.Описание      = НСтр("ru = 'Заявка отправлена, ожидается активация в сервисе'");
			СтрокаТаблицы.Рекомендация  = НСтр("ru = 'Подождите, активируем в ближайшее время'");
		КонецЕсли;
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	Если ПереданныеОшибки.НеактуальныеКоллекции.Количество() > 0 Тогда
		ШаблонСтроки = НСтр("ru = 'У коллекций ""%1"" изменился состав передаваемых данных'");
		Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж)
			Или Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстРекомендации = НСтр("ru = 'Заново выгрузите коллекции в сервис, открыв помощник подключения, в котором:
				|В простом режиме - нажмите команду ""Выгрузить данные"".
				|В расширенном режиме - перейдите в последний раздел и нажмите команду ""Полная выгрузка данных"".'");
		Иначе
			ТекстРекомендации = НСтр("ru = 'Заново выгрузите коллекции в сервис.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		СтрокаТаблицы = Ошибки.Добавить();
		СтрокаТаблицы.Описание          = СтрШаблон(ШаблонСтроки, СтрСоединить(ПереданныеОшибки.НеактуальныеКоллекции, ", "));
		СтрокаТаблицы.Рекомендация      = ТекстРекомендации;
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	НастройкиСервиса = Неопределено;
	Если ОтсутствиеОжидаемыхДетализаций.КодКатегории Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		Коллекция = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары];
		
		СтрокаТаблицы = Ошибки.Добавить();
		Если Коллекция.Выгружать
			И Коллекция.ВложенноеОписание.КодКатегории.Выгружать Тогда
			ТекстРекомендации = ТекстОтсутствиеОжидаемойДетализацииПолеОтмечено(Коллекция.ИмяВИсточнике);
		Иначе
			ТекстРекомендации = НСтр("ru = 'Отметьте к выгрузке коллекцию ""Товары"" и ее вложенное поле ""Код категории"", после чего заново выгрузите коллекцию'");
			СтрокаТаблицы.Исправление = НСтр("ru = 'Отметить'"); // Частичное исправление
			СтрокаТаблицы.Причина     = "ОтсутствиеОжидаемыхДетализаций";
			СтрокаТаблицы.ДополнительныйПараметр = Коллекция.ИмяВИсточнике;
		КонецЕсли;
		СтрокаТаблицы.Описание          = НСтр("ru = 'Прогнозирование по категориям невозможно, поскольку в сервис прогнозирования не выгружена информация о категориях'");
		СтрокаТаблицы.Рекомендация      = ТекстРекомендации;
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
	КонецЕсли;
	Если ОтсутствиеОжидаемыхДетализаций.КодКлиента Тогда
		Если НастройкиСервиса = Неопределено Тогда
			НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
			Коллекция = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
		Иначе
			Коллекция = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
		КонецЕсли;
		
		СтрокаТаблицы = Ошибки.Добавить();
		Если Коллекция.ВложенноеОписание.КодКлиента.Выгружать Тогда
			ТекстРекомендации = ТекстОтсутствиеОжидаемойДетализацииПолеОтмечено(Коллекция.ИмяВИсточнике);
		Иначе
			ТекстРекомендации = НСтр("ru = 'Отметьте к выгрузке вложенное поле ""Код покупателя"" у коллекции ""Продажи"", после чего заново выгрузите коллекцию'");
			СтрокаТаблицы.Исправление = НСтр("ru = 'Отметить'"); // Частичное исправление
			СтрокаТаблицы.Причина     = "ОтсутствиеОжидаемыхДетализаций";
			СтрокаТаблицы.ДополнительныйПараметр = Коллекция.ИмяВИсточнике;
		КонецЕсли;
		СтрокаТаблицы.Описание          = НСтр("ru = 'Прогнозирование с детализацией до клиента невозможно, поскольку в сервис прогнозирования не выгружена информация о покупателях'");
		СтрокаТаблицы.Рекомендация      = ТекстРекомендации;
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		СтрокаТаблицы.ДополнительныйПараметр = Коллекция.ИмяВИсточнике;
		ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
	КонецЕсли;
	Если ОтсутствиеОжидаемыхДетализаций.КодХарактеристики Тогда
		Если НастройкиСервиса = Неопределено Тогда
			НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
			Коллекция = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
		Иначе
			Коллекция = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
		КонецЕсли;
		
		СтрокаТаблицы = Ошибки.Добавить();
		Если Коллекция.ВложенноеОписание.КодХарактеристики.Выгружать Тогда
			ТекстРекомендации = ТекстОтсутствиеОжидаемойДетализацииПолеОтмечено(Коллекция.ИмяВИсточнике);
		Иначе
			ТекстРекомендации = НСтр("ru = 'Отметьте к выгрузке вложенное поле ""Код характеристики"" у коллекции ""Продажи"", после чего заново выгрузите коллекцию'");
			СтрокаТаблицы.Исправление = НСтр("ru = 'Отметить'"); // Частичное исправление
			СтрокаТаблицы.Причина     = "ОтсутствиеОжидаемыхДетализаций";
			СтрокаТаблицы.ДополнительныйПараметр = Коллекция.ИмяВИсточнике;
		КонецЕсли;
		СтрокаТаблицы.Описание          = НСтр("ru = 'Прогнозирование с детализацией до характеристик номенклатуры невозможно, поскольку в сервис прогнозирования не выгружена информация о характеристиках'");
		СтрокаТаблицы.Рекомендация      = ТекстРекомендации;
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		СтрокаТаблицы.ДополнительныйПараметр = Коллекция.ИмяВИсточнике;
		ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
		СтрокаТаблицы = Ошибки.Добавить();
		СтрокаТаблицы.Описание = ДанныеЗапрета.Описание;
		
		// Недопустимый разрыв при сдвигании начала прогнозирования за дату запрета.
		Если ДанныеЗапрета.РазницаМеждуДатамиЗаЗапретом > 0 Тогда
			ШаблонСтроки = НСтр("ru = 'Нельзя сдвинуть дату начала прогнозирования %1 за дату запрета %2 из-за недопустимого промежутка без продаж в %3 дней.
				|Измените дату запрета или выгрузите продажи за даты, позднее даты последней продажи для уменьшения разрыва данных.'");
			СтрокаТаблицы.Рекомендация      = СтрШаблон(ШаблонСтроки,
				Формат(НачалоПрогнозирования, "ДЛФ=D"), Формат(ДатаЗапрета, "ДЛФ=D"), ДанныеЗапрета.РазницаМеждуДатамиЗаЗапретом);
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		Иначе
			ШаблонСтроки = НСтр("ru = 'Сдвиньте дату начала прогнозирования %1 за дату запрета %2 или измените сам запрет'");
			СтрокаТаблицы.Рекомендация      = СтрШаблон(ШаблонСтроки,
				Формат(НачалоПрогнозирования, "ДЛФ=D"), Формат(ДатаЗапрета, "ДЛФ=D"));
			СтрокаТаблицы.Исправление       = НСтр("ru = 'Исправить'");
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
			СтрокаТаблицы.Причина           = "ДатаЗапрета";
			ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоНеХватающихПериодов > 0 Тогда
		Если Периодичность = Перечисления.Периодичность.День Тогда
			ПериодичностьСтрокой = НСтр("ru = 'дней'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			ПериодичностьСтрокой = НСтр("ru = 'недель'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			ПериодичностьСтрокой = НСтр("ru = 'месяцев'");
		КонецЕсли;
		
		СтрокаТаблицы = Ошибки.Добавить();
		ШаблонСтроки = НСтр("ru = 'Нет истории продаж достаточной длины для построения прогноза на %1 %2'");
		СтрокаТаблицы.Описание = СтрШаблон(ШаблонСтроки, КоличествоПериодов, ПериодичностьСтрокой);
		
		// Недостаточно данных для исправления путем уменьшения горизонта.
		Если КоличествоНеХватающихПериодов >= КоличествоПериодов Тогда
			// Пустая история продаж.
			Если ПустаяСтрока(ПереданныеОшибки.ДанныеПоГоризонту.ТоповыйТовар) Тогда
				ШаблонСтроки = НСтр("ru = 'Выгрузите минимум %1 %2 продаж любого товара'");
				СтрокаТаблицы.Рекомендация  = СтрШаблон(ШаблонСтроки,
					КоличествоНеХватающихПериодов, ПериодичностьСтрокой);
			Иначе
				ШаблонСтроки = НСтр("ru = 'Выгрузите еще как минимум %1 %2 продаж товара ""%3""'");
				СтрокаТаблицы.Рекомендация  = СтрШаблон(ШаблонСтроки,
					КоличествоНеХватающихПериодов, ПериодичностьСтрокой, ПереданныеОшибки.ДанныеПоГоризонту.ТоповыйТовар);
			КонецЕсли;
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		Иначе
			ШаблонСтроки = НСтр("ru = 'Выгрузите еще как минимум %1 %2 продаж товара ""%3"". Или уменьшите количество %2 прогнозирования на %1 или более.'");
			СтрокаТаблицы.Рекомендация      = СтрШаблон(ШаблонСтроки,
				КоличествоНеХватающихПериодов, ПериодичностьСтрокой, ПереданныеОшибки.ДанныеПоГоризонту.ТоповыйТовар);
			СтрокаТаблицы.Исправление       = НСтр("ru = 'Исправить'");
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
			СтрокаТаблицы.Причина           = "НеХватаетДанныхПоГоризонту";
			ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоДатам.ДатаОкончанияПродаж) Тогда
		
		СтрокаТаблицы = Ошибки.Добавить();
		ШаблонСтроки = НСтр("ru = 'Недопустимый промежуток без продаж в %1 дней между датой начала прогнозирования %2 и датой последней продажи %3'");
		СтрокаТаблицы.Описание              = СтрШаблон(ШаблонСтроки,
			ДанныеПоДатам.РазницаМеждуДатами,
			Формат(НачалоПрогнозирования, "ДЛФ=D"),
			Формат(ДанныеПоДатам.ДатаОкончанияПродаж, "ДЛФ=D"));
		Если ЗначениеЗаполнено(ДанныеПоДатам.ДатаЗапретаПриИсправленииРазрыва) Тогда
			ШаблонСтроки = НСтр("ru = 'Нельзя сдвинуть дату начала прогнозирования %1 к %2 из-за попадания на дату запрета %3.
				|Измените дату запрета или выгрузите продажи за даты, позднее даты последней продажи для уменьшения разрыва данных.'");
			СтрокаТаблицы.Рекомендация      = СтрШаблон(ШаблонСтроки, Формат(НачалоПрогнозирования, "ДЛФ=D"),
				Формат(МаксимальноДопустимаяДата, "ДЛФ=D"), Формат(ДанныеПоДатам.ДатаЗапретаПриИсправленииРазрыва, "ДЛФ=D"));
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		Иначе
			ШаблонСтроки = НСтр("ru = 'Сдвиньте дату начала прогнозирования хотя бы к %1 или более близкой к дате последней продажи'");
			СтрокаТаблицы.Рекомендация      = СтрШаблон(ШаблонСтроки, Формат(МаксимальноДопустимаяДата, "ДЛФ=D"));
			СтрокаТаблицы.Исправление       = НСтр("ru = 'Исправить'");
			СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
			СтрокаТаблицы.Причина           = "НачалоПрогнозированияРазрывДатаОкончания";
			ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДатаНачалаПродаж) Тогда
		СтрокаТаблицы = Ошибки.Добавить();
		ШаблонСтроки = НСтр("ru = 'Дата начала прогнозирования %1 меньше даты первой продажи %2'");
		СтрокаТаблицы.Описание          = СтрШаблон(ШаблонСтроки,
			Формат(НачалоПрогнозирования, "ДЛФ=D"), Формат(ДатаНачалаПродаж, "ДЛФ=D"));
		СтрокаТаблицы.Рекомендация      = НСтр("ru = 'Сдвиньте дату начала прогнозирования к дате первой продажи'");
		СтрокаТаблицы.Исправление       = НСтр("ru = 'Исправить'");
		СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		СтрокаТаблицы.Причина           = "НачалоПрогнозированияМеньшеДатыНачала";
		ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТехническуюОшибку(ТаблицаОшибок, Ошибка, ВидПлана)
	
	ОписаниеРекомендацияОшибки = ОписаниеИРекомендацияТехническойОшибки(Ошибка.Запрос, ВидПлана, Ошибка.Коллекция);
	
	СтрокаТаблицы = ТаблицаОшибок.Добавить();
	СтрокаТаблицы.Описание          = ОписаниеРекомендацияОшибки.Описание;
	СтрокаТаблицы.Рекомендация      = ОписаниеРекомендацияОшибки.Рекомендация;
	СтрокаТаблицы.СтатусИсправления = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеИРекомендацияТехническойОшибки(ИмяДействия, ВидПлана, Коллекция)
	
	ОписаниеРекомендация = Новый Структура;
	ОписаниеРекомендация.Вставить("Описание",     "");
	ОписаниеРекомендация.Вставить("Рекомендация", "");
	
	Если ИмяДействия = "РегистрацияПриложения" Тогда
		ОписаниеРекомендация.Описание     = НСтр("ru='Не удалось зарегистрировать приложение в сервисе'");
		ОписаниеРекомендация.Рекомендация = НСтр("ru='Попробуйте еще раз отправить заявку в сервис'");
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОКоллекциях" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось получить идентификатор коллекции ""%1"" с сервиса'"),
			Коллекция);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз запустить полную выгрузку данных. Для этого:
			|1) Остановите текущую выгрузку, воспользовавшись командой ""Прервать выгрузку"" на форме команд администратора,
			|которую можно открыть из формы отчета по пути: ""Еще - Команды сервиса прогнозирования - Команды администратора"".
			|2) Откройте помощник подключения, в котором:
			|В простом режиме - нажмите команду ""Выгрузить данные"".
			|В расширенном режиме - перейдите в последний раздел и нажмите команду ""Полная выгрузка данных"".'");
	ИначеЕсли ИмяДействия = "УдалениеКоллекции" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось удалить коллекцию ""%1"" в сервисе'"),
			Коллекция);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз запустить полную выгрузку данных. Для этого:
			|1) Остановите текущую выгрузку, воспользовавшись командой ""Прервать выгрузку"" на форме команд администратора,
			|которую можно открыть из формы отчета по пути: ""Еще - Команды сервиса прогнозирования - Команды администратора"".
			|2) Откройте помощник подключения, в котором:
			|В простом режиме - нажмите команду ""Выгрузить данные"".
			|В расширенном режиме - перейдите в последний раздел и нажмите команду ""Полная выгрузка данных"".'");
	ИначеЕсли ИмяДействия = "СозданиеМодели" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось создать модель у вида плана ""%1"" в сервисе'"),
			ВидПлана);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз создать модель, нажав на гиперссылку ""запросить прогноз""'");
	ИначеЕсли ИмяДействия = "СозданиеКонфигурацииМодели" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось создать конфигурацию модели у вида плана ""%1"" в сервисе при запросе прогноза'"),
			ВидПлана);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз создать конфигурацию, нажав на гиперссылку ""запросить прогноз""'");
	ИначеЕсли ИмяДействия = "ЗапускОбученияМодели" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось запустить обучение модели по виду плана ""%1""'"),
			ВидПлана);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз запустить обучение, нажав на гиперссылку ""запросить прогноз""'");
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОСтатусеОбучения" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось обновить статус обучения модели у вида плана ""%1""'"),
			ВидПлана);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз обновить статус, нажав на гиперссылку ""обновить статус""'");
	ИначеЕсли ИмяДействия = "ПолучениеПрогнозаСервиса" Тогда
		ОписаниеРекомендация.Описание = СтрШаблон(
			НСтр("ru='Не удалось получить данные прогноза по виду плана ""%1"" с сервиса'"),
			ВидПлана);
		ОписаниеРекомендация.Рекомендация = НСтр(
			"ru='Попробуйте еще раз получить прогноз, нажав на гиперссылку ""получить прогноз""'");
	КонецЕсли;
	
	Возврат ОписаниеРекомендация;
	
КонецФункции

&НаСервере
Процедура ИсправитьОшибки(ПричинаОшибки = Неопределено)
	
	ИсправляемыеОшибки = Новый Массив;
	Если ПричинаОшибки <> Неопределено Тогда
		ДанныеОшибки = Новый Структура("Причина, Исправлено", ПричинаОшибки, Ложь);
		ИсправляемыеОшибки.Добавить(ДанныеОшибки);
	Иначе
		
		Для Каждого Ошибка Из Ошибки Цикл
			Если ПустаяСтрока(Ошибка.Исправление) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеОшибки = Новый Структура("Причина, Исправлено", Ошибка.Причина, Ложь);
			ИсправляемыеОшибки.Добавить(ДанныеОшибки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИсправляемыеОшибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"СервисПрогнозирования.ИсправитьПользовательскиеОшибки",
		ВидПлана, ИсправляемыеОшибки, ДанныеДляИсправленияОшибок());
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		ИдентификаторЗаданияИсправитьОшибки = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилищаИсправитьОшибки       = РезультатВыполнения.АдресРезультата;
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		АдресХранилищаИсправитьОшибки       = РезультатВыполнения.АдресРезультата;
		Подключаемый_ИсправитьОшибкиНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляИсправленияОшибок()
	
	Данные = Новый Структура;
	Данные.Вставить("Периодичность",                  Периодичность);
	Данные.Вставить("НачалоПрогнозирования",          НачалоПрогнозирования);
	Данные.Вставить("КоличествоПериодов",             КоличествоПериодов);
	Данные.Вставить("ОтсутствиеОжидаемыхДетализаций", ОтсутствиеОжидаемыхДетализаций);
	Данные.Вставить("КоличествоНеХватающихПериодов",  КоличествоНеХватающихПериодов);
	Данные.Вставить("ДатаЗапрета",                    ДатаЗапрета);
	Данные.Вставить("МаксимальноДопустимаяДата",      МаксимальноДопустимаяДата);
	Данные.Вставить("ДатаНачалаПродаж",               ДатаНачалаПродаж);
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусИсправленияОшибок(ИсправляемыеОшибки)
	
	Для Каждого Ошибка Из ИсправляемыеОшибки Цикл
		Если Не Ошибка.Исправлено Тогда
			Продолжить; // Не удалось исправить ошибку.
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Причина", Ошибка.Причина);
		Строки = Ошибки.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() > 0 Тогда
			
			Если Ошибка.Причина = "ОтсутствиеОжидаемыхДетализаций" Тогда
				// Обновление после частичного исправления.
				Для Каждого Строка Из Строки Цикл
					Строка.Рекомендация = ТекстОтсутствиеОжидаемойДетализацииПолеОтмечено(Строка.ДополнительныйПараметр);
					Строка.Исправление  = "";
					ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления - 1;
				КонецЦикла;
			Иначе
				Ошибки.Удалить(Строки[0]);
				ОшибокСВозможностьюИсправления = ОшибокСВозможностьюИсправления - 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОшибокСВозможностьюИсправления = 0 Тогда
		ОбновитьВидимостьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОшибкаНастроекВидаПлана(Причина)
	
	ОшибкаВидаПлана = Ложь;
	Если Причина = "ДатаЗапрета"
		Или Причина = "НеХватаетДанныхПоГоризонту"
		Или Причина = "НачалоПрогнозированияРазрывДатаОкончания"
		Или Причина = "НачалоПрогнозированияМеньшеДатыНачала" Тогда
		ОшибкаВидаПлана = Истина;
	КонецЕсли;
	Возврат ОшибкаВидаПлана;
	
КонецФункции

&НаСервере
Функция ИнформацияДляТехподдержки(ЕстьОшибкиНастроекВидаПлана)
	
	ПараметрыШаблона = Новый Массив;
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ШаблонИнформации = НСтр("ru = 'Аутентификационные данные:
	|%1
	|========================================
	|Общая информация (может отличаться от данных на сервере):
	|Последняя известная дата продаж (с учетом отборов): %2
	|Идентификаторы коллекций:
	|%3'");
	
	// Аутентификация.
	ШаблонАутентификационныеДанные = НСтр("ru = 'Имя сервиса (service_name): %1
	|Токены заданы: %2, Дата обновления токенов: %3
	|Идентификатор приложения (application_uuid): %4
	|Статус подключения: %5, Баланс: %6
	|Дата окончания действия тарифа(ов): %7'");
	
	Если НастройкиСервиса.СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен() Тогда
		ТекстСтатусПодключения = НСтр("ru='Активен'");
	ИначеЕсли НастройкиСервиса.СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди() Тогда
		ТекстСтатусПодключения = НСтр("ru='В очереди'");
	Иначе
		ТекстСтатусПодключения = НСтр("ru='Нет'");
	КонецЕсли;
	
	ШаблонАутентификационныеДанные = СтрШаблон(ШаблонАутентификационныеДанные,
		НастройкиСервиса.ИмяСервиса,
		Не ПустаяСтрока(НастройкиСервиса.ТокенПриложения) И Не ПустаяСтрока(НастройкиСервиса.ТокенОбновления),
		НастройкиСервиса.ДатаОбновленияТокенов,
		НастройкиСервиса.ИдентификаторПриложения,
		ТекстСтатусПодключения,
		НастройкиСервиса.Баланс,
		Формат(НастройкиСервиса.ДатаОкончанияМаксимальногоТарифа, "ДЛФ=D"));
	
	ПараметрыШаблона.Добавить(ШаблонАутентификационныеДанные);
	
	// Последняя известная дата продаж.
	ДатаОкончанияПродаж = СервисПрогнозированияПереопределяемый.ПоследняяИзвестнаяДатаПродажи();
	ПараметрыШаблона.Добавить(Формат(ДатаОкончанияПродаж, "ДЛФ=D"));
	
	// Коллекции.
	ШаблонСтрокиКоллекции = НСтр("ru = '%1: %2'");
	
	ИнфоОКоллекцияхСтрокой = "";
	ВсеКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьВсеКоллекции();
	Для Каждого КлючЗначение Из ВсеКоллекции Цикл
		Если ПустаяСтрока(КлючЗначение.Значение.ИдКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		ИнфоОКоллекцияхСтрокой = ИнфоОКоллекцияхСтрокой
			+ СтрШаблон(ШаблонСтрокиКоллекции, КлючЗначение.Ключ, Строка(КлючЗначение.Значение.ИдКоллекции))
			+ Символы.ПС;
	КонецЦикла;
	ПараметрыШаблона.Добавить(ИнфоОКоллекцияхСтрокой);
	
	ИнформацияТехподдержки = СтрШаблон(ШаблонИнформации,
		ПараметрыШаблона[0],
		ПараметрыШаблона[1],
		ПараметрыШаблона[2]);
	
	Если ПользовательскиеОшибки Тогда
		
		ШаблонИнформации = НСтр("ru = '========================================
		|%1:
		|%2'");
		ШаблонНекорректнойНастройки = НСтр("ru = 'Описание:
		|%1
		|Рекомендация:
		|%2'");
		
		НекорректныеНастройки = "";
		Разделитель = Символы.ПС + "---------------" + Символы.ПС;
		Для Каждого Ошибка Из Ошибки Цикл
			Если ПустаяСтрока(НекорректныеНастройки) Тогда
				НекорректныеНастройки = СтрШаблон(ШаблонНекорректнойНастройки, Ошибка.Описание, Ошибка.Рекомендация);
			Иначе
				НекорректныеНастройки = НекорректныеНастройки
					+ Разделитель
					+ СтрШаблон(ШаблонНекорректнойНастройки, Ошибка.Описание, Ошибка.Рекомендация);
			КонецЕсли;
		КонецЦикла;
		
		Заголовок = ?(ЕстьОшибкиНастроекВидаПлана,
			НСтр("ru = 'Некорректные настройки сервиса и модели'"),
			НСтр("ru = 'Некорректные настройки сервиса'"));
		ИнформацияТехподдержки = ИнформацияТехподдержки
			+ СтрШаблон(ШаблонИнформации, Заголовок, НекорректныеНастройки);
		
		Если ЕстьОшибкиНастроекВидаПлана Тогда
			ИнформацияТехподдержки = ИнформацияТехподдержки + Символы.ПС;
			ШаблонМодели = НСтр("ru = '========================================
			|Настройки модели у вида плана ""%1"" с некорректными настройками (могут отличаться от данных на сервере):
			|%2'");
			ИнформацияТехподдержки = ИнформацияТехподдержки
				+ СтрШаблон(ШаблонМодели, Строка(ВидПлана), ИнформацияНастроекПроблемногоВидаПлана());
		КонецЕсли;
		
	Иначе // Техническая ошибка по запросу.
		
		ШаблонИнформации = НСтр("ru = '========================================
		|Техническая информация по ошибке запроса:
		|%1
		|Текст ошибки:
		|%2'");
		ТекущаяОшибка = НастройкиСервиса.ТекущаяОшибка;
		
		ИнформацияПоОшибке = ТекущаяОшибка.Метод + " " + ТекущаяОшибка.Адрес;
		Если ЗначениеЗаполнено(ТекущаяОшибка.ВидПлана) Тогда
			// Ошибка по запросу модели конкретного вида плана.
			ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОшибка.ВидПлана, "ИдентификаторМоделиПрогнозирования");
			ИнформацияПоОшибке = ИнформацияПоОшибке
				+ Символы.ПС + "modelId: " + ИдМодели;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяОшибка.Коллекция) Тогда
			ИмяКоллекции = СоответствиеИменКоллекцийСервиса(ТекущаяОшибка.Коллекция);
			ИнформацияПоОшибке = ИнформацияПоОшибке
				+ Символы.ПС + "DataName: " + ИмяКоллекции;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекущаяОшибка.Тело) Тогда
			ИнформацияПоОшибке = ИнформацияПоОшибке + Символы.ПС + ТекущаяОшибка.Тело;
		КонецЕсли;
		
		ИнформацияТехподдержки = ИнформацияТехподдержки
			+ СтрШаблон(ШаблонИнформации, ИнформацияПоОшибке, ТекущаяОшибка.ТекстОшибки) + Символы.ПС;
		
	КонецЕсли;
	
	// Добавление дополнительной информации по статусам, истории и ошибкам обмена данными.
	ИнформацияТехподдержки = ИнформацияТехподдержки + ИнформацияОбменаДанными();
	
	Возврат ИнформацияТехподдержки;
	
КонецФункции

&НаСервере
Функция СоответствиеИменКоллекцийСервиса(Коллекция)
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Возврат "sales";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат "products";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Возврат "product_variants";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат "customers";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат "shops";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
		Возврат "stock";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		Возврат "promo";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИнформацияНастроекПроблемногоВидаПлана()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыПланов.ТипПлана                                       КАК ТипПлана,
	|	ВидыПланов.ИдентификаторМоделиПрогнозирования             КАК ИдентификаторМоделиПрогнозирования,
	|	ВидыПланов.ЗаполнятьПоХарактеристикамНоменклатуры         КАК ЗаполнятьПоХарактеристикамНоменклатуры,
	|	ВидыПланов.ЗаполнятьСкладВТЧ                              КАК ЗаполнятьСклад,
	|	ВидыПланов.ЗаполнятьПартнераВТЧ                           КАК ЗаполнятьПартнера,
	|	ВидыПланов.АвтоматическиОбновлятьПрогноз                  КАК АвтоматическиОбновлятьПрогноз,
	|	ВидыПланов.ПериодичностьОбновленияПрогноза                КАК ПериодичностьОбновленияПрогноза,
	|	ВидыПланов.КоличествоОбновленийЗаПериод                   КАК КоличествоОбновленийЗаПериод,
	// Настройки, устанавливаемые в конфигурации модели.
	|	ВЫБОР
	|		КОГДА ВидыПланов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ""day""
	|		КОГДА ВидыПланов.Периодичность =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ""week""
	|		КОГДА ВидыПланов.Периодичность =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ""month""
	|		ИНАЧЕ ""wrong""
	|	КОНЕЦ                                                КАК dateGranularity,
	|	ВидыПланов.ДеньНеделиНачалаПрогноза                  КАК startWeekDay,
	|	ВидыПланов.КоличествоПериодов                        КАК horizon,
	|	ВЫБОР
	|		КОГДА ВидыПланов.СглаживаниеВыбросовИсторическихДанных = 0
	|			ТОГДА ""no""
	|		КОГДА ВидыПланов.СглаживаниеВыбросовИсторическихДанных = 1
	|			ТОГДА ""bound""
	|		ИНАЧЕ ""no""
	|	КОНЕЦ                                                КАК smoothingType,
	|	ВидыПланов.ВерхняяГраницаВыброса                     КАК stdUpperBound,
	|	ВидыПланов.НижняяГраницаВыброса                      КАК stdLowerBound,
	|	ВидыПланов.РассчитыватьОтклонениеПоСезоннымЗначениям КАК stdCalculatingType,
	|	ВидыПланов.НачалоПрогнозирования                     КАК dtStartForecast,
	|	ВидыПланов.МетрикаОценкиКачестваПрогноза             КАК userMetric,
	|	ВидыПланов.ВзвешиваниеОбъектовПриПодсчетеМетрики     КАК usedForMetricWeighing
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	ВидыПланов.Ссылка = &ВидПлана";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("ТекстНеУчитывать",               НСтр("ru='Не учитывать'"));
	Запрос.УстановитьПараметр("ТекстВосстанавливатьПоЗаказам",  НСтр("ru='Восстанавливать по заказам'"));
	Запрос.УстановитьПараметр("ТекстВосстанавливатьПоОстаткам", НСтр("ru='Восстанавливать по остаткам'"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СервисПрогнозирования.ПредставитьТаблицуСтрокой(ТаблицаРезультата, Ложь) + Символы.ПС;
	
КонецФункции

&НаСервере
Функция ИнформацияОбменаДанными()
	
	ПараметрыШаблона = Новый Массив;
	
	ШаблонИнформацииОбмена = НСтр("ru = '========================================
	|Статус обмена данными:
	|%1
	|========================================
	|История обменов данными:
	|%2
	|========================================
	|Ошибки обмена данными:
	|%3'");
	
	// Статус обмена данными.
	СтатусыОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	СтатусыОбменаДаннымиСборка = Новый Массив();
	
	ШаблонСтрокиПараметровМодели = НСтр("ru = '%1: %2'");
	Для Каждого КлючЗначение Из СтатусыОбменаДанными Цикл
		СтатусыОбменаДаннымиСтрока = СтрШаблон(ШаблонСтрокиПараметровМодели, КлючЗначение.Ключ, КлючЗначение.Значение);
		СтатусыОбменаДаннымиСборка.Добавить(СтатусыОбменаДаннымиСтрока);
	КонецЦикла;
	СтатусыОбменаДаннымиСтрокой = СтрСоединить(СтатусыОбменаДаннымиСборка, Символы.ПС);
	
	ПараметрыШаблона.Добавить(СтатусыОбменаДаннымиСтрокой);
	
	// История обменов данными.
	ИнформацияОПоследнихЗаписях = РегистрыСведений.ЖурналСервисаПрогнозирования.ПолнаяИнформацияОПоследнихЗаписях(10);
	ИнформацияОПоследнихЗаписяхСтрокой = СервисПрогнозирования.ПредставитьТаблицуСтрокой(ИнформацияОПоследнихЗаписях, Истина);
	ПараметрыШаблона.Добавить(ИнформацияОПоследнихЗаписяхСтрокой);
	
	// Ошибки обмена данными.
	ИнформацияОПоследнихЗаписях = РегистрыСведений.ЖурналСервисаПрогнозирования.ПолнаяИнформацияОПоследнихЗаписях(5, Истина);
	ИнформацияОПоследнихЗаписяхСтрокой = СервисПрогнозирования.ПредставитьТаблицуСтрокой(ИнформацияОПоследнихЗаписях, Истина);
	ПараметрыШаблона.Добавить(ИнформацияОПоследнихЗаписяхСтрокой);
	
	Возврат СтрШаблон(ШаблонИнформацииОбмена,
		ПараметрыШаблона[0],
		ПараметрыШаблона[1],
		ПараметрыШаблона[2]);
	
КонецФункции

&НаСервере
Функция ТекстОтсутствиеОжидаемойДетализацииПолеОтмечено(Коллекция)
	
	ТекстШаблона = НСтр("ru = 'Заново выгрузите коллекцию ""%1"" в сервис'");
	Возврат СтрШаблон(ТекстШаблона, Коллекция);
	
КонецФункции

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ПолноеИмяФормы = Метаданные.Обработки.ПанельУправленияСервисомПрогнозирования.Формы.ОтчетПоПроблемам.ПолноеИмя();
		ХранилищеСистемныхНастроек.Удалить(ПолноеИмяФормы, "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(Новый УникальныйИдентификатор(ИдентификаторЗадания));
	Иначе
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_ИсправитьОшибкиНаКлиенте()
	
	Подключаемый_ИсправитьОшибкиНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияИсправитьОшибки) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ИсправитьОшибкиНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ИсправитьОшибкиНаСервере(ВыполнениеПроверено = Ложь)
	
	Если ВыполнениеПроверено
		Или Не ПустаяСтрока(ИдентификаторЗаданияИсправитьОшибки)
			И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗаданияИсправитьОшибки)) Тогда
		
		ИдентификаторЗаданияИсправитьОшибки = "";
		РезультатИсправления = ПолучитьИзВременногоХранилища(АдресХранилищаИсправитьОшибки);
		
		ОбновитьСтатусИсправленияОшибок(РезультатИсправления.Ошибки);
		ОбщегоНазначения.СообщитьПользователю(РезультатИсправления.ТекстИсправлений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
