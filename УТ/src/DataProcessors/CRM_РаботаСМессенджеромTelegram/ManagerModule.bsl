#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	МассивСообщений = Новый Массив;
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат МассивСообщений;
	КонецЕсли;
	
	ОжиданиеСобытий(УчетнаяЗапись, Истина);
	
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись, ОднаИтерация = Ложь) Экспорт
	
	Попытка
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияКомпоненты = "1_1830_2_7";
	Идентификатор = СтрЗаменить(Строка(УчетнаяЗапись.УникальныйИдентификатор()), "-", "");

	Если ЗначениеЗаполнено(СтруктураПараметровДоступа.ПутьККомпоненте) Тогда
		ПутьККомпоненте = СтруктураПараметровДоступа.ПутьККомпоненте;
		Файл = Новый Файл(ПутьККомпоненте);
		Если Не Файл.Существует() Тогда
			ВызватьИсключение Нстр("ru = 'Не найден файл компоненты!'" + " " + ПутьККомпоненте);
		КонецЕсли;
		ИмяКомпоненты = СтрЗаменить(Файл.ИмяБезРасширения, ".", "_");
		ДвоичныеДанныеКомпоненты = Новый ДвоичныеДанные(ПутьККомпоненте);
		АдресКомпоненты = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКомпоненты);
	Иначе
		ИмяКомпоненты = "CRarusTDLib" + ВерсияКомпоненты;
		АдресКомпоненты = "Обработка.CRM_РаботаСМессенджеромTelegram.Макет.КомпонентаRarusTDLib";
	КонецЕсли;
	
	ИмяКомпоненты = ИмяКомпоненты + Идентификатор;
	
	ПодключитьВнешнююКомпоненту(АдресКомпоненты, ИмяКомпоненты, ТипВнешнейКомпоненты.Native); 
 	Компонента = Новый("AddIn." + ИмяКомпоненты + ".CRarusTDLib");
	
	
	Если Компонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту для работы с Telegram!'");
	ИначеЕсли ЗначениеЗаполнено(Компонента.ErrorDescription) Тогда
		ВызватьИсключение Компонента.ErrorDescription;
	КонецЕсли;	
	
	ИдетАвторизация = Истина;
	Пока ИдетАвторизация Цикл
		Данные = 1;
		Если Компонента.Получить(Данные) Тогда
			
			Если Данные = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Данные);
			ОтветКомпоненты = ПрочитатьJSON(ЧтениеJSON, Истина);
			
			Если ОтветКомпоненты["@type"] = "updateAuthorizationState" Тогда
				Статус = ОтветКомпоненты["authorization_state"]["@type"];
				Если Статус = "authorizationStateWaitTdlibParameters" Тогда
						
					Запрос = Новый Соответствие;
					Запрос.Вставить("@type", "setTdlibParameters");				
					Запрос.Вставить("database_directory", СтруктураПараметровДоступа.ПутьКБазеДанных);
					Запрос.Вставить("api_id", 21466597);
					Запрос.Вставить("api_hash", "70c755bab606b8c584684635659671f5");
					Запрос.Вставить("system_language_code", "en");
					Запрос.Вставить("device_model", "Desktop");
					Запрос.Вставить("system_version", "");
					Запрос.Вставить("application_version", "1.0");
					Запрос.Вставить("database_encryption_key", "");
					
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();			
					ЗаписатьJSON(ЗаписьJSON, Запрос);	
					ЗапросJSON = ЗаписьJSON.Закрыть();
					Компонента.Отправить(ЗапросJSON);
					
				ИначеЕсли Статус = "authorizationStateWaitEncryptionKey" Тогда	
					
					
				ИначеЕсли Статус = "authorizationStateWaitPhoneNumber" Тогда
					
					ВызватьИсключение НСтр("ru = 'Необходимо авторизоваться в Telegram!'");
					
				ИначеЕсли Статус = "authorizationStateWaitCode" Тогда
					
					ВызватьИсключение НСтр("ru = 'Необходимо авторизоваться в Telegram!'");
	
				ИначеЕсли Статус = "authorizationStateWaitPassword" Тогда
					
					ВызватьИсключение НСтр("ru = 'Необходимо авторизоваться в Telegram!'");
	
				КонецЕсли;
			ИначеЕсли ОтветКомпоненты["@type"] = "updateConnectionState" 
				И ОтветКомпоненты["state"]["@type"] = "connectionStateReady" Тогда
				ИдетАвторизация = Ложь;
			ИначеЕсли ОтветКомпоненты["@type"] = "error" Тогда
				Если СтрНайти(ОтветКомпоненты["message"], 
					"because it is already in use; check for another program instance running") > 0 Тогда

					Возврат;
				Иначе
					ВызватьИсключение ОтветКомпоненты["message"];
				КонецЕсли;
			КонецЕсли;
						
		Иначе
			Если ЗначениеЗаполнено(Компонента.ErrorDescription) Тогда
				ВызватьИсключение Компонента.ErrorDescription;
			КонецЕсли;
			ВызватьИсключение НСтр("ru = 'Не удалось получить данные от внешней компоненты!'");
		КонецЕсли;
		
	КонецЦикла;
	
	Обработчики = Новый Соответствие;

	ЗапроситьЧаты(Компонента, Обработчики);

	СоответствиеСообщений = Новый Соответствие;
	ИдОтправленныхСообщений = Новый Соответствие;
	
	ОтправкаДоступна = Ложь;
	ЖдемОтвет = Истина;
	ЖдемФайлы = 0;
	ЖдемРезультатыОтправки = 0;
	ПредыдущийОтветПустой = Ложь;
	Контакты = Новый Соответствие;
	Чаты = Новый Массив;
	НачальныеСообщения = Новый Соответствие;
	Пока ЖдемОтвет Цикл
		
		Данные = 1;
		Если Компонента.Получить(Данные) Тогда
			
			Если Данные = "" Тогда
				Если ОтправкаДоступна Тогда
					ОтправитьСообщения(Компонента, УчетнаяЗапись, Обработчики, НачальныеСообщения, ЖдемРезультатыОтправки);
					Если ОднаИтерация Тогда
						Если ПредыдущийОтветПустой И ЖдемРезультатыОтправки = 0 И ЖдемФайлы = 0 Тогда
							Прервать;
						КонецЕсли;
						ПредыдущийОтветПустой = Истина;
					КонецЕсли;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ПредыдущийОтветПустой = Ложь;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Данные);
			ОтветКомпоненты = ПрочитатьJSON(ЧтениеJSON, Истина);
			Если ОтветКомпоненты.Получить("@type") = "updateNewMessage"
				Или ОтветКомпоненты.Получить("@type") = "updateMessageContent" Тогда
				
				Сообщение = Обработчик_ПрочитатьСообщение(Компонента, ОтветКомпоненты, Обработчики,
					ЖдемФайлы, ЖдемРезультатыОтправки, УчетнаяЗапись, Контакты, Чаты);
				Если Сообщение <> Неопределено Тогда
					СоответствиеСообщений.Вставить(Сообщение.ID_Сообщения, Сообщение);
				КонецЕсли;
				
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateChatAddedToList" Тогда
				Чаты.Добавить(ОтветКомпоненты["chat_id"]);
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateChatLastMessage"
				И Не ОтправкаДоступна Тогда
				
				ПоследнееСообщение = ОтветКомпоненты.Получить("last_message");
				Если ПоследнееСообщение <> Неопределено Тогда
					ИдентификаторПоследнего = ПоследнееСообщение["id"];
					Если СоответствиеСообщений[ИдентификаторПоследнего] = Неопределено Тогда
						ИдентификаторЧата = ОтветКомпоненты["chat_id"];
						Если ПроверитьПоследнееСообщение(Компонента, УчетнаяЗапись,
								ИдентификаторЧата, ИдентификаторПоследнего, Обработчики) Тогда
							Сообщение = Обработчик_ПрочитатьСообщение(Компонента, ПоследнееСообщение, Обработчики,
								ЖдемФайлы, ЖдемРезультатыОтправки, УчетнаяЗапись, Контакты);
							Если Сообщение <> Неопределено Тогда
								СоответствиеСообщений.Вставить(Сообщение.ID_Сообщения, Сообщение);
							КонецЕсли;
						Иначе
							НачальныеСообщения.Вставить(ИдентификаторЧата, ПоследнееСообщение["id"]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ОтветКомпоненты["@extra"] <> Неопределено Тогда
				ТекстОшибки = "";
				Если ОтветКомпоненты.Получить("@type") = "error" Тогда
					ТекстОшибки = ОтветКомпоненты["message"];
				КонецЕсли;
				КлючОбработчика = ОтветКомпоненты["@extra"];
				Обработчик = Обработчики.Получить(КлючОбработчика);
				Если Обработчик <> Неопределено Тогда
					Если Обработчик.Метод = "Обработчик_ОтправитьСообщение" Тогда
						ПоследнееСообщение = ОтветКомпоненты.Получить("last_message");
						Если ПоследнееСообщение <> Неопределено Тогда
							ИдентификаторПоследнего = ПоследнееСообщение["id"];
							Если СоответствиеСообщений[ИдентификаторПоследнего] = Неопределено Тогда
								ИдентификаторЧата = ОтветКомпоненты["id"];
								ПроверитьПоследнееСообщение(Компонента, УчетнаяЗапись,
										ИдентификаторЧата, ИдентификаторПоследнего, Обработчики);
							КонецЕсли;
						КонецЕсли;
						Обработчик_ОтправитьСообщение(Компонента, Обработчик.Параметры, Обработчики);
					ИначеЕсли Обработчик.Метод = "Обработчик_ПослеОтправкиСообщения" Тогда
						Обработчик_ПослеОтправкиСообщения(Обработчик.Параметры, ОтветКомпоненты, ИдОтправленныхСообщений);
					ИначеЕсли Обработчик.Метод = "Обработчик_ПрисоединитьФайл" Тогда
						Обработчик_ПрисоединитьФайл(Обработчик.Параметры, ОтветКомпоненты, СоответствиеСообщений, ЖдемФайлы);
					ИначеЕсли Обработчик.Метод = "Обработчик_ОбновитьПредставлениеКонтакта" Тогда
						Обработчик_ОбновитьПредставлениеКонтакта(Обработчик.Параметры, ОтветКомпоненты, СоответствиеСообщений);
						ЖдемРезультатыОтправки = ЖдемРезультатыОтправки - 1;
					ИначеЕсли Обработчик.Метод = "Обработчик_ОбновитьПредставлениеГруппы" Тогда
						Обработчик_ОбновитьПредставлениеГруппы(Обработчик.Параметры, ОтветКомпоненты, СоответствиеСообщений);
						ЖдемРезультатыОтправки = ЖдемРезультатыОтправки - 1;
					ИначеЕсли Обработчик.Метод = "Обработчик_ОбновитьДанныеПоСсылке" Тогда
						Обработчик_ОбновитьДанныеПоСсылке(Обработчик.Параметры, ОтветКомпоненты, СоответствиеСообщений);
						ЖдемРезультатыОтправки = ЖдемРезультатыОтправки - 1;
					ИначеЕсли Обработчик.Метод = "Обработчик_РезультатПроверкиПользователя" Тогда
						Обработчик_РезультатПроверкиПользователя(ОтветКомпоненты, Обработчик.Параметры, УчетнаяЗапись);
					ИначеЕсли Обработчик.Метод = "Обработчик_ЧатыПолучены" Тогда
						ОтправкаДоступна = Истина;
						Продолжить;
					ИначеЕсли Обработчик.Метод = "Обработчик_ПроверитьИсториюЧата" Тогда
						Если ОтветКомпоненты.Получить("@type") = "messages" Тогда
							Для Каждого ТекСообщение Из ОтветКомпоненты["messages"] Цикл
								Если Обработчик.Параметры.ПоследнееЗагруженное = ТекСообщение["id"] Тогда
									Прервать;
								КонецЕсли;
								Сообщение = Обработчик_ПрочитатьСообщение(Компонента, ТекСообщение,
									Обработчики, ЖдемФайлы, ЖдемРезультатыОтправки,  УчетнаяЗапись, Контакты);
								Если Сообщение <> Неопределено Тогда
									СоответствиеСообщений.Вставить(Сообщение.ID_Сообщения, Сообщение);
								КонецЕсли;
							КонецЦикла;
							Если ОтветКомпоненты["total_count"] > 0 Тогда
								НачальныеСообщения.Вставить(ТекСообщение["chat_id"],
									ОтветКомпоненты["messages"][ОтветКомпоненты["total_count"]-1]["id"]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Обработчики.Удалить(КлючОбработчика);
				КонецЕсли;
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateMessageSendSucceeded" Тогда
				
				Обработчик_ЗаменитьИдентификаторСообщения(УчетнаяЗапись, ОтветКомпоненты,
					ИдОтправленныхСообщений, СоответствиеСообщений);
				ЖдемРезультатыОтправки = ЖдемРезультатыОтправки - 1;
				
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateMessageSendFailed" Тогда
				
				ЖдемРезультатыОтправки = ЖдемРезультатыОтправки - 1;
				
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateUser" Тогда
				
				Если ОтветКомпоненты["user"]["type"]["@type"] = "userTypeDeleted" Тогда
					Контакты.Вставить(Формат(ОтветКомпоненты["user"]["id"], "ЧГ=0"), Новый Структура("Удален, Наименование",
						Истина, "Удаленный аккаунт"));
				Иначе
					Контакты.Вставить(Формат(ОтветКомпоненты["user"]["id"], "ЧГ=0"), Новый Структура("Удален, Наименование",
						Ложь, СокрЛП(ОтветКомпоненты["user"]["last_name"] + " " + ОтветКомпоненты["user"]["first_name"])));
				КонецЕсли;
					
			ИначеЕсли ОтветКомпоненты.Получить("@type") = "updateFile" Тогда
				
				Если ОтветКомпоненты["file"]["remote"]["is_uploading_completed"] Тогда
					ПутьКФайлу = ОтветКомпоненты["file"]["local"]["path"];
					Если СтрНачинаетсяС(ПутьКФайлу, КаталогВременныхФайлов()) Тогда
						УдалитьФайлы(ПутьКФайлу);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЖдемФайлы = 0 И ЖдемРезультатыОтправки = 0 Тогда
				МассивСообщений = Новый Массив;
				Для Каждого КлючЗначение Из СоответствиеСообщений Цикл
					МассивСообщений.Добавить(КлючЗначение.Значение);
				КонецЦикла;
				CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
				СоответствиеСообщений.Очистить();
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Компонента.ErrorDescription) Тогда
				ВызватьИсключение Компонента.ErrorDescription;
			КонецЕсли;
			ВызватьИсключение НСтр("ru = 'Не удалось получить данные от внешней компоненты!'");
		КонецЕсли;
		
	КонецЦикла;
	
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Компонента = Неопределено;
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "Telegram";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://t.me/";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат Неопределено;
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат НачалоАдресаСтраницыПользователя() + ID_Пользователя;
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Истина; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Истина; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Возврат Неопределено; 
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт

	МассивЧатов = Новый Массив;
	Для Каждого Сообщение Из МассивСообщений Цикл
		Если МассивЧатов.Найти(Сообщение.Группа) = Неопределено Тогда
			МассивЧатов.Добавить(Сообщение.Группа);
		КонецЕсли;
	КонецЦикла;
	Если МассивЧатов.Количество() > 0 Тогда
		СтруктураСообщения = Новый Структура;
		СтруктураСообщения.Вставить("Тип", "ОтметкаОПрочтении");
		СтруктураСообщения.Вставить("МассивЧатов", МассивЧатов);
		
		guid = Строка(Новый УникальныйИдентификатор());
		
		МереджерЗаписи = РегистрыСведений.CRM_ОчередьЗапросовКМессенджеру.СоздатьМенеджерЗаписи();
		МереджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МереджерЗаписи.Идентификатор = guid;
		МереджерЗаписи.ДанныеСообщения = Новый ХранилищеЗначения(СтруктураСообщения);
		МереджерЗаписи.Записать();
		
		CRM_РаботаСМессенджерамиСервер.ПолучитьСообщенияУчетнойЗаписиВФоне(УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательДоступен(УчетнаяЗапись, НомерТелефона) Экспорт
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("Тип", "Прозвон");
	СтруктураСообщения.Вставить("НомерТелефона", НомерТелефона);
		
	guid = Строка(Новый УникальныйИдентификатор());
	
	МенеджерЗаписи = РегистрыСведений.CRM_ОчередьЗапросовКМессенджеру.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Идентификатор = guid;
	МенеджерЗаписи.ДанныеСообщения = Новый ХранилищеЗначения(СтруктураСообщения);
	МенеджерЗаписи.Записать();
	
	CRM_РаботаСМессенджерамиСервер.ПолучитьСообщенияУчетнойЗаписиВФоне(УчетнаяЗапись);
	
	Итераций = 0;
	Пока Итераций < 30 Цикл
		ОбщегоНазначенияБТС.Пауза(1);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.ПолученОтвет Тогда
			Результат = МенеджерЗаписи.ДанныеСообщения.Получить();
			МенеджерЗаписи.Удалить();
			Возврат Результат; 
		КонецЕсли;
		Итераций = Итераций + 1;
	КонецЦикла;
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	Возврат Новый Структура("Доступен, Описание", Ложь, "");
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
	ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	ПараметрыМессенджера.Вставить("ВозможностьПисатьПервыми", Истина);
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьЧаты(Компонента, Обработчики)
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "loadChats");
	ЗапросКомпоненты.Вставить("limit", 100);
	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
	Компонента.Отправить(ЗапросJSON);

	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ЧатыПолучены");
	Обработчики.Вставить(guid, Обработчик);
	
КонецПроцедуры

Процедура ЗапроситьДанныеПоСсылкам(Компонента, Обработчики, ЖдемРезультатыОтправки, Сообщение, СтруктураСообщения)
	
	ПараметрыПредпросмотра = Новый Соответствие;
	ПараметрыПредпросмотра.Вставить("@type", "linkPreviewOptions");
	ПараметрыПредпросмотра.Вставить("is_disabled", Ложь);
	ПараметрыПредпросмотра.Вставить("url", "");
	ПараметрыПредпросмотра.Вставить("force_small_media", Ложь);
	ПараметрыПредпросмотра.Вставить("force_large_media", Ложь);
	ПараметрыПредпросмотра.Вставить("show_above_text", Истина);
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "getWebPagePreview");
	ЗапросКомпоненты.Вставить("text", СтруктураСообщения);
	ЗапросКомпоненты.Вставить("linkPreviewOptions", ПараметрыПредпросмотра);

	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
	Компонента.Отправить(ЗапросJSON);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ОбновитьДанныеПоСсылке");
	Обработчик.Вставить("Параметры", Новый Структура("Идентификатор, СтруктураСообщения",
		Сообщение.ID_Сообщения, СтруктураСообщения));
	Обработчики.Вставить(guid,  Обработчик);
	
	ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
	
	Для Каждого textEntity Из СтруктураСообщения["entities"] Цикл
		Если textEntity["type"]["@type"] = "textEntityTypeUrl" Тогда
			ТекстСсылки = Сред(Сообщение.ТекстСообщения, textEntity["offset"] + 1, textEntity["length"]);
			ЗапросКомпоненты = Новый Соответствие;
			// Обрабатываем только ссылки телеграм
			Если Не (СтрНачинаетсяС(ТекстСсылки, "t.me/")
				Или СтрНайти(ТекстСсылки, "/t.me/") > 0
				Или СтрНачинаетсяС(ТекстСсылки, "tg:")
				Или СтрНачинаетсяС(ТекстСсылки, "telegram.me/")
				Или СтрНайти(ТекстСсылки, "/telegram.me/") > 0) Тогда
				
				Продолжить;
			КонецЕсли;
			ПараметрыОбработчика = Новый Структура("Идентификатор, Ссылка", Сообщение.ID_Сообщения, ТекстСсылки);
			Если СтрНачинаетсяС(ТекстСсылки, "tg:") Тогда
				Позиция = СтрНайти(ТекстСсылки, "resolve?domain=");
				Если Позиция > 0 Тогда
					ИмяПользователя = Сред(ТекстСсылки, Позиция + 15);
					Позиция = СтрНайти(ИмяПользователя, "&");
					Если Позиция > 0 Тогда
						ИмяПользователя = Лев(ИмяПользователя, Позиция - 1);
					КонецЕсли;
					ЗапроситьПоискПоИмениПользователя(Компонента, Обработчики, ИмяПользователя, ПараметрыОбработчика);
					ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
					Продолжить;
				КонецЕсли;
				Позиция = СтрНайти(ТекстСсылки, "join?invite=");
				Если Позиция > 0 Тогда
					//Хеш = Сред(ТекстСсылки, Позиция + 12);
					ЗапроситьПоискПоХешу(Компонента, Обработчики, ТекстСсылки, ПараметрыОбработчика);
				КонецЕсли;
			Иначе
				ДанныеСсылки = "";				
				Позиция = СтрНайти(ТекстСсылки, ".me/");
				Если Позиция > 0 Тогда
					ДанныеСсылки = Сред(ТекстСсылки, Позиция + 4);
					Если СтрНачинаетсяС(ДанныеСсылки, "+") Тогда
						ЗапроситьПоискПоХешу(Компонента, Обработчики, ТекстСсылки, ПараметрыОбработчика);
					Иначе
						Позиция = СтрНайти(ДанныеСсылки, "?");
						Если Позиция > 0 Тогда
							ДанныеСсылки = Лев(ДанныеСсылки, Позиция - 1);
						КонецЕсли;
						Позиция = СтрНайти(ДанныеСсылки, "/");
						Если Позиция > 0 Тогда
							ДанныеСсылки = Лев(ДанныеСсылки, Позиция - 1);
						КонецЕсли;
						ЗапроситьПоискПоИмениПользователя(Компонента, Обработчики, ДанныеСсылки, ПараметрыОбработчика);
						ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапроситьПоискПоИмениПользователя(Компонента, Обработчики, ИмяПользователя, Параметры)
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "searchContacts");
	ЗапросКомпоненты.Вставить("query", ИмяПользователя);
	ЗапросКомпоненты.Вставить("limit", 3);

	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
	Компонента.Отправить(ЗапросJSON);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ОбновитьДанныеПоСсылке");
	Обработчик.Вставить("Параметры", Параметры);
	Обработчики.Вставить(guid,  Обработчик);

	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "searchPublicChats");
	ЗапросКомпоненты.Вставить("query", ИмяПользователя);

	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
	Компонента.Отправить(ЗапросJSON);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ОбновитьДанныеПоСсылке");
	Обработчик.Вставить("Параметры", Параметры);
	Обработчики.Вставить(guid,  Обработчик);
КонецПроцедуры

Процедура ЗапроситьПоискПоХешу(Компонента, Обработчики, Приглашение, Параметры)
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "checkChatInviteLink");
	ЗапросКомпоненты.Вставить("invite_link", Приглашение);

	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
	Компонента.Отправить(ЗапросJSON);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ОбновитьДанныеПоСсылке");
	Обработчик.Вставить("Параметры", Параметры);
	Обработчики.Вставить(guid,  Обработчик);
КонецПроцедуры

Функция ПроверитьПоследнееСообщение(Компонента, УчетнаяЗапись, ИдентификаторЧата, ИдентификаторПоследнего, Обработчики)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
						  |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись");
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ID_Сообщения", Формат(ИдентификаторПоследнего, "ЧГ=0"));
	Запрос.УстановитьПараметр("Группа", Формат(ИдентификаторЧата, "ЧГ=0"));
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.CRM_ВидыСообщенияМессенджера.Входящее);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_СообщениеМессенджера.ID_Сообщения КАК ID_Сообщения
	               |ИЗ
	               |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	               |ГДЕ
	               |	CRM_СообщениеМессенджера.Группа = &Группа
	               |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	               |	И CRM_СообщениеМессенджера.ВидСообщения = &ВидСообщения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_СообщениеМессенджера.Дата УБЫВ";
	
    Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Попытка
			ID_Сообщения = Число(Выборка.ID_Сообщения);
		Исключение
			ID_Сообщения = 0;
		КонецПопытки;
	Иначе
		ID_Сообщения = 0;
	КонецЕсли;
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "getChatHistory");
	ЗапросКомпоненты.Вставить("chat_id", ИдентификаторЧата);
	ЗапросКомпоненты.Вставить("from_message_id", ИдентификаторПоследнего);
	ЗапросКомпоненты.Вставить("limit", 20);

	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПоследнееЗагруженное", ID_Сообщения);
	ПараметрыОбработчика.Вставить("ПроверяемыйИдентификатор", ИдентификаторПоследнего);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ПроверитьИсториюЧата");
	Обработчик.Вставить("Параметры", ПараметрыОбработчика);
	Обработчики.Вставить(guid,  Обработчик);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
		
	Компонента.Отправить(ЗапросJSON);
	
	Возврат Истина;
КонецФункции

Процедура ОтправитьСообщения(Компонента, УчетнаяЗапись, Обработчики, НачальныеСообщения, ЖдемРезультатыОтправки)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОчередьЗапросовКМессенджеру.Идентификатор КАК Идентификатор,
	                      |	CRM_ОчередьЗапросовКМессенджеру.ДанныеСообщения КАК ДанныеСообщения
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОчередьЗапросовКМессенджеру КАК CRM_ОчередьЗапросовКМессенджеру
	                      |ГДЕ
	                      |	CRM_ОчередьЗапросовКМессенджеру.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И НЕ CRM_ОчередьЗапросовКМессенджеру.Отправляется");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Данные = Выборка.ДанныеСообщения.Получить();
		Данные.Вставить("Идентификатор", Выборка.Идентификатор);
		Если Данные.Тип = "Сообщение" Тогда
			НачатьОтправкуСообщения(Компонента, Данные, Обработчики, НачальныеСообщения);
			ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
		ИначеЕсли Данные.Тип = "ОтметкаОПрочтении" Тогда
			Обработчик_ОтметкаОПрочтении(Компонента, Данные, Обработчики);
		ИначеЕсли Данные.Тип = "Прозвон" Тогда
			Обработчик_ПроверитьПользователя(Компонента, Данные, Обработчики);
		КонецЕсли;
		МЗ = РегистрыСведений.CRM_ОчередьЗапросовКМессенджеру.СоздатьМенеджерЗаписи();
		МЗ.УчетнаяЗапись = УчетнаяЗапись;
		МЗ.Идентификатор = Выборка.Идентификатор;
		МЗ.Прочитать();
		МЗ.Отправляется = Истина;
		МЗ.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура НачатьОтправкуСообщения(Компонента, Параметры, Обработчики, НачальныеСообщения)
	
	Если Параметры.ДопПараметры.Свойство("СообщениеОснование")
		И ЗначениеЗаполнено(Параметры.ДопПараметры.СообщениеОснование) Тогда
		chat_id = Число(Параметры.ДопПараметры.СообщениеОснование.Группа);
		message_id = Число(Параметры.ДопПараметры.СообщениеОснование.ID_Сообщения);
		Если НачальныеСообщения[chat_id] = Неопределено 
			Или НачальныеСообщения[chat_id] <= message_id Тогда
			Обработчик_ОтправитьСообщение(Компонента, Параметры, Обработчики);
        Иначе
			ЗапросКомпоненты = Новый Соответствие;
			ЗапросКомпоненты.Вставить("@type", "getMessage");
			ЗапросКомпоненты.Вставить("chat_id", chat_id);
			ЗапросКомпоненты.Вставить("message_id", message_id);
			guid = Строка(Новый УникальныйИдентификатор());
			ЗапросКомпоненты.Вставить("@extra", guid);

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();			
			ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
			ЗапросJSON = ЗаписьJSON.Закрыть();
				
			Компонента.Отправить(ЗапросJSON);
			
			Обработчик = Новый Структура;
			Обработчик.Вставить("Метод", "Обработчик_ОтправитьСообщение");
			Обработчик.Вставить("Параметры", Параметры);
			Обработчики.Вставить(guid,  Обработчик);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.IDПользователя) Тогда
		ЗапросКомпоненты = Новый Соответствие;
		ЗапросКомпоненты.Вставить("@type", "createPrivateChat");
		ЗапросКомпоненты.Вставить("user_id", Число(Параметры.IDПользователя));
		guid = Строка(Новый УникальныйИдентификатор());
		ЗапросКомпоненты.Вставить("@extra", guid);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();			
		ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
		ЗапросJSON = ЗаписьJSON.Закрыть();
			
		Компонента.Отправить(ЗапросJSON);
		
		Обработчик = Новый Структура;
		Обработчик.Вставить("Метод", "Обработчик_ОтправитьСообщение");
		Обработчик.Вставить("Параметры", Параметры);
		Обработчики.Вставить(guid,  Обработчик);
	Иначе
		Обработчик_ОтправитьСообщение(Компонента, Параметры, Обработчики);
	КонецЕсли;
	
КонецПроцедуры

Процедура Обработчик_ОтправитьСообщение(Компонента, Параметры, Обработчики)
	
	Если Параметры.ДопПараметры<>Неопределено И Параметры.ДопПараметры.Свойство("Группа")
		И ЗначениеЗаполнено(Параметры.ДопПараметры.Группа) Тогда
		Получатель = Параметры.ДопПараметры.Группа;
	Иначе
		Получатель = Параметры.IDПользователя;
	КонецЕсли;
	
	Если Параметры.СписокФайлов<>Неопределено И Параметры.СписокФайлов.Количество()> 0 Тогда 
		
		ФорматированныйТекст = Новый Соответствие;
		ФорматированныйТекст.Вставить("@type", "formattedText");
		ФорматированныйТекст.Вставить("text", Параметры.Сообщение);
		
		ОписаниеФайла = Новый Соответствие;
		ОписаниеФайла.Вставить("@type", "inputFileLocal");
		ОписаниеФайла.Вставить("path", Параметры.СписокФайлов[0].Значение);
		
		СодержимоеСообщения = Новый Соответствие;
		СодержимоеСообщения.Вставить("@type", "inputMessageDocument");
		СодержимоеСообщения.Вставить("caption", ФорматированныйТекст);
		СодержимоеСообщения.Вставить("document", ОписаниеФайла);
		
	ИначеЕсли ЗначениеЗаполнено(СокрЛП(Параметры.Сообщение)) Тогда
		
		ФорматированныйТекст = Новый Соответствие;
		ФорматированныйТекст.Вставить("@type", "formattedText");
		ФорматированныйТекст.Вставить("text", Параметры.Сообщение);

		СодержимоеСообщения = Новый Соответствие;
		СодержимоеСообщения.Вставить("@type", "inputMessageText");
		СодержимоеСообщения.Вставить("text", ФорматированныйТекст);
		
		
	КонецЕсли;

	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "sendMessage");
    ЗапросКомпоненты.Вставить("chat_id", Получатель);
	ЗапросКомпоненты.Вставить("input_message_content", СодержимоеСообщения);
	ЗапросКомпоненты.Вставить("@extra", Параметры.Идентификатор);
	
	Если Параметры.ДопПараметры.Свойство("СообщениеОснование") 
		И ЗначениеЗаполнено(Параметры.ДопПараметры.СообщениеОснование) Тогда
		
		Попытка
			ОтветНа = Новый Соответствие;
			ОтветНа.Вставить("@type", "inputMessageReplyToMessage");
			ОтветНа.Вставить("message_id", Число(Параметры.ДопПараметры.СообщениеОснование.ID_Сообщения));
			
			ЗапросКомпоненты.Вставить("reply_to", ОтветНа);
		Исключение
		КонецПопытки;
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
		
	Компонента.Отправить(ЗапросJSON);
	
	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_ПослеОтправкиСообщения");
	Обработчик.Вставить("Параметры", Параметры);
	Обработчики.Вставить(Параметры.Идентификатор,  Обработчик);
	
КонецПроцедуры

Процедура Обработчик_ПослеОтправкиСообщения(Параметры, ОтветКомпоненты, ИдОтправленныхСообщений);

	idСообщения = ОтветКомпоненты["id"];
	Если idСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдОтправленныхСообщений.Вставить(idСообщения, Параметры.Идентификатор);

КонецПроцедуры

Процедура Обработчик_ЗаменитьИдентификаторСообщения(УчетнаяЗапись, ОтветКомпоненты,
	ИдОтправленныхСообщений, СоответствиеСообщений)
	
	Идентификатор = ИдОтправленныхСообщений[ОтветКомпоненты["old_message_id"]];
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ID_Сообщения = Формат(ОтветКомпоненты["message"]["id"], "ЧГ=0");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ID_Сообщения", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СообщениеОб = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОб.ID_Сообщения = ID_Сообщения;
		СообщениеОб.Записать();
		
		МереджерЗаписи = РегистрыСведений.CRM_ОчередьЗапросовКМессенджеру.СоздатьМенеджерЗаписи();
		МереджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МереджерЗаписи.Идентификатор = Идентификатор;
		МереджерЗаписи.Прочитать();
		Если МереджерЗаписи.Выбран() Тогда
			МереджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	ИдОтправленныхСообщений.Удалить(ОтветКомпоненты["old_message_id"]);
	Если СоответствиеСообщений[ID_Сообщения] <> Неопределено Тогда
		СоответствиеСообщений.Удалить(ID_Сообщения);
	КонецЕсли;
 	idСообщенияСтар = Формат(ОтветКомпоненты["old_message_id"], "ЧГ=0");
	Если СоответствиеСообщений.Получить(idСообщенияСтар) <> Неопределено Тогда
		СоответствиеСообщений.Удалить(idСообщенияСтар);
	КонецЕсли;

КонецПроцедуры

Процедура Обработчик_ПрисоединитьФайл(Параметры, ОтветКомпоненты, СоответствиеСообщений, ЖдемФайлы)
	
	Если ОтветКомпоненты.Получить("@type") <> "file" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЖдемФайлы > 0 Тогда
		ЖдемФайлы = ЖдемФайлы - 1;
	КонецЕсли;
	
	ПутьКФайлу = ОтветКомпоненты["local"]["path"];
	Если СтрНачинаетсяС(ПутьКФайлу, КаталогВременныхФайлов()) Тогда
		Возврат;
	КонецЕсли;
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Сообщение = СоответствиеСообщений.Получить(Параметры.Идентификатор);
		Если Сообщение <> Неопределено Тогда
			ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла);
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
			ПараметрыФайла.Вставить("Автор", Неопределено);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Файл.Расширение, 2));
			ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
			ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
			Сообщение.Вложения.Добавить(ПараметрыФайла);
			УдалитьФайлы(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Обработчик_ОбновитьПредставлениеКонтакта(Параметры, ОтветКомпоненты, СоответствиеСообщений)
	
	Если ОтветКомпоненты.Получить("@type") <> "user" Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = СоответствиеСообщений.Получить(Параметры.Идентификатор);
	Если Сообщение <> Неопределено Тогда
		Если Сообщение.КонтактПредставление = "" Тогда
			Сообщение.КонтактПредставление = ОтветКомпоненты["first_name"] + " " + ОтветКомпоненты["last_name"];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Обработчик_ОбновитьПредставлениеГруппы(Параметры, ОтветКомпоненты, СоответствиеСообщений)
	
	Если ОтветКомпоненты.Получить("@type") <> "chat" Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = СоответствиеСообщений.Получить(Параметры.Идентификатор);
	Если Сообщение <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Сообщение.ГруппаПредставление) Тогда
			Сообщение.ГруппаПредставление = ОтветКомпоненты["title"];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Обработчик_ОбновитьДанныеПоСсылке(Параметры, ОтветКомпоненты, СоответствиеСообщений)
	
	Тип = ОтветКомпоненты.Получить("@type");
	Если Тип <> "webPage"
		И Тип <> "users"
		И Тип <> "chats"
		И Тип <> "chatInviteLinkInfo" Тогда
		Возврат;
	КонецЕсли;
	Сообщение = СоответствиеСообщений.Получить(Параметры.Идентификатор);
	Если Сообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Сообщение.ТекстHTML = Неопределено Тогда
		Сообщение.ТекстHTML = Сообщение.ТекстСообщения;
	КонецЕсли;
	
	Если Тип = "webPage" Тогда
		Если ЗначениеЗаполнено(ОтветКомпоненты["title"]) Тогда
			Заголовок = ОтветКомпоненты["title"];
		ИначеЕсли ЗначениеЗаполнено(ОтветКомпоненты["site_name"]) Тогда
			Заголовок = ОтветКомпоненты["site_name"];
		КонецЕсли;
		Описание = ОтветКомпоненты["description"]["text"];
		
		СписокСсылок = Новый СписокЗначений;
		Для Каждого textEntity Из Параметры["СтруктураСообщения"]["entities"] Цикл
			Если textEntity["type"]["@type"] = "textEntityTypeUrl" Тогда
				ТекстСсылки = Сред(Сообщение.ТекстСообщения, textEntity["offset"] + 1, textEntity["length"]);
				ТекстСсылкиHTML = "<a href='" + ТекстСсылки + "'>" + ТекстСсылки + "</a>";
				Если СписокСсылок.НайтиПоЗначению(ТекстСсылки) = Неопределено Тогда
					СписокСсылок.Добавить(ТекстСсылки, ТекстСсылкиHTML);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Ссылка Из СписокСсылок Цикл
			Если СтрНайти(Сообщение.ТекстHTML, ">" + ТекстСсылки + "<") = 0 Тогда
				Сообщение.ТекстHTML = СтрЗаменить(Сообщение.ТекстHTML, Ссылка.Значение, Ссылка.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Сообщение.ТекстHTML = Сообщение.ТекстHTML + Символы.ПС + "<p><b>" + Заголовок + "</b></p>";
		Если ЗначениеЗаполнено(Описание) Тогда
			Сообщение.ТекстHTML = Сообщение.ТекстHTML + Символы.ПС + Описание;
		КонецЕсли;
	Иначе
		ДанныеСсылки = Новый Структура;
		Если Тип = "users" Тогда
			Если ОтветКомпоненты["user_ids"].Количество() = 1 Тогда
				ДанныеСсылки.Вставить("ID_Пользователя", Формат(ОтветКомпоненты["user_ids"][0], "ЧГ=0"));
			КонецЕсли;
		ИначеЕсли Тип = "chats" Тогда
			Если ОтветКомпоненты["chat_ids"].Количество() = 1 Тогда
				ДанныеСсылки.Вставить("ID_Группы", Формат(ОтветКомпоненты["chat_ids"][0], "ЧГ=0"));
			КонецЕсли;
		ИначеЕсли Тип = "chatInviteLinkInfo" Тогда
			ДанныеСсылки.Вставить("ID_Группы", Формат(ОтветКомпоненты["chat_id"], "ЧГ=0"));
		КонецЕсли;
		Если ДанныеСсылки.Количество() > 0 Тогда
			ДанныеСсылки.Вставить("Ссылка", Параметры.Ссылка);
			ДанныеСсылкиВнутр = "ДанныеСсылкиВнутр_" + ЗначениеВСтрокуВнутр(ДанныеСсылки);
			Если СтрНайти(Сообщение.ТекстHTML, "<a href='" + Параметры.Ссылка) > 0 Тогда
				Сообщение.ТекстHTML = СтрЗаменить(Сообщение.ТекстHTML, 
					"<a href='" + Параметры.Ссылка, "<a href='" +ДанныеСсылкиВнутр);
			Иначе	
				ТекстСсылкиHTML = "<a href='" + ДанныеСсылкиВнутр + "'>" + Параметры.Ссылка + "</a>";
				Сообщение.ТекстHTML = СтрЗаменить(Сообщение.ТекстHTML, Параметры.Ссылка, ТекстСсылкиHTML);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция Обработчик_ПрочитатьСообщение(Компонента, ОтветКомпоненты, Обработчики,
	ЖдемФайлы, ЖдемРезультатыОтправки, УчетнаяЗапись, Контакты, Чаты = Неопределено)
	
	Если ОтветКомпоненты.Получить("@type") = "message" Тогда
		message = ОтветКомпоненты;
	Иначе
		message = ОтветКомпоненты["message"];
	КонецЕсли;
	Если message = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Чаты <> Неопределено И Чаты.Найти(message["chat_id"]) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
	
	Если ОтветКомпоненты.Получить("@type") = "updateNewMessage"
		Или ОтветКомпоненты.Получить("@type") = "message" Тогда
		Контент = message["content"];
		
		Сообщение.Дата = МестноеВремя(Дата(1970, 1, 1) + message["date"]);
		Сообщение.ID_Сообщения = Формат(message["id"], "ЧГ=0");
		Сообщение.Группа = Формат(message["chat_id"], "ЧГ=0");
		
		ЭтоИсходящееСообщение = message["is_outgoing"];
		user_id = "";
		Если ЭтоИсходящееСообщение Тогда
			Сообщение.ВидСообщения = "Исходящее";
			Если message["chat_id"] > 0 Тогда
				user_id = Сообщение.Группа;
			КонецЕсли;
		Иначе
			Сообщение.ВидСообщения = "Входящее";
			user_id_Число = message["sender_id"]["user_id"];
			user_id = Формат(user_id_Число, "ЧГ=0");
			Если Не ЗначениеЗаполнено(user_id)
				Или user_id_Число = 777000 Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Контакты[user_id] <> Неопределено Тогда	
			Если Контакты[user_id].Удален Тогда
				Возврат Неопределено;
			КонецЕсли;
			ИмяПользователя = Контакты[user_id].Наименование;
		Иначе
			ИмяПользователя = "";

			Запрос = Новый Соответствие;
			Запрос.Вставить("@type", "getUser");
			Запрос.Вставить("user_id", user_id_Число);

			guid = Строка(Новый УникальныйИдентификатор());
			Запрос.Вставить("@extra", guid);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();			
			ЗаписатьJSON(ЗаписьJSON, Запрос);	
			ЗапросJSON = ЗаписьJSON.Закрыть();
			Компонента.Отправить(ЗапросJSON);

			Обработчик = Новый Структура;
			Обработчик.Вставить("Метод", "Обработчик_ОбновитьПредставлениеКонтакта");
			Обработчик.Вставить("Параметры", Новый Структура("Идентификатор", Сообщение.ID_Сообщения));
			Обработчики.Вставить(guid,  Обработчик);
			
			ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
		КонецЕсли;
		Сообщение.ID_Пользователя = user_id;
		
		Если ЗначениеЗаполнено(user_id) Тогда
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
				УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Если ЗначениеЗаполнено(Контакт) Тогда
				Сообщение.Контакт = Контакт;
			КонецЕсли;
		КонецЕсли;
		Сообщение.КонтактПредставление = ИмяПользователя; 
		
		Если message["chat_id"] < 0 Тогда
			Запрос = Новый Соответствие;
			Запрос.Вставить("@type", "getChat");
			Запрос.Вставить("chat_id", message["chat_id"]);

			guid = Строка(Новый УникальныйИдентификатор());
			Запрос.Вставить("@extra", guid);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();			
			ЗаписатьJSON(ЗаписьJSON, Запрос);	
			ЗапросJSON = ЗаписьJSON.Закрыть();
			Компонента.Отправить(ЗапросJSON);

			Обработчик = Новый Структура;
			Обработчик.Вставить("Метод", "Обработчик_ОбновитьПредставлениеГруппы");
			Обработчик.Вставить("Параметры", Новый Структура("Идентификатор", Сообщение.ID_Сообщения));
			Обработчики.Вставить(guid,  Обработчик);

			ЖдемРезультатыОтправки = ЖдемРезультатыОтправки + 1;
		КонецЕсли;

	Иначе
		Сообщение.ID_Сообщения = Формат(ОтветКомпоненты["message_id"], "ЧГ=0");
		Сообщение.Группа = Формат(ОтветКомпоненты["chat_id"], "ЧГ=0");

		Контент = ОтветКомпоненты["new_content"];
	КонецЕсли;
	
	Если message["reply_to"] <> Неопределено Тогда
		Сообщение.ID_СообщенияОснования = Формат(message["reply_to"]["message_id"], "ЧГ=0");
	КонецЕсли;
	Если Контент["@type"] = "messageText" Тогда
		
		ТекстСообщения = Контент["text"]["text"];
		Сообщение.ТекстСообщения = ТекстСообщения;
		Для Каждого textEntity Из Контент["text"]["entities"] Цикл
			Если textEntity["type"]["@type"] = "textEntityTypeUrl" Тогда
				ЗапроситьДанныеПоСсылкам(Компонента, Обработчики, ЖдемРезультатыОтправки, Сообщение, Контент["text"]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Контент["@type"] = "messagePhoto" Тогда
		
		ТекстСообщения = Контент["caption"]["text"];
		Сообщение.ТекстСообщения = ТекстСообщения;
		МаксРазмер = 0;
		ТекРазмер = Неопределено;
		Для Каждого Размер Из Контент["photo"]["sizes"] Цикл
			Если МаксРазмер < Размер["height"] Тогда
				МаксРазмер = Размер["height"];
				ТекРазмер = Размер;
			КонецЕсли;
		КонецЦикла;
		Если ТекРазмер <> Неопределено Тогда
			Файл_id = ТекРазмер["photo"]["id"];
			
			Запрос = Новый Соответствие;
			Запрос.Вставить("@type", "downloadFile");
			Запрос.Вставить("file_id", Файл_id);
			Запрос.Вставить("priority", 16);
			Запрос.Вставить("synchronous", Истина);

			guid = Строка(Новый УникальныйИдентификатор());
			Запрос.Вставить("@extra", guid);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();			
			ЗаписатьJSON(ЗаписьJSON, Запрос);	
			ЗапросJSON = ЗаписьJSON.Закрыть();
			Компонента.Отправить(ЗапросJSON);
			ЖдемФайлы = ЖдемФайлы + 1;

			Обработчик = Новый Структура;
			Обработчик.Вставить("Метод", "Обработчик_ПрисоединитьФайл");
			Обработчик.Вставить("Параметры", Новый Структура("Идентификатор", Сообщение.ID_Сообщения));
			Обработчики.Вставить(guid,  Обработчик);
		КонецЕсли;
		
	ИначеЕсли Контент["@type"] = "messageAudio" 
		Или Контент["@type"] = "messageVideo"
		Или Контент["@type"] = "messageDocument"
		Или Контент["@type"] = "messageVoiceNote"
		Или Контент["@type"] = "messageAnimation" Тогда
		
		Если Контент["caption"] <> Неопределено Тогда
			ТекстСообщения = Контент["caption"]["text"];
			Сообщение.ТекстСообщения = ТекстСообщения;
		КонецЕсли;
		
		Если Контент["@type"] = "messageAudio" Тогда
			Файл_id = Контент["audio"]["audio"]["id"];
		ИначеЕсли Контент["@type"] = "messageVideo" Тогда
			Файл_id = Контент["video"]["video"]["id"];
		ИначеЕсли Контент["@type"] = "messageDocument" Тогда
			Файл_id = Контент["document"]["document"]["id"];
		ИначеЕсли Контент["@type"] = "messageVoiceNote" Тогда
			Файл_id = Контент["voice_note"]["voice"]["id"];
		ИначеЕсли Контент["@type"] = "messageAnimation" Тогда
			Файл_id = Контент["animation"]["animation"]["id"];
		КонецЕсли;
		
		Запрос = Новый Соответствие;
		Запрос.Вставить("@type", "downloadFile");
		Запрос.Вставить("file_id", Файл_id);
		Запрос.Вставить("priority", 16);
		Запрос.Вставить("synchronous", Истина);

		guid = Строка(Новый УникальныйИдентификатор());
		Запрос.Вставить("@extra", guid);
			
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();			
		ЗаписатьJSON(ЗаписьJSON, Запрос);	
		ЗапросJSON = ЗаписьJSON.Закрыть();
		Компонента.Отправить(ЗапросJSON);
		ЖдемФайлы = ЖдемФайлы + 1;

		Обработчик = Новый Структура;
		Обработчик.Вставить("Метод", "Обработчик_ПрисоединитьФайл");
		Обработчик.Вставить("Параметры", Новый Структура("Идентификатор", Сообщение.ID_Сообщения));
		Обработчики.Вставить(guid,  Обработчик);
		
	ИначеЕсли Контент["@type"] = "messageContact" Тогда
		
		Сообщение.ТекстСообщения = Контент["contact"]["vcard"];
		Если Не ЗначениеЗаполнено(Сообщение.ТекстСообщения) Тогда
			Сообщение.ТекстСообщения = Контент["contact"]["first_name"] 
				+ " " + Контент["contact"]["last_name"]
				+ Символы.ПС + Контент["contact"]["phone_number"];
		КонецЕсли;
		
	ИначеЕсли Контент["@type"] = "messageLocation" Тогда
		
		Сообщение.ТекстСообщения    = СтрШаблон("https://yandex.ru/maps/?pt=%1,%2&z=18&l=map"
		, Формат(Контент["location"]["longitude"], "ЧРД=.")
		, Формат(Контент["location"]["latitude"], "ЧРД=." ));
		
	ИначеЕсли Контент["@type"] = "messageAnimatedEmoji" Тогда
		
		ТекстСообщения = Контент["emoji"];
		Сообщение.ТекстСообщения = ТекстСообщения;
		
	ИначеЕсли Контент["@type"] = "messageSticker" Тогда
		
		ТекстСообщения = Контент["sticker"]["emoji"];
		Сообщение.ТекстСообщения = ТекстСообщения;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Сообщение;
	
КонецФункции

Процедура Обработчик_ОтметкаОПрочтении(Компонента, Параметры, Обработчики)
	
	Чаты = Новый Массив;
	Для каждого Чат Из Параметры.МассивЧатов Цикл
		СтруктураЧата = Новый Соответствие;
		СтруктураЧата.Вставить("@type", "сhat");
		СтруктураЧата.Вставить("id", Чат);
		Чаты.Добавить(СтруктураЧата);
	КонецЦикла;
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "readChatList");
	guid = Строка(Новый УникальныйИдентификатор());
	ЗапросКомпоненты.Вставить("@extra", guid);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
		
	Компонента.Отправить(ЗапросJSON);
	
КонецПроцедуры

Процедура Обработчик_ПроверитьПользователя(Компонента, Параметры, Обработчики)
	
	Контакт = Новый Соответствие;
	Контакт.Вставить("@type", "contact");
	Контакт.Вставить("phone_number", Параметры.НомерТелефона);
		
	Контакты = Новый Массив;
	Контакты.Добавить(Контакт);
	
	Запрос = Новый Соответствие;
	Запрос.Вставить("@type", "importContacts");
	Запрос.Вставить("contacts", Контакты);	

	guid = Строка(Новый УникальныйИдентификатор());
	Запрос.Вставить("@extra", guid);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();			
	ЗаписатьJSON(ЗаписьJSON, Запрос);	
	ЗапросJSON = ЗаписьJSON.Закрыть();
		
	Компонента.Отправить(ЗапросJSON);

	Обработчик = Новый Структура;
	Обработчик.Вставить("Метод", "Обработчик_РезультатПроверкиПользователя");
	Обработчик.Вставить("Параметры", Параметры);
	Обработчики.Вставить(guid,  Обработчик);
	
КонецПроцедуры

Процедура Обработчик_РезультатПроверкиПользователя(ОтветКомпоненты, Параметры, УчетнаяЗапись)
	
	ИдПользователя = ОтветКомпоненты["user_ids"][0];
	
	Результат = Новый Структура("Доступен, Описание", Ложь, "");
	Если ИдПользователя <> 0 Тогда		
		Результат.Доступен = Истина;
		КонтактнаяИнформация = Новый Структура("Представление, ЗначенияПолей, Значение");
		КонтактнаяИнформация.Представление = НачалоАдресаСтраницыПользователя() + Формат(ИдПользователя, "ЧГ=0");
		ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(ТипКИМессенджера());
		ЗначенияПолей.value = КонтактнаяИнформация.Представление;
		КонтактнаяИнформация.ЗначенияПолей = ЗначенияПолей;
		КонтактнаяИнформация.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ЗначенияПолей);
		Результат.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	КонецЕсли;
	
	МЗ = РегистрыСведений.CRM_ОчередьЗапросовКМессенджеру.СоздатьМенеджерЗаписи();
	МЗ.УчетнаяЗапись = УчетнаяЗапись;
	МЗ.Идентификатор = Параметры.Идентификатор;
	МЗ.Прочитать();
	МЗ.ПолученОтвет = Истина;
	МЗ.ДанныеСообщения = Новый ХранилищеЗначения(Результат);
	МЗ.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
