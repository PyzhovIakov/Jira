
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияКомпоненты = "1_1830_2_7";
	
	Идентификатор = СтрЗаменить(Строка(Параметры.УчетнаяЗапись.УникальныйИдентификатор()), "-", "");
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	Элементы.ГруппаИнициализация.Видимость = ЗначениеЗаполнено(Объект.ПутьКБазеДанных);
	Если ЗначениеЗаполнено(Объект.НомерТелефона)
		И ЗначениеЗаполнено(Объект.ПутьКБазеДанных) Тогда
		ПроверитьПодключениеКTelegram();
	КонецЕсли;
	
	КомпонентаИзФайла = ЗначениеЗаполнено(Объект.ПутьККомпоненте);
	Элементы.ПутьККомпоненте.Видимость = КомпонентаИзФайла;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	Если ЭтоФайловаяБаза Тогда
		Элементы.ПутьКБазеДанных.РасширеннаяПодсказка.Заголовок = 
			"Каталог должен быть доступен для всех пользователей 1С";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСправка(Команда)

	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("Telegram"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Попытка
		ПроверитьПодключениеКTelegram();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = ?(Инфо.Причина = Неопределено, Инфо.Описание, Инфо.Причина.Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Описание);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПараметрыДоступа = Новый Структура;
		ПараметрыДоступа.Вставить("НомерТелефона", Объект.НомерТелефона);
		ПараметрыДоступа.Вставить("ПутьКБазеДанных", Объект.ПутьКБазеДанных);
		ПараметрыДоступа.Вставить("ПутьККомпоненте", Объект.ПутьККомпоненте);
		Закрыть(ПараметрыДоступа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодПодтверждения(Команда)
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "setAuthenticationPhoneNumber");
	ЗапросКомпоненты.Вставить("phone_number", Объект.НомерТелефона);
	Ответ = ОтправитьЗапросСервер(ЗапросКомпоненты);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ["@type"] = "updateAuthorizationState" Тогда
		ОбработкаАвторизации(Ответ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПотверждения(Команда)
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "checkAuthenticationCode");
	ЗапросКомпоненты.Вставить("code", КодПодтверждения);
	Ответ = ОтправитьЗапросСервер(ЗапросКомпоненты);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ["@type"] = "updateAuthorizationState" Тогда
		ОбработкаАвторизации(Ответ);
	ИначеЕсли Ответ["Ошибка"] = "PHONE_CODE_INVALID"	Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Код неверный!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПароль(Команда)
	
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "checkAuthenticationPassword");
	ЗапросКомпоненты.Вставить("password", Пароль);
	Ответ = ОтправитьЗапросСервер(ЗапросКомпоненты);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ["@type"] = "updateAuthorizationState" Тогда
		ОбработкаАвторизации(Ответ);
	ИначеЕсли Ответ["Ошибка"] = "PASSWORD_HASH_INVALID"	Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Пароль неверный!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьПодключениеКTelegram()
	ЗапросКомпоненты = Новый Соответствие;
	ЗапросКомпоненты.Вставить("@type", "test");
	ЗапросКомпоненты.Вставить("phone_number", Объект.НомерТелефона);
	Ответ = ОтправитьЗапросСервер(ЗапросКомпоненты);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ["@type"] = "updateAuthorizationState" Тогда
		ОбработкаАвторизации(Ответ);
		Если Ответ["authorization_state"]["@type"] <> "authorizationStateReady" Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Авторизация не выполнена!'"));
		КонецЕсли;
	ИначеЕсли Ответ["Ошибка"] <> Неопределено Тогда
		Элементы.ДекорацияОшибка.Видимость = Истина;
		Элементы.ДекорацияОшибка.Заголовок = Ответ["Ошибка"];
		Элементы.НомерТелефона.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
   	Элементы.ПолучитьКодПодтверждения.Доступность = ЗначениеЗаполнено(Объект.НомерТелефона);
	Если ЗначениеЗаполнено(Объект.НомерТелефона) Тогда
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Элементы.ПолучитьКодПодтверждения.Доступность = ЗначениеЗаполнено(Текст);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработкаАвторизации(ОтветКомпоненты)
		
	Если ОтветКомпоненты["authorization_state"]["@type"] = "authorizationStateWaitPhoneNumber" Тогда
		
		Элементы.ПолучитьКодПодтверждения.Доступность = Истина;
		
	ИначеЕсли ОтветКомпоненты["authorization_state"]["@type"] = "authorizationStateWaitCode" Тогда
		
		Элементы.ГруппаВводКодаПодтверждения.Видимость = Истина;
		              
	ИначеЕсли ОтветКомпоненты["authorization_state"]["@type"] = "authorizationStateWaitPassword" Тогда
		
		Элементы.ГруппаВводКодаПодтверждения.Видимость = Ложь;
		Элементы.ГруппаВводПароля.Видимость = Истина;
		              
	ИначеЕсли ОтветКомпоненты["authorization_state"]["@type"] = "authorizationStateReady" Тогда
		
		Элементы.ГруппаВводКодаПодтверждения.Видимость = Ложь;
		Элементы.ГруппаВводПароля.Видимость = Ложь;
		Элементы.ДекорацияПодключено.Видимость = Истина;
		Элементы.ПолучитьКодПодтверждения.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьЗапросСервер(ЗапросКомпоненты)
	
		
    Если ЗначениеЗаполнено(Объект.ПутьККомпоненте) Тогда
		Файл = Новый Файл(Объект.ПутьККомпоненте);
		Если Не Файл.Существует() Тогда
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не найден файл компоненты!'" + " " + Объект.ПутьККомпоненте));
			Возврат Неопределено;
		ИначеЕсли ВРег(Файл.Расширение) <> ВРег(".zip") Тогда
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Должен быть указан путь к архиву компоненты в формате zip!'"));
			Возврат Неопределено;
		КонецЕсли;
		ИмяКомпоненты = СтрЗаменить(Файл.ИмяБезРасширения, ".", "_") + "Set";
		ДвоичныеДанныеКомпоненты = Новый ДвоичныеДанные(Объект.ПутьККомпоненте);
		АдресКомпоненты = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКомпоненты);
	Иначе
		ИмяКомпоненты = "CRarusTDLibSet" + ВерсияКомпоненты;
		АдресКомпоненты = "Обработка.CRM_РаботаСМессенджеромTelegram.Макет.КомпонентаRarusTDLib";
	КонецЕсли;
	
	ИмяКомпоненты = ИмяКомпоненты + Идентификатор;
	ПодключитьВнешнююКомпоненту(АдресКомпоненты, ИмяКомпоненты, ТипВнешнейКомпоненты.Native); 
 	КомпонентаСервер = Новый("AddIn." + ИмяКомпоненты + ".CRarusTDLib");
	
	Если КомпонентаСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	ИдетАвторизация = Истина;
	Пока ИдетАвторизация Цикл
		Данные = "";
		Если КомпонентаСервер.Получить(Данные) Тогда
			
			Если Данные = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Данные);
			ОтветКомпоненты = ПрочитатьJSON(ЧтениеJSON, Истина);
			
			Если ОтветКомпоненты["@type"] = "updateAuthorizationState" Тогда
				Статус = ОтветКомпоненты["authorization_state"]["@type"];
				Если Статус = "authorizationStateWaitTdlibParameters" Тогда
						
					Запрос = Новый Соответствие;
					Запрос.Вставить("@type", "setTdlibParameters");				
					Запрос.Вставить("database_directory", Объект.ПутьКБазеДанных);
					Запрос.Вставить("api_id", 21466597);
					Запрос.Вставить("api_hash", "70c755bab606b8c584684635659671f5");
					Запрос.Вставить("system_language_code", "en");
					Запрос.Вставить("device_model", "Desktop");
					Запрос.Вставить("system_version", "");
					Запрос.Вставить("application_version", "1.0");
					Запрос.Вставить("database_encryption_key", "");
					
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();			
					ЗаписатьJSON(ЗаписьJSON, Запрос);	
					ЗапросJSON = ЗаписьJSON.Закрыть();
					КомпонентаСервер.Отправить(ЗапросJSON);
					
				ИначеЕсли Статус = "authorizationStateWaitEncryptionKey" Тогда	
					
					Запрос = Новый Соответствие;
					Запрос.Вставить("@type", "checkDatabaseEncryptionKey");
					Запрос.Вставить("encryption_key", "");
					
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();			
					ЗаписатьJSON(ЗаписьJSON, Запрос);	
					ЗапросJSON = ЗаписьJSON.Закрыть();
					КомпонентаСервер.Отправить(ЗапросJSON);
					
				ИначеЕсли Статус = "authorizationStateWaitPhoneNumber" Тогда
					
					Если ЗапросКомпоненты.Получить("@type") = "setAuthenticationPhoneNumber" Тогда
						ЗаписьJSON = Новый ЗаписьJSON;
						ЗаписьJSON.УстановитьСтроку();			
						ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
						ЗапросJSON = ЗаписьJSON.Закрыть();
							
						КомпонентаСервер.Отправить(ЗапросJSON);
					Иначе
						Возврат ОтветКомпоненты;
					КонецЕсли;
					
				ИначеЕсли Статус = "authorizationStateWaitCode" Тогда
					
					Если ЗапросКомпоненты.Получить("@type") = "checkAuthenticationCode" Тогда
						ЗаписьJSON = Новый ЗаписьJSON;
						ЗаписьJSON.УстановитьСтроку();			
						ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
						ЗапросJSON = ЗаписьJSON.Закрыть();
							
						КомпонентаСервер.Отправить(ЗапросJSON);
					Иначе
						Возврат ОтветКомпоненты;
					КонецЕсли;
					
				ИначеЕсли Статус = "authorizationStateWaitPassword" Тогда
					
					Если ЗапросКомпоненты.Получить("@type") = "checkAuthenticationPassword" Тогда
						ЗаписьJSON = Новый ЗаписьJSON;
						ЗаписьJSON.УстановитьСтроку();			
						ЗаписатьJSON(ЗаписьJSON, ЗапросКомпоненты);	
						ЗапросJSON = ЗаписьJSON.Закрыть();
							
						КомпонентаСервер.Отправить(ЗапросJSON);
					Иначе
						Возврат ОтветКомпоненты;
					КонецЕсли;
					
				ИначеЕсли Статус = "authorizationStateReady" Тогда
					
					Возврат ОтветКомпоненты;
					
				КонецЕсли;
			ИначеЕсли ОтветКомпоненты["@type"] = "error" Тогда
				СтруктураОтвета = Новый Соответствие;
				Если СтрНайти(ОтветКомпоненты["message"], 
					"because it is already in use; check for another program instance running") > 0 Тогда

					СтруктураОтвета.Вставить("Ошибка",	"Учетная запись заблокирована другим сеансом!");
				Иначе	
					СтруктураОтвета.Вставить("Ошибка",	ОтветКомпоненты["message"]);
				КонецЕсли;
				Возврат СтруктураОтвета;
			КонецЕсли;
						
		Иначе
			Если ЗначениеЗаполнено(КомпонентаСервер.ErrorDescription) Тогда
				Если СтрНайти(КомпонентаСервер.ErrorDescription, "Не определена функция библиотеки tdlib") > 0 Тогда
					ВызватьИсключение КомпонентаСервер.ErrorDescription + Символы.ПС
						+ "";
				Иначе
					ВызватьИсключение КомпонентаСервер.ErrorDescription;
				КонецЕсли;
			КонецЕсли;
			ВызватьИсключение НСтр("ru = 'Не удалось получить данные от внешней компоненты!'");
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПутьКБазеДанныхПриИзменении(Элемент)
	ПутьКБазеДанныхПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПутьКБазеДанныхПриИзмененииСервер()
	Элементы.ГруппаИнициализация.Видимость = ЗначениеЗаполнено(Объект.ПутьКБазеДанных);
	Если ЗначениеЗаполнено(Объект.ПутьКБазеДанных) Тогда
		Файл = Новый Файл(Объект.ПутьКБазеДанных);
		Если Не Файл.Существует() Тогда
			Элементы.ГруппаИнициализация.Видимость = Ложь;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Указанный каталог недоступен на сервере 1С!'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКБазеДанныхАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Элементы.ГруппаИнициализация.Видимость = ЗначениеЗаполнено(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПутьККомпонентеПриИзменении(Элемент)
	ПутьККомпонентеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПутьККомпонентеПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.ПутьККомпоненте) Тогда
		Файл = Новый Файл(Объект.ПутьККомпоненте);
		Если Не Файл.Существует() Тогда
			Элементы.ГруппаИнициализация.Видимость = Ложь;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Указанный файл недоступен на сервере 1С!'"));
			Возврат;
		ИначеЕсли ВРег(Файл.Расширение) <> ВРег(".zip") Тогда
			Элементы.ГруппаИнициализация.Видимость = Ложь;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Должен быть указан путь к архиву компоненты в формате zip!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККомпонентеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Элементы.ГруппаИнициализация.Видимость = ЗначениеЗаполнено(Элемент.ТекстРедактирования)
		И ЗначениеЗаполнено(Объект.ПутьКБазеДанных);
КонецПроцедуры

&НаКлиенте
Процедура КомпонентаИзФайлаПриИзменении(Элемент)
	Элементы.ПутьККомпоненте.Видимость = КомпонентаИзФайла;
	Если Не КомпонентаИзФайла Тогда
		Объект.ПутьККомпоненте = "";
	КонецЕсли;
КонецПроцедуры

