#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ДатаКалендаря = НачалоДня(ТекущаяДатаСеанса());
	
	Если Параметры.Свойство("ДатаКалендаря") Тогда
	
		ДатаКалендаря = Параметры.ДатаКалендаря;
	
	КонецЕсли;
	
	Если Параметры.Свойство("Интерес") Тогда
		
		Документ = Параметры.Интерес;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СписокВзаимодействий") Тогда
		
		СписокВзаимодействий = Параметры.СписокВзаимодействий;
		
		Для Каждого СтруктураВзаимодействия Из СписокВзаимодействий Цикл
			
			НоваяСтрока = Взаимодействия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураВзаимодействия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		
		РежимВыбора = Параметры.РежимВыбора;
		
	Иначе
		
		РежимВыбора = Ложь;
		
	КонецЕсли;
	
	МесяцКалендаря = НачалоМесяца(ДатаКалендаря);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СобытияКалендаря,
		 "Пользователь", 			ТекущийПользователь,
		 Истина);	
	
	ЗаполнитьКалендарь();
	
	ЗаполнитьНастройкиОформленияКалендаря(ДатаКалендаря);	
	
	УстановитьВидимость();
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	НастроитьОтборСобытийКалендаря();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НажатиеКнопки(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	ДатаКалендаря = ЭтотОбъект[Элемент.Имя];
	
	Если РежимВыбора Тогда
		
		ОповеститьОВыборе(ДатаКалендаря);
	
	Иначе		
	
		ЗаполнитьНастройкиОформленияКалендаря(ДатаКалендаря);
		
		НастроитьОтборСобытийКалендаря();
		
		УстановитьВидимость();
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КартинкаКоманда1Нажатие(Элемент)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКоманда3Нажатие(Элемент)	
	
	Закрыть(ДатаКалендаря); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПредыдущийМесяц(Команда)
	
	ПерейтиКМесяцу(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийМесяц(Команда)
	
	ПерейтиКМесяцу(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКМесяцу(Направление)

	МесяцКалендаря = ДобавитьМесяц(НачалоМесяца(МесяцКалендаря), Направление);
	
	ЗаполнитьКалендарь();
	ЗаполнитьНастройкиОформленияКалендаря(МесяцКалендаря);
	УстановитьВидимость();

КонецПроцедуры // ПерейтиКМесяцу()

&НаСервере
Процедура ЗаполнитьКалендарь()

	ДеньНеделиПервогоДняМесяца = ДеньНедели(МесяцКалендаря) - 1;
	
	ДатаПериода = МесяцКалендаря - 86400 * ДеньНеделиПервогоДняМесяца;
	
	Для НомерДня = 1 По 42 Цикл
	
		ЭтотОбъект["День" + Формат(НомерДня, "ЧГ=0")] = ДатаПериода;
		
		ДатаПериода = ДатаПериода + 86400;
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКалендарь()

&НаСервере
Процедура УстановитьВидимость()
	
	Заголовок = ?(РежимВыбора, НСтр("ru='Автомотиватор';en='Автомотиватор'"),
		 НСтр("ru='Календарь менеджера';en='Календарь менеджера'"));
	
	ПоказыватьДополнительныйРяд = ((ДобавитьМесяц(МесяцКалендаря, 1) - МесяцКалендаря) / 86400 
		+ ДеньНедели(МесяцКалендаря) > 36);
	
	Элементы.ГруппаРяд6.Видимость = ПоказыватьДополнительныйРяд;
	
	ЦветАктивнойНадписи 					= Новый Цвет(0, 0, 0);
	ЦветНеАктивнойНадписи 					= Новый Цвет(128, 128, 128);
	ЦветАктивногоФона 						= Новый Цвет(252, 231, 81);
	
	ЦветВыбраннойНадписи 					= Новый Цвет(255, 255, 255);
	ЦветВыбранногоФона 						= Новый Цвет(3, 151, 68);
	РамкаВыбраннойНадписи					= Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	
	ЦветЗаполненнойНадписи 					= Новый Цвет(255, 255, 255);
	ЦветЗаполненногоФона 					= Новый Цвет(128, 128, 128);
	
	РамкаОбычнойНадписи 					= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ШрифтОбычнойНадписи 					= Новый Шрифт();
	ШрифтВыбраннойНадписи 					= Новый Шрифт(ШрифтОбычнойНадписи, , , Истина);
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());	
	
	ПредельноеКоличествоБаллов = ПолучитьПредельноеКоличествоБаллов(ТекущийПользователь);
	
	Для НомерДня = 1 По 42 Цикл
		
		Имя = "День" + Формат(НомерДня, "ЧГ=0");
		ДеньКалендаря = ЭтотОбъект[Имя];
		
		Элементы[Имя].ЦветФона 			= ЦветаСтиля.ЦветФонаФормы;
		Элементы[Имя].Рамка 			= РамкаОбычнойНадписи;
		Элементы[Имя].Шрифт 			= ШрифтОбычнойНадписи;
		
		Если НачалоМесяца(ДеньКалендаря) = МесяцКалендаря Тогда
			
			Элементы[Имя].Гиперссылка = Истина; 
			Элементы[Имя].ЦветТекста = ЦветАктивнойНадписи;
			
			Элементы[Имя].ЦветФона = УстановитьЦветДняВКалендаре(ДеньКалендаря, ПредельноеКоличествоБаллов);
			
			Если ДеньКалендаря = ДатаКалендаря Тогда
				
				Элементы[Имя].ЦветРамки = ЦветАктивнойНадписи;				
				Элементы[Имя].Рамка 	= РамкаВыбраннойНадписи;
				Элементы[Имя].Шрифт 	= ШрифтВыбраннойНадписи;
			
			КонецЕсли;
			
		Иначе
			
			Элементы[Имя].Гиперссылка = Ложь;
			Элементы[Имя].ЦветТекста = ЦветНеАктивнойНадписи;
		
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Функция УстановитьЦветДняВКалендаре(День, Баллов)
	
	СтруктураПоиска = Новый Структура("День", День);
	НайденныеСтроки = КэшОформления.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Загрузка = НайденныеСтроки[0].КоличествоБаллов;
		
	Иначе
		
		Загрузка = 0;		
		
	КонецЕсли;
	
	НайденныеСтроки = РабочиеДни.НайтиСтроки(СтруктураПоиска);
	ЭтоРабочийДень = НайденныеСтроки.Количество() > 0;
	
	Если Загрузка <= 0.00 * Баллов Тогда
		
		Цвет = ?(ЭтоРабочийДень, WebЦвета.Белый, WebЦвета.СеребристоСерый);
		
	ИначеЕсли Загрузка > 0.00 * Баллов И Загрузка < 0.50 * Баллов Тогда
		
		Цвет = WebЦвета.СветлоЗолотистый;
		
	ИначеЕсли Загрузка >= 0.50 * Баллов И Загрузка <= 1.00 * Баллов Тогда
		
		Цвет = WebЦвета.СветлоЗеленый;
		
	ИначеЕсли Не ЭтоРабочийДень Тогда
		
		Цвет = WebЦвета.СеребристоСерый;
		
	Иначе
		
		Цвет = WebЦвета.Фиолетовый;
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредельноеКоличествоБаллов(Пользователь)
	
	Подразделение = Пользователь.Подразделение;
	Результат = 0;
	
	Пока ЗначениеЗаполнено(Подразделение) И Результат = 0 Цикл
		
		Результат = Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
		Подразделение = Подразделение.Родитель;
		
	КонецЦикла;
	
	Если Результат = 0 Тогда
		
		Возврат 8; // по умолчанию
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиОформленияКалендаря(ВыбраннаяДатаКалендаря)	
	
	КэшОформления.Очистить();
	МесяцыКэша.Очистить();
	РабочиеДни.Очистить();
	
	ДатаНачала 		= НачалоМесяца(ВыбраннаяДатаКалендаря);
	ДатаОкончания 	= КонецМесяца(ВыбраннаяДатаКалендаря);
	
	Запрос = Новый Запрос();
	
	Если НЕ РежимВыбора Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(СобытияКалендаря.Балл) КАК КоличествоБаллов,
		|	ВЫБОР
		|		КОГДА СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ КАК День
		|ИЗ
		|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаря
		|ГДЕ
		|	СобытияКалендаря.Пользователь = &Пользователь
		|	И ВЫБОР
		|			КОГДА СобытияКалендаря.Завершено
		|				ТОГДА СобытияКалендаря.ПериодОкончание МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ СобытияКалендаря.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		КОНЕЦ
		|	И НЕ СобытияКалендаря.Завершено
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("Пользователь", 	ТекущийПользователь);
		Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",  ДатаОкончания);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ВзаимодействияИзДокумента.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
		|			ТОГДА НАЧАЛОПЕРИОДА(ВзаимодействияИзДокумента.ДатаЗавершенияВзаимодействия, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВзаимодействияИзДокумента.ПлановаяДата, ДЕНЬ)
		|	КОНЕЦ КАК ПериодНачало,
		|	ВзаимодействияИзДокумента.СтатусВзаимодействия КАК СостояниеСобытия,
		|	ВзаимодействияИзДокумента.Баллы КАК КоличествоБаллов,
		|	ВзаимодействияИзДокумента.Завершено КАК Завершено
		|ПОМЕСТИТЬ Взаимодействия
		|ИЗ
		|	&ВзаимодействияИзДокумента КАК ВзаимодействияИзДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_СобытияКалендаря.Балл КАК КоличествоБаллов,
		|	ВЫБОР
		|		КОГДА CRM_СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ КАК ПериодНачало
		|ПОМЕСТИТЬ ВсеВзаимодействия
		|ИЗ
		|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
		|ГДЕ
		|	CRM_СобытияКалендаря.Пользователь = &Пользователь
		|	И ВЫБОР
		|			КОГДА CRM_СобытияКалендаря.Завершено
		|				ТОГДА CRM_СобытияКалендаря.ПериодОкончание МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ CRM_СобытияКалендаря.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		КОНЕЦ
		|	И ВЫРАЗИТЬ(CRM_СобытияКалендаря.Объект КАК Документ.CRM_Взаимодействие).ДокументОснование <> &Интерес
		|	И НЕ CRM_СобытияКалендаря.Завершено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Взаимодействия.КоличествоБаллов,
		|	Взаимодействия.ПериодНачало
		|ИЗ
		|	Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ Взаимодействия.Завершено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВсеВзаимодействия.КоличествоБаллов) КАК КоличествоБаллов,
		|	НАЧАЛОПЕРИОДА(ВсеВзаимодействия.ПериодНачало, ДЕНЬ) КАК День
		|ИЗ
		|	ВсеВзаимодействия КАК ВсеВзаимодействия
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВсеВзаимодействия.ПериодНачало, ДЕНЬ)";
		
		Запрос.УстановитьПараметр("Пользователь", 				ТекущийПользователь);
		Запрос.УстановитьПараметр("ДатаНачала", 				ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",  			ДатаОкончания);
		Запрос.УстановитьПараметр("ВзаимодействияИзДокумента", 	Взаимодействия.Выгрузить());
		Запрос.УстановитьПараметр("Интерес", 					Документ);
		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = КэшОформления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	СтрокаМесяцев = МесяцыКэша.Добавить();
	СтрокаМесяцев.НачалоМесяца = ДатаНачала;
	
	МассивДат = Новый Массив;
	МассивДат.Добавить(НачалоДня(ДатаНачала));
	МассивДат.Добавить(НачалоДня(ДатаОкончания));
	
	Подразделение = ТекущийПользователь.Подразделение;
	
	Если ЗначениеЗаполнено(Подразделение)
		И ЗначениеЗаполнено(Подразделение.ГрафикРаботы) Тогда
		
		ГрафикРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(Подразделение.ГрафикРаботы, ДатаНачала, ДатаОкончания);
		ГрафикРаботы.Свернуть("ДатаГрафика");
		
		Для каждого ТекДата Из ГрафикРаботы Цикл
			
			НоваяСтрока = РабочиеДни.Добавить();
			НоваяСтрока.День = ТекДата.ДатаГрафика;
			
		КонецЦикла;	
		
	Иначе
		
		КалендарныйГрафик = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат);
		
		Если КалендарныйГрафик <> Неопределено Тогда
			
			Для каждого ТекДата Из КалендарныйГрафик Цикл
				
				Если ТекДата.Значение.ДеньРабочийПоПроизводственномуКалендарю Тогда 
					
					НоваяСтрока = РабочиеДни.Добавить();
					НоваяСтрока.День = ТекДата.Ключ;
					
				КонецЕсли;	
				
			КонецЦикла;		
			
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборСобытийКалендаря()
	
	Если СобытияКалендаря.Отбор.Элементы.Количество() > 0 Тогда
		
		// Отбор ПериодНачало >= НачалоДня
		ЭлементОтбора = СобытияКалендаря.Отбор.Элементы[0];
		
		ЭлементОтбора.ПравоеЗначение 	= НачалоДня(ДатаКалендаря);
		ЭлементОтбора.Использование 	= Истина;
		
		// Отбор ПериодНачало <= КонецДня
		ЭлементОтбора = СобытияКалендаря.Отбор.Элементы[1];
		
		ЭлементОтбора.ПравоеЗначение 	= КонецДня(ДатаКалендаря);
		ЭлементОтбора.Использование 	= Истина;
		
	Иначе
		
		// Отбор ПериодНачало >= НачалоДня
		ЭлементОтбора = СобытияКалендаря.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПериодНачало");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;		
		ЭлементОтбора.ПравоеЗначение 	= НачалоДня(ДатаКалендаря);
		ЭлементОтбора.Использование 	= Истина;
		
		// Отбор ПериодНачало <= КонецДня
		ЭлементОтбора = СобытияКалендаря.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПериодНачало");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;		
		ЭлементОтбора.ПравоеЗначение 	= КонецДня(ДатаКалендаря);
		ЭлементОтбора.Использование 	= Истина;
	
	КонецЕсли; 	

КонецПроцедуры // НастроитьОтборСобытийКалендаря() 

&НаКлиенте
Процедура ВыбратьДату(Команда)
	
	Закрыть(ДатаКалендаря); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛегенду(Команда)
	
	Список = ПолучитьОписаниеЛегенды();
	
	ПоказатьВыборИзМеню(Неопределено, Список, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЛегенды()

	Список = Новый СписокЗначений;
	
	Список.Добавить(1, НСтр("ru='Легенда';en='Легенда'"), 				, БиблиотекаКартинок.Справка);
	Список.Добавить(1, НСтр("ru='Нет данных';en='Нет данных'"), 			, БиблиотекаКартинок.CRM_Оповещения_0);
	Список.Добавить(2, НСтр("ru='До 50%';en='До 50%'"), 				, БиблиотекаКартинок.CRM_Оповещения_1);
	Список.Добавить(3, НСтр("ru='50 - 100%';en='50 - 100%'"), 			, БиблиотекаКартинок.CRM_Оповещения_2);
	Список.Добавить(4, НСтр("ru='Более 100%';en='Более 100%'"), 			, БиблиотекаКартинок.CRM_Оповещения_3);
	Список.Добавить(5, НСтр("en='Day off';ru='Выходной день'"), 		, БиблиотекаКартинок.CRM_Оповещения_4);
	
	Возврат Список;

КонецФункции // ПолучитьОписаниеЛегенды()

&НаКлиенте
Процедура СобытияКалендаряВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СобытияКалендаря.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияСобытия", ЭтотОбъект, Новый Структура);
	Если ТипЗнч(ТекущиеДанные.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокумента", Новый Структура("Ключ",
			 ТекущиеДанные.Объект), ЭтотОбъект, УникальныйИдентификатор, , ,
			 ОписаниеОповещения);
	ИначеЕсли ТипЗнч(ТекущиеДанные.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", Новый Структура("Ключ",
			 ТекущиеДанные.Объект), ЭтотОбъект, УникальныйИдентификатор, , ,
			 ОписаниеОповещения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияСобытия(Результат, ДопПараметры) Экспорт

	Элементы.СобытияКалендаря.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСозданияВзаимодействия", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", , ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияВзаимодействия(Результат, ДопПараметры) Экспорт
	ЗаполнитьКалендарь();
	ЗаполнитьНастройкиОформленияКалендаря(МесяцКалендаря);
	УстановитьВидимость();
КонецПроцедуры
#КонецОбласти
