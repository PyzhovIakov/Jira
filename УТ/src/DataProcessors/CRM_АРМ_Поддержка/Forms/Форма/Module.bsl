
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть АРМ Поддержки на мобильном устройстве.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Поддержка""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		АРМПоддержкаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ТекущийРежим = "Канбан";
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущаяРоль = Справочники.РолиИсполнителей.ПустаяСсылка();
	ОтборПоРолиУстановлен = Истина;
	ТекущийСценарий = "Все";
	Заголовок = СформироватьЗаголовокФормы(ЭтотОбъект);
	
	ТипОбращенияИнтерес = Справочники.CRM_ТипыОбращений.Интерес;
	ТипыОбращений = Справочники.CRM_ТипыОбращений.ПолучитьДанныеВыбора(Новый Структура);
	ОтборТипыОбращений.Добавить("Все", НСтр("ru = 'Все'"), Истина);
	Для Каждого ЭлементСписка Из ТипыОбращений Цикл
		Если ЭлементСписка.Значение = ТипОбращенияИнтерес Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = ОтборТипыОбращений.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСписка);
		НовыйЭлемент.Пометка = Истина;
	КонецЦикла;
	
	КатегорииОбращений = Перечисления.CRM_КатегорииСостоянийПоддержки.ПолучитьДанныеВыбора(Новый Структура);
	ОтборКатегорииОбращений.Добавить("Все", НСтр("ru = 'Все'"), Истина);
	Для Каждого ЭлементСписка Из КатегорииОбращений Цикл
		НовыйЭлемент = ОтборКатегорииОбращений.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСписка);
		НовыйЭлемент.Пометка = Истина;
	КонецЦикла;
	
	СоздатьКнопкиВидАРМ();
	СоздатьКнопиОтборПросроченные();
	ПокраситьКнопкиПросроченныеНаСервере();
	
	// Восстановление настроек
	КлючОбъекта = "Обработка.CRM_АРМ_Поддержка.Форма.Форма/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "", Новый Соответствие);
	Если Настройки.Количество() > 0 Тогда
		
		ТекущийСценарий = Настройки.Получить("ТекущийСценарий");
		
		ЗначениеНастройки = Настройки.Получить("ТекущийРежим");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ТекущийРежим = ЗначениеНастройки;
			ИзменитьТекущийРежимНаСервере();
		КонецЕсли;
		
		ЗначениеНастройки = Настройки.Получить("ПросроченныеВнизу");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ПросроченныеВнизу = ЗначениеНастройки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказыватьОтмеченныеВручнуюОбращения = 
		ХранилищеОбщихНастроек.Загрузить("МоиПродажиПоказыватьОтмеченныеВручнуюОбращения", ТекущийСценарий);
	
	ОбновитьСценарииПоддержки();
	
	// Установка пометки для текущего сценария
	Для Каждого ЭлементСписка Из СценарииПоддержки Цикл
		ЭлементСписка.Пометка = ?(ЭлементСписка.Значение = ТекущийСценарий, Истина, Ложь);
	КонецЦикла;
	
	ОбновитьФорму();
	
	УстановитьУсловноеОформлениеПоляДата(Список_Новые, "Дата");
	УстановитьУсловноеОформлениеПоляДата(ОбращенияСписок, "Дата");
	УстановитьУсловноеОформлениеПоляДата(ОбращенияСписок, "СрокРеакции");
	УстановитьУсловноеОформлениеПоляДата(ОбращенияСписок, "СрокРешения");
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	Элементы.НастройкаСценария.Доступность = НастройкаСценарияДоступна();
	
	УстановитьПодсказкуКомандыВыбораСценария();
	ОбновитьОтборы();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	ДоработатьОтображениеТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ Открыта() Тогда Возврат; КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьАРМ" Тогда
		Обновить(Неопределено);
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" Тогда
		Обновить(Неопределено);
	ИначеЕсли ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		Обновить(Неопределено);
	ИначеЕсли ИмяСобытия = "ИзмененоСостояниеИнтереса"
		 И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Родитель") = ТекущийСценарий Тогда
		ПересобратьАРМ();
	ИначеЕсли ИмяСобытия = "ИзмененСценарийПоддержки" Тогда
		ОбновитьСценарииПоддержки();
		ЭлементСписка = СценарииПоддержки.НайтиПоЗначению(Параметр);
		ВыборСценарияЗавершения(ЭлементСписка, Новый Структура);
	ИначеЕсли ИмяСобытия = "УдаленСценарийИнтереса" Тогда
		ОбновитьСценарииПоддержки();
		Если ТекущийСценарий = Параметр Тогда
			Если СценарииПоддержки.Количество() > 0 Тогда
				ВыборСценарияЗавершения(СценарииПоддержки[0], Новый Структура);
			Иначе
				ТекущийСценарий = "Все";
				ПересобратьАРМ();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененоОтображениеОтмеченныхВручнуюОбращений" Тогда
		ПоказыватьОтмеченныеВручнуюОбращения = Параметр;
		ОбновитьОтборыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьФильтрНаСервере(Настройки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Отборы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОбновитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыОбращенийПометкаПриИзменении(Элемент)
	
	ЭтоОтборВсеТипы = (Элементы.ОтборТипыОбращений.ТекущиеДанные.Значение = "Все");
	ОтборВсеТипы = ОтборТипыОбращений[0];
	Если ЭтоОтборВсеТипы Тогда
		Для Сч = 1 По ОтборТипыОбращений.Количество() - 1 Цикл
			ОтборТип = ОтборТипыОбращений[Сч];
			ОтборТип.Пометка = ОтборВсеТипы.Пометка;
		КонецЦикла;
	Иначе
		ПометкаТип = Истина;
		Для Сч = 1 По ОтборТипыОбращений.Количество() - 1 Цикл
			ОтборТип = ОтборТипыОбращений[Сч];
			ПометкаТип = Мин(ПометкаТип, ОтборТип.Пометка);
		КонецЦикла;
		ОтборВсеТипы.Пометка = ПометкаТип;
	КонецЕсли;
	ОтборТипыОбращенийВключен = Не ОтборВсеТипы.Пометка;
	
	ОбновитьОтборыСписка("ОтборТипыОбращений");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииОбращенийПометкаПриИзменении(Элемент)
	
	ЭтоОтборВсеКатегории = (Элементы.ОтборКатегорииОбращений.ТекущиеДанные.Значение = "Все");
	ОтборВсеКатегории = ОтборКатегорииОбращений[0];
	Если ЭтоОтборВсеКатегории Тогда
		Для Сч = 1 По ОтборКатегорииОбращений.Количество() - 1 Цикл
			ОтборКатегория = ОтборКатегорииОбращений[Сч];
			ОтборКатегория.Пометка = ОтборВсеКатегории.Пометка;
		КонецЦикла;
	Иначе
		ПометкаКатегория = Истина;
		Для Сч = 1 По ОтборКатегорииОбращений.Количество() - 1 Цикл
			ОтборКатегория = ОтборКатегорииОбращений[Сч];
			ПометкаКатегория = Мин(ПометкаКатегория, ОтборКатегория.Пометка);
		КонецЦикла;
		ОтборВсеКатегории.Пометка = ПометкаКатегория;
	КонецЕсли;
	ОтборКатегорииОбращенийВключен = Не ОтборВсеКатегории.Пометка;
	
	ОбновитьОтборыСписка("ОтборКатегорииОбращений");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ШиринаКолонокКанбанПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьШиринуКолонокКанбан", 0.5, Истина);
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#КонецОбласти

#Область ОбработчкииСобытийТаблицФормы

&НаКлиенте
Процедура Список_НовыеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка),
			 ЭтотОбъект);
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка),
			 ЭтотОбъект);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	АктивнаяТаблица = Элемент.Имя;
	
	//ПодключитьОбработчикОжидания("АРМПриАктивизацииСтрокиОбработка", 0.1, Истина);
	АРМПриАктивизацииСтрокиОбработка();
	
	НастроитьКонтекстноеМенюСписок_Новые();
	
КонецПроцедуры

&НаКлиенте
Процедура АРМПриАктивизацииСтрокиОбработка()
	
	ИменаТаблиц = ИменаТаблиц(ДанныеКолонок);
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Если ИмяТаблицы <> АктивнаяТаблица Тогда
			Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
			Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока;
	КонецЕсли;
	
	АктивнаяТаблица = Элемент.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	 СтандартнаяОбработка, Строка,
	 Поле)
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "Список_Новые" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ОбрабатываемаяЗапись) = Тип("Массив") Тогда
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение[0];
		Если ОбрабатываемаяЗапись = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ОбрабатываемаяЗапись);
	Обращение = СтруктураСтроки.Объект;
	
	Если АктивнаяТаблица = "Список_Новые" Тогда
		
		ИмяПараметра = ИмяПараметраМастераРегистрацииОбращений(Обращение);
		
		Если ИмяПараметра = "" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить(ИмяПараметра, Обращение);
		Если ТипыОбращенийТекущегоСценария.Количество() > 0 Тогда
			ПараметрыОткрытия.Вставить("ТипОбращения", ТипыОбращенийТекущегоСценария[0].Значение);
		Иначе
			ПараметрыОткрытия.Вставить("ТипОбращения", ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Обращение"));
		КонецЕсли;
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		
		Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			МассивСсылок = Новый Массив;
			ПараметрыОткрытия.Вставить("МассивСсылок", МассивСсылок);
			ПараметрыОткрытия.Вставить("НомерТелефона",
				 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Обращение,
				 "АбонентКакСвязаться"));
			
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ПараметрыОткрытия.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
			
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПараметрыОткрытия.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыОткрытия, ЭтотОбъект);
		
		Возврат;
		
	КонецЕсли;
	
	ЦелеваяТаблица = Элемент.Имя;
	Если ЦелеваяТаблица = АктивнаяТаблица Тогда
		Возврат;
	КонецЕсли;
	
	РежимПереноса = ?(ТекущийСценарий = "Все", "ВсеСценарии", "ВыбранныйСценарий");
	
	ДанныеОбращения = Элементы[АктивнаяТаблица].ТекущиеДанные;
	Если РежимПереноса = "ВсеСценарии" Тогда
		СценарийОбращения = ДанныеОбращения.Сценарий;
	Иначе
		СценарийОбращения = ТекущийСценарий;
	КонецЕсли;
	
	ИдентификаторКолонки = СтрЗаменить(ЦелеваяТаблица, "Список_", "");
	НайденныеСтроки = ДанныеКолонок.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторКолонки));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборКолонки = НайденныеСтроки[0].Отбор;
	
	ПараметрыПереноса = ПараметрыПереносаОбращения(ДанныеОбращения, СценарийОбращения, ОтборКолонки, РежимПереноса);
	Если Не ЗначениеЗаполнено(ПараметрыПереноса.НовыйСтатус) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЧекЛист(Обращение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для изменения состояния обращения необходимо выполнить все задачи чек-листа в форме Обращения!'"));
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("Подключаемый_СписокПеретаскиваниеЗавершение",
		 ЭтотОбъект,
		 Новый Структура);
	Если ПараметрыПереноса.ОткрыватьФормуПереноса Тогда
		ПараметрыФормы = Новый Структура("ЭтоПоддержка, Интерес, НовоеСостояние, СписокСостояний",
			Истина, Обращение, ПараметрыПереноса.НовыйСтатус, ПараметрыПереноса.СписокСостояний);
		ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса",
			ПараметрыФормы,
			ЭтотОбъект, ,
			ВариантОткрытияОкна.ОтдельноеОкно, ,
			ОповещениеЗавершения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		РезультатПереноса = ПереносОбращенияНаСервере(Обращение, ПараметрыПереноса.НовыйСтатус);
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, РезультатПереноса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПеретаскиваниеЗавершение(РезультатПереноса, ДополнительныеПараметры) Экспорт
	
	Если РезультатПереноса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатПереноса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПереноса.Сообщение);
		Возврат;
	КонецЕсли;
	
	ГруппаСвернутыхРазвернута = Ложь;
	Если Элементы.Найти("Группа_ТаблицаЭтапыСвернуто") <> Неопределено Тогда
		ГруппаСвернутыхРазвернута = (Не Элементы["Группа_ТаблицаЭтапыСвернуто"].Видимость);
	КонецЕсли;
	
	ПересобратьАРМ();
	
	Если ГруппаСвернутыхРазвернута Тогда
		РазвернутьКолонкуСвернутоДействия();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	СписокТиповОбращений = СписокТиповОбращений();

	ПараметрыОповещения = Новый Структура("Сценарий", ТекущийСценарий);
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПринятьОбращениеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	Если СписокТиповОбращений.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, СписокТиповОбращений[0]);
	Иначе
		ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокТиповОбращений, Элементы.ПринятьОбращение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипОбращения", ВыбранныйЭлемент.Значение);
	ПараметрыОткрытия.Вставить("Сценарий", ДополнительныеПараметры.Сценарий);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМПланировщикЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
			 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные();
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОбработанным(Команда)
	
	ДополнительныеПараметры = Новый Структура("ОтметитьОбработанным");
	Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
		ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры);
	Иначе
		ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщикЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(Результат);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценария(Команда)
	
	ОтповещениеЗавершения = Новый ОписаниеОповещения("ВыборСценарияЗавершения", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОтповещениеЗавершения, СценарииПоддержки, Элементы.ВыборСценария);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценарияЗавершения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СценарииПоддержки Цикл
		ЭлементСписка.Пометка = Ложь;
	КонецЦикла;
	ВыбранныйЭлемент.Пометка = Истина;
	ТекущийСценарий = ВыбранныйЭлемент.Значение;
	
	ОбновитьТипыОбращенийТекущегоСценария();
	УстановитьПодсказкуКомандыВыбораСценария();
	ПересобратьАРМ();
	
	Если СкрытыеКолонкиАРМ.Количество() > 0 Тогда
		СвернутьКолонкуРазвернутоДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуКомандыВыбораСценария()
	КомандаВыборСценария	= Команды.Найти("ВыборСценария");
	Если ТипЗнч(ТекущийСценарий) = Тип("Строка") Тогда
		КомандаВыборСценария.Подсказка	= ТекущийСценарий;
	ИначеЕсли ЗначениеЗаполнено(ТекущийСценарий) Тогда	
		КомандаВыборСценария.Подсказка	= ТекущийСценарий.Наименование;
	Иначе
		КомандаВыборСценария.Подсказка	= НСтр("ru='Выбор сценария'");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьНастройкуСценария(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Если ТипЗнч(ТекущийСценарий) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
		ПараметрыОткрытия.Вставить("Сценарий", ТекущийСценарий);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ЭтоПоддержка", Истина);
	
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьМне(Команда)
	
	АвторизованныйПользователь = ПользователиКлиент.ТекущийПользователь();
	ПеренаправитьОбращение(АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьИсполнителю(Команда)

	ПеренаправитьОбращение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРоли(Команда)

	ПеренаправитьОбращение(, Тип("СправочникСсылка.РолиИсполнителей"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонок(Команда)
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКанбан(Команда)
	
	ТекущийРежим = "Канбан";
	ИзменитьТекущийРежимНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСписок(Команда)
	
	ТекущийРежим = "Список";
	ИзменитьТекущийРежимНаСервере();
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекущийРежимНаСервере()
	
	Если ТекущийРежим = "Канбан" Тогда
		Элементы.Страницы.ТекущаяСтраница      = Элементы.СтраницаКанбан;
		Элементы.СтраницыПоиск.ТекущаяСтраница = Элементы.СтраницаПоискКанбан;
	Иначе
		Элементы.Страницы.ТекущаяСтраница      = Элементы.СтраницаСписок;
		Элементы.СтраницыПоиск.ТекущаяСтраница = Элементы.СтраницаПоискСписок;
		СтрокаПоискаОтбор = "";
		ОбновитьОтборы();
	КонецЕсли;
	
	Элементы.ДекорацияРазделительРегулировки.Видимость = (ТекущийРежим = "Канбан");
	
	НомерРежима = ?(ТекущийРежим = "Канбан", 1, 2);
	ПокраситьКнопкиВидАРМНаСервере(НомерРежима);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПересобратьАРМ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКонтекстноеМенюСписок_Новые()
	
	СкрытьОтметитьОбработанным = Ложь;
	Если Элементы.Список_Новые.ВыделенныеСтроки.Количество() > 0
		И Элементы.Найти("ОтметитьОбработанным_Список_Новые") <> Неопределено Тогда
	
		Для Каждого ТекСтрока Из Элементы.Список_Новые.ВыделенныеСтроки Цикл
			
			Если ТекСтрока <> Неопределено Тогда
				
				ТекСтрокаДанные = Элементы.Список_Новые.ДанныеСтроки(ТекСтрока);
				
				Если ТекСтрокаДанные.СостояниеОбращения = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый") Тогда
					СкрытьОтметитьОбработанным = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Элементы.ОтметитьОбработанным_Список_Новые.Видимость = НЕ СкрытьОтметитьОбработанным;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый структура;
	
	СтруктураФильтра = Новый Структура;
	
	СтруктураФильтра.Вставить("СкрытьПропущенныеТелефонныеЗвонки", СкрытьПропущенныеТелефонныеЗвонки);
	СтруктураФильтра.Вставить("СкрытьОтвеченныеТелефонныеЗвонки", СкрытьОтвеченныеТелефонныеЗвонки);
	СтруктураФильтра.Вставить("СкрытьЗаявки", СкрытьЗаявки);
	СтруктураФильтра.Вставить("СкрытьСообщения", СкрытьСообщения);
	СтруктураФильтра.Вставить("ОтборТеги", ОтборТеги);
	СтруктураФильтра.Вставить("ОтображатьПисьма", ОтображатьПисьма);
	СтруктураФильтра.Вставить("СкрытьКолонкуОбращения", СкрытьКолонкуОбращения);
	СтруктураФильтра.Вставить("СкрытьПовторныеОбращения", СкрытьПовторныеОбращения);
	СтруктураФильтра.Вставить("ПоискПодразделение", ПоискПодразделение);
	СтруктураФильтра.Вставить("ПоискКлиент", ПоискКлиент);
	СтруктураФильтра.Вставить("ПоискТипУслуги", ПоискТипУслуги);
	СтруктураФильтра.Вставить("ТекущийПользователь", ТекущийПользователь);
	СтруктураФильтра.Вставить("ТекущаяРоль", ТекущаяРоль);
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", ОтборПоРолиУстановлен);
	СтруктураФильтра.Вставить("ТекущийАвтор", ТекущийАвтор);
	СтруктураФильтра.Вставить("НуженОтвет", НуженОтвет);
	СтруктураФильтра.Вставить("Просрочено", Просрочено);
	СтруктураФильтра.Вставить("ОтборКаналПолучения", ОтборКаналПолучения);
	СтруктураФильтра.Вставить("ВариантПериода", ВариантПериода);
	
	ПараметрыОткрытия.Вставить("СтруктураФильтра", СтруктураФильтра);
	
	ОткрытьФорму("Обработка.CRM_АРМ_Поддержка.Форма.ФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияФильтра,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтрЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьФильтрНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		
		РезультатСтруктура = Новый Структура;
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если ТипЗнч(КлючИЗначение.Ключ) = Тип("Строка") Тогда
				РезультатСтруктура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатСтруктура);
		КонецЦикла;
		
	КонецЕсли;
		
	Теги = Новый Массив;
	Для Каждого ЭлементТегов Из ОтборТеги Цикл
		Теги.Добавить(ЭлементТегов.Значение);
	КонецЦикла;
	
	СсылкиНаОбъектыСтегами.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам("Документ.CRM_Интерес",
		 Теги));
	
	ОбновитьОтборыНаСервере();
	Заголовок = СформироватьЗаголовокФормы(ЭтотОбъект);
	
	Элементы.Колонка_Новые.Видимость = НЕ СкрытьКолонкуОбращения;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	ОчиститьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВнизу(Команда)
	ПросроченныеВнизу = Истина;
	ПересобратьАРМ();
	ПокраситьКнопкиПросроченныеНаСервере();
	УстановитьШиринуКолонокКанбан();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВверху(Команда)
	ПросроченныеВнизу = Ложь;
	ПересобратьАРМ();
	ПокраситьКнопкиПросроченныеНаСервере();
	УстановитьШиринуКолонокКанбан();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	ОтборТеги.Очистить();
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборТеги", ОтборТеги);
	СтруктураФильтра.Вставить("ПоискПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураФильтра.Вставить("ПоискКлиент", Справочники.Партнеры.ПустаяСсылка());
	СтруктураФильтра.Вставить("ПоискТипУслуги", Справочники.CRM_ТипУслуги.ПустаяСсылка());
	СтруктураФильтра.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	СтруктураФильтра.Вставить("ТекущаяРоль", Справочники.РолиИсполнителей.ПустаяСсылка());
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", Истина);
	СтруктураФильтра.Вставить("ТекущийАвтор", Справочники.Пользователи.ПустаяСсылка());
	СтруктураФильтра.Вставить("НуженОтвет", Ложь);
	СтруктураФильтра.Вставить("Просрочено", Ложь);
	СтруктураФильтра.Вставить("ОтборКаналПолучения", Неопределено);
	
	УстановитьФильтрНаСервере(СтруктураФильтра);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭтап(Команда)
	
	Если Не СтрНачинаетсяС(Команда.Имя, "СменитьЭтап_На_") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементЭтапа = ТекущийЭлемент;
	
	Если ТекущийЭлементЭтапа = Неопределено
			Или Не СтрНачинаетсяС(ТекущийЭлементЭтапа.Имя, "Список_") Тогда
		Возврат;
	КонецЕсли;
	
	СрезИдентификатораПриемника = Сред(Команда.Имя, 1, СтрНайти(Команда.Имя, "_С_") - 1);
	СрезИдентификатораПриемника = СтрЗаменить(СрезИдентификатораПриемника, "СменитьЭтап_На_", "");
	
	// Программная имитация начала перетаскивания.
	
	ПеретаскиваемыйОбъект = ТекущийЭлементЭтапа.ТекущиеДанные.Ссылка;
	
	ПараметрыПеретаскивания = Новый Структура;
	ПараметрыПеретаскивания.Вставить("Действие",			ДействиеПеретаскивания.Копирование);
	ПараметрыПеретаскивания.Вставить("ДопустимыеДействия",	ДопустимыеДействияПеретаскивания.Копирование);
	ПараметрыПеретаскивания.Вставить("Значение",			ПеретаскиваемыйОбъект);
	
	ФлагВыполнения = Истина;
	
	Подключаемый_СписокНачалоПеретаскивания(ТекущийЭлементЭтапа, ПараметрыПеретаскивания, ФлагВыполнения);
	
	Если Не ФлагВыполнения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("en = 'The element stage change could not be performed.'; ru = 'Не удалось выполнить смену этапа элемента.'")
		);
		Возврат;
	КонецЕсли;
	
	// Программная имитация перетаскивания.
	
	ЭлементПриемникПеретаскивания = Элементы.Найти(СрезИдентификатораПриемника);
	
	Если ЭлементПриемникПеретаскивания = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("en = 'The element stage change could not be performed.'; ru = 'Не удалось выполнить смену этапа элемента.'")
		);
		Возврат;
	КонецЕсли;
	
	Подключаемый_СписокПеретаскивание(
		ЭлементПриемникПеретаскивания,
		ПараметрыПеретаскивания,
		Истина,
		Неопределено,
		Неопределено
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьКолонкуСвернуто(Команда)
	РазвернутьКолонкуСвернутоДействия()
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьКолонкуСвернутоДействия()
	Элементы["Группа_ТаблицаЭтапыСвернуто"].Видимость = Ложь;
	Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМ Цикл
		ИмяГруппы = "Колонка_" + ЭлементСписка.Значение;
		Элементы[ИмяГруппы].Видимость = Истина;
	КонецЦикла;
	Элементы["СвернутьКолонкуРазвернуто"].Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьКолонкуРазвернуто(Команда)
	СвернутьКолонкуРазвернутоДействия();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьКолонкуРазвернутоДействия()
	Элементы["СвернутьКолонкуРазвернуто"].Видимость = Ложь;
	Элементы["Группа_ТаблицаЭтапыСвернуто"].Видимость = Истина;
	Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМ Цикл
		ИмяГруппы = "Колонка_" + ЭлементСписка.Значение;
		Элементы[ИмяГруппы].Видимость = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройки(Команда)
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения("ОткрытьПерсональныеНастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АРМПоддержка");
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "НастройкиКолонокАРМ");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещенияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	
	СкрытыеКолонкиАРМНастройки = ХранилищеОбщихНастроекЗагрузить("НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ", , 
		ИмяПользователяИБ);
		
	СкрытыеКолонкиАРМ = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМНастройки Цикл
		НайденныйЭтап = ДанныеКолонок.НайтиСтроки(Новый Структура("Отбор", ЭлементСписка.Значение));
		Если НайденныйЭтап.Количество() <> 0 Тогда
			СкрытыеКолонкиАРМ.Добавить(НайденныйЭтап[0].Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПересчитатьКоличествоОбращений()
	
	Для Каждого ОписаниеКолонки Из ДанныеКолонок Цикл
		ИмяРеквизитаКолонки = "Список_" + ОписаниеКолонки.Идентификатор;
		КоличествоОбращений = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
			 ИмяРеквизитаКолонки);
		ИмяЗаголовкаКолонки = "Заголовок_" + ОписаниеКолонки.Идентификатор;
		Элементы[ИмяЗаголовкаКолонки].Заголовок = ОписаниеКолонки.Заголовок + " (" + КоличествоОбращений + ")";
	КонецЦикла;
	ИмяРеквизитаКолонки = "Список_Новые";
	КоличествоОбращений = CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект,
		 ИмяРеквизитаКолонки);
	ИмяЗаголовкаКолонки = "Заголовок_Новые";
	Элементы[ИмяЗаголовкаКолонки].Заголовок = НСтр("ru = 'Обращения'") + " (" + КоличествоОбращений + ")";
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЗначенияОтбораПоОтветственному(ТекущийПользователь, ТекущаяРоль, ОтборПоРолиУстановлен)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) И ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь).ВыгрузитьЗначения();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, РолиПользователя, Истина);
		ИначеЕсли ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
			Результат.Добавить(ТекущаяРоль);	
		КонецЕсли;
		
		ЗамещаемыеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЗамещаемыеПользователи, Истина);
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
			ИсполнителиПоРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ТекущаяРоль).ВыгрузитьЗначения();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ИсполнителиПоРоли, Истина);
		Иначе
			// Все доступные пользователи и роли
			Если Константы.CRM_ИспользоватьДоступныхПользователей.Получить() Тогда
				Результат = ПолучитьДоступныхМенеджеровИРоли();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
		Результат.Добавить(ТекущаяРоль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Результат.Добавить(ТекущийПользователь);
	КонецЕсли;

	Результат.Добавить(Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НастройкаСценарияДоступна()
	
	Возврат Пользователи.РолиДоступны("CRM_НастройкаПрограммы, ПолныеПрава");

КонецФункции

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ПричинаОтказа = Неопределено, Комментарий = "",
	 ПереноситьПисьмаВОбработанные = Истина)
	Если Элементы.Список_Новые.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.Список_Новые.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
				Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("СправочникСсылка.CRM_Диалоги")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					
					Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(СтруктураСтроки.Объект) Тогда
						
						СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(СтруктураСтроки.Объект);
						
						Если РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(СтруктураСтроки.Объект) Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(СтруктураСтроки.Объект,
								 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
								 Комментарий); 
						ИначеЕсли СостояниеЛида <> Неопределено И СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Повторный Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(СтруктураСтроки.Объект,
																						Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный,
																						СостояниеЛида.СконвертированВОбъект); 
						Иначе
							РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(СтруктураСтроки.Объект); 
						КонецЕсли;
						
					КонецЕсли;
					
					Об = СтруктураСтроки.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Об.Записать();
					
					Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
						
						// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
						// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
						Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
							Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
							Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
							
							ПрочитанныеПисьма = Новый Массив;
							ПрочитанныеПисьма.Добавить(Об.Ссылка);
							CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
						КонецЕсли;
						
					КонецЕсли;

				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОтметитьОбработаннымНаСервере(ПереноситьПисьмаВОбработанные = Истина)
	
	Если Элементы.Список_Новые.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Элементы.Список_Новые.ВыделенныеСтроки Цикл
		
		Если ТекСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
		Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			Или ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
			Или ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
			Или ТипЗнч(СтруктураСтроки.Объект) = Тип("СправочникСсылка.CRM_Диалоги")
			Или ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			
			Об = СтруктураСтроки.Объект.ПолучитьОбъект();
			Об.CRM_СкрытьВАРМ = Истина;
			Об.Записать();
			
			Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
				// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
				Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
					Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
					Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
					
					ПрочитанныеПисьма = Новый Массив;
					ПрочитанныеПисьма.Добавить(Об.Ссылка);
					CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.Список_Новые.ВыделенныеСтроки Цикл
		СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
		МассивСсылок.Добавить(СтруктураСтроки.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ОтметитьОбработанным") Тогда
			ОтметитьОбработаннымНаСервере(ПереноситьПисьмаВОбработанные);
		Иначе
			СкрытьПисьмоИзАРМНаСервере(ДополнительныеПараметры.ПричинаОтказа,
				 ДополнительныеПараметры.Комментарий,
				 ПереноситьПисьмаВОбработанные);
		КонецЕсли;
	Иначе
		СкрытьПисьмоИзАРМНаСервере(, , ПереноситьПисьмаВОбработанные);
	КонецЕсли;
	
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Список_Новые);

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаСервере
Функция НеобходимоЗадатьВопросПриПереносеВОбработанные()
		
	Для Каждого ТекСтрока Из Элементы.Список_Новые.ВыделенныеСтроки Цикл
		Если ТекСтрока <> Неопределено Тогда
			СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
			Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				УчетнаяЗапись = СтруктураСтроки.Объект.УчетнаяЗапись;
				Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
					
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	
	ЭтоCRM_ОбъектыАРМ = ТипЗнч(ВыбраннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ")
	                    Или ТипЗнч(ВыбраннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ_Обращения");
	
	ЭтоCRM_ОбъектыАРМ_Поддержка = ТипЗнч(ВыбраннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ_Поддержка");
	
	СтруктураОбъекта = Новый Структура;
	Если ЭтоCRM_ОбъектыАРМ Тогда
		СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Объект);
	ИначеЕсли ЭтоCRM_ОбъектыАРМ Тогда
		СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Обращение);
	Иначе
		СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Ссылка);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаКлиенте
Процедура ПересобратьАРМ()
	
	ПересобратьАРМНаСервере();
	
	ДоработатьОтображениеТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПересобратьАРМНаСервере()
	
	ОбновитьФорму();
	ОбновитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСценарииПоддержки()
	
	СценарииПоддержки.Очистить();
	
	СценарииПоддержки.Добавить("Все", НСтр("ru = 'Все сценарии'"), Истина);
	
	ЗапросСценарии = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Представление КАК Представление
	|ПОМЕСТИТЬ тмпПустыеПодраздеоения
	|ИЗ
	|	(ВЫБРАТЬ
	|		CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|		CRM_СостоянияИнтересов.ЭтоПоддержка КАК ЭтоПоддержка,
	|		CRM_СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СостоянияИнтересовПодразделения.Ссылка) КАК Ссылка1,
	|		CRM_СостоянияИнтересов.Представление КАК Представление
	|	ИЗ
	|		Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
	|			ПО CRM_СостоянияИнтересов.Ссылка = CRM_СостоянияИнтересовПодразделения.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		CRM_СостоянияИнтересов.Ссылка,
	|		CRM_СостоянияИнтересов.ЭтоПоддержка,
	|		CRM_СостоянияИнтересов.ПометкаУдаления) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ЭтоПоддержка
	|	И ЕСТЬNULL(ВложенныйЗапрос.Ссылка1, 0) = 0
	|	И ВложенныйЗапрос.ПометкаУдаления = ЛОЖЬ
	|	И ВложенныйЗапрос.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияИнтересовПодразделения.Ссылка КАК Ссылка,
	|	CRM_СостоянияИнтересовПодразделения.Ссылка.Представление КАК Представление
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
	|ГДЕ
	|	CRM_СостоянияИнтересовПодразделения.Подразделение В ИЕРАРХИИ(&Подразделение)
	|	И CRM_СостоянияИнтересовПодразделения.Ссылка.ЭтоПоддержка
	|	И CRM_СостоянияИнтересовПодразделения.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И CRM_СостоянияИнтересовПодразделения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тмпПустыеПодраздеоения.Ссылка,
	|	тмпПустыеПодраздеоения.Представление
	|ИЗ
	|	тмпПустыеПодраздеоения КАК тмпПустыеПодраздеоения
	|
	|СГРУППИРОВАТЬ ПО
	|	тмпПустыеПодраздеоения.Ссылка,
	|	тмпПустыеПодраздеоения.Представление");
	ЗапросСценарии.УстановитьПараметр("Подразделение", ТекущийПользователь.Подразделение);
	РезультатЗапроса = ЗапросСценарии.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СценарииПоддержки.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	
	Если ТекущийСценарий = "Все" Тогда
		ЗаголовокКнопкиВыбора = НСтр("ru = 'Все сценарии'");
	Иначе
		ЗаголовокКнопкиВыбора = Строка(ТекущийСценарий);
	КонецЕсли;
	Элементы.ВыборСценария.Заголовок = ЗаголовокКнопкиВыбора;
	
	// Удалить прежние элементы и реквизиты формы.
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого ОписаниеКолонки Из ДанныеКолонок Цикл
		ИмяКонтейнераКолонки = "Колонка_" + ОписаниеКолонки.Идентификатор;
		ИмяРеквизитаКолонки = "Список_" + ОписаниеКолонки.Идентификатор;
		Элементы.Удалить(Элементы[ИмяКонтейнераКолонки]);
		УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКолонки);
	КонецЦикла;
	ДанныеКолонок.Очистить();
	
	ГруппаДобавленияСкрытых = Элементы.Найти("Группа_ТаблицаЭтапыСвернуто");
	Если ГруппаДобавленияСкрытых <> Неопределено Тогда
		Элементы.Удалить(ГруппаДобавленияСкрытых);
		УдаляемыеРеквизиты.Добавить("ТаблицаЭтапыСвернуто");
		Команды.Удалить(Команды["СвернутьКолонкуРазвернуто"]);
		Элементы.Удалить(Элементы["СвернутьКолонкуРазвернуто"]);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Обновление описаний колонок.
	Если ТекущийСценарий = "Все" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Категории.Ссылка КАК Колонка,
		|	ПРЕДСТАВЛЕНИЕ(Категории.Ссылка) КАК Заголовок,
		|	Категории.Порядок КАК Порядок,
		|	Категории.Ссылка КАК Отбор
		|ИЗ
		|	Перечисление.CRM_КатегорииСостоянийПоддержки КАК Категории
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
		|		ПО (СостоянияИнтересов.КатегорияСостояния = Категории.Ссылка)
		|ГДЕ
		|	НЕ СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
		|	И СостоянияИнтересов.Родитель.ЭтоПоддержка
		|	И СостоянияИнтересов.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	Категории.Порядок";
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ОбращенияСписок, "СостояниеИнтереса",
					Неопределено, Ложь);
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияИнтересов.КатегорияСостояния КАК Колонка,
		|	СостоянияИнтересов.Наименование КАК Заголовок,
		|	СостоянияИнтересов.Ссылка КАК Отбор,
		|	СостоянияИнтересов.ИндексЦвета КАК ИндексЦвета
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
		|ГДЕ
		|	СостоянияИнтересов.Родитель = &ТекущийСценарий
		|	И СостоянияИнтересов.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияИнтересов.РеквизитДопУпорядочивания";
		Запрос.Параметры.Вставить("ТекущийСценарий", ТекущийСценарий);
		
		МассивСценариев = Новый Массив;
		МассивСценариев.Добавить(ТекущийСценарий);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ОбращенияСписок, "СостояниеИнтереса",
					Справочники.CRM_СостоянияИнтересов.МассивСостоянийПоСценарию(ТекущийСценарий), Истина);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеКолонки = ДанныеКолонок.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеКолонки, Выборка);
		ОписаниеКолонки.Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		ОписаниеКолонки.ИмяТаблицы = "Список_" + ОписаниеКолонки.Идентификатор;
		Если ТекущийСценарий = "Все" Тогда
			ОписаниеКолонки.ИндексЦвета = ИндексЦветаКатегории(ОписаниеКолонки.Отбор);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых реквизитов и элементов.
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ОписаниеКолонки Из ДанныеКолонок Цикл
		ИмяРеквизитаКолонки = "Список_" + ОписаниеКолонки.Идентификатор;
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонки, Новый ОписаниеТипов("ДинамическийСписок"));
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ОбращенияСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса);
	
	ЭлементыПользовательскихНастроек = ОбращенияСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
		Если ТипЗнч(Элемент) = ТипЗнч(ОбращенияСписок.КомпоновщикНастроек.Настройки.Порядок) Тогда
			Элемент.Элементы.Очистить();
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			УсловиеСортировки.ТипУпорядочивания = ?(ПросроченныеВнизу,
				 НаправлениеСортировкиКомпоновкиДанных.Возр,
				 НаправлениеСортировкиКомпоновкиДанных.Убыв);
			УсловиеСортировки.Использование = Истина;
			
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Использование = Истина;
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаЗакрытия");
			УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементКонтейнерКолонок = Элементы.КанбанКолонки;
 	Для Каждого ОписаниеКолонки Из ДанныеКолонок Цикл
		
		// Настройка реквизита списка.
		ИмяРеквизитаКолонки = "Список_" + ОписаниеКолонки.Идентификатор;
		РеквизитКолонка = ЭтотОбъект[ИмяРеквизитаКолонки];
		РеквизитКолонка.ТекстЗапроса = ТекстЗапросаКолонкиКанбан();
		РеквизитКолонка.ОсновнаяТаблица = "Документ.CRM_Интерес";
		РеквизитКолонка.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		
		УстановитьУсловноеОформлениеПоляДата(РеквизитКолонка, "СрокРеакции");
		УстановитьУсловноеОформлениеПоляДата(РеквизитКолонка, "СрокРешения");
		УстановитьУсловноеОформлениеПоляДата(РеквизитКолонка, "СледующееДелоСрок");
		
		РеквизитКолонка.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса);
		
		РеквизитКолонка.УстановитьОбязательноеИспользование("Ссылка", Истина);
		РеквизитКолонка.УстановитьОбязательноеИспользование("Категория", Истина);
		РеквизитКолонка.УстановитьОбязательноеИспользование("Сценарий", Истина);
		РеквизитКолонка.УстановитьОбязательноеИспользование("ТребуетсяРеакция", Истина);
		РеквизитКолонка.УстановитьОбязательноеИспользование("Статус", Истина);
		РеквизитКолонка.УстановитьОбязательноеИспользование("РазрешитьРолевуюАдресацию", Истина);
		
		Если ТекущийСценарий = "Все" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
				"СостояниеИнтереса", МассивСостоянийПоКатегории(ОписаниеКолонки.Отбор), Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
				"СостояниеИнтереса", ОписаниеКолонки.Отбор, Истина);
		КонецЕсли;
		
		НастройкиПорядка = РеквизитКолонка.КомпоновщикНастроек.Настройки.Порядок.Элементы;
		
		ЭлементПорядка = НастройкиПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
		Если ПросроченныеВнизу Тогда
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Иначе
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		КонецЕсли;
		
		ЭлементПорядка = НастройкиПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Если ОписаниеКолонки.Колонка = Перечисления.CRM_КатегорииСостоянийПоддержки.Выполнено Тогда
			ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаЗакрытия");
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаУпорядочивания");
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		
		ЭлементПорядка.Использование = Истина;
		
		// Контейнер колонки.
		ИмяКонтейнераКолонки = "Колонка_" + ОписаниеКолонки.Идентификатор;
		ЭлементКонтейнерКолонки = Элементы.Добавить(ИмяКонтейнераКолонки, Тип("ГруппаФормы"), ЭлементКонтейнерКолонок);
		ЭлементКонтейнерКолонки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементКонтейнерКолонки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементКонтейнерКолонки.ОтображатьЗаголовок = Ложь;
		ЭлементКонтейнерКолонки.РастягиватьПоГоризонтали = Ложь;
		
		// Заголовок колонки.
		ИмяЗаголовкаКолонки = "Заголовок_" + ОписаниеКолонки.Идентификатор;
		ДекорацияЗаголовок = Элементы.Добавить(ИмяЗаголовкаКолонки, Тип("ДекорацияФормы"), ЭлементКонтейнерКолонки);
		ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЗаголовок.Заголовок = ОписаниеКолонки.Заголовок;
		ДекорацияЗаголовок.Подсказка = ОписаниеКолонки.Заголовок;
		ДекорацияЗаголовок.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		ДекорацияЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ДекорацияЗаголовок.Шрифт = Новый Шрифт(ДекорацияЗаголовок.Шрифт, , 13, Ложь);
		
		// Обложка колонки.
		ИмяОбложкиКолонки = "Обложка_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложкаКолонки = Элементы.Добавить(ИмяОбложкиКолонки, Тип("ГруппаФормы"), ЭлементКонтейнерКолонки);
		ЭлементОбложкаКолонки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементОбложкаКолонки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементОбложкаКолонки.ОтображатьЗаголовок = Ложь;
		ЭлементОбложкаКолонки.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		// Цвет колонки.
		ИмяЦветаКолонки = "Цвет_" + ОписаниеКолонки.Идентификатор;
		ЭлементЦветКолонки = Элементы.Добавить(ИмяЦветаКолонки, Тип("ДекорацияФормы"), ЭлементОбложкаКолонки);
		ЭлементЦветКолонки.Вид = ВидДекорацииФормы.Надпись;
		ЭлементЦветКолонки.Заголовок = "";
		ЭлементЦветКолонки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементЦветКолонки.РастягиватьПоГоризонтали = Истина;
		ЭлементЦветКолонки.АвтоМаксимальнаяШирина = Ложь;
		ЭлементЦветКолонки.Шрифт = Новый Шрифт(ЭлементЦветКолонки.Шрифт, , 1, Истина);
		ЭлементЦветКолонки.ЦветФона = СписокЦветов.Получить(ОписаниеКолонки.ИндексЦвета).Цвет;
		ЭлементЦветКолонки.РастягиватьПоГоризонтали = Ложь;
		ЭлементЦветКолонки.Ширина = 28;
		
		// Список колонки.
		ЭлементСписок = Элементы.Добавить(ИмяРеквизитаКолонки, Тип("ТаблицаФормы"), ЭлементОбложкаКолонки);
		ЭлементСписок.ПутьКДанным = ИмяРеквизитаКолонки;
		ЭлементСписок.ПутьКДаннымКартинкиСтроки = "";
		ЭлементСписок.КоманднаяПанель.Видимость = Ложь;
		ЭлементСписок.Шапка = Ложь;
		ЭлементСписок.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		ЭлементСписок.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		ЭлементСписок.ОтображениеСостоянияПросмотра.Видимость = Ложь;
		ЭлементСписок.ОтображениеСтрокиПоиска.Видимость = Ложь;
		ЭлементСписок.ЧередованиеЦветовСтрок = Ложь;
		ЭлементСписок.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
		ЭлементСписок.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		ЭлементСписок.ГоризонтальныеЛинии = Ложь;
		ЭлементСписок.ВертикальныеЛинии = Ложь;
		ЭлементСписок.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
		ЭлементСписок.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		ЭлементСписок.РастягиватьПоГоризонтали = Ложь;
		ЭлементСписок.РастягиватьПоВертикали = Истина;
		ЭлементСписок.РазрешитьПеретаскивание = Истина;
		//ЭлементСписок.ТолькоПросмотр = Истина;
		ЭлементСписок.Ширина = 28;
		
		ЭлементСписок.УстановитьДействие("ПриАктивизацииСтроки",	"Подключаемый_СписокПриАктивизацииСтроки");
		ЭлементСписок.УстановитьДействие("НачалоПеретаскивания",	"Подключаемый_СписокНачалоПеретаскивания");
		ЭлементСписок.УстановитьДействие("ПроверкаПеретаскивания",	"Подключаемый_СписокПроверкаПеретаскивания");
		ЭлементСписок.УстановитьДействие("Перетаскивание",			"Подключаемый_СписокПеретаскивание");
		
		// Вертикальная группа полей (карточка) в строке списка.
		ИмяКарточки = "Карточка_" + ОписаниеКолонки.Идентификатор;
		ЭлементКарточка = Элементы.Добавить(ИмяКарточки, Тип("ГруппаФормы"), ЭлементСписок);
		ЭлементКарточка.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементКарточка.Группировка = ГруппировкаКолонок.Вертикальная;
		ЭлементКарточка.Ширина = 10;
		ЭлементКарточка.РастягиватьПоГоризонтали = Ложь;
		
		// Поля карточки.
		ИмяОбложки1 = "Обложка1_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка1 = Элементы.Добавить(ИмяОбложки1, Тип("ГруппаФормы"), ЭлементКарточка);
		ЭлементОбложка1.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка1.Группировка = ГруппировкаКолонок.Горизонтальная;
		ЭлементОбложка1.Ширина = 10;
		ЭлементОбложка1.РастягиватьПоГоризонтали = Ложь;

		ИмяОбложкиТема = "ОбложкаТема_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложкаТема = Элементы.Добавить(ИмяОбложкиТема, Тип("ГруппаФормы"), ЭлементОбложка1);
		ЭлементОбложкаТема.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложкаТема.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложкаТема.Ширина = 10;
		ЭлементОбложкаТема.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляКартинка = "Картинка_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляКартинка, Тип("ПолеФормы"), ЭлементОбложкаТема);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".ИндексКартинки";
		ПолеКарточки.КартинкаЗначений = БиблиотекаКартинок.CRM_ТипыОбращений;
		ПолеКарточки.Ширина = 1;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляТема = "Тема_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляТема, Тип("ПолеФормы"), ЭлементОбложкаТема);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".Тема";
		ПолеКарточки.Шрифт = Новый Шрифт(ПолеКарточки.Шрифт, , , Истина);
		ПолеКарточки.Ширина = 8;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСоисполнение = "Соисполнение_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточкиСоисполнение = Элементы.Добавить(ИмяПоляСоисполнение, Тип("ПолеФормы"), ЭлементОбложка1);
		ПолеКарточкиСоисполнение.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеКарточкиСоисполнение.ПутьКДанным = ИмяРеквизитаКолонки + ".Соисполнение";
		ПолеКарточкиСоисполнение.КартинкаЗначений = БиблиотекаКартинок.CRM_СоисполнениеКоллекция;
		ПолеКарточкиСоисполнение.Ширина = 1;
		ПолеКарточкиСоисполнение.ОтображатьВШапке = Ложь;
		ПолеКарточкиСоисполнение.Подсказка = НСтр("ru = 'В соисполнении'");

		ИмяОбложкиНомер = "ОбложкаНомер_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложкаНомер = Элементы.Добавить(ИмяОбложкиНомер, Тип("ГруппаФормы"), ЭлементКарточка);
		ЭлементОбложкаНомер.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложкаНомер.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложкаНомер.Ширина = 10;
		ЭлементОбложкаНомер.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляНомер = "Номер_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточкиНомер = Элементы.Добавить(ИмяПоляНомер, Тип("ПолеФормы"), ЭлементОбложкаНомер);
		ПолеКарточкиНомер.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточкиНомер.ПутьКДанным = ИмяРеквизитаКолонки + ".Номер";
		ПолеКарточкиНомер.Ширина = 10;
		ПолеКарточкиНомер.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСтатус = "Статус_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточкиСтатус = Элементы.Добавить(ИмяПоляСтатус, Тип("ПолеФормы"), ЭлементОбложкаНомер);
		ПолеКарточкиСтатус.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточкиСтатус.ПутьКДанным = ИмяРеквизитаКолонки + ".Статус";
		ПолеКарточкиСтатус.Ширина = 10;
		ПолеКарточкиСтатус.РастягиватьПоГоризонтали = Ложь;
		
		ИмяОбложки5 = "Обложка5_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка5 = Элементы.Добавить(ИмяОбложки5, Тип("ГруппаФормы"), ЭлементКарточка);
		ЭлементОбложка5.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка5.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложка5.Ширина = 10;
		ЭлементОбложка5.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляКартинкаИзбранный = "КартинкаИзбранный_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляКартинкаИзбранный, Тип("ПолеФормы"), ЭлементОбложка5);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".ИзбранныйИндексКартинки";
		ПолеКарточки.КартинкаЗначений = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
		ПолеКарточки.Ширина = 1;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляКлиент = "Клиент_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляКлиент, Тип("ПолеФормы"), ЭлементОбложка5);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".Клиент";
		ПолеКарточки.Ширина = 10;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;

		ИмяПоляКонтакт = "Контакт_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляКонтакт, Тип("ПолеФормы"), ЭлементОбложка5);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".Контакт";
		ПолеКарточки.Ширина = 10;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
						
		ИмяОбложки2 = "Обложка2_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка2 = Элементы.Добавить(ИмяОбложки2, Тип("ГруппаФормы"), ЭлементКарточка);
		ЭлементОбложка2.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка2.Группировка = ГруппировкаКолонок.Горизонтальная;
		ЭлементОбложка2.Ширина = 10;
		ЭлементОбложка2.РастягиватьПоГоризонтали = Ложь;
		
		ИмяОбложки3 = "Обложка3_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка3 = Элементы.Добавить(ИмяОбложки3, Тип("ГруппаФормы"), ЭлементОбложка2);
		ЭлементОбложка3.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка3.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложка3.Ширина = 10;
		ЭлементОбложка3.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСрокРеакцииСостояние = "СрокРеакцииСостояние" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляСрокРеакцииСостояние, Тип("ПолеФормы"), ЭлементОбложка3);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СрокРеакцииСостояние";
		ПолеКарточки.КартинкаЗначений = БиблиотекаКартинок.CRM_ПометкиСостоянийОбращений;
		ПолеКарточки.Ширина = 1;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСрокРеакции = "СрокРеакции_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляСрокРеакции, Тип("ПолеФормы"), ЭлементОбложка3);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СрокРеакции";
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		ПолеКарточки.Ширина = 5;
		
		ИмяОбложки4 = "Обложка4_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка4 = Элементы.Добавить(ИмяОбложки4, Тип("ГруппаФормы"), ЭлементОбложка2);
		ЭлементОбложка4.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка4.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложка4.Ширина = 10;
		ЭлементОбложка4.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСрокРешенияСостояние = "СрокРешенияСостояние" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляСрокРешенияСостояние, Тип("ПолеФормы"), ЭлементОбложка4);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СрокРешенияСостояние";
		ПолеКарточки.КартинкаЗначений = БиблиотекаКартинок.CRM_ПометкиСостоянийОбращений;
		ПолеКарточки.Ширина = 1;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСрокРешения = "СрокРешения_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляСрокРешения, Тип("ПолеФормы"), ЭлементОбложка4);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СрокРешения";
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		ПолеКарточки.Ширина = 5;
		
		ИмяПоляОтветственный = "Ответственный_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляОтветственный, Тип("ПолеФормы"), ЭлементКарточка);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".Ответственный";
		ПолеКарточки.Ширина = 10;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		
		ИмяОбложки6 = "Обложка6_" + ОписаниеКолонки.Идентификатор;
		ЭлементОбложка6 = Элементы.Добавить(ИмяОбложки6, Тип("ГруппаФормы"), ЭлементКарточка);
		ЭлементОбложка6.Вид = ВидГруппыФормы.ГруппаКолонок;
		ЭлементОбложка6.Группировка = ГруппировкаКолонок.ВЯчейке;
		ЭлементОбложка6.Ширина = 10;
		ЭлементОбложка6.РастягиватьПоГоризонтали = Ложь;
		
		ИмяПоляСрокСледующегоДела = "СледующееДелоСрок_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляСрокСледующегоДела, Тип("ПолеФормы"), ЭлементОбложка6);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СледующееДелоСрок";
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		ПолеКарточки.Ширина = 5;
		
		ИмяПоляИсполнительСледующегоДела = "СледующееДелоИсполнитель_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляИсполнительСледующегоДела, Тип("ПолеФормы"), ЭлементОбложка6);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".СледующееДелоИсполнитель";
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		ПолеКарточки.Ширина = 5;
		
		ИмяПоляРазделитель = "Разделитель_" + ОписаниеКолонки.Идентификатор;
		ПолеКарточки = Элементы.Добавить(ИмяПоляРазделитель, Тип("ПолеФормы"), ЭлементКарточка);
		ПолеКарточки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеКарточки.ПутьКДанным = ИмяРеквизитаКолонки + ".Разделитель";
		ПолеКарточки.ЦветФона = WebЦвета.Белый;
		ПолеКарточки.Шрифт = Новый Шрифт(ПолеКарточки.Шрифт, , 1);
		ПолеКарточки.Ширина = 10;
		ПолеКарточки.РастягиватьПоГоризонтали = Ложь;
		ПолеКарточки.Высота = 1;
		ПолеКарточки.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");
		
	КонецЦикла;
	
	Если ДанныеКолонок.Количество() > 0 Тогда
		
		СкрытыеКолонкиАРМНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ");
		
		Если СкрытыеКолонкиАРМНастройки = Неопределено Тогда
			СкрытыеКолонкиАРМНастройки = Новый СписокЗначений;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ", СкрытыеКолонкиАРМНастройки);
		КонецЕсли;
		
		СкрытыеКолонкиАРМ = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМНастройки Цикл
			НайденныйЭтап = ДанныеКолонок.НайтиСтроки(Новый Структура("Отбор", ЭлементСписка.Значение));
			Если НайденныйЭтап.Количество() <> 0 Тогда
				СкрытыеКолонкиАРМ.Добавить(НайденныйЭтап[0].Идентификатор);
			ИначеЕсли ТекущийСценарий = "Все"
				И ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
				НайденныйЭтап = ДанныеКолонок.НайтиСтроки(Новый Структура("Отбор", ЭлементСписка.Значение.КатегорияСостояния));
				Если НайденныйЭтап.Количество() <> 0 Тогда
					ИдентификаторКДобавлению = НайденныйЭтап[0].Идентификатор;
					Если СкрытыеКолонкиАРМ.НайтиПоЗначению(ИдентификаторКДобавлению) = Неопределено Тогда
						СкрытыеКолонкиАРМ.Добавить(ИдентификаторКДобавлению);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СкрытыеКолонкиАРМ.Количество() > 0 Тогда
			ДобавитьСвернутыеТаблицы();
			ОбновитьЗаголовкиСвернутыхТаблиц();
		КонецЕсли;
		
	КонецЕсли;
	
	// Ширина колонок.
	НастройкиШирины = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПоддержкаНастройкиШириныКолонок", "АРМ_Поддержка");
	Если ТипЗнч(НастройкиШирины) <> Тип("Структура") Тогда
		ШиринаКолонокКанбан = 28;
	Иначе
		Если ТекущийСценарий = "Все" Тогда
			ИмяНастройки = "ШиринаВсеСценарии";
		Иначе
			ИмяНастройки = "Ширина"+СтрЗаменить(Строка(ТекущийСценарий.УникальныйИдентификатор()), "-", "");
		КонецЕсли;	
		НастройкиШирины.Свойство(ИмяНастройки, ШиринаКолонокКанбан);
		Если ШиринаКолонокКанбан = 0 Тогда
			НастройкиШирины.Свойство("ОбщаяНастройка", ШиринаКолонокКанбан);
		КонецЕсли;
	КонецЕсли;
	УстановитьШиринуКолонокКанбанСервер();

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы()
	
	ОбновитьОтборыНаСервере();
	Заголовок = СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыНаСервере()
	
	ОтборыУстановлены = Ложь;
	КоличествоФильтров = 0;
	
	ОтборПериодВключен = Истина;
	ОтборПериодДатаНачала = НачалоДня(ТекущаяДатаСеанса());
	ОтборПериодЗакрытияОкончание = КонецДня(ТекущаяДатаСеанса());
	Если ВариантПериода = "" Тогда
		ОтборПериодВключен = Ложь;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		ОтборПериодДатаОкончания = КонецДня(ОтборПериодДатаНачала);
		ОтборПериодЗакрытияНачало = НачалоДня(ОтборПериодЗакрытияОкончание);
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		ОтборПериодДатаОкончания = КонецДня(ОтборПериодДатаНачала + 3 * 86400);
		ОтборПериодЗакрытияНачало = НачалоДня(ОтборПериодЗакрытияОкончание - 3 * 86400);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ОтборПериодДатаОкончания = КонецДня(ОтборПериодДатаНачала + 7 * 86400);
		ОтборПериодЗакрытияНачало = НачалоДня(ОтборПериодЗакрытияОкончание - 7 * 86400);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		ОтборПериодДатаОкончания = КонецДня(ДобавитьМесяц(ОтборПериодДатаНачала, 1));
		ОтборПериодЗакрытияНачало = НачалоДня(ДобавитьМесяц(ОтборПериодЗакрытияОкончание, -1));
	КонецЕсли;
	
	ОтборПоОтветственному = ЗначенияОтбораПоОтветственному(ТекущийПользователь, ТекущаяРоль, ОтборПоРолиУстановлен);
	ОтборПоОтветственномуЗаполнен = (ОтборПоОтветственному.Количество() > 1);
	
	ИменаТаблиц = ИменаТаблиц(ДанныеКолонок, Истина);
	
	// отборы колонок Канбан
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		ТекущаяКатегория = Неопределено;
		НайденныеСтроки = ДанныеКолонок.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяКатегория = НайденныеСтроки[0].Колонка;
		КонецЕсли;
		
		РеквизитКолонка = ЭтотОбъект[ИмяТаблицы];
		
		Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(РеквизитКолонка);
		ГруппаОтбораСтрокиПоиска = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
			 НСтр("ru='Отбор по строке поиска'"),
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска, "Тема",
				 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор + "%", ,
				 Истина);
			Если ИмяТаблицы <> "Список_Новые" И ИмяТаблицы <> "ОбращенияСписок" Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска,
					 "КлиентПредставление", ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор + "%", ,
					 Истина);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска,
					 "ОтветственныйПредставление", ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор + "%", ,
					 Истина);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска,
					 "КонтактноеЛицоПредставление", ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор + "%", ,
					 Истина);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска, "Номер",
					 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор + "%", ,
					 Истина);
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, 
			"Пользователь", ОтборПоОтветственному, ОтборПоОтветственномуЗаполнен);
		Если ИмяТаблицы = "Список_Новые" Тогда
			
			CRM_СмещениеДатыТекущегоСеанса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
				 "CRM_СмещениеДатыТекущегоСеанса",
				 CRM_СмещениеДатыТекущегоСеанса);
			
			Если ТекущийСценарий = "Все" Тогда
				МассивСценариев = СценарииПоддержки;
			Иначе
				МассивСценариев = Новый Массив;
				МассивСценариев.Добавить(ТекущийСценарий);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
				 "ИсточникиЛидов", ИсточникиЛидовСценариев(МассивСценариев),
				 Истина);

			ВидыКаналов = Новый Массив;
			Если Не СкрытьЗаявки Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.Заявка);
			КонецЕсли;
			Если Не СкрытьСообщения Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.Диалоги);
			КонецЕсли;
			Если НЕ ОтображатьПисьма Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.ЭлектроннаяПочта);
			КонецЕсли;
			Если ПроверитьОтборПоСценариюТелефония(МассивСценариев) Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.ТелефонныйЗвонок);
			КонецЕсли;
			
			СкрываемыеЗвонки = Новый Массив;
			Если СкрытьПропущенныеТелефонныеЗвонки Тогда
				СкрываемыеЗвонки.Добавить(Перечисления.сфпСостоянияЗвонков.Пропущенный);
			КонецЕсли;
			Если СкрытьОтвеченныеТелефонныеЗвонки Тогда
				СкрываемыеЗвонки.Добавить(Перечисления.сфпСостоянияЗвонков.Отвеченный);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ВидыКаналов",
				ВидыКаналов, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "СкрываемыеЗвонки",
				СкрываемыеЗвонки, СкрываемыеЗвонки.Количество()>0);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
				 "СостояниеЛидов", Справочники.CRM_СостоянияЛидов.Новый,
				 СкрытьПовторныеОбращения);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ПоказыватьОтмеченныеВручнуюОбращения",
				ПоказыватьОтмеченныеВручнуюОбращения, Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
																				"СтрокаТелефонныйЗвонок",
																				НСтр("ru = 'Телефонный звонок'"), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка,
																				"СтрокаПропущенныйТелефонныйЗвонок",
																				НСтр("ru = 'Пропущенный телефонный звонок'"), Истина);
			
			Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораСтрокиПоиска,
					 "ТекстОснования", ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
					+ "%");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				РеквизитКолонка, "КаналПолученияСсылка", ОтборКаналПолучения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ОтборКаналПолучения));
				
			// +Отбор по папкам-источникам обращений
			ДанныеУчетныеЗаписиИПапки = CRM_Взаимодействия.УчетныеЗаписиИПапкиИсточникиОбращений(МассивСценариев);
			
			Если ТипЗнч(ДанныеУчетныеЗаписиИПапки) = Тип("Структура") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "БезПапокИсточниковЛидов",
					ДанныеУчетныеЗаписиИПапки.УчетныеЗаписи.Количество() = 0, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "УчетныеЗаписиСПапкамиИсточникамиЛидов",
					ДанныеУчетныеЗаписиИПапки.УчетныеЗаписи, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ПапкиИсточникиЛидов",
					ДанныеУчетныеЗаписиИПапки.Папки, Истина);
			КонецЕсли;
			// -Отбор по папкам-источникам обращений
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка, "Автор",
				 ТекущийАвтор, ВидСравненияКомпоновкиДанных.Равно, ,
				  ЗначениеЗаполнено(ТекущийАвтор));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "Подразделение", ПоискПодразделение, ВидСравненияКомпоновкиДанных.Равно, ,
				  ЗначениеЗаполнено(ПоискПодразделение));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "Партнер", ПоискКлиент, ВидСравненияКомпоновкиДанных.Равно, ,
				  ЗначениеЗаполнено(ПоискКлиент));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "ТипУслуги", ПоискТипУслуги, ВидСравненияКомпоновкиДанных.Равно, ,
				 ЗначениеЗаполнено(ПоискТипУслуги));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "Ссылка", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, ,
				  ОтборТеги.Количество() > 0);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "ТребуетсяРеакция", НуженОтвет, ВидСравненияКомпоновкиДанных.Равно, ,
				 НуженОтвет);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеквизитКолонка,
				 "Просрочено", Просрочено, ВидСравненияКомпоновкиДанных.Равно, ,
				 Просрочено);
			
			Если ОтборПериодВключен Тогда
				
				Если ТекущаяКатегория = Перечисления.CRM_КатегорииСостоянийПоддержки.Выполнено Тогда
					Если ВариантПериода = "Сегодня" Тогда
						ПериодНачалаОтбора = ОтборПериодЗакрытияНачало;
					Иначе
						ДлительностьПериодаОтбора	= ОтборПериодЗакрытияОкончание - ОтборПериодЗакрытияНачало;
						ПериодНачалаОтбора			= НачалоДня(ОтборПериодЗакрытияНачало - ДлительностьПериодаОтбора);
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ДатаЗакрытияНачалоОтбор",
						ПериодНачалаОтбора, ЗначениеЗаполнено(ОтборПериодЗакрытияНачало));
					
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ДатаЗакрытияОкончаниеОтбора",
						ОтборПериодЗакрытияОкончание, ЗначениеЗаполнено(ОтборПериодЗакрытияОкончание));
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РеквизитКолонка, "ДатаДействияОтбор",
						ОтборПериодДатаОкончания, ЗначениеЗаполнено(ОтборПериодДатаОкончания));
				КонецЕсли;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(РеквизитКолонка.Отбор, , "ГруппаОтборПериод");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// подсчет количества фильтров
	Если ОтборТеги.Количество() > 0 Тогда // теги
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПоискПодразделение) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если НуженОтвет Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если Просрочено Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискКлиент) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПоискТипУслуги) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКаналПолучения) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ОтборПериодВключен Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если НЕ ОтборПоРолиУстановлен Или ЗначениеЗаполнено(ТекущаяРоль) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийАвтор) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	ОтборыУстановлены = КоличествоФильтров > 0;
	
	Элементы.ОткрытьФильтр.Заголовок = ?(ОтборыУстановлены, НСтр("ru='Фильтр: ';en='Filter: '") 
		+ КоличествоФильтров,
		 НСтр("ru='Фильтр'"));
	Элементы.ОткрытьФильтр.Картинка = ?(ОтборыУстановлены, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.ОткрытьФильтр.ЦветТекста = ?(ОтборыУстановлены, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
	ПересчитатьКоличествоОбращений();
	
	Если СкрытыеКолонкиАРМ.Количество() > 0 Тогда
		ОбновитьЗаголовкиСвернутыхТаблиц();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборыСписка(ИмяОтбора = Неопределено)
	
	Если ИмяОтбора = "ОтборТипыОбращений" Или ИмяОтбора = Неопределено Тогда
		Если ОтборТипыОбращенийВключен Тогда
			ТипыОтбора = Новый Массив;
			Для Сч = 1 По ОтборТипыОбращений.Количество() - 1 Цикл
				ЭлементСписка = ОтборТипыОбращений[Сч];
				Если ЭлементСписка.Пометка Тогда
					ТипыОтбора.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ОбращенияСписок, "ТипОбращения", ТипыОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ОбращенияСписок, "ТипОбращения", , , , Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяОтбора = "ОтборКатегорииОбращений" Или ИмяОтбора = Неопределено Тогда
		Если ОтборКатегорииОбращенийВключен Тогда
			КатегорииОтбора = Новый Массив;
			Для Сч = 1 По ОтборКатегорииОбращений.Количество() - 1 Цикл
				ЭлементСписка = ОтборКатегорииОбращений[Сч];
				Если ЭлементСписка.Пометка Тогда
					КатегорииОтбора.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ОбращенияСписок, "КатегорияОбращения", КатегорииОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ОбращенияСписок, "КатегорияОбращения", , , , Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПереносаОбращения(ДанныеОбращения, СценарийОбращения, ОтборКолонки, РежимПереноса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекущийСтатус",				ДанныеОбращения.Статус);
	Результат.Вставить("НовыйСтатус",				Неопределено);
	Результат.Вставить("СписокСостояний",			Новый СписокЗначений);
	Результат.Вставить("ОткрыватьФормуПереноса",	Ложь);
	
	Если РежимПереноса = "ВсеСценарии" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыОбращений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК СтатусыОбращений
		|ГДЕ
		|	СтатусыОбращений.Родитель = &Сценарий
		|	И СтатусыОбращений.КатегорияСостояния = &КатегорияСостояния");
		
		Запрос.Параметры.Вставить("Сценарий", СценарийОбращения);
		Запрос.Параметры.Вставить("КатегорияСостояния", ОтборКолонки);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат.СписокСостояний.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			Результат.НовыйСтатус = Результат.СписокСостояний[0].Значение;
		КонецЕсли;
		
	Иначе
		
		Результат.НовыйСтатус = ОтборКолонки;
		Результат.СписокСостояний.Добавить(Результат.НовыйСтатус);
		
	КонецЕсли;
	
	Если Результат.НовыйСтатус = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	УказыватьДостигнутыйРезультат = Результат.НовыйСтатус.УказыватьДостигнутыйРезультат;
	ИнтерактивноеПланированиеАктивностей = Результат.НовыйСтатус.ИнтерактивноеПланированиеАктивностей;
	
	ПроверяемыеРеквизитыОбращения =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(Результат.НовыйСтатус);
	НеобходимоЗаполнитьРеквизиты = НеобходимоЗаполнитьРеквизиты(Результат.НовыйСтатус,
		 ПроверяемыеРеквизитыОбращения,
		 ДанныеОбращения.Ссылка);
	
	ОграничитьОтветственного = ЗначениеЗаполнено(Результат.НовыйСтатус)
		 И Не Результат.НовыйСтатус.РазрешитьРолевуюАдресацию
	                           И ТипЗнч(ДанныеОбращения.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей");
	
	Результат.ОткрыватьФормуПереноса = (УказыватьДостигнутыйРезультат
		Или ИнтерактивноеПланированиеАктивностей
		Или НеобходимоЗаполнитьРеквизиты
		Или ОграничитьОтветственного);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимоЗаполнитьРеквизиты(Состояние, ПроверяемыеРеквизитыИнтереса, Интерес)
	НеобходимоЗаполнитьРеквизиты = Ложь;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыИнтереса Цикл
			Если ТипЗнч(ПроверяемыйРеквизит) = Тип("Строка") Тогда 
				Если НЕ ЗначениеЗаполнено(Интерес[ПроверяемыйРеквизит]) Тогда
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				СтрДопРек = Интерес.ДополнительныеРеквизиты.Найти(Новый Структура("Свойство", ПроверяемыйРеквизит));
				Если СтрДопРек <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрДопРек.Значение) Тогда
						НеобходимоЗаполнитьРеквизиты = Истина;
						Прервать;
					КонецЕсли;
				Иначе
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ ЗначениеЗаполнено(Интерес.Партнер) Тогда
			НеобходимоЗаполнитьРеквизиты = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат НеобходимоЗаполнитьРеквизиты;
КонецФункции

&НаСервере
Функция ПереносОбращенияНаСервере(Обращение, НовоеСостояние)
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Успех", Истина);
	РезультатОбработки.Вставить("Сообщение", "");
	
	Если Обращение.СостояниеИнтереса = НовоеСостояние Тогда
		РезультатОбработки.Успех = Ложь;
		РезультатОбработки.Сообщение = НСтр("ru = 'Обращение уже находится в выбранном состоянии. Переход не произведен.'");
		Возврат РезультатОбработки;
	КонецЕсли;
	
	НачатьТранзакцию();
	ТекстСообщения = "";
	Попытка
		
		РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Обращение,
			НовоеСостояние);
		
		CRM_ИнтересыСервер.СоздатьАвтоВзаимодействияПоИнтересу(Обращение, НовоеСостояние, Пользователи.ТекущийПользователь());
		
		ОбращениеОбъект = Обращение.ПолучитьОбъект();
		ОбращениеОбъект.СостояниеИнтереса = НовоеСостояние;
		ОбращениеОбъект.Завершен = НовоеСостояние.Завершено;
		ОбращениеОбъект.Записать();
		
		ТекстСообщения = "";
		Если Не РегистрыСведений.CRM_ЗапланированныеАктивности.ПроверитьОбязательноеПланированиеАктивности(Обращение,
			НовоеСостояние, ТекстСообщения) Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РезультатОбработки.Успех = Ложь;
		Если ПустаяСтрока(ТекстСообщения) Тогда
			РезультатОбработки.Сообщение = ОписаниеОшибки();
		Иначе
			РезультатОбработки.Сообщение = ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПеренаправитьОбращение(Ответственный = Неопределено, ТипОтветственного = Неопределено)
	
	Если ТекущийРежим = "Канбан" Тогда
		//Если АктивнаяТаблица = "Список_Новые" Тогда
		//	Возврат;
		//КонецЕсли;
		ТекущиеДанные = Элементы[АктивнаяТаблица].ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ОбращенияСписок.ТекущиеДанные;
	КонецЕсли;
	
	ТекущееОбращение = ТекущиеДанные.Ссылка;
	ТекущийОтветственный = ТекущиеДанные.Ответственный;
	Если ТекущийОтветственный = Ответственный Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОтветственного) Тогда
		ТипОтветственного = Тип("СправочникСсылка.Пользователи");
	КонецЕсли;
	Если (ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей"))
		 И (ТипЗнч(ТекущееОбращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переадресация исходящих писем на роль исполнителя не поддерживается'"));
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущееОбращение", ТекущееОбращение);
	ДополнительныеПараметры.Вставить("ТекущийОтветственный", ТекущийОтветственный);
	ДополнительныеПараметры.Вставить("ТипОтветственного", ТипОтветственного);
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПеренаправитьОбращениеЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	Если Ответственный = Неопределено Тогда
		Если ТипОтветственного = Тип("СправочникСсылка.Пользователи") Тогда
			ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", , ЭтотОбъект, , , , ОповещениеЗавершения);
		ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей") Тогда

			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "РазрешитьРолевуюАдресацию")
				И НЕ ТекущиеДанные.РазрешитьРолевуюАдресацию Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для состояния %1 не разрешена ролевая адресация'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ТекущиеДанные.Статус));
				Возврат;
				
			КонецЕсли;
			
			ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект, , , , ОповещениеЗавершения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОбращениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = ДополнительныеПараметры.ТипОтветственного Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ДополнительныеПараметры.ТекущийОтветственный Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеОбращений = Новый Массив;
	ДанныеОбращений.Добавить(ДополнительныеПараметры.ТекущееОбращение);
	ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ДанныеОбращений, Результат);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповОбращений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ТипыОбращений.Ссылка КАК Ссылка,
		|	CRM_ТипыОбращений.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.CRM_ТипыОбращений КАК CRM_ТипыОбращений
		|ГДЕ
		|	НЕ CRM_ТипыОбращений.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.Интерес)
		|	И НЕ CRM_ТипыОбращений.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповОбращений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповОбращений.Добавить(Выборка.Ссылка, , , БиблиотекаКартинок["CRM_ТипОбращения" + Выборка.ИндексКартинки]);
	КонецЦикла;
	
	Возврат СписокТиповОбращений;

КонецФункции

&НаСервереБезКонтекста
Функция МассивСостоянийПоКатегории(Категория)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.КатегорияСостояния = &КатегорияСостояния
	                      |	И CRM_СостоянияИнтересов.Используется");
	
	Запрос.УстановитьПараметр("КатегорияСостояния", Категория);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ИсточникиЛидовСценариев(СписокСценариев)
	
	Если Не ЗначениеЗаполнено(СписокСценариев) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_ИсточникиПолученияЛидовСценарии.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ИсточникиПолученияЛидов.CRM_Сценарии КАК CRM_ИсточникиПолученияЛидовСценарии
	                      |ГДЕ
	                      |	CRM_ИсточникиПолученияЛидовСценарии.Сценарий В(&СписокСценариев)
	                      |	И НЕ CRM_ИсточникиПолученияЛидовСценарии.Ссылка.ПометкаУдаления
	                      |	И CRM_ИсточникиПолученияЛидовСценарии.Ссылка.Включено
	                      |	И CRM_ИсточникиПолученияЛидовСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров.CRM_Сценарии КАК CRM_УчетныеЗаписиМессенджеровСценарии
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеровСценарии.Сценарий В(&СписокСценариев)
	                      |	И НЕ CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.ПометкаУдаления
	                      |	И CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.Включена
	                      |	И CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты.CRM_Сценарии КАК УчетныеЗаписиЭлектроннойПочтыСценарии
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Сценарий В(&СписокСценариев)
	                      |	И НЕ УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.ПометкаУдаления
	                      |	И УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка");
	
	Запрос.УстановитьПараметр("СписокСценариев", СписокСценариев);
	МассивИсточников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если ПроверитьОтборПоСценариюТелефония(СписокСценариев) Тогда
		МассивИсточников.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат МассивИсточников;
	
КонецФункции

&НаСервере
Функция ПроверитьОтборПоСценариюТелефония(СценарийИнтереса)
	
	Если Не ЗначениеЗаполнено(СценарийИнтереса) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СценарииОбработки = Константы.сфпНастройкиТелефонии_СценарииОбработки.Получить().Получить();
	Если СценарииОбработки = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИсточникОбращения = Новый Структура;
	ИсточникОбращения.Вставить("CRM_ИсточникЛидов", Константы.сфпНастройкиТелефонии_ИсточникЛидов.Получить());
	ИсточникОбращения.Вставить("СценарииОбработки",
		 Константы.сфпНастройкиТелефонии_СценарииОбработки.Получить().Получить());
	
	Если ИсточникОбращения.CRM_ИсточникЛидов Тогда
		
		Для Каждого СтрокаСценарийИнтереса Из СценарийИнтереса Цикл
			ВыбранныйСценарий = ?(ТипЗнч(СценарийИнтереса) = Тип("СписокЗначений"),
				 СтрокаСценарийИнтереса.Значение,
				 СтрокаСценарийИнтереса);
			Для Каждого СтрокаПравил Из ИсточникОбращения.СценарииОбработки Цикл
				Если СтрокаПравил.Сценарий = ВыбранныйСценарий Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область Вспомогательные

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(Форма)
	
	ТекстЗаголовка = НСтр("ru = 'Поддержка'") + " / " + Строка(Форма.ТекущийПользователь);
	
	//ОтборМоиВключен = (Форма.БыстрыйОтборМои <> 0);
	// Если ОтборМоиВключен Тогда
	//	ТекстЗаголовка = ТекстЗаголовка +  " / " + НСтр("ru = 'Мои'");
	//КонецЕсли;
	//
	//ОтборТребуютРеакцииВключен = (Форма.БыстрыйОтборТребуютРеакции <> 0);
	// Если ОтборТребуютРеакцииВключен Тогда
	//	ТекстЗаголовка = ТекстЗаголовка +  " / " + ?(Форма.БыстрыйОтборТребуютРеакции = 1,
		// НСтр("ru = 'Нужен ответ'"), НСтр("ru = 'Не нужен ответ'"));
	//КонецЕсли;
	//
	//ОтборПросроченныеВключен = (Форма.БыстрыйОтборПросрочено <> 0);
	// Если ОтборПросроченныеВключен Тогда
	//	ТекстЗаголовка = ТекстЗаголовка +  " / " + ?(Форма.БыстрыйОтборПросрочено = 1,
		// НСтр("ru = 'Просроченные'"), НСтр("ru = 'Не просроченные'"));
	//КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаТаблиц(ДанныеКолонок, ВключаяНовые = Истина)
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("ОбращенияСписок");
	
	Если ВключаяНовые Тогда
		ИменаТаблиц.Добавить("Список_Новые");
	КонецЕсли;
	
	Для Каждого ОписаниеКолонки Из ДанныеКолонок Цикл
		ИменаТаблиц.Добавить(ОписаниеКолонки.ИмяТаблицы);
	КонецЦикла;
	
	Возврат ИменаТаблиц;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКолонкиКанбан()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	CRM_ОбъектыАРМ_Поддержка.Обращение КАК Обращение,
	|	МИНИМУМ(CRM_ОбъектыАРМ_Поддержка.Соисполнение) КАК Соисполнение
	|ПОМЕСТИТЬ ОбъектыПользователя
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ_Поддержка КАК CRM_ОбъектыАРМ_Поддержка
	|ГДЕ
	|	CRM_ОбъектыАРМ_Поддержка.СостояниеИнтереса В(&СостояниеИнтереса)
	|{ГДЕ
	|	(CRM_ОбъектыАРМ_Поддержка.Ответственный В (&Пользователь)),
	|	(CRM_ОбъектыАРМ_Поддержка.ДатаОтбора >= &ДатаЗакрытияНачалоОтбор
	|			И CRM_ОбъектыАРМ_Поддержка.ДатаОтбора <= &ДатаЗакрытияОкончаниеОтбора),
	|	(CRM_ОбъектыАРМ_Поддержка.ДатаОтбора <> ДАТАВРЕМЯ(1, 1, 1)
	|			И CRM_ОбъектыАРМ_Поддержка.ДатаОтбора <= &ДатаДействияОтбор)}
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ОбъектыАРМ_Поддержка.Обращение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обращения.Ссылка КАК Ссылка,
	|	Обращения.Тема КАК Тема,
	|	Обращения.ТипОбращения КАК ТипОбращения,
	|	Обращения.ТипУслуги КАК ТипУслуги,
	|	Обращения.Ответственный КАК Ответственный,
	|	Обращения.Автор КАК Автор,
	|	Обращения.Подразделение КАК Подразделение,
	|	СтатусыОбращений.КатегорияСостояния КАК Категория,
	|	СтатусыОбращений.Родитель КАК Сценарий,
	|	СтатусыОбращений.РазрешитьРолевуюАдресацию КАК РазрешитьРолевуюАдресацию,
	|	Обращения.СостояниеИнтереса КАК Статус,
	|	ВЫБОР
	|		КОГДА Обращения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Обращения.ПотенциальныйКлиент
	|		ИНАЧЕ Обращения.Партнер
	|	КОНЕЦ КАК Клиент,
	|	Обращения.КонтактноеЛицо КАК Контакт,
	|	Типы.ИндексКартинки КАК ИндексКартинки,
	|	Обращения.Избранный КАК Избранный,
	|	ВЫБОР
	|		КОГДА Обращения.Избранный
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ИзбранныйИндексКартинки,
	|	Обращения.СрокРеакции КАК СрокРеакции,
	|	ВЫБОР
	|		КОГДА Обращения.Завершен
	|			ТОГДА Обращения.ДатаЗакрытия
	|		ИНАЧЕ Обращения.СрокРешения
	|	КОНЕЦ КАК СрокРешения,
	|	НЕ ЕСТЬNULL(СведенияПоддержки.ЕстьОтвет, ЛОЖЬ) КАК ТребуетсяРеакция,
	|	НЕ Обращения.Завершен КАК ТребуетсяРешение,
	|	ВЫБОР
	|		КОГДА Обращения.Завершен
	|			ТОГДА Обращения.ДатаЗакрытия
	|		КОГДА ЕСТЬNULL(СведенияПоддержки.ЕстьОтвет, ЛОЖЬ)
	|			ТОГДА Обращения.СрокРешения
	|		ИНАЧЕ Обращения.СрокРеакции
	|	КОНЕЦ КАК ДатаУпорядочивания,
	|	Обращения.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ВЫБОР
	|		КОГДА СведенияПоддержки.ДатаОтвета <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Обращения.СрокРеакции < ЕСТЬNULL(СведенияПоддержки.ДатаОтвета, &ТекущаяДата)
	|		ИНАЧЕ Обращения.СрокРеакции < &ТекущаяДата
	|	КОНЕЦ КАК СрокРеакцииПросрочен,
	|	Обращения.СрокРешения < ВЫБОР
	|		КОГДА Обращения.Завершен
	|			ТОГДА Обращения.ДатаЗакрытия
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК СрокРешенияПросрочен,
	|	ВЫБОР
	|		КОГДА Обращения.СрокРеакции < ВЫБОР
	|				КОГДА СведенияПоддержки.ДатаОтвета <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЕСТЬNULL(СведенияПоддержки.ДатаОтвета, &ТекущаяДата)
	|				ИНАЧЕ &ТекущаяДата
	|			КОНЕЦ
	|			ТОГДА 3
	|		КОГДА НЕ ЕСТЬNULL(СведенияПоддержки.ЕстьОтвет, ЛОЖЬ)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СрокРеакцииСостояние,
	|	ВЫБОР
	|		КОГДА Обращения.СостояниеИнтереса.КатегорияСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_КатегорииСостоянийПоддержки.ВОжидании)
	|			ТОГДА 4
	|		КОГДА Обращения.СрокРешения < ВЫБОР
	|				КОГДА Обращения.Завершен
	|					ТОГДА Обращения.ДатаЗакрытия
	|				ИНАЧЕ &ТекущаяДата
	|			КОНЕЦ
	|			ТОГДА 3
	|		КОГДА НЕ Обращения.Завершен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СрокРешенияСостояние,
	|	Обращения.СрокРеакции < ЕСТЬNULL(СведенияПоддержки.ДатаОтвета, &ТекущаяДата)
	|		ИЛИ Обращения.СрокРешения < ВЫБОР
	|			КОГДА Обращения.Завершен
	|				ТОГДА Обращения.ДатаЗакрытия
	|			ИНАЧЕ &ТекущаяДата
	|		КОНЕЦ КАК Просрочено,
	|	"""" КАК Разделитель,
	|	ВЫБОР
	|		КОГДА Обращения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Обращения.ПотенциальныйКлиент.Наименование
	|		ИНАЧЕ Обращения.Партнер.Наименование
	|	КОНЕЦ КАК КлиентПредставление,
	|	Обращения.КонтактноеЛицо.Наименование КАК КонтактноеЛицоПредставление,
	|	Обращения.Ответственный.Наименование КАК ОтветственныйПредставление,
	|	Обращения.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ОбъектыПользователя.Соисполнение
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Соисполнение,
	|	ЕСТЬNULL(СведенияПоддержки.СледующееДелоСрок, ДАТАВРЕМЯ(1, 1, 1)) КАК СледующееДелоСрок,
	|	ЕСТЬNULL(СведенияПоддержки.СледующееДелоИсполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК СледующееДелоИсполнитель
	|ИЗ
	|	ОбъектыПользователя КАК ОбъектыПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК Обращения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ТипыОбращений КАК Типы
	|			ПО Обращения.ТипОбращения = Типы.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СведенияПоддержки КАК СведенияПоддержки
	|			ПО (СведенияПоддержки.Обращение = Обращения.Ссылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК СтатусыОбращений
	|			ПО Обращения.СостояниеИнтереса = СтатусыОбращений.Ссылка
	|		ПО ОбъектыПользователя.Обращение = Обращения.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеПоляДата(Список, ИмяПоля = "Дата")
	
	УсловноеОформление = Список.УсловноеОформление;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='д МММ ЧЧ:мм'");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//ЭлементОформления.Использование = Истина;
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	//
	//ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	//ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	//ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПараметраМастераРегистрацииОбращений(Обращение)
	
	ИмяПараметра = "";
	
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ИмяПараметра = "ПисьмоВходящее";
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ИмяПараметра = "ПисьмоИсходящее";
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ИмяПараметра = "СообщениеМессенджера";
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ИмяПараметра = "ТелефонныйЗвонок";
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		ИмяПараметра = "Заявка";
	ИначеЕсли ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		ИмяПараметра = "Диалог";
	КонецЕсли;
	
	Возврат ИмяПараметра;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИндексЦветаКатегории(Категория)
	
	ИндексЦвета = 0;
	
	Если Категория = Перечисления.CRM_КатегорииСостоянийПоддержки.КВыполнению Тогда
		ИндексЦвета = 16;
	ИначеЕсли Категория = Перечисления.CRM_КатегорииСостоянийПоддержки.ВРаботе Тогда
		ИндексЦвета = 22;
	ИначеЕсли Категория = Перечисления.CRM_КатегорииСостоянийПоддержки.ВОжидании Тогда
		ИндексЦвета = 4;
	ИначеЕсли Категория = Перечисления.CRM_КатегорииСостоянийПоддержки.Выполнено Тогда
		ИндексЦвета = 19;
	КонецЕсли;
	
	Возврат ИндексЦвета;
	
КонецФункции

&НаСервере
Процедура ДоработатьОтображениеТаблиц()
	
	// Удаление старых команд смены этапа.
	Для Каждого ТекущееИмяКомандыУдаления Из СписокКомандСменыЭтапов Цикл
		НайденнаяКомандаУдаления = Команды.Найти(ТекущееИмяКомандыУдаления.Значение);
		
		Если НайденнаяКомандаУдаления <> Неопределено Тогда
			Команды.Удалить(НайденнаяКомандаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	СписокКомандСменыЭтапов.Очистить();
	
	ИменаТаблиц = ИменаТаблиц(ДанныеКолонок, Истина);
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Элемент = Элементы[ИмяТаблицы];
		
		Если ИмяТаблицы <> "Список_Новые" Тогда

			Для Каждого ЭлементМеню Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				ЭлементМеню.Видимость = Ложь;
			КонецЦикла;
			
		КонецЕсли;
			
		Если ИмяТаблицы = "Список_Новые" Тогда
			
			ИмяЭлементаКнопки = "ОтклонитьОбращение_" + ИмяТаблицы;
			КнопкаОтклонитьОбращение = Элементы.Найти(ИмяЭлементаКнопки);
			Если КнопкаОтклонитьОбращение = Неопределено Тогда
				КнопкаОтклонитьОбращение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
				КнопкаОтклонитьОбращение.ИмяКоманды = "ОтклонитьОбращение";
			КонецЕсли;
			КнопкаОтклонитьОбращение.Видимость = Истина;
			
			ИмяЭлементаКнопки = "ОтметитьОбработанным_" + ИмяТаблицы;
			КнопкаОтметитьОбработанным = Элементы.Найти(ИмяЭлементаКнопки);
			Если КнопкаОтметитьОбработанным = Неопределено Тогда
				КнопкаОтметитьОбработанным = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
				КнопкаОтметитьОбработанным.ИмяКоманды = "ОтметитьОбработанным";
			КонецЕсли;
			КнопкаОтметитьОбработанным.Видимость = Истина;
			
		КонецЕсли;
		
		ИмяЭлементаКнопки = "ПринятьВРаботу_" + ИмяТаблицы;
		КнопкаПринятьВРаботу = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаПринятьВРаботу = Неопределено Тогда
			КнопкаПринятьВРаботу = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
	    	КнопкаПринятьВРаботу.ИмяКоманды = "ПринятьВРаботу";
		КонецЕсли;
		
		КнопкаПринятьВРаботу.Видимость = Истина;

		ИмяЭлементаКнопки = "ПередатьИсполнителю_" + ИмяТаблицы;
		КнопкаПередатьИсполнителю = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаПередатьИсполнителю = Неопределено Тогда
			КнопкаПередатьИсполнителю = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
	    	КнопкаПередатьИсполнителю.ИмяКоманды = "ПередатьИсполнителю";
		КонецЕсли;
		КнопкаПередатьИсполнителю.Видимость = Истина;
		
		ИмяЭлементаКнопки = "ПередатьРоли_" + ИмяТаблицы;
		КнопкаПередатьРоли = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаПередатьРоли = Неопределено Тогда
			КнопкаПередатьРоли = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
			КнопкаПередатьРоли.ИмяКоманды = "ПередатьРоли";
		КонецЕсли;
		КнопкаПередатьРоли.Видимость = Истина;
		
		// Смена этапа
		Если ИмяТаблицы <> "Список_Новые" Тогда
		
			ИмяЭлементаГруппыКнопок	= "СменитьЭтапГруппаКнопок_" + ИмяТаблицы;
			ИмяЭлементаПодменю		= "СменитьЭтапПодменю_" + ИмяТаблицы;
			
			ГруппаКнопокСменитьЭтап = Элементы.Найти(ИмяЭлементаГруппыКнопок);
			Если ГруппаКнопокСменитьЭтап = Неопределено Тогда
				ГруппаКнопокСменитьЭтап = Элементы.Добавить(ИмяЭлементаГруппыКнопок, Тип("ГруппаФормы"),
					 Элементы[ИмяТаблицы].КонтекстноеМеню);
				ГруппаКнопокСменитьЭтап.Вид = ВидГруппыФормы.ГруппаКнопок;
				
				ПодменюСменитьЭтап = Элементы.Добавить(ИмяЭлементаПодменю, Тип("ГруппаФормы"), ГруппаКнопокСменитьЭтап);
				ПодменюСменитьЭтап.Заголовок	= "Сменить этап";
				ПодменюСменитьЭтап.Вид			= ВидГруппыФормы.Подменю;
				
				Для Каждого ТекущаяКолонка Из ДанныеКолонок Цикл
					ИмяЭлементаКнопкиСменитьЭтап	= "СменитьЭтап_На_" + ТекущаяКолонка.ИмяТаблицы + "_Из_" + ИмяТаблицы;
					КнопкаСменитьЭтап				= Элементы.Добавить(ИмяЭлементаКнопкиСменитьЭтап, Тип("КнопкаФормы"), ПодменюСменитьЭтап);
					
					Если ТекущаяКолонка.ИмяТаблицы = ИмяТаблицы Тогда
						КнопкаСменитьЭтап.Доступность	= Ложь;
						КнопкаСменитьЭтап.Картинка		= БиблиотекаКартинок.ОформлениеФлагЗеленый;
						КнопкаСменитьЭтап.Отображение	= ОтображениеКнопки.КартинкаИТекст;
						КнопкаСменитьЭтап.ИмяКоманды	= "СменитьЭтап";
					Иначе
						КомандаПоиска		= "СменитьЭтап_На_" + ТекущаяКолонка.ИмяТаблицы;
						КомандаСменыЭтапа	= Команды.Найти(КомандаПоиска);
						
						Если КомандаСменыЭтапа = Неопределено Тогда
							КомандаСменыЭтапа = Команды.Добавить(КомандаПоиска);
							СписокКомандСменыЭтапов.Добавить(КомандаПоиска);
						КонецЕсли;
						
						КомандаСменыЭтапа.Действие = "СменитьЭтап";
						КнопкаСменитьЭтап.ИмяКоманды = КомандаПоиска;
					КонецЕсли;
					
					КнопкаСменитьЭтап.Заголовок = ТекущаяКолонка.Заголовок;
					КнопкаСменитьЭтап.Видимость = Истина;
				КонецЦикла;
				
				ПодменюСменитьЭтап.Видимость = Истина;
			КонецЕсли;
			ГруппаКнопокСменитьЭтап.Видимость = Истина;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиВидАРМ()
	
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаГруппаВидАРМ");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаВидАРМ");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаВидАРМ");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Канбан';en='Kanban'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ВидКанбан");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	СтруктураКнопка.Вставить("Пометка", Истина);

	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Список';en='List'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ВидСписок");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопиОтборПросроченные()
	
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаОтборВключатьПросроченные");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаОтборПросроченные");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаОтборВключатьПросроченные");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Внизу';en='Down'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВнизу");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Вверху';en='Up'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВверху");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
	
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиВидАРМНаСервере(ВидАрм)
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиПросроченныеНаСервере()
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ПросроченныеВнизу);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", Не ПросроченныеВнизу);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ТекущийСценарий);
		ТекущийЭлемент = Элементы.НастроитьШиринуКолонок;
	Иначе
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонокКанбан()

	// Вызываем серверное обновление, при клиентском картинка "Соисполнение" плавает
	УстановитьШиринуКолонокКанбанСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШиринуКолонокКанбанСервер()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ШиринаЭлемента = ШиринаКолонокКанбан - 9;
	Иначе
		ШиринаЭлемента = ШиринаКолонокКанбан - 10;
	КонецЕсли;
	
	Для Сч = 0 По ДанныеКолонок.Количество() Цикл
		
		Если Сч < ДанныеКолонок.Количество() Тогда
			ОписаниеКолонки = ДанныеКолонок[Сч];
			ИмяЭлементаЗаголовок = "Заголовок_" + ОписаниеКолонки.Идентификатор;
			ИмяЭлементаСписок = "Список_" + ОписаниеКолонки.Идентификатор;
			ИмяЭлементаЦвет = "Цвет_" + ОписаниеКолонки.Идентификатор;
			ИмяЭлементаТема = "Тема_" + ОписаниеКолонки.Идентификатор;
		Иначе
			ИмяЭлементаЗаголовок = "Заголовок_Новые";
			ИмяЭлементаСписок = "Список_Новые";
			ИмяЭлементаЦвет = "Цвет_Новые";
			ИмяЭлементаТема = "";
		КонецЕсли;
		
		ЭлементЗаголовок = Элементы.Найти(ИмяЭлементаЗаголовок);
		Если ЭлементЗаголовок <> Неопределено Тогда
			ЭлементЗаголовок.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		
		ЭлементСписок = Элементы.Найти(ИмяЭлементаСписок);
		Если ЭлементСписок <> Неопределено Тогда
			ЭлементСписок.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		
		ЭлементЦвет = Элементы.Найти(ИмяЭлементаЦвет);
		Если ЭлементЦвет <> Неопределено Тогда
			ЭлементЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		
		Если ИмяЭлементаТема <> "" Тогда
			ЭлементТема = Элементы.Найти(ИмяЭлементаТема);
			Если ЭлементТема <> Неопределено Тогда
				ЭлементТема.Ширина   = ШиринаЭлемента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ТекущийСценарий)

	НастройкиШирины = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПоддержкаНастройкиШириныКолонок", "АРМ_Поддержка");
	Если ТипЗнч(НастройкиШирины) <> Тип("Структура") Тогда
		НастройкиШирины = Новый Структура;
	КонецЕсли;
	Если ТекущийСценарий = "Все" Тогда
		ИмяНастройки = "ШиринаВсеСценарии";
	Иначе
		ИмяНастройки = "Ширина"+СтрЗаменить(Строка(ТекущийСценарий.УникальныйИдентификатор()), "-", "");
	КонецЕсли;	
	НастройкиШирины.Вставить(ИмяНастройки, ШиринаКолонокКанбан);
	Если НастройкиШирины.Количество() < 3 Тогда
		НастройкиШирины.Вставить("ОбщаяНастройка", ШиринаКолонокКанбан);
	КонецЕсли;
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПоддержкаНастройкиШириныКолонок",
		 "АРМ_Поддержка",
		 НастройкиШирины);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыОбращенийТекущегоСценария()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СостоянияИнтересовТипыОбращений.ТипОбращения КАК ТипОбращения
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов.ТипыОбращений КАК CRM_СостоянияИнтересовТипыОбращений
		|ГДЕ
		|	CRM_СостоянияИнтересовТипыОбращений.Ссылка = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий", ТекущийСценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивТиповОбращений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТипОбращения");
	
	ТипыОбращенийТекущегоСценария.ЗагрузитьЗначения(МассивТиповОбращений);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЧекЛист(Интерес)
	
	Если Интерес.СостояниеИнтереса.ИспользоватьЧекЛист И Интерес.СостояниеИнтереса.ПроверкаВыполненияЧекЛиста
		И Интерес.ЧекЛист.НайтиСтроки(Новый Структура("СостояниеИнтереса, Выполнено",
			Интерес.СостояниеИнтереса, Ложь)).Количество() > 0 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	ОбновитьОтборы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

// Добавяляет реквизиты для данных свернутых этапов согласно настройкам пользователя
//
&НаСервере
Процедура ДобавитьСвернутыеТаблицы()
	
	ИмяРеквизита = "ТаблицаЭтапыСвернуто";
	
	Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
		
		ГруппаНеРазобранных = Элементы.Найти("Колонка_Новые");
		ГруппаДобавленияСкрытых = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаНеРазобранных);
		ГруппаДобавленияСкрытых.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДобавленияСкрытых.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаДобавленияСкрытых.ОтображатьЗаголовок = Ложь;
		ГруппаДобавленияСкрытых.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ДобавляемыеРеквизиты = Новый Массив;
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Заголовок", Новый ОписаниеТипов("Строка"), НовыйРеквизит.Имя));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Сумма", Новый ОписаниеТипов("Строка"), НовыйРеквизит.Имя));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПустаяЯчейка", Новый ОписаниеТипов("Картинка"), НовыйРеквизит.Имя));
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаДобавленияСкрытых);
		ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		ДекорацияЦвет.РастягиватьПоГоризонтали = Ложь;
		ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияЦвет.Ширина = Элементы["Список_Новые"].Ширина;
		ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
		ДекорацияЦвет.ЦветФона = WebЦвета.Черный;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаДобавленияСкрытых);
		Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
		Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		Элемент.РежимВыбора = Истина;
		Элемент.ОтображениеСостоянияПросмотра.Видимость = Истина;
		Элемент.ОтображениеСтрокиПоиска.Видимость = Истина;
		Элемент.КоманднаяПанель.Видимость = Ложь;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита+".Заголовок";
		Элемент.РазрешитьПеретаскивание = Истина;
		Элемент.РазрешитьНачалоПеретаскивания = Ложь;
		Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ЧередованиеЦветовСтрок = Ложь;
		Элемент.Видимость = Истина;
		Элемент.Шапка = Ложь;
		Элемент.ГоризонтальныеЛинии = Ложь;
		Элемент.ВертикальныеЛинии = Ложь;
		Элемент.УстановитьДействие("Выбор", "РазвернутьКолонкуСвернуто");
		Элемент.Заголовок = "";
		Элемент.КонтекстноеМеню.Видимость = Истина;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Высота = 2;
		Элемент.Ширина = Элементы["Список_Новые"].Ширина;
		Элемент.АвтоМаксимальнаяВысота = Ложь;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.РастягиватьПоВертикали = Ложь;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
		Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
		
		ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяРеквизита, Тип("ГруппаФормы"),
			Элементы[ИмяРеквизита]);
		ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
		
		КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
		КолонкаНаименование.ОтображатьВШапке = Ложь;
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина, Ложь, Ложь);
		КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
		КолонкаНаименование.АвтоМаксимальнаяШирина = Ложь;
		
		ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
		ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаСтрока.ОтображатьЗаголовок = Ложь;
		
		КолонкаОписание = Элементы.Добавить("Сумма" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
		КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаОписание.ПутьКДанным = ИмяРеквизита + ".Сумма";
		КолонкаОписание.ОтображатьВШапке = Ложь;
		КолонкаОписание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
		КолонкаОписание.АвтоМаксимальнаяШирина = Ложь;
		
		КолонкаКнопка = Элементы.Добавить("Ячейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
		КолонкаКнопка.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаКнопка.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
		КолонкаКнопка.Ширина = 1;
		КолонкаКнопка.ОтображатьВШапке = Ложь;
		КолонкаКнопка.ГиперссылкаЯчейки = Истина;
		КолонкаКнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		КолонкаКнопка.РастягиватьПоГоризонтали = Ложь;
		КолонкаКнопка.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");
		
	КонецЕсли;
	
	Если Команды.Найти("СвернутьКолонкуРазвернуто") = Неопределено Тогда
		КомандаСвернуть = Команды.Добавить("СвернутьКолонкуРазвернуто");
		КомандаСвернуть.Действие = "СвернутьКолонкуРазвернуто";
		КомандаСвернуть.Заголовок = НСтр("ru = 'Свернуть колонки'");
		ЭлементКомандаСвернуть = Элементы.Добавить("СвернутьКолонкуРазвернуто", Тип("КнопкаФормы"), Элементы["ГруппаЕщеКП"]);
		ЭлементКомандаСвернуть.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементКомандаСвернуть.ИмяКоманды = "СвернутьКолонкуРазвернуто";
		ЭлементКомандаСвернуть.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
		ЭлементКомандаСвернуть.Видимость = Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМ Цикл
		Элементы["Колонка_" + ЭлементСписка.Значение].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет количество и сумму интересов свернутых колонок АРМ
//
&НаСервере
Процедура ОбновитьЗаголовкиСвернутыхТаблиц()
	
	КоличествоИнтересов = 0;
	
	Для Каждого ЭлементСписка Из СкрытыеКолонкиАРМ Цикл
		КоличествоИнтересов = КоличествоИнтересов 
			+ CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект, "Список_" 
			+ ЭлементСписка.Значение);
	КонецЦикла;
	
	РеквизитТаблицаЭтапыСвернуто = ЭтотОбъект["ТаблицаЭтапыСвернуто"];
	Если РеквизитТаблицаЭтапыСвернуто <> Неопределено Тогда
		РеквизитТаблицаЭтапыСвернуто.Очистить();
		СтрокаТаблицыСвернуто = РеквизитТаблицаЭтапыСвернуто.Добавить();
		СтрокаТаблицыСвернуто.Заголовок = НСтр("ru = 'Скрыто колонок: '") + СкрытыеКолонкиАРМ.Количество();
		СтрокаТаблицыСвернуто.Сумма = Строка(КоличествоИнтересов) + НСтр("ru = ' обращений'");
		СтрокаТаблицыСвернуто.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,
		ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
		
КонецФункции

#КонецОбласти