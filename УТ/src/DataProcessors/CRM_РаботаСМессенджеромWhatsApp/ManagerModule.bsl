#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		Возврат ПолучитьСообщенияGreen(УчетнаяЗапись, СтруктураПараметровДоступа);
	Иначе
		Возврат ПолучитьСообщенияChat(УчетнаяЗапись, СтруктураПараметровДоступа);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьСообщение(Знач Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись) Экспорт

	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		ОжиданиеСобытийGreen(УчетнаяЗапись, СтруктураПараметровДоступа);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "WhatsApp";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.Телефон;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат "";
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат Лев(ID_Пользователя, СтрНайти(ID_Пользователя, "@") - 1);
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Ложь; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Истина; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Возврат Неопределено; 
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		ПометитьКакПрочтенныеGreen(СтруктураПараметровДоступа, МассивСообщений);
	Иначе	
		ПометитьКакПрочтенныеChat(СтруктураПараметровДоступа, МассивСообщений);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьWebhook(УчетнаяЗапись, ТелоЗапроса) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		ДанныеОтвета = Новый Структура("error", "Сервис не найден!");
		Ответ = CRM_РаботаСМессенджерамиСервер.HTTPОтвет(ДанныеОтвета);
		Возврат Ответ; 
	КонецЕсли;
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		Возврат ОбработатьWebhookGreen(УчетнаяЗапись, ТелоЗапроса, СтруктураПараметровДоступа);
	Иначе	
		Возврат ОбработатьWebhookChat(УчетнаяЗапись, ТелоЗапроса, СтруктураПараметровДоступа);
	КонецЕсли;
КонецФункции

Функция УстановитьWebhook(УчетнаяЗапись, СтруктураПараметровДоступа) Экспорт
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		Возврат УстановитьWebhookGreen(УчетнаяЗапись, СтруктураПараметровДоступа);
	Иначе	
		Возврат УстановитьWebhookChat(УчетнаяЗапись, СтруктураПараметровДоступа);
	КонецЕсли;
КонецФункции

Функция ПользовательДоступен(УчетнаяЗапись, НомерТелефона) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Структура("Доступен, Описание",
		 Ложь,
		 "");
	КонецЕсли;
	
	Если СтруктураПараметровДоступа.Свойство("Провайдер") И СтруктураПараметровДоступа.Провайдер = 1 Тогда
		Возврат ПользовательДоступенGreen(УчетнаяЗапись, НомерТелефона, СтруктураПараметровДоступа);
	Иначе	
		Возврат ПользовательДоступенChat(УчетнаяЗапись, НомерТелефона, СтруктураПараметровДоступа);
	КонецЕсли;
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
	ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	ПараметрыМессенджера.Вставить("ВозможностьПисатьПервыми", Истина);
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

Процедура ПроверитьПодключение(ПараметрыПроверки, ПараметрыПрокси) Экспорт
	
	Если ПараметрыПроверки.Провайдер = 0 Тогда
		РесурсТемп = ПараметрыПроверки.Ресурс + "settings?token=" + ПараметрыПроверки.Токен;
		CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(ПараметрыПроверки.Сервер,
			 , РесурсТемп, ПараметрыПрокси,
			 "x-www-form-urlencoded"));
	ИначеЕсли ПараметрыПроверки.Провайдер = 1 Тогда
		CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СерверGreen(), ,
			URLМетодаСервисаGreen(ПараметрыПроверки.ApiURL, ПараметрыПроверки.Токен, "getStateInstance"), ПараметрыПрокси));
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для получения QR-кода. Для авторизации аккаунта требуется считать QR-код из приложения
// WhatsApp Business на телефоне. Также получить QR-код и авторизовать аккаунт можно в личном кабинете. 
// Процедура авторизации аккаунта через личный кабинет описана в разделе Перед началом работы.
// Подробнее https://green-api.com/docs/api/account/QR/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьQRКод(Параметры, ПараметрыПрокси) Экспорт

	СтруктураОтвета = Неопределено;
	Если Параметры.Провайдер = 0 Тогда
		
	ИначеЕсли Параметры.Провайдер = 1 Тогда
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СерверGreen(), ,
			URLМетодаСервисаGreen(Параметры.ApiURL, Параметры.Токен, "qr"), ПараметрыПрокси));
	КонецЕсли;
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ВключитьВыключитьЗагрузкуВидео(Токен, Сервер, Ресурс, Загружать, ПараметрыПрокси) Экспорт
	
	Попытка
		РесурсТемп = Ресурс + "settings?&token=" + Токен;
		ДанныеЗапроса = Новый Структура();
		ДанныеЗапроса.Вставить("videoUploadOn", Загружать);
		Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);

		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
			 Запрос, РесурсТемп, ПараметрыПрокси,
			 "json"));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗагрузкаВидео(Токен, Сервер, Ресурс, ПараметрыПрокси) Экспорт
	
	Попытка
		РесурсТемп = Ресурс + "settings?&token=" + Токен;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
			 , РесурсТемп, ПараметрыПрокси,
			 "x-www-form-urlencoded"));
		Если СтруктураОтвета.videoUploadOn = Неопределено ИЛИ Не СтруктураОтвета.videoUploadOn Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#Область ChatApi

Функция ПолучитьСообщенияChat(УчетнаяЗапись, СтруктураПараметровДоступа) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СообщениеМессенджера.Дата) КАК Дата
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Ресурс = СтруктураПараметровДоступа.Ресурс + "messages?last=true&token=" + СтруктураПараметровДоступа.Токен;
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		Ресурс = СтрЗаменить(Ресурс, "last=true", "min_time=" + Формат(Выборка.Дата - Дата(1970, 1,
			 1) - (ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()),
			 "ЧДЦ=0; ЧГ=0"));
	КонецЕсли;
	
	МассивСообщений = Новый Массив;
	
	РезультатЗапроса	= CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(
		СтруктураПараметровДоступа.Сервер, "", Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси);
	СтруктураОтвета		= CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(РезультатЗапроса);
	
	// Проверка на тип "Структура", наличие поля "messages" и тип поля messages "Массив" сделаны для избежания падения регламентного задания.
	// 1msg иногда возвращает ответ, в которомом нет поля messages, либо поле messages содержит объект, а не массив. При этом, код ответа HTTP - 200.
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error;
		ИначеЕсли СтруктураОтвета.Свойство("messages")
				И ТипЗнч(СтруктураОтвета.messages) = Тип("Массив") Тогда
			ЗаполнитьСообщенияChat(УчетнаяЗапись, СтруктураОтвета.messages, МассивСообщений);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСообщений;
	
КонецФункции

Функция ОбработатьWebhookChat(УчетнаяЗапись, ТелоЗапроса, СтруктураПараметровДоступа) Экспорт
	
	ДанныеХука = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТелоЗапроса);
	
	Если ДанныеХука.Свойство("messages") Тогда
		МассивСообщений = Новый Массив;
		ЗаполнитьСообщенияChat(УчетнаяЗапись, ДанныеХука.messages, МассивСообщений);
		CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
	КонецЕсли;
	
	ДанныеОтвета = Новый Структура("status", "ок");
	Ответ = CRM_РаботаСМессенджерамиСервер.HTTPОтвет(ДанныеОтвета);
	Возврат Ответ;
	
КонецФункции

Процедура ПометитьКакПрочтенныеChat(СтруктураПараметровДоступа, МассивСообщений) Экспорт
	
	Возврат; // метод не поддерживаетсz ChatApi
	
	МассивЧатов = Новый Массив;
	Для каждого Сообщение Из МассивСообщений Цикл
		Если МассивЧатов.Найти(Сообщение.Группа) = Неопределено Тогда
			МассивЧатов.Добавить(Сообщение.Группа);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Чат Из МассивЧатов Цикл
		Ресурс = СтруктураПараметровДоступа.Ресурс + "readChat?chatId=" + Чат + "&token=" + СтруктураПараметровДоступа.Токен;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтруктураПараметровДоступа.Сервер,
			 "", Ресурс,
			 СтруктураПараметровДоступа.ПараметрыПрокси));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПользовательДоступенChat(УчетнаяЗапись, НомерТелефона, СтруктураПараметровДоступа) Экспорт
	
	Результат = Новый Структура("Доступен, Описание", Ложь, "");
	
	ШаблонСтрокиЗапроса = "%1contacts?token=%2";
	Ресурс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтрокиЗапроса,
					СтруктураПараметровДоступа.Ресурс, СтруктураПараметровДоступа.Токен);
	
	НомераТелефонов = Новый Массив;
	НомераТелефонов.Добавить(НомерТелефона);
	Структура = Новый Структура;
	Структура.Вставить("contacts", НомераТелефонов);				
	
	СтрокаЗапроса = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(Структура, Истина);
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтруктураПараметровДоступа.Сервер,
		 СтрокаЗапроса, Ресурс,
	СтруктураПараметровДоступа.ПараметрыПрокси));

	Если СтруктураОтвета.Свойство("error") Тогда
		ШаблонОписания = НСтр("ru = 'Результат поиска в мессенджерах номера %1 от учетной записи %2: %3'");
		Результат.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания,
			 НомерТелефона, УчетнаяЗапись,
			 СтруктураОтвета.error);
		Возврат Результат;
	Иначе
		Если СтруктураОтвета.Свойство("contacts") И СтруктураОтвета.contacts.Количество() > 0
			 И СтруктураОтвета.contacts[0].status <> "valid" Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Доступен = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область GreenApi

Функция ПолучитьСообщенияGreen(УчетнаяЗапись, СтруктураПараметровДоступа) Экспорт
	
	МассивСообщений = Новый Массив;
	ЗаполнитьСообщенияGreenПоОповещениям(УчетнаяЗапись, СтруктураПараметровДоступа, МассивСообщений);
	Возврат МассивСообщений;
	
КонецФункции

Функция СерверGreen() Экспорт
	Возврат "api.green-api.com";
КонецФункции

Функция СерверMediaGreen() Экспорт
	Возврат "media.green-api.com";
КонецФункции

Функция URLМетодаСервисаGreen(Инстанс, Токен, Метод) Экспорт
	Возврат СтрШаблон("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция УстановитьWebhookGreen(УчетнаяЗапись, СтруктураПараметровДоступа) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметровДоступа.АдресWebhook) Тогда
		АдресWebhook = СтруктураПараметровДоступа.АдресWebhook;
		АдресWebhook = АдресWebhook + ?(Прав(АдресWebhook, 1) = "/", "", "/") 
			+ Строка(УчетнаяЗапись.Ссылка.УникальныйИдентификатор());
	Иначе
		АдресWebhook = "";
	КонецЕсли;
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("webhookUrl", АдресWebhook);
	СтруктураНастроек.Вставить("incomingWebhook", "yes");
	СтруктураНастроек.Вставить("outgoingWebhook", "yes");
	СтруктураНастроек.Вставить("deviceWebhook", "yes");
	СтруктураНастроек.Вставить("stateWebhook", "yes");
	СтруктураНастроек.Вставить("markIncomingMessagesReaded", "no");
	СтруктураНастроек.Вставить("outgoingMessageWebhook", "yes");
	
	СтрокаЗапроса = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(СтруктураНастроек, Истина);
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СерверGreen(),
		 СтрокаЗапроса
		, URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL, СтруктураПараметровДоступа.Токен, "setSettings"), СтруктураПараметровДоступа.ПараметрыПрокси));
		
	Если СтруктураОтвета.Свойство("saveSettings")	Тогда
		Возврат СтруктураОтвета.saveSettings;
	Иначе       
		ТекстОшибки = (?(СтруктураОтвета.Свойство("error"), "Не удалось сохранить настройки по причине : " 
			+ СтруктураОтвета.error,
			 "Не удалось сохранить настройки!"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьWebhookGreen(УчетнаяЗапись, ТелоЗапроса, СтруктураПараметровДоступа) Экспорт
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("ИсходящееСообщение", "outgoingMessageReceived"); // Отправленное с телефона сообщение
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Оповещение = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТелоЗапроса);
	
	ЭтоВходящееСообщение = (Оповещение.typeWebhook = ТипыУведомлений.ВходящееСообщение);
	ЭтоИсходящееСообщение  = (Оповещение.typeWebhook = ТипыУведомлений.ИсходящееСообщение);
	
	Отказ = Ложь;
	Если ЭтоВходящееСообщение Или ЭтоИсходящееСообщение Тогда
		МассивСообщений = Новый Массив;
		Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
		Сообщение.Дата = МестноеВремя(Дата(1970, 1, 1) + Оповещение.timestamp);
		
		Если ЭтоВходящееСообщение Тогда
			user_id = Оповещение.senderData.sender;
		ИначеЕсли ЭтоИсходящееСообщение Тогда
			user_id = Оповещение.senderData.chatId;
		КонецЕсли;
		
		Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
			УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИмяПользователя = Оповещение.senderData.senderName;
		Сообщение.ID_Сообщения = Оповещение.idMessage;
		
		Если ЭтоВходящееСообщение Тогда
			Сообщение.ВидСообщения = "Входящее";
		ИначеЕсли ЭтоИсходящееСообщение Тогда
			Сообщение.ВидСообщения = "Исходящее";
		КонецЕсли;
		
		Сообщение.ID_Пользователя = user_id;
		Сообщение.Группа = user_id;
		Если ЗначениеЗаполнено(Контакт) Тогда
			Сообщение.Контакт = Контакт;
		КонецЕсли;
		
		Если ЭтоВходящееСообщение Тогда
			Сообщение.КонтактПредставление = ИмяПользователя;
		ИначеЕсли ЭтоИсходящееСообщение Тогда
			Если ТипЗнч(Контакт) <> Тип("Строка") Тогда
				Сообщение.КонтактПредставление = Строка(Контакт);
			Иначе
				Сообщение.КонтактПредставление = Контакт;
			КонецЕсли;
		КонецЕсли;
		
		Если Оповещение.messageData.typeMessage = "quotedMessage" Тогда
			Сообщение.ID_СообщенияОснования = Оповещение.messageData.extendedTextMessageData.stanzaId;
		КонецЕсли;
		
		Если Оповещение.messageData.typeMessage = "textMessage" Тогда
			Сообщение.ТекстСообщения = Оповещение.messageData.textMessageData.textMessage;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "imageMessage"
			Или Оповещение.messageData.typeMessage = "videoMessage"
			Или Оповещение.messageData.typeMessage = "documentMessage"
			Или Оповещение.messageData.typeMessage = "audioMessage" Тогда
			
			Если Оповещение.messageData.typeMessage = "documentMessage" Тогда
				ИмяФайла = Оповещение.messageData.fileMessageData.fileName;
			Иначе
				ИмяФайла = "";
			КонецЕсли;
			ПараметрыФайла = СкачатьФайлПоСсылке(Оповещение.messageData.fileMessageData.downloadUrl, ИмяФайла);
			Сообщение.Вложения.Добавить(ПараметрыФайла);
			
			Если Оповещение.messageData.fileMessageData.Свойство("caption") Тогда
				Сообщение.ТекстСообщения = Оповещение.messageData.fileMessageData.caption;
			КонецЕсли;
				ИначеЕсли Оповещение.messageData.Свойство("extendedTextMessageData") Тогда
			ТемпТекст = "";
			Если Оповещение.messageData.extendedTextMessageData.Свойство("title") Тогда
				ТемпТекст = ТемпТекст + Оповещение.messageData.extendedTextMessageData.title;
			КонецЕсли;
			Если Оповещение.messageData.extendedTextMessageData.Свойство("text") Тогда
				ТемпТекст = ТемпТекст + Символы.ПС + Оповещение.messageData.extendedTextMessageData.text;
			КонецЕсли;
			Если Оповещение.messageData.extendedTextMessageData.Свойство("jpegThumbnail")
				И ЗначениеЗаполнено(Оповещение.messageData.extendedTextMessageData.jpegThumbnail) Тогда
				ПараметрыФайла = ФайлJpegПоДанным(Оповещение.messageData.extendedTextMessageData.jpegThumbnail);
				Сообщение.Вложения.Добавить(ПараметрыФайла);
			КонецЕсли;
			Сообщение.ТекстСообщения = ТемпТекст;
		ИначеЕсли Оповещение.messageData.typeMessage = "contactMessage" Тогда
			Сообщение.ТекстСообщения = Оповещение.messageData.contactMessageData.vcard;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "contactsArrayMessage" Тогда
			
			МассивКонтактов = Оповещение.messageData.messageData.contacts;
			МассивСообщенийКонтактов = Новый Массив;
			Для Каждого ТекКонтакт Из МассивКонтактов Цикл
				МассивСообщенийКонтактов.Добавить(ТекКонтакт.displayName);
				МассивСообщенийКонтактов.Добавить(ТекКонтакт.vcard);
				МассивСообщенийКонтактов.Добавить("");
			КонецЦикла;
			
			Сообщение.ТекстСообщения = СтрСоединить(МассивСообщенийКонтактов, Символы.ПС);
			
		ИначеЕсли Оповещение.messageData.typeMessage = "locationMessage" Тогда	
			Сообщение.ТекстСообщения    = СтрШаблон("https://yandex.ru/maps/?pt=%1,%2&z=18&l=map"
			, Формат(Оповещение.messageData.locationMessageData.longitude, "ЧРД=.")
			, Формат(Оповещение.messageData.locationMessageData.latitude, "ЧРД=." ));
			
		ИначеЕсли Оповещение.messageData.typeMessage = "templateMessage" Тогда // сообщение с шаблонными кнопками 
			Сообщение.ТекстСообщения = Оповещение.messageData.templateMessage.contentText;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "buttonsMessage" Тогда // сообщение с кнопками 
			Сообщение.ТекстСообщения = Оповещение.messageData.buttonsMessage.contentText;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "stickerMessage" Тогда
			ПозицияПоследнегоРазделителя = СтрНайти(Оповещение.messageData.fileMessageData.downloadUrl, "/",
				 НаправлениеПоиска.СКонца);
			ИмяФайла = Прав(Оповещение.messageData.fileMessageData.downloadUrl,
				 СтрДлина(Оповещение.messageData.fileMessageData.downloadUrl) - ПозицияПоследнегоРазделителя); 
			
			Если Не ПустаяСтрока(Оповещение.messageData.fileMessageData.downloadUrl) Тогда
				ПараметрыФайла = СкачатьФайлПоСсылке(Оповещение.messageData.fileMessageData.downloadUrl, ИмяФайла);
				Сообщение.Вложения.Добавить(ПараметрыФайла);
			Иначе
				Сообщение.ТекстСообщения = НСтр("ru = 'Ошибка загрузки стикера! В сообщении отсутствует адрес файла.'");
			КонецЕсли;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "listMessage" Тогда
			Сообщение.ТекстСообщения = НСтр(
				"ru = 'Список выбора - для просмотра откройте диалог в приложении WhatsApp.';
				|en = 'The selection list - to view it, open the dialog in the WhatsApp application.'");
			
		ИначеЕсли Оповещение.messageData.typeMessage = "groupInviteMessage" Тогда
			ОбъектИнформацииОПриглашении = Оповещение.messageData.groupInviteMessageData;
			Сообщение.ТекстСообщения = НСтр("ru = 'Приглашение в группу: '; en = 'Invitation to a group: '")
				+ """" + ОбъектИнформацииОПриглашении.groupName + """ " + НСтр("ru = 'от: '; en = 'from: '")
				+ ОбъектИнформацииОПриглашении.name;
			
		ИначеЕсли Оповещение.messageData.typeMessage = "pollMessage" Тогда
			ОбъектДанныхСообщенийОпроса = Оповещение.messageData.pollMessageData;
			МассивВариантовВыбораОпроса = Новый Массив;
			
			Для Каждого ТекущиеДанныеОпроса Из ОбъектДанныхСообщенийОпроса.options Цикл
				МассивВариантовВыбораОпроса.Добавить(ТекущиеДанныеОпроса.optionName);
			КонецЦикла;
			
			Сообщение.ТекстСообщения = НСтр("ru = 'Опрос: '; en = 'Poll: '")
				+ ОбъектДанныхСообщенийОпроса.name + Символы.ПС
				+ СтрСоединить(МассивВариантовВыбораОпроса, Символы.ПС);
			
		ИначеЕсли Оповещение.messageData.typeMessage = "pollUpdateMessage" Тогда
			ОбъектДанныхСообщенийОпроса		= Оповещение.messageData.pollMessageData;
			МассивДанныхПолейВыбораОпроса	= Новый Массив;
			
			Для Каждого ТекущиеДанныеОпроса Из ОбъектДанныхСообщенийОпроса.votes Цикл
				МассивДанныхПолейВыбораОпроса.Добавить(
				ТекущиеДанныеОпроса.optionName + ": " + ТекущиеДанныеОпроса.optionVoters.Количество());
			КонецЦикла;
			
			Сообщение.ТекстСообщения = НСтр("ru = 'Опрос: '; en = 'Poll: '")
				+ ОбъектДанныхСообщенийОпроса.name + Символы.ПС
				+ СтрСоединить(МассивДанныхПолейВыбораОпроса, Символы.ПС);
			
		Иначе
			Сообщение.ТекстСообщения = СтрШаблон("Неизвестный тип сообщения: %1", Оповещение.messageData.typeMessage);
		КонецЕсли;
		
		Если Не Отказ Тогда
			МассивСообщений.Добавить(Сообщение);
		КонецЕсли;
		
		CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
	КонецЕсли;
	
	ДанныеОтвета = Новый Структура("status", "ок");
	Ответ = CRM_РаботаСМессенджерамиСервер.HTTPОтвет(ДанныеОтвета);
	Возврат Ответ;
	
КонецФункции

Процедура ПометитьКакПрочтенныеGreen(СтруктураПараметровДоступа, МассивСообщений) Экспорт
	
	Возврат; // Функция не работает в GreenApi
	
	Сервер = СерверGreen();
	Ресурс = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL, СтруктураПараметровДоступа.Токен, "ReadChat");

	Сообщение = МассивСообщений[МассивСообщений.ВГраница()];
	Структура = Новый Структура;
	Структура.Вставить("chatId", Сообщение.Группа);
	Структура.Вставить("idMessage", Сообщение.ID_Сообщения);
	СтрокаЗапроса = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(Структура, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
		 СтрокаЗапроса, Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error;
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательДоступенGreen(УчетнаяЗапись, НомерТелефона, СтруктураПараметровДоступа) Экспорт
	
	Результат = Новый Структура("Доступен, Описание", Ложь, "");
	
	Сервер = СерверGreen();
	Ресурс = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL, СтруктураПараметровДоступа.Токен, "checkWhatsapp");
	
	Попытка
		Структура = Новый Структура;
		Структура.Вставить("phoneNumber", Число(НомерТелефона));
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	СтрокаЗапроса = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(Структура, Истина);
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
		 СтрокаЗапроса, Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ШаблонОписания = НСтр("ru = 'Результат поиска в мессенджерах номера %1 от учетной записи %2: %3'");
		Результат.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания,
			 НомерТелефона, УчетнаяЗапись,
			 СтруктураОтвета.error);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Доступен = (СтруктураОтвета.Свойство("existsWhatsapp") И СтруктураОтвета.existsWhatsapp);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСообщенияChat(УчетнаяЗапись, Сообщения, МассивСообщений)
	
	Для каждого ТекСообщение Из Сообщения Цикл
		Дата = МестноеВремя(Дата(1970, 1, 1) + Число(ТекСообщение.time));
		Если Не ТекСообщение.fromMe Тогда
			Телефон = Лев(ТекСообщение.author, СтрНайти(ТекСообщение.author, "@") - 1);
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(Телефон,
				 УчетнаяЗапись,
				 Перечисления.ТипыКонтактнойИнформации.Телефон);
		Иначе
			Контакт = Неопределено;
		КонецЕсли;	
			Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
			Сообщение.Дата = Дата;
			Сообщение.ID_Сообщения = ТекСообщение.id;
			Если ТекСообщение.type = "chat" ИЛИ ТекСообщение.type = "vcard"
				ИЛИ ТекСообщение.type = "location" Тогда
				Сообщение.ТекстСообщения = ТекСообщение.body;
			ИначеЕсли ТекСообщение.type = "call_log" Тогда
				Если ТекСообщение.body = "[Call - miss]" Тогда
					Сообщение.ТекстСообщения = НСтр("ru = '[Пропущенный аудиозвонок]'");
				Иначе
					Сообщение.ТекстСообщения = ТекСообщение.body;
				КонецЕсли;
			Иначе
				Если ТекСообщение.Свойство("caption") Тогда
					Сообщение.ТекстСообщения = ТекСообщение.caption;
				КонецЕсли;
			КонецЕсли;
			Если ТекСообщение.fromMe Тогда
				Сообщение.ВидСообщения = "Исходящее";
				Если СтрНайти(ТекСообщение.chatId, "-") = 0 Тогда
					Сообщение.ID_Пользователя = ТекСообщение.chatId;
				Иначе	
					Сообщение.ID_Пользователя = ТекСообщение.author;
				КонецЕсли;
			Иначе
				Сообщение.ВидСообщения = "Входящее";
				Сообщение.ID_Пользователя = ТекСообщение.author;
			КонецЕсли;
			Телефон = ПредставлениеКонтактнойИнформацииПользователя(Сообщение.ID_Пользователя);
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(Телефон,
				 УчетнаяЗапись,
				 Перечисления.ТипыКонтактнойИнформации.Телефон);
			Если ЗначениеЗаполнено(Контакт) Тогда
				Сообщение.Контакт = Контакт;
			КонецЕсли;
			Сообщение.КонтактПредставление = ТекСообщение.senderName;
			Сообщение.Группа = ТекСообщение.chatId;
			Сообщение.ГруппаПредставление = ТекСообщение.chatName;
			Если ТекСообщение.Свойство("quotedMsgId") И ЗначениеЗаполнено(ТекСообщение.quotedMsgId) Тогда
				Сообщение.ID_СообщенияОснования = ТекСообщение.quotedMsgId;
			КонецЕсли;
			
			Если ТекСообщение.type <> "chat" И ТекСообщение.type <> "call_log"
				И ТекСообщение.type <> "vcard" И ТекСообщение.type <> "location" Тогда
				Попытка
					КаталогВременныхФайлов = КаталогВременныхФайлов();
					ПутьКФайлу = ТекСообщение.body;
					ИмяФайла = РаскодироватьСтроку(ПутьКФайлу, СпособКодированияСтроки.URLВКодировкеURL);
					ПозицияВопроса = СтрНайти(ИмяФайла, "?");
					НачалоИмени = СтрНайти(РаскодироватьСтроку(ИмяФайла, СпособКодированияСтроки.URLВКодировкеURL),
						 "/", НаправлениеПоиска.СКонца,
						?(ПозицияВопроса = 0, Неопределено, ПозицияВопроса));
					ИмяФайла = Сред(ИмяФайла, НачалоИмени + 1, ?(ПозицияВопроса = 0, СтрДлина(ИмяФайла),
						 ПозицияВопроса - НачалоИмени - 1));
					ТретийСлеш = СтрНайти(ПутьКФайлу, "/", , , 3);
					
					Прокси = Неопределено;
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
						МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
						Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
					КонецЕсли;
					
					Соединение = Новый HTTPСоединение(СтрЗаменить(Лев(ПутьКФайлу, ТретийСлеш - 1), "https://", ""),
						 , , , Прокси, 20,
						 Новый ЗащищенноеСоединениеOpenSSL);
					
					Соединение.Получить(Сред(ПутьКФайлу, ТретийСлеш + 1), КаталогВременныхФайлов + ИмяФайла);
					Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
					АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
					ПараметрыФайла = Новый Структура;
					ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
					ПараметрыФайла.Вставить("Автор", Неопределено);
					ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
					ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
					ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
					ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
					ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
					Сообщение.Вложения.Добавить(ПараметрыФайла);
					УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
				Исключение
					ИнформацияОбОшибке		= ИнформацияОбОшибке();
					ОсноваСообщенияОшибки	= НСтр("ru = 'Не удалось загрузить вложение.'; en = 'Failed to upload attachment.'");
					
					ЗаписьЖурналаРегистрации(
						"CRM_РаботаСМессенджеромWhatsApp.ЗаполнитьСообщенияChat",
						УровеньЖурналаРегистрации.Предупреждение,
						Обработки.CRM_РаботаСМессенджеромWhatsApp, ,
						ОсноваСообщенияОшибки + " <" + ТекСообщение.body + ">" + Символы.ПС + ИнформацияОбОшибке.Описание);
					
					ШаблонHTMLОшибки = "<i>%1</i>";
					
					Сообщение.ТекстHTML = СтрШаблон(ШаблонHTMLОшибки, ОсноваСообщенияОшибки + " " 
						+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				КонецПопытки;
			КонецЕсли;
			
			МассивСообщений.Добавить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьWebhookChat(УчетнаяЗапись, СтруктураПараметровДоступа)
	АдресWebhook = СтруктураПараметровДоступа.АдресWebhook;
	АдресWebhook = АдресWebhook + ?(Прав(АдресWebhook, 1) = "/", "", "/") 
		+ Строка(УчетнаяЗапись.Ссылка.УникальныйИдентификатор());
	Ресурс = СтруктураПараметровДоступа.Ресурс + "webhook?token=" + СтруктураПараметровДоступа.Токен;
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("webhookUrl", АдресWebhook);
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);

	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтруктураПараметровДоступа.Сервер,
		 Запрос, Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error;
	ИначеЕсли СтруктураОтвета.Свойство("set") Тогда
		Возврат СтруктураОтвета.set;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьСообщенияGreenПоОповещениям(УчетнаяЗапись, СтруктураПараметровДоступа, МассивСообщений)
	
	Сервер = СерверGreen();
	Ресурс = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL, СтруктураПараметровДоступа.Токен,
		 "receiveNotification");
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
		 "", Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси,
		 ""));
	Пока ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("body") Цикл
		idОповещения = Формат(СтруктураОтвета.receiptId, "ЧГ=0");
			
		Отказ = Ложь;
		Оповещение = СтруктураОтвета.body;
		
		Сообщение = СоздатьСообщениеПоОповещению(Оповещение, УчетнаяЗапись, Отказ);
			
		Если Не Отказ Тогда
			Если Сообщение <> Неопределено Тогда
				МассивСообщений.Добавить(Сообщение); 
			КонецЕсли;
			
			Адрес = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL,
				 СтруктураПараметровДоступа.Токен, "deleteNotification") + "/" 
				+ idОповещения;
				
				Попытка
					CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
					, Адрес, СтруктураПараметровДоступа.ПараметрыПрокси, "",
					Истина));
				Исключение 
					ЗаписьЖурналаРегистрации(CRM_РаботаСМессенджерамиСервер.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка, , , 
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

					// Если не удалось удалить сообщение из сервиса
					// удалить последнее сообщение из массива ,чтобы исключить дублирование
					УдалитьПоследнееСообщение(МассивСообщений);
					Возврат; 
				КонецПопытки;
		КонецЕсли;
		
		Попытка
			СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
			"", Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси,
			""));
		Исключение
			ЗаписьЖурналаРегистрации(CRM_РаботаСМессенджерамиСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат; 	
		КонецПопытки;
		
	КонецЦикла;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("error") Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.error) Тогда
			ВызватьИсключение СтруктураОтвета.error;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьСообщениеПоОповещению(Оповещение, УчетнаяЗапись, Отказ)

	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("ИсходящееСообщение", "outgoingMessageReceived"); // Отправленное с телефона сообщение
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	ЭтоВходящееСообщение = (Оповещение.typeWebhook = ТипыУведомлений.ВходящееСообщение);
	ЭтоИсходящееСообщение  = (Оповещение.typeWebhook = ТипыУведомлений.ИсходящееСообщение);
	
	Если Не (ЭтоВходящееСообщение Или ЭтоИсходящееСообщение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
	Сообщение.Дата = МестноеВремя(Дата(1970, 1, 1) + Оповещение.timestamp);
	Сообщение.ID_Сообщения = Оповещение.idMessage;
	
	Если ЭтоВходящееСообщение Тогда
		user_id = Оповещение.senderData.sender;
	ИначеЕсли ЭтоИсходящееСообщение Тогда
		Если СтрДлина(Оповещение.senderData.chatId) = 23 Тогда
			user_id = "";
		Иначе
			user_id = Оповещение.senderData.chatId;
		КонецЕсли;
	КонецЕсли;
	Группа = Оповещение.senderData.chatId;
	Если СтрДлина(Оповещение.senderData.chatId) = 23 Тогда
		ГруппаПредставление = Оповещение.senderData.chatName;
	Иначе
		ГруппаПредставление = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(user_id) Тогда
		Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
		УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИмяПользователя = Оповещение.senderData.senderName;
		Сообщение.ID_Пользователя = user_id;
	Иначе
		Контакт = Неопределено;
	КонецЕсли;	
	Сообщение.Группа = Группа;
	Сообщение.ГруппаПредставление = ГруппаПредставление;
	Сообщение.Контакт = Контакт;
	
	Если ЭтоВходящееСообщение Тогда
		Сообщение.ВидСообщения = "Входящее";
	ИначеЕсли ЭтоИсходящееСообщение Тогда
		Сообщение.ВидСообщения = "Исходящее";
	КонецЕсли;
	
	Если ЭтоВходящееСообщение Тогда
		Сообщение.КонтактПредставление = ИмяПользователя;
	ИначеЕсли ЭтоИсходящееСообщение Тогда
		
		Если ТипЗнч(Контакт) <> Тип("Строка") Тогда
			Сообщение.КонтактПредставление = Строка(Контакт);
		Иначе
			Сообщение.КонтактПредставление = Контакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оповещение.messageData.typeMessage = "quotedMessage"
		И Оповещение.messageData.extendedTextMessageData.Свойство("stanzaId") Тогда
		Сообщение.ID_СообщенияОснования = Оповещение.messageData.extendedTextMessageData.stanzaId;
	КонецЕсли;
	
	Если Оповещение.messageData.typeMessage = "textMessage" Тогда
		Сообщение.ТекстСообщения = Оповещение.messageData.textMessageData.textMessage;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "imageMessage"
		Или Оповещение.messageData.typeMessage = "videoMessage"
		Или Оповещение.messageData.typeMessage = "documentMessage"
		Или Оповещение.messageData.typeMessage = "audioMessage" Тогда
		
		Если Оповещение.messageData.typeMessage = "documentMessage" Тогда
			ИмяФайла = Оповещение.messageData.fileMessageData.fileName;
		Иначе
			ИмяФайла = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Оповещение.messageData.fileMessageData.downloadUrl) Тогда
			ПараметрыФайла = СкачатьФайлПоСсылке(Оповещение.messageData.fileMessageData.downloadUrl, ИмяФайла);
			Сообщение.Вложения.Добавить(ПараметрыФайла);
			
			Если Оповещение.messageData.fileMessageData.Свойство("caption") Тогда
				Сообщение.ТекстСообщения = Оповещение.messageData.fileMessageData.caption;
			КонецЕсли;
		Иначе
			Сообщение.ТекстСообщения = НСтр("ru = 'Ошибка загрузки вложения! В сообщении отсутствует адрес файла.'");
		КонецЕсли;
		
	ИначеЕсли Оповещение.messageData.Свойство("extendedTextMessageData") Тогда
		ТемпТекст = "";
		Если Оповещение.messageData.extendedTextMessageData.Свойство("title") Тогда
			ТемпТекст = ТемпТекст + Оповещение.messageData.extendedTextMessageData.title;
		КонецЕсли;
		Если Оповещение.messageData.extendedTextMessageData.Свойство("text") Тогда
			ТемпТекст = ТемпТекст + Символы.ПС + Оповещение.messageData.extendedTextMessageData.text;
		КонецЕсли;
		Если Оповещение.messageData.extendedTextMessageData.Свойство("jpegThumbnail")
			И ЗначениеЗаполнено(Оповещение.messageData.extendedTextMessageData.jpegThumbnail) Тогда
			ПараметрыФайла = ФайлJpegПоДанным(Оповещение.messageData.extendedTextMessageData.jpegThumbnail);
			Сообщение.Вложения.Добавить(ПараметрыФайла);
		КонецЕсли;
		Сообщение.ТекстСообщения = ТемпТекст;
	ИначеЕсли Оповещение.messageData.typeMessage = "contactMessage" Тогда
		Сообщение.ТекстСообщения = Оповещение.messageData.contactMessageData.vcard;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "contactsArrayMessage" Тогда
		
		МассивКонтактов = Оповещение.messageData.messageData.contacts;
		МассивСообщенийКонтактов = Новый Массив;
		Для Каждого ТекКонтакт Из МассивКонтактов Цикл
			МассивСообщенийКонтактов.Добавить(ТекКонтакт.displayName);
			МассивСообщенийКонтактов.Добавить(ТекКонтакт.vcard);
			МассивСообщенийКонтактов.Добавить("");
		КонецЦикла;
		
		Сообщение.ТекстСообщения = СтрСоединить(МассивСообщенийКонтактов, Символы.ПС);
		
	ИначеЕсли Оповещение.messageData.typeMessage = "locationMessage" Тогда	
		Сообщение.ТекстСообщения    = СтрШаблон("https://yandex.ru/maps/?pt=%1,%2&z=18&l=map"
		, Формат(Оповещение.messageData.locationMessageData.longitude, "ЧРД=.")
		, Формат(Оповещение.messageData.locationMessageData.latitude, "ЧРД=." ));
		
	ИначеЕсли Оповещение.messageData.typeMessage = "templateMessage" Тогда // сообщение с шаблонными кнопками 
		Сообщение.ТекстСообщения = Оповещение.messageData.templateMessage.contentText;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "buttonsMessage" Тогда // сообщение с кнопками 
		Сообщение.ТекстСообщения = Оповещение.messageData.buttonsMessage.contentText;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "stickerMessage" Тогда
		ПозицияПоследнегоРазделителя = СтрНайти(Оповещение.messageData.fileMessageData.downloadUrl, "/",
		НаправлениеПоиска.СКонца);
		ИмяФайла = Прав(Оповещение.messageData.fileMessageData.downloadUrl,
		СтрДлина(Оповещение.messageData.fileMessageData.downloadUrl) - ПозицияПоследнегоРазделителя); 
		
		Если Не ПустаяСтрока(Оповещение.messageData.fileMessageData.downloadUrl) Тогда
			ПараметрыФайла = СкачатьФайлПоСсылке(Оповещение.messageData.fileMessageData.downloadUrl, ИмяФайла);
			Сообщение.Вложения.Добавить(ПараметрыФайла);
		Иначе
			Сообщение.ТекстСообщения = НСтр("ru = 'Ошибка загрузки стикера! В сообщении отсутствует адрес файла.'");
		КонецЕсли;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "listMessage" Тогда
		Сообщение.ТекстСообщения = НСтр(
		"ru = 'Список выбора - для просмотра откройте диалог в приложении WhatsApp.';
		|en = 'The selection list - to view it, open the dialog in the WhatsApp application.'");
		
	ИначеЕсли Оповещение.messageData.typeMessage = "groupInviteMessage" Тогда
		ОбъектИнформацииОПриглашении = Оповещение.messageData.groupInviteMessageData;
		Сообщение.ТекстСообщения = НСтр("ru = 'Приглашение в группу: '; en = 'Invitation to a group: '")
		+ """" + ОбъектИнформацииОПриглашении.groupName + """ " + НСтр("ru = 'от: '; en = 'from: '")
		+ ОбъектИнформацииОПриглашении.name;
		
	ИначеЕсли Оповещение.messageData.typeMessage = "pollMessage" Тогда
		ОбъектДанныхСообщенийОпроса = Оповещение.messageData.pollMessageData;
		МассивВариантовВыбораОпроса = Новый Массив;
		
		Для Каждого ТекущиеДанныеОпроса Из ОбъектДанныхСообщенийОпроса.options Цикл
			МассивВариантовВыбораОпроса.Добавить(ТекущиеДанныеОпроса.optionName);
		КонецЦикла;
		
		Сообщение.ТекстСообщения = НСтр("ru = 'Опрос: '; en = 'Poll: '")
		+ ОбъектДанныхСообщенийОпроса.name + Символы.ПС
		+ СтрСоединить(МассивВариантовВыбораОпроса, Символы.ПС);
		
	ИначеЕсли Оповещение.messageData.typeMessage = "pollUpdateMessage" Тогда
		ОбъектДанныхСообщенийОпроса		= Оповещение.messageData.pollMessageData;
		МассивДанныхПолейВыбораОпроса	= Новый Массив;
		
		Для Каждого ТекущиеДанныеОпроса Из ОбъектДанныхСообщенийОпроса.votes Цикл
			МассивДанныхПолейВыбораОпроса.Добавить(
			ТекущиеДанныеОпроса.optionName + ": " + ТекущиеДанныеОпроса.optionVoters.Количество());
		КонецЦикла;
		
		Сообщение.ТекстСообщения = НСтр("ru = 'Опрос: '; en = 'Poll: '")
		+ ОбъектДанныхСообщенийОпроса.name + Символы.ПС
		+ СтрСоединить(МассивДанныхПолейВыбораОпроса, Символы.ПС);
		
	Иначе
		Сообщение.ТекстСообщения = СтрШаблон("Неизвестный тип сообщения: %1", Оповещение.messageData.typeMessage);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура УдалитьПоследнееСообщение(МассивСообщений)
	ВерхняяГраница = МассивСообщений.ВГраница();
	Если ВерхняяГраница <> -1 Тогда 
		МассивСообщений.Удалить(ВерхняяГраница);
	КонецЕсли;
КонецПроцедуры

Процедура ОжиданиеСобытийGreen(УчетнаяЗапись, СтруктураПараметровДоступа)

	Сервер = СерверGreen();
	Ресурс = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL, СтруктураПараметровДоступа.Токен,
		 "receiveNotification");
	
	Ошибок = 0;
	Пока Ошибок < 5 Цикл
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
			 "", Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси,
			 ""));
		Если ТипЗнч(СтруктураОтвета) <> Тип("Структура") Тогда
			Продолжить;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
			Если ЗначениеЗаполнено(СтруктураОтвета.error) Тогда
				ВызватьИсключение СтруктураОтвета.error;
			КонецЕсли;
		ИначеЕсли СтруктураОтвета.Свойство("failed") Тогда
			Ошибок = Ошибок + 1;
		Иначе
			idОповещения = Формат(СтруктураОтвета.receiptId, "ЧГ=0");
			
			Отказ = Ложь;
			Оповещение = СтруктураОтвета.body;
			
			Сообщение = СоздатьСообщениеПоОповещению(Оповещение, УчетнаяЗапись, Отказ);
			
			Если Не Отказ Тогда
				
				Если Сообщение <> Неопределено Тогда
					МассивСообщений = Новый Массив;
					МассивСообщений.Добавить(Сообщение);
					CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
				КонецЕсли;
				
				Адрес = URLМетодаСервисаGreen(СтруктураПараметровДоступа.ApiURL,
					 СтруктураПараметровДоступа.Токен, "deleteNotification") + "/" 
					+ idОповещения;
				CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
					 , Адрес, СтруктураПараметровДоступа.ПараметрыПрокси, "",
					 Истина));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СкачатьФайлПоСсылке(downloadUrl, ИмяФайла)
	
	ЧастиАдреса = РазбитьURL(downloadUrl);
	Хост = ЧастиАдреса.Хост;
	Адрес = ЧастиАдреса.ОтносительныйАдрес;
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Хост, , , , Прокси, 20, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Если ИмяФайла = "" Тогда
			РасширениеФайла = CRM_РаботаСМессенджерамиСерверПовтИсп.РасширениеПоТипуMIME(Ответ.Заголовки["Content-Type"]);
			Если РасширениеФайла = Неопределено Тогда
				РасширениеФайла = "";
			КонецЕсли;
			ИмяФайла = Строка(Новый УникальныйИдентификатор()) + "." + РасширениеФайла;
		КонецЕсли;
		
		Данные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		
		ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца,,1);
		ИмяБезРасширения = ?(ПозицияТочки = 0, ИмяФайла, Лев(ИмяФайла, ПозицияТочки - 1));
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
		РасширениеБезТочки = ?(ПозицияТочки = 0, "", Сред(ИмяФайла, ПозицияТочки + 1));
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
		
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
		Возврат ПараметрыФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение СтрШаблон("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ФайлJpegПоДанным(ФайлСтрокой)
	
	Данные = Base64Значение(ФайлСтрокой);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Строка(Новый УникальныйИдентификатор()));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "jpg");
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
	Возврат ПараметрыФайла;
	
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

#КонецОбласти

#КонецЕсли
