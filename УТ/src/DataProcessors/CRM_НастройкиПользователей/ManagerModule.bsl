#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Получает имя пользователя информационной базы по переданной ссылке
// справочника.
//
// Параметры:
//   ПользовательСсылка - СправочникСсылка.Пользователи - для которого нужно получить
//                        имя пользователя информационной базы.
//
// Возвращаемое значение:
//   Строка, Неопределено - имя пользователя информационной базы или неопределено,
//                          если Пользователь ИБ не найден.
// 
Функция ИмяПользователяИБ(ПользовательСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка,
		 "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	Если ПользовательИБ <> Неопределено Тогда
		Возврат ПользовательИБ.Имя;
	ИначеЕсли ПользовательСсылка = Пользователи.СсылкаНеуказанногоПользователя() Тогда
		Возврат "";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ИмяПользователяИБ()

Функция ПользователиДляКопирования(ПользовательИсточник, ТаблицаПользователей, Очистка = Ложь) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСпискаПользователей(Очистка));
	Запрос.Параметры.Вставить("ПользовательИсточник",			ПользовательИсточник);
	Запрос.Параметры.Вставить("НеуказанныйПользователь",		Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.Параметры.Вставить("ПустойУникальныйИдентификатор",
			ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	УстановитьПривилегированныйРежим(Истина);
	СписокПользователей = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ПользовательСсылка Из СписокПользователей Цикл
		СтрокаТаблицыПользователей					= ТаблицаПользователей.Добавить();
		СтрокаТаблицыПользователей.Пользователь		= ПользовательСсылка.Пользователь;
		СтрокаТаблицыПользователей.Подразделение	= ПользовательСсылка.Подразделение;
		СтрокаТаблицыПользователей.ФизическоеЛицо	= ПользовательСсылка.ФизическоеЛицо;
	КонецЦикла;
	
	ТаблицаПользователей.Сортировать("Пользователь Возр");
	
	Возврат ТаблицаПользователей;
	
КонецФункции

Функция ТекстЗапросаСпискаПользователей(Очистка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Подразделение КАК Подразделение,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	&КромеНедействительных
	|	И &КромеПомеченныхНаУдаление
	|	И &КромеСлужебныхПользователей
	|	И Пользователи.Ссылка <> &ПользовательИсточник
	|	И НЕ (Пользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|			И Пользователи.Ссылка <> &НеуказанныйПользователь)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КромеПомеченныхНаУдаление",
		?(Очистка, "Истина", "НЕ Пользователи.ПометкаУдаления"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КромеНедействительных",
		?(Очистка, "Истина", "НЕ Пользователи.Недействителен"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КромеСлужебныхПользователей",
		?(Очистка И Не ОбщегоНазначения.РазделениеВключено(),
			"Истина", "НЕ Пользователи.Служебный"));
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьОтбор(ГруппыПользователейСписок, ГруппаСсылка, ГруппыМассив)
	
	ПараметрыОтбора = Новый Структура("Родитель", ГруппаСсылка);
	ОтобранныеСтроки = ГруппыПользователейСписок.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Элемент Из ОтобранныеСтроки Цикл 
		ГруппыМассив.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Формирует дерево значений групп пользователей.
// 
// Параметры:
//   ДеревоГрупп - ДеревоЗначений - дерево, которое заполняется группами пользователей.
//
Процедура ЗаполнитьДеревоГрупп(ДеревоГрупп) Экспорт
	
	ГруппыМассив			= Новый Массив;
	МассивГруппРодителей	= Новый Массив;
	
	СписокГруппИПолныйСостав	= ГруппыПользователей();
	ГруппыПользователейСписок	= СписокГруппИПолныйСостав.ГруппыПользователейСписок;
	ТаблицаГруппыИСостав		= СписокГруппИПолныйСостав.ТаблицаГруппыИСостав;
	
	ПустаяГруппа = Справочники.ГруппыПользователей.ПустаяСсылка();
	
	СформироватьОтбор(ГруппыПользователейСписок, ПустаяГруппа, ГруппыМассив);
	
	Пока ГруппыМассив.Количество() > 0 Цикл
		МассивГруппРодителей.Очистить();
		
		Для Каждого Группа Из ГруппыМассив Цикл
			Если Группа.Родитель = ПустаяГруппа Тогда
				НоваяСтрокаГрупп				= ДеревоГрупп.Строки.Добавить();
				НоваяСтрокаГрупп.Группа			= Группа.Ссылка;
				СоставГруппы					= СоставГруппыПользователей(Группа.Ссылка);
				ПолныйСоставГруппы				= ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, Группа.Ссылка);
				НоваяСтрокаГрупп.Состав			= СоставГруппы;
				НоваяСтрокаГрупп.ПолныйСостав	= ПолныйСоставГруппы;
				НоваяСтрокаГрупп.Картинка		= 3;
			Иначе
				ГруппаРодитель = ДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Группа", Группа.Родитель), Истина);
				НоваяСтрокаПодчиненныхГрупп					= ГруппаРодитель[0].Строки.Добавить();
				НоваяСтрокаПодчиненныхГрупп.Группа			= Группа.Ссылка;
				СоставГруппы								= СоставГруппыПользователей(Группа.Ссылка);
				ПолныйСоставГруппы							= ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, Группа.Ссылка);
				НоваяСтрокаПодчиненныхГрупп.Состав			= СоставГруппы;
				НоваяСтрокаПодчиненныхГрупп.ПолныйСостав	= ПолныйСоставГруппы;
				НоваяСтрокаПодчиненныхГрупп.Картинка		= 3;
			КонецЕсли;
			
			МассивГруппРодителей.Добавить(Группа.Ссылка);
		КонецЦикла;
		
		ГруппыМассив.Очистить();
		
		Для Каждого Элемент Из МассивГруппРодителей Цикл
			СформироватьОтбор(ГруппыПользователейСписок, Элемент, ГруппыМассив);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ГруппыПользователей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникГруппыПользователей.Ссылка КАК Ссылка,
	|	СправочникГруппыПользователей.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ГруппыПользователей КАК СправочникГруппыПользователей";
	
	ГруппыПользователейСписок = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПользователей";
	
	ГруппыПользователейСостав = Запрос.Выполнить().Выгрузить();
	
	ТаблицаГруппыИСостав = ПолныйСоставГруппПользователей(ГруппыПользователейСостав);
	
	Возврат Новый Структура("ГруппыПользователейСписок, ТаблицаГруппыИСостав",
							ГруппыПользователейСписок, ТаблицаГруппыИСостав);
КонецФункции

Функция ПолныйСоставГруппПользователей(ГруппыПользователейСостав)
	
	ТаблицаГруппыИСостав = Новый ТаблицаЗначений;
	ТаблицаГруппыИСостав.Колонки.Добавить("Группа");
	ТаблицаГруппыИСостав.Колонки.Добавить("Состав");
	
	СоставГруппы	= Новый СписокЗначений;
	ТекущаяГруппа	= Неопределено;
	
	Для Каждого СтрокаСостава Из ГруппыПользователейСостав Цикл
		Если ТипЗнч(СтрокаСостава.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Если ТекущаяГруппа <> СтрокаСостава.ГруппаПользователей И Не ТекущаяГруппа = Неопределено Тогда
				СтрокаТаблицаГруппыИСостав			= ТаблицаГруппыИСостав.Добавить();
				СтрокаТаблицаГруппыИСостав.Группа	= ТекущаяГруппа;
				СтрокаТаблицаГруппыИСостав.Состав	= СоставГруппы.Скопировать();
				СоставГруппы.Очистить();
			КонецЕсли;
			
			СоставГруппы.Добавить(СтрокаСостава.Пользователь);
			ТекущаяГруппа = СтрокаСостава.ГруппаПользователей;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаТаблицаГруппыИСостав			= ТаблицаГруппыИСостав.Добавить();
	СтрокаТаблицаГруппыИСостав.Группа	= ТекущаяГруппа;
	СтрокаТаблицаГруппыИСостав.Состав	= СоставГруппы.Скопировать();
	
	Возврат ТаблицаГруппыИСостав;
	
КонецФункции

Функция СоставГруппыПользователей(ГруппаСсылка)
	
	СоставГруппы = Новый СписокЗначений;
	Для Каждого Элемент Из ГруппаСсылка.Состав Цикл
		СоставГруппы.Добавить(Элемент.Пользователь);
	КонецЦикла;
	
	Возврат СоставГруппы;
	
КонецФункции

Функция ПолныйСоставГруппыПользователей(ТаблицаГруппыИСостав, ГруппаСсылка)
	
	ПолныйСоставГруппы = ТаблицаГруппыИСостав.НайтиСтроки(Новый Структура("Группа", ГруппаСсылка));
	Если ПолныйСоставГруппы.Количество() <> 0 Тогда
		Возврат ПолныйСоставГруппы[0].Состав;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли
