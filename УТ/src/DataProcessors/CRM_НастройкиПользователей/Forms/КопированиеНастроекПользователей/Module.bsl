#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПереключательКомуКопироватьНастройки = "ВыбраннымПользователям";
	РежимОткрытияФормы = Параметры.РежимОткрытияФормы;
	
	ПользователиПолучателиНастроек = Новый Структура;
	
	Если Параметры.Пользователь <> Неопределено Тогда
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Параметры.Пользователь);
		ПользователиПолучателиНастроек.Вставить("МассивПользователей", МассивПользователей);
		Элементы.ВыбратьПользователей.Заголовок = Строка(Параметры.Пользователь);
		КоличествоПользователей = 1;
		ТипПереданногоПользователя = ТипЗнч(Параметры.Пользователь);
		Элементы.ГруппаКомуКопировать.Доступность = Ложь;
	Иначе
		ПользовательСсылка = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ПользовательСсылка = Неопределено Тогда
		Элементы.ГруппаКопируемыеНастройки.Доступность = Ложь;
	КонецЕсли;
	
	// +СофтФон
	сфпПривязкаНомера = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");
	сфпМассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	
	Для Каждого ЭлементМассива Из сфпМассивАвтоматическихДействий Цикл
		сфпСписокАвтоматическихДействий.Добавить(ЭлементМассива.Наименование);
	КонецЦикла;
	// -СофтФон
	
	ОчиститьИсториюВыбораНастроек = Истина;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("ВыборПользователя") Тогда
		Если Источник <> ИмяФормы Тогда
			Возврат;
		КонецЕсли;
		
		ПользователиПолучателиНастроек = Новый Структура("МассивПользователей", Параметр.ПользователиПриемник);
		КоличествоПользователей = Параметр.ПользователиПриемник.Количество();
		
		Если КоличествоПользователей = 1 Тогда
			Элементы.ВыбратьПользователей.Заголовок = Строка(Параметр.ПользователиПриемник[0]);
		ИначеЕсли КоличествоПользователей > 1 Тогда
			ЧислоИПредмет = Формат(КоличествоПользователей, "ЧДЦ=0") + " "
				+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоПользователей,
					"", НСтр("ru = 'пользователь,пользователя,пользователей,,,,,,0'"));
			Элементы.ВыбратьПользователей.Заголовок = ЧислоИПредмет;
		КонецЕсли;
		
		Элементы.ВыбратьПользователей.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйТипПользователей = Неопределено;
	
	Если КоличествоПользователей <> 0 Тогда
		СкрываемыеПользователи = Новый СписокЗначений;
		СкрываемыеПользователи.ЗагрузитьЗначения(ПользователиПолучателиНастроек.МассивПользователей);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура(
		"РежимВыбора, СкрываемыеПользователи",
		Истина, СкрываемыеПользователи);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыОтбора, Элементы.ПользовательСсылка);
	ПользовательСсылкаСтарый = ПользовательСсылка;
	
КонецПроцедуры // ПользовательНачалоВыбора()

&НаКлиенте
Процедура ПользовательСсылкаПриИзменении(Элемент)
	
	Если ПользовательСсылка <> Неопределено
		И ИмяПользователяИБ(ПользовательСсылка) = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'У выбранного пользователя нет настроек, которые можно было бы
				|скопировать, выберите другого пользователя.'"));
		ПользовательСсылка = ПользовательСсылкаСтарый;
		Возврат;
	КонецЕсли;
	
	Если ПользовательСсылка <> Неопределено
		И ПользователиПолучателиНастроек.Свойство("МассивПользователей") Тогда
		
		Если ПользователиПолучателиНастроек.МассивПользователей.Найти(ПользовательСсылка) <> Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя копировать настройки пользователя самому себе,
					|выберите другого пользователя.'"));
				ПользовательСсылка = ПользовательСсылкаСтарый;
				Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаКопируемыеНастройки.Доступность = ПользовательСсылка <> Неопределено;
	
КонецПроцедуры // ПользовательСсылкаПриИзменении()

&НаСервереБезКонтекста
Функция ИмяПользователяИБ(ПользовательСсылка)
	
	Возврат Обработки.CRM_НастройкиПользователей.ИмяПользователяИБ(ПользовательСсылка);
	
КонецФункции // ИмяПользователяИБ()

&НаКлиенте
Процедура ВыбратьПользователей(Элемент)
	
	ВыбранныеПользователи = Неопределено;
	ПользователиПолучателиНастроек.Свойство("МассивПользователей", ВыбранныеПользователи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь",          ПользовательСсылка);
	ПараметрыФормы.Вставить("ТипДействия",           "Копирование");
	ПараметрыФормы.Вставить("ВыбранныеПользователи", ВыбранныеПользователи);
	ПараметрыФормы.Вставить("Источник",              ИмяФормы);
	
	ОткрытьФорму("Обработка.CRM_НастройкиПользователей.Форма.ВыборПользователей", ПараметрыФормы);
	
КонецПроцедуры // ВыбратьПользователей()

&НаКлиенте
Процедура ПереключательКомуКопироватьНастройкиПриИзменении(Элемент)
	
	Если ПереключательКомуКопироватьНастройки = "ВыбраннымПользователям" Тогда
		Элементы.ВыбратьПользователей.Доступность = Истина;
	Иначе
		Элементы.ВыбратьПользователей.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПереключательКомуКопироватьНастройкиПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Скопировать(Команда)
	
	ОчиститьСообщения();
	
	Если ПользовательСсылка = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите пользователя, чьи настройки необходимо скопировать.'"), , "ПользовательСсылка");
		Возврат;
	КонецЕсли;
	
	Если КоличествоПользователей = 0 И ПереключательКомуКопироватьНастройки <> "ВсемПользователям" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите одного или несколько пользователей, которым необходимо скопировать настройки.'"), , "Приемник");
		Возврат;
	КонецЕсли;
	
	Если Не ФлагВыгрузкиНастроек И Не ФлагВыгрузкиНастроекОповещения Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите разделы настроек, которые необходимо скопировать.'"), , "ГруппаВыбрать");
		Возврат;
	КонецЕсли;
	
	СкопироватьНастройкиНаКлиенте(Команда.Имя);
	
КонецПроцедуры // Скопировать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КопированиеНастроек

&НаКлиенте
Процедура СкопироватьНастройкиНаКлиенте(ИмяКоманды)
	
	Если ПереключательКомуКопироватьНастройки = "ВыбраннымПользователям" Тогда
		ПояснениеКомуСкопированыНастройки = ПользователиСлужебныйКлиент.ПояснениеПользователи(
			КоличествоПользователей, ПользователиПолучателиНастроек.МассивПользователей[0]
		);
	Иначе
		ПояснениеКомуСкопированыНастройки = НСтр("ru = 'всем пользователям'");
	КонецЕсли;
	
	ТекстОповещения    = НСтр("ru = 'Копирование настроек'");
	КартинкаОповещения = БиблиотекаКартинок.Информация32;
	
	СкопироватьНастройкиНаСервере();
	
	Если ИмяКоманды = "СкопироватьИЗакрыть" Тогда
		Закрыть();
	КонецЕсли;
	
	ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Скопированы выбранные настройки %1'"), ПояснениеКомуСкопированыНастройки
	);
	
	ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьНастройкиНаСервере()
	
	Если ПереключательКомуКопироватьНастройки = "ВыбраннымПользователям" Тогда
		Приемники = ПользователиПолучателиНастроек.МассивПользователей;
	Иначе
		Приемники = Новый Массив;
		
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить("Пользователь");
		ТаблицаПользователей.Колонки.Добавить("Подразделение");
		ТаблицаПользователей.Колонки.Добавить("ФизическоеЛицо");
		
		ТаблицаПользователей = Обработки.CRM_НастройкиПользователей.ПользователиДляКопирования(
			ПользовательСсылка,
			ТаблицаПользователей
		);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПользователей Цикл
			Приемники.Добавить(СтрокаТаблицы.Пользователь);
		КонецЦикла;
	КонецЕсли;
	
	// Сохранение пользовательских настроек в регистр.
	Если ФлагВыгрузкиНастроек Тогда
		МассивНастроек = ПолучитьНастройкиПользователя();
		Для Каждого ПользовательПолучатель Из Приемники Цикл
			СохранитьНастройкиВРегистрСведений(МассивНастроек, ПользовательПолучатель);
		КонецЦикла;
	КонецЕсли;
	
	// Сохранение настроек оповещения.
	Если ФлагВыгрузкиНастроекОповещения Тогда
		МассивНастроекОповещения = ПолучитьНастройкиОповещения();
		Для Каждого ПользовательПолучатель Из Приемники Цикл
			СохранитьНастройкиОпевещения(МассивНастроекОповещения, ПользовательПолучатель);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьНастройкиНаСервере()

#КонецОбласти

#Область СохранениеНастроекВБазу

&НаСервере
Процедура СохранитьНастройкиВРегистрСведений(МассивНастроек, Пользователь)
	
	НаборЗаписей = РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаНастроек Из МассивНастроек Цикл
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Пользователь	= Пользователь;
		ЗаписьРегистра.Настройка	= СтрокаНастроек.Настройка;
		ЗаписьРегистра.Значение		= СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьНастройкиВРегистрСведений()

&НаСервере
Процедура СохранитьНастройкиОпевещения(МассивОповещений, Пользователь)
	
	НаборЗаписей = РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаНастроек Из МассивОповещений Цикл
		Запись = НаборЗаписей.Добавить();
		
		Запись.Пользователь		= Пользователь;
		Запись.ВидОповещения	= СтрокаНастроек.ВидОповещения;
		Запись.СрокОповещения	= СтрокаНастроек.СрокОповещения;
		Запись.Периодичность	= СтрокаНастроек.Периодичность;
		Запись.Напоминание		= СтрокаНастроек.Напоминание;
		Запись.СМС				= СтрокаНастроек.СМС;
		Запись.ЭлектроннаяПочта	= СтрокаНастроек.ЭлектроннаяПочта;
		
		Если СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
				ИЛИ СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
			Запись.Сумма = СтрокаНастроек.Отбор;
		ИначеЕсли СтрокаНастроек.ВидОповещения <> Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах 
			И СтрокаНастроек.ВидОповещения <> Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров Тогда
			Если ЭтоАдресВременногоХранилища(СтрокаНастроек.Хранилище) Тогда
				Запись.Хранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаНастроек.Хранилище),
					 Новый СжатиеДанных(9));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьНастройкиОпевещения()

#КонецОбласти

#Область ПолучениеНастроек

&НаСервере
Функция ПолучитьНастройкиПользователя()
	
	МассивНастроек = Новый Массив;
	
	// +СофтФон
	сфпИспользоватьСофтФон = ПолучитьФункциональнуюОпцию("сфпИспользоватьСофтФон");
	// -СофтФон
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПользовательСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Настройки.Код КАК Код,
	|	Настройки.Родитель КАК Родитель,
	|	Настройки.Ссылка КАК Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ Настройки.ЭтоГруппа КАК НомерКартинки,
	|	Настройки.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям КАК ФункциональнаяОпцияУчетПоНесколькимОрганизациям,
	|	ЗначениеНастроек.Значение КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.CRM_НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнаяОрганизация)
	|					И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// +Календари
	// Скрытие устаревших настроек календарей Google.
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.IDКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниТокенаAPI)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ИдКалендаряКанала)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ЧасовойПоясКалендаряGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.НастройкиКалендаряGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.Google)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// Скрытие настроек синхронизации календарей - редактируются в отдельной закладке.
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизацияКалендарей)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьДляСинхронизации)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// -Календари
	|	//ТекстИсключенияНастроекДляСпарки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ УБЫВ,
	|	Настройки.Код";
	
	Если НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы",
		 "ФункциональнаяОпцияУчетПоНесколькимОрганизациям") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям", "ИСТИНА");
		
	КонецЕсли;
	
	// Скрытие неактуальных настроек:
	ТекстИсключенияНастроекДляСпарки = "";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстИсключенияНастроекДляСпарки = "И ВЫБОР
		|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойВидЦенПродажи)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстИсключенияНастроекДляСпарки", ТекстИсключенияНастроекДляСпарки);
	
	// Скрытие неактуальных настроек:
	ТекстИсключенияНастроекДляСпарки = "";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстИсключенияНастроекДляСпарки = "И ВЫБОР
		|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойВидЦенПродажи)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстИсключенияНастроекДляСпарки", ТекстИсключенияНастроекДляСпарки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			КодНастройки = Число(Выборка.Код);
		Исключение	
			КодНастройки = 0;
		КонецПопытки;
		
		Если СтрНайти(Выборка.ИмяПредопределенныхДанных, "Удалить_") = 1 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипУслуг
			 И НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг") Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипОбращения
			 И НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
			Продолжить;
		КонецЕсли;
		
		// +СофтФон
		Если НЕ сфпИспользоватьСофтФон Тогда
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЗакрыватьПанельПриЗавершенииРаботы ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьВнутреннююПанель ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер ИЛИ
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДополнительныеВнутренниеНомера
				Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// -СофтФон
		
		Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АвтоматическиЗапускатьТаймерУчетаРабочегоВремени
			 И Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьУчетРабочегоВремени") Тогда
			Продолжить;
		КонецЕсли;
		
		// +Fresh
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АдминистраторМобильногоПриложения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// -Fresh
		
		Если НЕ РольДоступна("АдминистраторСистемы") Тогда
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АдминистраторМобильногоПриложения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Особеннности объединенных решений
		ИмяКонфигурации = Метаданные.Имя;
		
		Если ИмяКонфигурации = "CRM" Тогда
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьCRM ИЛИ 
				Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьТиповуюФормуРегистрацииНовогоПартнера 
				Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПодставлятьОсновнойПроектВПоручения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаПользователя = Новый Структура(
			"Значение,Настройка",
			Выборка.Значение, Выборка.Ссылка
		);
		МассивНастроек.Добавить(НастройкаПользователя);
		
		Если НастройкаПользователя.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке Тогда
			ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
			
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий[0];
			КонецЕсли;
			
			НастройкаПользователя.Значение = ЭлементСписка.Значение;
		ИначеЕсли НастройкаПользователя.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке Тогда
			ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
			
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий[0];
			КонецЕсли;
			
			НастройкаПользователя.Значение = ЭлементСписка.Значение;
		Иначе
			НастройкаПользователя.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНастроек;
	
КонецФункции // ПолучитьНастройкиПользователя()

&НаСервере
Функция ПолучитьНастройкиОповещения()
	
	МассивНастроекОповещения	= Новый Массив;
	СписокИсключаемыхВидов		= Новый СписокЗначений;
	
	СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает); // Используется для iCRM.
	
	ОсновнойВариантПоставки = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьОсновнойВариантПоставки();
	
	Если ОсновнойВариантПоставки <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки);
	КонецЕсли;
	
	Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользовательСсылка) Тогда
		СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.ОшибкаСрабатыванияТриггера);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь",	ПользовательСсылка);
	Запрос.УстановитьПараметр("Исключения",		СписокИсключаемыхВидов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
	|	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
	|	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище
	|ПОМЕСТИТЬ ПользовательскиеНастройки
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ВидыОповещений.Ссылка КАК ВидОповещения,
	|	CRM_ВидыОповещений.Код КАК Код,
	|	CRM_ВидыОповещений.Родитель КАК Родитель,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Пользователь, &Пользователь) КАК Пользователь,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СрокОповещения, 0) КАК СрокОповещения,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Периодичность, ЗНАЧЕНИЕ(Перечисление.CRM_ПериодичностьОповещений.ПустаяСсылка)) КАК Периодичность,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Напоминание, ЛОЖЬ) КАК Напоминание,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СМС, ЛОЖЬ) КАК СМС,
	|	ЕСТЬNULL(ПользовательскиеНастройки.ЭлектроннаяПочта, ЛОЖЬ) КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Хранилище, НЕОПРЕДЕЛЕНО) КАК Хранилище
	|ИЗ
	|	Справочник.CRM_ВидыОповещений КАК CRM_ВидыОповещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеНастройки КАК ПользовательскиеНастройки
	|		ПО CRM_ВидыОповещений.Ссылка = ПользовательскиеНастройки.ВидОповещения
	|ГДЕ
	|	НЕ CRM_ВидыОповещений.ЭтоГруппа
	|	И НЕ CRM_ВидыОповещений.ПометкаУдаления
	|	И НЕ CRM_ВидыОповещений.Ссылка В (&Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидОповещения)
	|ПО
	|	Родитель";
	
	ВыборкаНастроекГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНастроекГруппа.Следующий() Цикл
		ВыборкаНастроекЭлементы = ВыборкаНастроекГруппа.Выбрать();
		
		Пока ВыборкаНастроекЭлементы.Следующий() Цикл
			НастройкаОповещения = Новый Структура;
			МассивНастроекОповещения.Добавить(НастройкаОповещения);
			
			НастройкаОповещения.Вставить("СМС",				ВыборкаНастроекЭлементы.СМС);
			НастройкаОповещения.Вставить("ЭлектроннаяПочта", ВыборкаНастроекЭлементы.ЭлектроннаяПочта);
			НастройкаОповещения.Вставить("Напоминание",		ВыборкаНастроекЭлементы.Напоминание);
			НастройкаОповещения.Вставить("ВидОповещения",	ВыборкаНастроекЭлементы.ВидОповещения);
			НастройкаОповещения.Вставить("Периодичность",	ВыборкаНастроекЭлементы.Периодичность);
			НастройкаОповещения.Вставить("СрокОповещения",	ВыборкаНастроекЭлементы.СрокОповещения);
			НастройкаОповещения.Вставить("Хранилище",		ВыборкаНастроекЭлементы.Хранилище);
			
			Если ВыборкаНастроекЭлементы.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
					ИЛИ ВыборкаНастроекЭлементы.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
				НастройкаОповещения.Вставить("Отбор", ВыборкаНастроекЭлементы.Сумма);
			ИначеЕсли ВыборкаНастроекЭлементы.Хранилище <> Неопределено Тогда
				ЗначениеИзХранилища				= ВыборкаНастроекЭлементы.Хранилище.Получить();
				НастройкаОповещения.Хранилище	= ПоместитьВоВременноеХранилище(ЗначениеИзХранилища, УникальныйИдентификатор);
				
				НастройкаОповещения.Вставить("Отбор", Строка(ЗначениеИзХранилища));
			КонецЕсли;
			
			Если ВыборкаНастроекЭлементы.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				ОповещенияОВходящихПисьмахНапоминание		= ВыборкаНастроекЭлементы.Напоминание;
				ОповещенияОВходящихПисьмахСрокОповещения	= ВыборкаНастроекЭлементы.СрокОповещения;
				ОповещенияОВходящихПисьмахПериодичность		= ВыборкаНастроекЭлементы.Периодичность;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивНастроекОповещения;
	
КонецФункции // ПолучитьНастройкиОповещения()

#КонецОбласти

#КонецОбласти
