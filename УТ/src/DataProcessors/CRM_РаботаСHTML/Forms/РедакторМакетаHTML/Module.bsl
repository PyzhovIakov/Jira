
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЗаписатьЗакрыть.КнопкаПоУмолчанию = Ложь;
	
	Заголовок = Параметры.ИмяДокумента;
	СтилиТекста = Элементы.КомандаformatBlock.СписокВыбора[0].Значение;
	ИмяШрифта = Элементы.КомандаFontName.СписокВыбора[0].Значение;
	РазмерШрифта = 3;
	ЭтоПечать = Ложь;
	
	Элементы.Редактирование.Пометка = Истина;
	ПредыдущийРежим = Элементы.Редактирование.Имя;
	Если Параметры.Свойство("CRM_ИмяМакета") Тогда
		ИмяОбъектаМетаданныхМакета = Параметры.CRM_ИмяМакета;
	КонецЕсли;
	Если Параметры.Свойство("CRM_ПоставляемыйМакет") Тогда
		CRM_ПоставляемыйМакет = Параметры.CRM_ПоставляемыйМакет;
	КонецЕсли;
	Если Параметры.Свойство("Идентификатор") Тогда
		ИдентификаторМакета = Параметры.Идентификатор;
		СсылкаМакета = УправлениеПечатью.СсылкаМакета(ИдентификаторМакета);
	КонецЕсли;
	Если Параметры.Свойство("Ссылка") Тогда
		СсылкаМакета = Параметры.Ссылка;
	КонецЕсли;
	Если Параметры.Свойство("ИсточникДанных") Тогда
		ВладелецМакета = Параметры.ИсточникДанных;
	КонецЕсли;
	
	ЭтоИнтерес = (СтрНайти(ИмяОбъектаМетаданныхМакета, "Документ.CRM_Интерес") > 0);
	
	Если ЭтоИнтерес Тогда
		ИдентификаторМДОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.CRM_Интерес);
	Иначе
		ЭтоКП = (СтрНайти(ИмяОбъектаМетаданныхМакета, "КоммерческоеПредложениеКлиенту") > 0);
		
		Если ЭтоКП Тогда
			ИдентификаторМДОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.КоммерческоеПредложениеКлиенту);
		Иначе 
			ИдентификаторМДОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронноеПисьмоВходящее);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, ИдентификаторМДОбъекта,,Ложь);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекстаТовары");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, ИдентификаторМДОбъекта,"Товары",Ложь);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекстаТовары");
	
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Истина,,, "ТаблицаАвтотекстаТовары", "АвтотекстТовары");
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Истина,,, "ТаблицаАвтотекста", "АвтотекстРеквизиты");
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	Если Параметры.Свойство("Печать") Тогда
		Элементы.ЗаписатьЗакрыть.Видимость = Ложь;
		Элементы.Записать.Видимость = Ложь;
		Элементы.Текст.Видимость = Ложь;
		Элементы.Автотекст.Видимость = Ложь;
		Элементы.АвтоТекстКонтекст.Видимость = Ложь;
		ОбъектСсылка = Параметры.ОбъектСсылка;
		ЭтоПечать = Истина;
		Элементы.ПолеHTMLДокумента.ТолькоПросмотр = Истина;
		
		Если ЭтоИнтерес Тогда
			СформироватьДокумент(1);
		ИначеЕсли ЭтоКП Тогда
			СформироватьДокумент(Параметры.НомерВарианта);
		Иначе
			// Это электронное письмо.
			Элементы.ТолькоТекст.Видимость = Истина;
			Элементы.Редактирование.Видимость = Ложь;
			СформироватьДокументПисьмо(Параметры.ОбъектыПечати);
		КонецЕсли;
	Иначе	
		ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданныхМакета, ".");
		ИмяМакета = ЧастиИмени[ЧастиИмени.ВГраница()];
		
		ИмяВладельца = "";
		Для НомерЧасти = 0 По ЧастиИмени.ВГраница()-1 Цикл
			Если Не ПустаяСтрока(ИмяВладельца) Тогда
				ИмяВладельца = ИмяВладельца + ".";
			КонецЕсли;
			ИмяВладельца = ИмяВладельца + ЧастиИмени[НомерЧасти];
		КонецЦикла;
		
		ИмяОбъектаМетаданныхМакета	= Параметры.ИмяОбъектаМетаданныхМакета;
		РедактированиеЗапрещено		= НЕ Параметры.Редактирование;
		Если Параметры.Свойство("ТекстовыйДокумент") Тогда
			ДанныеПоляHTMLДокумента = Параметры.ТекстовыйДокумент;
		Иначе	
			ДанныеПоляHTMLДокумента = "about:";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПечать И НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати) Тогда
		Элементы.Редактирование.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.ГруппаДополнительное.Видимость = Ложь;
	Элементы.Отправить.Видимость = ЭтоПечать;
	Элементы.ОтправитьВДиалогах.Видимость = ЭтоПечать;
	
	Если НЕ ЭтоПечать Тогда
		Элементы.ЗаписатьЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ПустаяСтрока(ИмяОбъектаМетаданныхМакета) И (ДанныеПоляHTMLДокумента = "about:") Тогда
		ЗагрузитьТабличныйДокументИзМетаданных();
	Иначе
		ПриОткрытииЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		Если НЕ ЭтоПечать Тогда
			Если НЕ НеПроверять Тогда
				ТекстПроверки = "";
				ВходящийТекстПроверки = "";
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"<html>","");
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"</html>","");
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"<body>","");
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"</body>","");
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"<head>","");
				ВходящийТекст = СтрЗаменить(ВходящийТекст,"</head>","");
				ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
				ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
				ТекстПроверкиТМП = "<html>
				|<head>
				|"+ТекстПроверкиТМПHead+"
				|</head>
				|<body>" + ТекстПроверкиТМПBody +"
				|</body>
				|<html>";
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<html>","");
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</html>","");
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<body>","");
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</body>","");
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<head>","");
				ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</head>","");
				КолСтрок = СтрЧислоСтрок(ТекстПроверкиТМП);
				Для а = 1 По КолСтрок Цикл
					Стр = СтрПолучитьСтроку(ТекстПроверкиТМП, а);
					Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
						ТекстПроверки = ТекстПроверки + Стр+"
						|";
					КонецЕсли;	
				КонецЦикла;	
				КолСтрок = СтрЧислоСтрок(ВходящийТекст);
				Для а = 1 По КолСтрок Цикл
					Стр = СтрПолучитьСтроку(ВходящийТекст, а);
					Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
						ВходящийТекстПроверки = ВходящийТекстПроверки + Стр+"
						|";
					КонецЕсли;	
				КонецЦикла;	
				КолСтрокВх = СтрЧислоСтрок(ВходящийТекстПроверки);
				КолСтрок = СтрЧислоСтрок(ТекстПроверки);
				Если ТекстПроверки <> ВходящийТекстПроверки Тогда
					Отказ = Истина;
					ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаОСохранении", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Макет был изменен. Сохранить ?'"), РежимДиалогаВопрос.ДаНетОтмена);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ПолеHTMLДокумента, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриИзменении(Элемент)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент, Не ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьПоOK(Команда)
	НеПроверять = Истина;
	КоманднаяПанельРежим(Команды.Просмотр);
	ТекстПроверки = "";
	ВходящийТекстПроверки = "";
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<html>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</html>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<body>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</body>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<head>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</head>","");
	
	ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
	ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
	ТекстПроверкиТМП = "<html>
	|<head>
	|"+ТекстПроверкиТМПHead+"
	|</head>
	|<body>" + ТекстПроверкиТМПBody +"
	|</body>
	|<html>";
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<html>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</html>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<body>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</body>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<head>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</head>","");
	
	КолСтрок = СтрЧислоСтрок(ТекстПроверкиТМП);
	Для а = 1 По КолСтрок Цикл
		Стр = СтрПолучитьСтроку(ТекстПроверкиТМП, а);
		Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
			ТекстПроверки = ТекстПроверки + Стр+"
			|";
		КонецЕсли;	
	КонецЦикла;	
	КолСтрок = СтрЧислоСтрок(ВходящийТекст);
	Для а = 1 По КолСтрок Цикл
		Стр = СтрПолучитьСтроку(ВходящийТекст, а);
		Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
			ВходящийТекстПроверки = ВходящийТекстПроверки + Стр+"
			|";
		КонецЕсли;	
	КонецЦикла;	
	КолСтрокВх = СтрЧислоСтрок(ВходящийТекстПроверки);
	КолСтрок = СтрЧислоСтрок(ТекстПроверки);
	Если ТекстПроверки <> ВходящийТекстПроверки Тогда
		ПараметрЗакрытия = "";
		ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
		ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
		ТекстПроверки = "<html>
		|<head>
		|"+ТекстПроверкиТМПHead+"
		|</head>
		|<body>" + ТекстПроверкиТМПBody +"
		|</body>
		|<html>";
		КолСтрок = СтрЧислоСтрок(ТекстПроверки);
		Для а = 1 По КолСтрок Цикл
			Стр = СтрПолучитьСтроку(ТекстПроверки, а);
			Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
				ПараметрЗакрытия = ПараметрЗакрытия + Стр+"
				|";
			КонецЕсли;	
		КонецЦикла;
		Макет = Новый ТекстовыйДокумент;
		Макет.ДобавитьСтроку(ПараметрЗакрытия);
		ЗаписатьМакет(Макет);
		
		ИсточникиДанных = Новый Массив;
		ИсточникиДанных.Добавить(ВладелецМакета);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяОбъектаМетаданныхМакета", ИдентификаторМакета); //ИмяОбъектаМетаданныхМакета);
		ПараметрыОповещения.Вставить("Представление", Заголовок);
		ПараметрыОповещения.Вставить("Владелец", ВладелецМакета);
		ПараметрыОповещения.Вставить("ИсточникиДанных", ИсточникиДанных);
		Оповестить("Запись_ПользовательскиеМакетыПечати", ПараметрыОповещения, ЭтотОбъект);
	КонецЕсли;
	
	Закрыть(ПараметрЗакрытия);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайл(Команда)
	ТекстПроверки = "";
	ВходящийТекстПроверки = "";
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<html>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</html>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<body>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</body>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"<head>","");
	ВходящийТекст = СтрЗаменить(ВходящийТекст,"</head>","");
	
	ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
	ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
	ТекстПроверкиТМП = "<html>
	|<head>
	|"+ТекстПроверкиТМПHead+"
	|</head>
	|<body>" + ТекстПроверкиТМПBody +"
	|</body>
	|<html>";
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<html>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</html>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<body>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</body>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"<head>","");
	ТекстПроверкиТМП = СтрЗаменить(ТекстПроверкиТМП,"</head>","");
	
	КолСтрок = СтрЧислоСтрок(ТекстПроверкиТМП);
	Для а = 1 По КолСтрок Цикл
		Стр = СтрПолучитьСтроку(ТекстПроверкиТМП, а);
		Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
			ТекстПроверки = ТекстПроверки + Стр+"
			|";
		КонецЕсли;	
	КонецЦикла;	
	КолСтрок = СтрЧислоСтрок(ВходящийТекст);
	Для а = 1 По КолСтрок Цикл
		Стр = СтрПолучитьСтроку(ВходящийТекст, а);
		Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
			ВходящийТекстПроверки = ВходящийТекстПроверки + Стр+"
			|";
		КонецЕсли;	
	КонецЦикла;	
	КолСтрокВх = СтрЧислоСтрок(ВходящийТекстПроверки);
	КолСтрок = СтрЧислоСтрок(ТекстПроверки);
	Если ТекстПроверки <> ВходящийТекстПроверки Тогда
		ПараметрЗакрытия = "";
		ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
		ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
		ТекстПроверки = "<html>
		|<head>
		|"+ТекстПроверкиТМПHead+"
		|</head>
		|<body>" + ТекстПроверкиТМПBody +"
		|</body>
		|<html>";
		КолСтрок = СтрЧислоСтрок(ТекстПроверки);
		Для а = 1 По КолСтрок Цикл
			Стр = СтрПолучитьСтроку(ТекстПроверки, а);
			Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
				ПараметрЗакрытия = ПараметрЗакрытия + Стр+"
				|";
			КонецЕсли;	
		КонецЦикла;
		Макет = Новый ТекстовыйДокумент;
		Макет.ДобавитьСтроку(ПараметрЗакрытия);
		ЗаписатьМакет(Макет);
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяОбъектаМетаданныхМакета", ИдентификаторМакета); //ИмяОбъектаМетаданныхМакета);
		Оповестить("Запись_ПользовательскиеМакетыПечати", ПараметрыОповещения, ЭтотОбъект);
		ВходящийТекст = ТекстПроверки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРежим(Команда, ОбновлятьРежим = Истина)
	
	Если Команда.Имя = "Редактирование" Тогда
		Элементы.ПолеHTMLДокумента.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Кнопка = Элементы[Команда.Имя];
	Если Кнопка.Пометка Тогда
		Возврат;
	КонецЕсли; 
	
	Элементы.Редактирование.Пометка = Ложь;
	Элементы.Текст.Пометка = Ложь;
	Кнопка.Пометка = Истина;
	
	Если Кнопка = Элементы.Текст Тогда
		
		// На некоторых машинах видимо из за настроек безопасности IE раскраска кода не получается
		// Поэтому делаем через попытку
		Попытка 
			sExpression = "
			|document.body.innerText = document.body.innerHTML;
			|document.body.innerHTML = colourCode(document.body.innerHTML);
			|function colourCode(code)
			|{
			|    htmlTag = /(&lt;([\s\S]*?)&gt;)/gi
			|    tableTag = /(&lt;(table|tbody|th|tr|td|\/table|\/tbody|\/th|\/tr|\/td)([\s\S]*?)&gt;)/gi
			|    commentTag = /(&lt;!--([\s\S]*?)&gt;)/gi
			|    imageTag = /(&lt;img([\s\S]*?)&gt;)/gi
			|    linkTag = /(&lt;(a|\/a)([\s\S]*?)&gt;)/gi
			|    scriptTag = /(&lt;(script|\/script)([\s\S]*?)&gt;)/gi
			|    code = code.replace(htmlTag,""<font color=#FF0000>$1</font>"")
			|    code = code.replace(tableTag,""<font color=#008080>$1</font>"")
			|    code = code.replace(commentTag,""<font color=#808080>$1</font>"")
			|    code = code.replace(imageTag,""<font color=#800080>$1</font>"")
			|    code = code.replace(linkTag,""<font color=#008000>$1</font>"")
			|    code = code.replace(scriptTag,""<font color=#800000>$1</font>"")
			|    return code;
			|}";
			Элементы.ПолеHTMLДокумента.Документ.parentWindow.execScript(sExpression);
			
		Исключение
			Элементы.ПолеHTMLДокумента.Документ.Body.InnerText = Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML;
		КонецПопытки;
		
	ИначеЕсли ПредыдущийРежим = Элементы.Текст.Имя Тогда
		Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML = Элементы.ПолеHTMLДокумента.Документ.Body.InnerText;
	КонецЕсли;
	
	ДоступностьКнопок = (Кнопка = Элементы.Редактирование);
	Элементы.ГруппаФормат.Видимость = ДоступностьКнопок;
	
	Для каждого Группа Из Элементы.КоманднаяПанельКнопок.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Группа) = Тип("ГруппаФормы") Тогда
			Если Группа.Имя = "ГруппаУправлениеРежимом" Тогда
				УправлятьДоступностью = Ложь;
			Иначе
				УправлятьДоступностью = Истина;
			КонецЕсли;
			
			Для каждого Кн Из Группа.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(Кн) = тип("КнопкаФормы") Тогда
					Если УправлятьДоступностью Тогда
						Кн.Видимость = ДоступностьКнопок
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(Группа) = тип("КнопкаФормы") Тогда
				Группа.Видимость = ДоступностьКнопок
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Элементы.Автотекст.Видимость = НЕ ЭтоПечать И ДоступностьКнопок;
	Элементы.АвтоТекстКонтекст.Видимость = НЕ ЭтоПечать И ДоступностьКнопок;
	Элементы.ЗаписатьЗакрыть.Видимость = НЕ ЭтоПечать;
	Элементы.Записать.Видимость = НЕ ЭтоПечать;
	Элементы.Отправить.Видимость = ЭтоПечать И Не Элементы.ТолькоТекст.Видимость;
	Элементы.ОтправитьВДиалогах.Видимость = ЭтоПечать;
	
	#Если ВебКлиент Тогда
		Элементы.КомандаPrint.Видимость = Ложь;
	#Иначе
		Элементы.КомандаPrint.Видимость = ЭтоПечать;
	#КонецЕсли
	
	Элементы.ПосмотретьФорму.Видимость = ДоступностьКнопок;
	
	Если НЕ ДоступностьКнопок Тогда
		Элементы.ПоказатьДопФорматирование.Пометка = Ложь;
		Элементы.ГруппаДополнительное.Видимость = Ложь;
	КонецЕсли;
	
	ПредыдущийРежим = Кнопка.Имя;
	Если ОбновлятьРежим Тогда
		CRM_РаботаСHTMLКлиент.ПоказатьРежимыКнопок(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьФорму(Команда)
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ОткрытьМакетВебКлиент();
	#Иначе
		ОткрытьМакетТонкийКлиент();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВДиалогах(Команда)
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКПустомуФайлуМакетаПродолжение", ЭтотОбъект);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	#Иначе
		ПутьКПустомуФайлуМакетаПродолжение(Истина, "");
	#КонецЕсли
		
КонецПроцедуры

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ПолеHTMLДокумента, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ПолеHTMLДокумента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ПолеHTMLДокумента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ПолеHTMLДокумента, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	Элементы.ПоказатьДопФорматирование.Пометка = НЕ Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость = Элементы.ПоказатьДопФорматирование.Пометка;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
	ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
	ТекстHTML = "<html>
	|<head>
	|"+ТекстПроверкиТМПHead+"
	|</head>
	|<body>" + ТекстПроверкиТМПBody +"
	|</body>
	|<html>";
	ПараметрыОтправки = ПараметрыОтправкиПисьма(ТекстHTML);
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаОСохранении(Ответ, ДопСвойства) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьПоOK("");
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		НеПроверять = Истина;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПустомуФайлуМакетаПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеКаталогаЗавершениеДиалоги", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКПустомуФайлуМакетаПродолжение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПолучениеКаталогаЗавершениеДиалоги(Путь, ДопПараметры) Экспорт
	Каталог = Путь;
	ТипМакета = "HTML";
	
	УИН = Новый УникальныйИдентификатор;
	
	ИмяФайла = Строка(УИН) + ".html";
	ПутьКФайлуМакета = Каталог + "\" + ИмяФайла;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиМакета", ЭтотОбъект);
	ТекДок = Новый ТекстовыйДокумент;
	ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
	ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
	ТекстHTML = "<html>
	|<head>
	|"+ТекстПроверкиТМПHead+"
	|</head>
	|<body>" + ТекстПроверкиТМПBody +"
	|</body>
	|<html>";  
	ТекДок.ДобавитьСтроку(ТекстHTML);
	ТекДок.НачатьЗапись(ОписаниеОповещения, ПутьКФайлуМакета);
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписиМакета(Подключено, ДопПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);	
	ОткрытьФорму("Обработка.CRM_Мессенджер.Форма", ПолучитьПараметрыОткрытияДляМессенджера(), ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоТекст(Команда)
	
	Элементы.ТолькоТекст.Видимость = Ложь;
	Элементы.ПоказатьИзображения.Видимость = Истина;
	
	ДанныеПоляHTMLДокумента = ТолькоТекстНаСервере(ЭтотОбъект.ДанныеПоляHTMLДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТолькоТекстНаСервере(ТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("type", "elementname");
	Фильтр.Вставить("value", Новый Структура("value, operation", "img", "equals"));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Фильтр);
	ФильтрJSON = ЗаписьJSON.Закрыть();
	
	ДокументHTML.УдалитьПоФильтру(ФильтрJSON);
	
	ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
	Возврат ТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИзображения(Команда)
	
	Элементы.ПоказатьИзображения.Видимость = Ложь;
	Элементы.ТолькоТекст.Видимость = Истина;
	ДанныеПоляHTMLДокумента = ВходящийТекст;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяВременногоФайлаМакета(Расширение)
	Возврат ПолучитьИмяВременногоФайла(Расширение);
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьМакетНаСервере(ИмяОбъектаМетаданныхМакета)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Возврат МодульУправлениеПечатью.МакетПечатнойФормы(ИмяОбъектаМетаданныхМакета);
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	УникальныйИдентификаторХранилища = Новый УникальныйИдентификатор;
	Если ЭтоПечать Тогда
		#Если ВебКлиент Тогда
		ДанныеПоляHTMLДокумента = СтрЗаменить(ДанныеПоляHTMLДокумента, "box-shadow: 0 0 0.5cm rgba(0,0,0,0.5);", "");
		#КонецЕсли
		СтруктураКоманды = Новый Структура("Имя", "Просмотр");
		КоманднаяПанельРежим(СтруктураКоманды, Ложь);
	КонецЕсли;
	ВходящийТекст = ДанныеПоляHTMLДокумента;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУдаленияФайлаМакета(ДополнительныеПараметры) Экспорт
	ПриОткрытииЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиФайлаМакета(ДополнительныеПараметры) Экспорт
	
	Макет = Новый ТекстовыйДокумент;
	
	ДополнительныеПараметрыЧтения = Новый Структура;
	ДополнительныеПараметрыЧтения.Вставить("Макет", Макет);
	ДополнительныеПараметрыЧтения.Вставить("ИмяФайлаМакета", ДополнительныеПараметры.ИмяФайлаМакета);
	Оповещение = Новый ОписаниеОповещения("МакетЧтениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметрыЧтения);
	
	Макет.НачатьЧтение(Оповещение, ДополнительныеПараметры.ИмяФайлаМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура МакетЧтениеФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	ДанныеПоляHTMLДокумента = ДополнительныеПараметры.Макет.ПолучитьТекст();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаУдаленияФайлаМакета", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУдалениеФайлов(ОписаниеОповещения, ДополнительныеПараметры.ИмяФайлаМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТабличныйДокументИзМетаданных()
	Макет = ПолучитьМакетНаСервере(ИдентификаторМакета);
	Если Макет = Неопределено Тогда
		ПриОткрытииЗавершение();
	ИначеЕсли ТипЗнч(Макет) = Тип("ДвоичныеДанные") Тогда
		ИмяФайлаМакета = ПолучитьИмяВременногоФайлаМакета("html");
		ДополнительныеПараметры = Новый Структура("ИмяФайлаМакета", ИмяФайлаМакета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗаписиФайлаМакета", ЭтотОбъект, ДополнительныеПараметры);
		Макет.НачатьЗапись(ОписаниеОповещения, ИмяФайлаМакета);
	Иначе	
		ДанныеПоляHTMLДокумента = Макет.ПолучитьТекст();
		ПриОткрытииЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМакет(Макет)
	
	// +CRM
	Если CRM_ПоставляемыйМакет Тогда
		ЗаписьНовая = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		ЗаписьНовая.Объект        = ИмяВладельца;
		ЗаписьНовая.ИмяМакета     = ИмяМакета;
		ЗаписьНовая.Прочитать();
		Если НЕ ЗаписьНовая.Выбран() Тогда
			ЗаписьНовая = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
			ЗаписьНовая.Объект    = ИмяВладельца;
			ЗаписьНовая.ИмяМакета = ИмяМакета;
		КонецЕсли;
		ЗаписьНовая.Использование = Истина;
		ЗаписьНовая.Макет         = Новый ХранилищеЗначения(Макет, Новый СжатиеДанных(9));
		ЗаписьНовая.Записать();
	КонецЕсли;
	
	ИдентификаторМакета = ИмяОбъектаМетаданныхМакета;
	Если ЗначениеЗаполнено(ВладелецМакета) Тогда
		ИсточникиДанных = Новый Массив;
		ИсточникиДанных.Добавить(ВладелецМакета);
	Иначе
		ИсточникиДанных = УправлениеПечатью.ИсточникиДанныхМакета(ИдентификаторМакета);
	КонецЕсли;
	АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	
	МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	ОписаниеМакета = CRM_УправлениеПечатью.ОписаниеМакета();
	ОписаниеМакета.ИмяОбъектаМетаданныхМакета = ИдентификаторМакета;
	ОписаниеМакета.АдресМакетаВоВременномХранилище = АдресМакетаВоВременномХранилище;
	ОписаниеМакета.КодЯзыка = ТекущийЯзык().КодЯзыка;
	ОписаниеМакета.Владелец = ВладелецМакета;
	ОписаниеМакета.ИсточникиДанных = ИсточникиДанных;
	ОписаниеМакета.Наименование = Заголовок;
	ОписаниеМакета.Ссылка = СсылкаМакета;
	ОписаниеМакета.ТипМакета = "HTML";
	ОписаниеМакета.CRM_ИмяМакета = ИмяВладельца + "." + ИмяМакета;
	ОписаниеМакета.CRM_ПоставляемыйМакет = CRM_ПоставляемыйМакет;
	
	ИдентификаторМакета = МодульУправлениеПечатью.ЗаписатьМакет(ОписаниеМакета);
	Если Не ЗначениеЗаполнено(СсылкаМакета) Тогда
		СсылкаМакета = МодульУправлениеПечатью.СсылкаМакета(ИдентификаторМакета);
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаСервере
Процедура СформироватьДокумент(Знач НомерВарианта = Неопределено)
	ДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(ИмяОбъектаМетаданныхМакета);
		Если ТипЗнч(Макет) = Тип("ДвоичныеДанные") Тогда
			ИмяФайлаМакета = ПолучитьИмяВременногоФайла("html");
			Макет.Записать(ИмяФайлаМакета);
			Макет = Новый ТекстовыйДокумент;
			Макет.Прочитать(ИмяФайлаМакета);
			ДанныеПоляHTMLДокумента = Макет.ПолучитьТекст();
			УдалитьФайлы(ИмяФайлаМакета);
		Иначе
			ДанныеПоляHTMLДокумента = Макет.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ДанныеОбъекта Цикл
		ДанныеПоляHTMLДокумента = СтрЗаменить(ДанныеПоляHTMLДокумента,"%"+ЭлементСтруктуры.Ключ+"%", ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	ПозНачалаТаб = СтрНайти(ДанныеПоляHTMLДокумента, "<!--НачалоТаблицы-->")+20;
	
	Пока ПозНачалаТаб>0 Цикл
		ПозКонцаТаб = СтрНайти(ДанныеПоляHTMLДокумента, "<!--ОкончаниеТаблицы-->",, ПозНачалаТаб);
		ТекстТаблицы = Сред(ДанныеПоляHTMLДокумента, ПозНачалаТаб, ПозКонцаТаб - ПозНачалаТаб);	
		
		ПозНачала = СтрНайти(ТекстТаблицы, "<!--НачалоСтроки-->")+19;
		ПозКонца = СтрНайти(ТекстТаблицы, "<!--ОкончаниеСтроки-->");
		ТекстТаблицыСтрок = Сред(ТекстТаблицы, ПозНачала, ПозКонца - ПозНачала);
		
		ТекстНДС = ?(ОбъектСсылка.ЦенаВключаетНДС, НСтр("ru='в том числе НДС:';en='Including VAT:'"), НСтр("ru='Сумма НДС:'"));
		
		СформированныйТекст = "";
			
		Для Каждого ВариантКП Из ДанныеОбъекта["Варианты"] Цикл
			
			Если НомерВарианта = -1 Тогда
				СформированныйТекст = СформированныйТекст +"<div style=""text-align: justify;"">"+ВариантКП.СтрокаВарианта+"</div>
				|";
			КонецЕсли;
			СформированныйТекстТаблицы = "";
			Для Каждого Строка Из ВариантКП.Товары Цикл
				Если Строка["ТипСтроки"] <> "Номенклатура" Тогда
					ЭтоТовар = Ложь;
				Иначе
					ЭтоТовар = Истина;
				КонецЕсли;	
				ТекстТаблицыСтрокТМП = ТекстТаблицыСтрок;
				Для Каждого ЭлементыСтроки Из Строка Цикл 
					ТекстТаблицыСтрокТМП = СтрЗаменить(ТекстТаблицыСтрокТМП,"%"+ЭлементыСтроки.Ключ+"%", ?(ЭтоТовар, "", "<b>")+ЭлементыСтроки.Значение+?(ЭтоТовар, "", "</b>"));
				КонецЦикла;
				СформированныйТекстТаблицы = СформированныйТекстТаблицы + ТекстТаблицыСтрокТМП
			КонецЦикла;	
			
			СтрокаДляВывода = "Общая стоимость составляет "+ВариантКП.ВсегоКОплате+" ("+ВариантКП.СтоимостьПропись+"); "+ВариантКП.СтрокаНДС+" "+ВариантКП.ВсегоНДС; 
			
			СформированныйТекст = СформированныйТекст + СтрЗаменить(ТекстТаблицы,ТекстТаблицыСтрок, СформированныйТекстТаблицы)+"
			|<br>
			|";
			СформированныйТекст = СтрЗаменить(СформированныйТекст, "%СтоимостьПрописьИтог%", СтрокаДляВывода);
			
		КонецЦикла;	
		ДанныеПоляHTMLДокумента = СтрЗаменить(ДанныеПоляHTMLДокумента,ТекстТаблицы, СформированныйТекст);
		ДанныеПоляHTMLДокумента = СтрЗаменить(ДанныеПоляHTMLДокумента,"%СтоимостьПрописьИтог%", СтрокаДляВывода);
		
		ПозНачалаТаб = СтрНайти(ДанныеПоляHTMLДокумента, "<!--НачалоТаблицы-->", , ПозНачалаТаб+20);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьДокументПисьмо(ОбъектыПечати = Неопределено)
	
	ДанныеПоляHTMLДокумента = "";
	ПроверятьВидимостьПредупрежденияБезопасности = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектыПечати) Тогда
		ОбъектыСсылки.Очистить();
		Для Каждого Письмо Из ОбъектыПечати Цикл
			НоваяСтрока = ОбъектыСсылки.Добавить();
			НоваяСтрока.ОбъектСсылка = Письмо.ОбъектСсылка;
		КонецЦикла;
		ПроверятьВидимостьПредупрежденияБезопасности = Истина;
	Иначе
		Элементы.ГруппаПредупреждениеБезопасности.Видимость = Ложь;
		ОбъектыПечати = Новый ТаблицаЗначений;
		ОбъектыПечати = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыСсылки);
	КонецЕсли;
	
	Для Каждого Письмо Из ОбъектыПечати Цикл
		
		ДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьДанныеОбъекта(Письмо.ОбъектСсылка);
		ДанныеПоляHTMLТекущегоДокумента = ДанныеОбъекта["ТекстПисьма"];
		
		Если ДанныеОбъекта["Формат"] = "HTML" Тогда
			Если Письмо.Свойство("ПредупреждениеБезопасности") И Письмо.ПредупреждениеБезопасности Тогда
				Взаимодействия.ОтфильтроватьСодержимоеТекстаHTML(ДанныеПоляHTMLТекущегоДокумента);
			КонецЕсли;
			ДанныеПоляHTMLТекущегоДокумента = Прав(ДанныеПоляHTMLТекущегоДокумента,
			СтрДлина(ДанныеПоляHTMLТекущегоДокумента) - СтрНайти(ДанныеПоляHTMLТекущегоДокумента,
			"<body"));
			ДанныеПоляHTMLТекущегоДокумента = Прав(ДанныеПоляHTMLТекущегоДокумента,
			СтрДлина(ДанныеПоляHTMLТекущегоДокумента) - СтрНайти(ДанныеПоляHTMLТекущегоДокумента,
			">"));
			Если Письмо.Свойство("ПредупреждениеБезопасности") И Письмо.ПредупреждениеБезопасности Тогда
				ДанныеОбъекта["ТекстПисьма"] = ДанныеПоляHTMLТекущегоДокумента;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			Макет = МодульУправлениеПечатью.МакетПечатнойФормы(ИмяОбъектаМетаданныхМакета);
			ДанныеПоляHTMLТекущегоДокумента = Макет.ПолучитьТекст();
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из ДанныеОбъекта Цикл
			ДанныеПоляHTMLТекущегоДокумента = СтрЗаменить(ДанныеПоляHTMLТекущегоДокумента, "%" + ЭлементСтруктуры.Ключ + "%",
				ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Если СтрНайти(ДанныеПоляHTMLТекущегоДокумента, "cid:") > 0 Тогда
			ДанныеПоляHTMLТекущегоДокумента = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(
				ДанныеПоляHTMLТекущегоДокумента, Письмо.ОбъектСсылка);
		КонецЕсли;
		
		ДанныеПоляHTMLДокумента = ДанныеПоляHTMLДокумента + "<div style=""page-break-after:always;"">" 
			+ ДанныеПоляHTMLТекущегоДокумента + "</div>";
		
		Если ПроверятьВидимостьПредупрежденияБезопасности
			И Письмо.ПредупреждениеБезопасности Тогда
			Элементы.ГруппаПредупреждениеБезопасности.Видимость = Истина;
			ПроверятьВидимостьПредупрежденияБезопасности = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОбъекта["ТекстПисьма"] = ДанныеПоляHTMLТекущегоДокумента;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОтправкиПисьма(ТекстHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(ТекстHTML);
	СписокВложений = ПоместитьДокументыВоВременноеХранилище(ТекстовыйДокумент);
	
	// Контроль уникальности имен.
	ШаблонИмениФайла = "%1%2.%3";
	ИспользованныеИменаФайлов = Новый Соответствие;
	Для Каждого Вложение Из СписокВложений Цикл
		ИмяФайла = Вложение.Представление;
		НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяФайла] <> Неопределено,
		ИспользованныеИменаФайлов[ИмяФайла] + 1, 1);
		ИспользованныеИменаФайлов.Вставить(ИмяФайла, НомерИспользования);
		Если НомерИспользования > 1 Тогда
			Файл = Новый Файл(ИмяФайла);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
			Файл.ИмяБезРасширения, " (" + НомерИспользования + ")", Файл.Расширение);
		КонецЕсли;
		Вложение.Представление = ИмяФайла;
	КонецЦикла;
	
	Получатели = Неопределено;
	
	Результат = Новый Структура;
	Результат.Вставить("Получатель", Получатели);
	Результат.Вставить("Тема", ПараметрыВывода.ПараметрыОтправки.Тема);
	Результат.Вставить("Текст", ПараметрыВывода.ПараметрыОтправки.Текст);
	Результат.Вставить("Вложения", СписокВложений);
	Результат.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	ПечатныеФормы = Новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("Название");
	ПечатныеФормы.Колонки.Добавить("ТабличныйДокумент");
	
	ОписаниеПечатнойФормы = ПечатныеФормы.Добавить();
	Если СтрНайти(ИмяОбъектаМетаданныхМакета, "Договор") = 0 Тогда
		ОписаниеПечатнойФормы.Название = "Коммерческое предложение";
	Иначе
		ОписаниеПечатнойФормы.Название = "Договор";
	КонецЕсли;	
	ОписаниеПечатнойФормы.ТабличныйДокумент = ТекстовыйДокумент;
	
	СписокОбъектов = Новый Массив;
	СписокОбъектов.Добавить(ОбъектСсылка);
	
	УправлениеПечатьюПереопределяемый.ПередОтправкойПоПочте(Результат, ПараметрыВывода, СписокОбъектов, ПечатныеФормы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьДокументыВоВременноеХранилище(ТекстовыйДокумент)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПереводитьИменаФайловВТранслит = Истина;
	// сохранение печатных форм
	ОбработанныеПечатныеФормы = Новый Массив;
	ОбъектПечати = ОбъектСсылка;
	ПечатнаяФорма = ТекстовыйДокумент;
	
	ЗаданныеИменаПечатныхФорм = Неопределено;
	Если СтрНайти(ИмяОбъектаМетаданныхМакета, "Договор") = 0 Тогда
		Название = "Коммерческое предложение";
	Иначе
		Название = "Договор";
	КонецЕсли;
	ИмяФайла = УправлениеПечатью.ИмяФайлаПечатнойФормыОбъекта(ОбъектПечати, ЗаданныеИменаПечатныхФорм, Название);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	Если ПереводитьИменаФайловВТранслит Тогда
		ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
	КонецЕсли;
	ИмяФайла = ИмяФайла + ".HTML";
	ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
	
	ПечатнаяФорма.Записать(ПолноеИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификаторХранилища);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	Результат.Добавить(ОписаниеФайла);
	УдалитьФайлы(ИмяВременнойПапки);
	Если ЗначениеЗаполнено(ИмяАрхива) Тогда
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьМакетТонкийКлиент()
	
	#Если Не ВебКлиент И НЕ МобильныйКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеКаталогаЗавершение", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетВебКлиент()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМакетаПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетаПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеКаталогаЗавершение", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановкуРасширенияПродолжение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	КонецЕсли;
КонецПроцедуры // ПутьКФайлуМакетаНачалоВыбора()

&НаКлиенте
Процедура ПолучениеКаталогаЗавершение(Путь, ДопПараметры) Экспорт
	Каталог = Путь;
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".html";
	ПутьКФайлуМакета = Каталог + "\" + ИмяФайла;
	ПараметрЗакрытия = "";
	ТекстПроверкиТМПBody =Элементы.ПолеHTMLДокумента.Документ.Body.innerHTML;
	ТекстПроверкиТМПHead =Элементы.ПолеHTMLДокумента.Документ.Head.innerHTML;
	ТекстПроверки = "<html>
	|<head>
	|"+ТекстПроверкиТМПHead+"
	|</head>
	|<body>" + ТекстПроверкиТМПBody +"
	|</body>
	|<html>";
	КолСтрок = СтрЧислоСтрок(ТекстПроверки);
	Для а = 1 По КолСтрок Цикл
		Стр = СтрПолучитьСтроку(ТекстПроверки, а);
		Если НЕ ПустаяСтрока(Стр) И СтрНайти(СокрЛП(Стр),"<base href=""") = 0 Тогда
			ПараметрЗакрытия = ПараметрЗакрытия + Стр+"
			|";
		КонецЕсли;	
	КонецЦикла;
	Макет = Новый ТекстовыйДокумент;
	Макет.ДобавитьСтроку(ПараметрЗакрытия);
	
	ДополнительныеПараметрыЗаписи = Новый Структура("ПутьКФайлуМакета", ПутьКФайлуМакета);
	Оповещение = Новый ОписаниеОповещения("ЗаписьМакетаЗавершение", ЭтотОбъект, ДополнительныеПараметрыЗаписи);
	Макет.НачатьЗапись(Оповещение, ПутьКФайлуМакета);
	
КонецПроцедуры // ПутьКФайлуМакетаНачалоВыбора(

&НаКлиенте
Процедура ЗаписьМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);
	НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.ПутьКФайлуМакета,, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановкуРасширенияПродолжение(Подключено) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМакетаПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры // ПутьКФайлуМакетаНачалоВыбора(

&НаСервере
Функция ПолучитьПараметрыОткрытияДляМессенджера()
	
	ПараметрыДиалога = Новый Структура;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ВставитьПараметрОткрытияДляМессенджера(ОбъектСсылка, ПараметрыДиалога);
	ИначеЕсли ОбъектыСсылки.Количество() = 1 Тогда
		ОбъектСсылка = ОбъектыСсылки[0].ОбъектСсылка;
		ВставитьПараметрОткрытияДляМессенджера(ОбъектСсылка, ПараметрыДиалога);
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("ПутьКФайлуМакета", ПутьКФайлуМакета);
	Возврат ПараметрыДиалога;
	
КонецФункции

&НаСервере
Процедура ВставитьПараметрОткрытияДляМессенджера(ОбъектСсылка, ПараметрыДиалога)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "КонтактноеЛицо")
		И ЗначениеЗаполнено(ОбъектСсылка["КонтактноеЛицо"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["КонтактноеЛицо"]);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "Партнер")
		И ЗначениеЗаполнено(ОбъектСсылка["Партнер"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["Партнер"]);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "Клиент")
		И ЗначениеЗаполнено(ОбъектСсылка["Клиент"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["Клиент"]);
	КонецЕсли;
	
КонецПроцедуры

#Область Автотекст

&НаКлиенте
Процедура Подключаемый_ВставитьТэг(Команда)
	ИмяКоманды = Команда.Имя;
	Если СтрНайти(ИмяКоманды, "АвтотекстТовары") > 0 Тогда
		ИмяКоманды = СтрЗаменить(ИмяКоманды, "АвтотекстТовары", "");
		МассивСтрок = ТаблицаАвтотекстаТовары.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Иначе
		ИмяКоманды = СтрЗаменить(ИмяКоманды, "АвтотекстРеквизиты", "");
		МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	КонецЕсли;
	Тэг = МассивСтрок[0].Тэг;
	
	Кнопка = "insertText";
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Кнопка) Тогда
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Кнопка, Ложь, Тэг);
	КонецЕсли;
	CRM_РаботаСHTMLКлиент.ПоказатьРежимыКнопок(ЭтотОбъект, Элементы.ПолеHTMLДокумента);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьТег(Команда)
	
	Элемент = СтрЗаменить(Команда.Имя, "МенюАвтотекстаСоздатьТег", "");
	Если Элемент = "АвтотекстТовары" Тогда
		Таблица = "ТаблицаАвтотекстаТовары";
		ИмяТЧ = "Товары";
	Иначе
		Таблица = "ТаблицаАвтотекста";
		ИмяТЧ = "";
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_СоздатьТегЗавершение", ЭтотОбъект, Новый Структура("Элемент, Таблица", Элемент, Таблица));
	CRM_АвтотекстКлиент.СоздатьТегАвтотекста(ЭтотОбъект, Команда, ИдентификаторМДОбъекта, ИмяТЧ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьТегЗавершение(ТегАвтотекста, ДопПараметры) Экспорт
	
	ИмяКоманды = ДобавитьКомандуАвтотекста(ТегАвтотекста, ДопПараметры);
	Команда = Команды.Найти(ИмяКоманды);
	Если Команда<>Неопределено Тогда
		Подключаемый_ВставитьТэг(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКомандуАвтотекста(ТегАвтотекста, ДопПараметры)
	
	Возврат CRM_АвтотекстПереопределяемый.ДобавитьКомандуАвтотекста(ЭтотОбъект, ТегАвтотекста, Ложь, Истина, , ДопПараметры.Таблица, ДопПараметры.Элемент);
	
КонецФункции

#КонецОбласти

#Область ПредупреждениеБезопасности

&НаКлиенте
Процедура ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьНебезопасноеСодержимое" Тогда
		ВключитьНебезопасноеСодержимоеНаСервере();
		Элементы.ГруппаПредупреждениеБезопасности.Видимость = Ложь;
		МассивПисем = Новый Массив;
		Для Каждого Элемент Из ОбъектыСсылки Цикл
			МассивПисем.Добавить(Элемент.ОбъектСсылка);
		КонецЦикла;
		Оповестить("ВключеноНебезопасноеСодержимое", МассивПисем, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьНебезопасноеСодержимоеНаСервере();
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ПисьмоОбъект = ОбъектСсылка.ПолучитьОбъект();
		ПисьмоОбъект.CRM_ВключитьНебезопасноеСодержимое = Истина;
		ПисьмоОбъект.Записать();
		СформироватьДокументПисьмо(Истина);
	Иначе
		Для Каждого Элемент Из ОбъектыСсылки Цикл
			ОбъектСсылка = Элемент.ОбъектСсылка;
			Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
				Или ОбъектСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
				Продолжить;
			КонецЕсли;
			Если Не ОбъектСсылка.CRM_ВключитьНебезопасноеСодержимое Тогда
				ПисьмоОбъект = ОбъектСсылка.ПолучитьОбъект();
				ПисьмоОбъект.CRM_ВключитьНебезопасноеСодержимое = Истина;
				ПисьмоОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		СформироватьДокументПисьмо();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСодержимоеДляВсехПисемОтправителяОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
		 НавигационнаяСсылкаФорматированнойСтроки,
		 СтандартнаяОбработка);
	ДоверенныеАдреса = ДобавитьВДоверенныеАдреса(ОбъектыСсылки);
	Оповестить("ДобавленДоверенныйАдрес", ДоверенныеАдреса, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ДобавитьВДоверенныеАдреса(Знач ОбъектыСсылки)
	
	ДоверенныеАдреса = Новый Массив;
	
	Для Каждого Элемент Из ОбъектыСсылки Цикл
		АдресЭлектроннойПочты = Элемент.ОбъектСсылка.ОтправительАдрес;
		НоваяЗапись = РегистрыСведений.CRM_ДоверенныеАдресаЭлектроннойПочты.СоздатьМенеджерЗаписи();
		НоваяЗапись.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
		НоваяЗапись.Записать();
		ДоверенныеАдреса.Добавить(АдресЭлектроннойПочты);
	КонецЦикла;
	
	Возврат ДоверенныеАдреса;
	
КонецФункции

#КонецОбласти

#КонецОбласти
