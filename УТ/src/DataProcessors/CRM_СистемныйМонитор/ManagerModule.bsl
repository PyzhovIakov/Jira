#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ВиджетПоддержка

Процедура ПолучитьДанныеПоддержки(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОперации = Новый Структура;
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения данных Монитора Портала 1С:ИТС'"));
	
	ДанныеМонитора = МониторПортала1СИТС.ДанныеМонитора();
	
	Если ПустаяСтрока(ДанныеМонитора.ИмяОшибки) Тогда
		ДополнительныеДанные = Неопределено;
		ИнтеграцияПодсистемБИП.ПриПолученииДополнительныхДанныхМонитора(
			ДополнительныеДанные,
			ПараметрыЗадания.ПараметрыПолученияДополнительныхДанных);
		МониторПортала1СИТСПереопределяемый.ПриПолученииДополнительныхДанныхМонитора(
			ДополнительныеДанные,
			ПараметрыЗадания.ПараметрыПолученияДополнительныхДанных);
		ДанныеМонитора.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ИначеЕсли ДанныеМонитора.ИмяОшибки <> "НеЗаполненыДанныеАутентификации" Тогда
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Не удалось получить данные Монитора Портала 1С:ИТС.'")
				+ Символы.ПС
				+ ДанныеМонитора.ИнформацияОбОшибке);
	КонецЕсли;
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение данных Монитора Портала 1С:ИТС'"));
	
	РезультатОперации.Вставить("ДанныеМонитора", ДанныеМонитора);
	
	ДанныеИТСОтраслевой = ДанныеИТСОтраслевой();
	РезультатОперации.Вставить("ДанныеИТСОтраслевой", ДанныеИТСОтраслевой);
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

Функция ДанныеИТСОтраслевой()
	
	Данные = Новый Структура;
	Данные.Вставить("Тип", 0);
	Данные.Вставить("ТипПредставление", НСтр("ru = 'Неизвестный'"));
	Данные.Вставить("Длительность", 0);
	Данные.Вставить("ДлительностьПредставление", НСтр("ru = 'Неизвестный'"));
	Данные.Вставить("ДатаНачала", '00010101');
	Данные.Вставить("ДатаОкончания", '00010101');
	Данные.Вставить("ПериодПредставление", НСтр("ru = 'Неизвестный'"));
	
	Серия = "";
	Если ПараметрыСеанса.CRM_ВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		Серия = "52BA";
	ИначеЕсли ПараметрыСеанса.CRM_ВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
		Серия = "32D6";
	ИначеЕсли ПараметрыСеанса.CRM_ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
		Серия = "6ACE";
	ИначеЕсли ПараметрыСеанса.CRM_ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАНДАРТ Тогда
		Серия = "1AAD";
	ИначеЕсли ПараметрыСеанса.CRM_ВариантПоставки = Перечисления.CRM_ВариантыПоставки.БАЗОВАЯ Тогда
		Серия = "BC07";
	КонецЕсли;
	МенеджерЗащиты = слкМенеджерЗащитыСервер.ПолучитьМенеджерОбъектовСерииЗащиты(Серия);
	
	МассивПараметровКлючей = МенеджерЗащиты.ПолучитьЛицензии(, Истина);
	
	Для Каждого ДанныеКлюча Из МассивПараметровКлючей Цикл
		
		Если ДанныеКлюча.KeyType <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Данные.Тип = ДанныеКлюча.IndustrySupportType;
		Данные.Длительность = ДанныеКлюча.IndustrySupportPeriod;
		Данные.ДатаНачала = ДанныеКлюча.IndustrySupportDate;
		Данные.ДатаОкончания = ДанныеКлюча.IndustrySupportEndDate;
		
		Если ДанныеКлюча.IndustrySupportPeriod <> 0 Тогда
			
			Данные.ТипПредставление = ТипИТСОтпраслевой(ДанныеКлюча.IndustrySupportType);
			
			Данные.ДлительностьПредставление = СтрокаСЧислом(";%1 день;;%1 дня;%1 дней;%1 дня",
				ДанныеКлюча.IndustrySupportPeriod, ВидЧисловогоЗначения.Количественное, "Л=ru; ЧН=0");
			
			СтрокаШаблон = НСтр("ru = 'с %1 по %2'");
			Данные.ПериодПредставление = СтрШаблон(СтрокаШаблон,
				Формат(ДанныеКлюча.IndustrySupportDate, "ДФ=dd.MM.yyyy"),
				Формат(ДанныеКлюча.IndustrySupportEndDate, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ТипИТСОтпраслевой(ИндексТипа)
	
	Типы = Новый Массив;
	Типы.Добавить(НСтр("ru = 'Неизвестный'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой для Базвых версий'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой 1-й Категории'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой 2-й Категории'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой 3-й Категории'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой 4-й Категории'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой 5-й Категории'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой Льготный'"));
	Типы.Добавить(НСтр("ru = '1С:КП Отраслевой КОРП для 1С:CRM'"));
	
	Если ТипЗнч(ИндексТипа) = Тип("Число") И ИндексТипа <= Типы.ВГраница() Тогда
		Возврат Типы[ИндексТипа];
	Иначе
		Возврат Типы[0];
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВиджетПочта

Процедура ПолучитьДанныеПочты(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = ПараметрыЗадания.ДатаНачала;
	ДатаОкончания = ПараметрыЗадания.ДатаОкончания;
	
	Доставка = ДанныеЗаданийДоставкиЭлектроннойПочты(ДатаНачала, ДатаОкончания);
	Ошибки = ДанныеОшибокРаботыСПочтой(ДатаНачала, ДатаОкончания);
	Статистика = СтатистикаУчетныхЗаписей(ДатаНачала, ДатаОкончания);
	Топ5 = Топ5УчетныхЗаписейПоКоличествуПисем(ДатаНачала, ДатаОкончания);
	
	Данные = Новый Структура;
	Данные.Вставить("Доставка", Доставка);
	Данные.Вставить("Ошибки", Ошибки);
	Данные.Вставить("Статистика", Статистика);
	Данные.Вставить("Топ5", ОбщегоНазначения.ТаблицаЗначенийВМассив(Топ5));
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция ДанныеЗаданийДоставкиЭлектроннойПочты(ДатаНачала, ДатаОкончания)
	
	Доставка = Новый Структура;
	
	ИспользуютсяПотокиДоставки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты");
	Доставка.Вставить("ИспользуютсяПотокиДоставки", ИспользуютсяПотокиДоставки);
	Если ИспользуютсяПотокиДоставки Тогда
		КоличествоПотоков = КоличествоПотоковДоставкиЭлектроннойПочты();
		Доставка.Вставить("КоличествоВключенныхПотоков", КоличествоПотоков);
	Иначе
		Доставка.Вставить("КоличествоВключенныхПотоков", 0);
	КонецЕсли;
	
	АктивныеЗадания = Новый Массив;
	ЗавершенныеЗадания = Новый Массив;
	
	СекундВНеделе = 7 * 60 * 60 * 24;
	СрокДавностиЗавершенныхЗаданий = НачалоДня(ДатаОкончания - СекундВНеделе);
	
	Если ИспользуютсяПотокиДоставки Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПотокиДоставкиПочты.НомерПотока КАК НомерПотока
		|ИЗ
		|	РегистрСведений.CRM_ПотокиДоставкиПочты КАК ПотокиДоставкиПочты");
		
		НомераПотоков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерПотока");
		
	Иначе
		
		НомераПотоков = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(0);
		
	КонецЕсли;
		
	Для Каждого НомерПотока Из НомераПотоков Цикл
		
		Если НомерПотока = 0 Тогда
			РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем;
		Иначе
			РегламентноеЗадание = Метаданные.РегламентныеЗадания["CRM_ПолучениеИОтправкаЭлектронныхПисемПоток" + НомерПотока];
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если НайденныеФоновыеЗадания.Количество() > 0 Тогда
			Задание = НайденныеФоновыеЗадания[0];
			ДанныеЗадания = Новый Структура;
			ДанныеЗадания.Вставить("НомерПотока", НомерПотока);
			ДанныеЗадания.Вставить("Начало", Задание.Начало);
			АктивныеЗадания.Добавить(ДанныеЗадания);
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
		СостоянияНеВыполняется = Новый Массив;
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.Завершено);
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.Отменено);
		Отбор.Вставить("Состояние", СостоянияНеВыполняется);
		Отбор.Вставить("Начало", СрокДавностиЗавершенныхЗаданий);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если НайденныеФоновыеЗадания.Количество() > 0 Тогда
			Для Каждого Задание Из НайденныеФоновыеЗадания Цикл
				ДанныеЗадания = Новый Структура;
				ДанныеЗадания.Вставить("НомерПотока", НомерПотока);
				ДанныеЗадания.Вставить("Конец", Задание.Конец);
				ЗавершенныеЗадания.Добавить(ДанныеЗадания);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ДоставкаВыполняется = (АктивныеЗадания.Количество() > 0);
	Доставка.Вставить("ДоставкаВыполняется", ДоставкаВыполняется);
	
	НачалоТекущегоЗапуска = '00010101';
	Если ДоставкаВыполняется Тогда
		НачалоТекущегоЗапуска = '39991231';
		Для Каждого Задание Из АктивныеЗадания Цикл
			Если Задание.Начало < НачалоТекущегоЗапуска Тогда
				НачалоТекущегоЗапуска = Задание.Начало;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Доставка.Вставить("НачалоТекущегоЗапуска", НачалоТекущегоЗапуска);
	
	КонецПредыдущегоЗапуска = СрокДавностиЗавершенныхЗаданий;
	Если ЗавершенныеЗадания.Количество() > 0 Тогда
		Для Каждого Задание Из ЗавершенныеЗадания Цикл
			Если Задание.Конец > КонецПредыдущегоЗапуска Тогда
				КонецПредыдущегоЗапуска = Задание.Конец;
			КонецЕсли;
		КонецЦикла;
		Доставка.Вставить("ЕстьЗавершенныеЗадания", Истина);
	Иначе
		Доставка.Вставить("ЕстьЗавершенныеЗадания", Ложь);
	КонецЕсли;
	Доставка.Вставить("КонецПредыдущегоЗапуска", КонецПредыдущегоЗапуска);
	
	Возврат Доставка;
	
КонецФункции

Функция КоличествоПотоковДоставкиЭлектроннойПочты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Потоки = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПотокиДоставкиПочты.НомерПотока) КАК Количество
	|ИЗ
	|	РегистрСведений.CRM_ПотокиДоставкиПочты КАК ПотокиДоставкиПочты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция ДанныеОшибокРаботыСПочтой(ДатаНачала, ДатаОкончания)
	
	ПараметрыОтчета = Новый Структура;
	
	ОтборЖурналаРегистрации = Новый Структура;
	ОтборЖурналаРегистрации.Вставить("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ДатаОкончания);
	
	ОтборУровень = Новый СписокЗначений;
	ОтборУровень.Добавить("Ошибка");
	ОтборЖурналаРегистрации.Вставить("Уровень", ОтборУровень);
	
	ИмяСобытияАвторизации = "Работа с почтовыми сообщениями.Авторизация на почтовом сервере";
	ИмяСобытияДоставки = "Работа с почтовыми сообщениями.Отправка почты";
	
	ОтборСобытие = Новый СписокЗначений;
	ОтборСобытие.Добавить(ИмяСобытияАвторизации);
	ОтборСобытие.Добавить(ИмяСобытияДоставки);
	ОтборЖурналаРегистрации.Вставить("Событие", ОтборСобытие);
	
	ПараметрыОтчета.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ПараметрыОтчета.Вставить("КоличествоПоказываемыхСобытий", 0);
	ПараметрыОтчета.Вставить("МенеджерВладельца", Обработки.ЖурналРегистрации);
	ПараметрыОтчета.Вставить("ДобавлятьДополнительныеКолонки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресХранилища);
	СобытияЖурнала = ПолучитьИзВременногоХранилища(АдресХранилища).СобытияЖурнала;
	
	КоличествоОшибокАвторизации = 0;
	КоличествоОшибокДоставки = 0;
	Для Каждого Строка Из СобытияЖурнала Цикл
		
		Если Строка.Событие = ИмяСобытияАвторизации Тогда
			КоличествоОшибокАвторизации = КоличествоОшибокАвторизации + 1;
		ИначеЕсли Строка.Событие = ИмяСобытияДоставки Тогда
			КоличествоОшибокДоставки = КоличествоОшибокДоставки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоОшибокАвторизации", КоличествоОшибокАвторизации);
	Результат.Вставить("КоличествоОшибокДоставки", КоличествоОшибокДоставки);
	
	Возврат Результат;
	
КонецФункции

Функция СтатистикаУчетныхЗаписей(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""КоличествоВсего"" КАК Тип,
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоОбщих"",
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка)
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|ГДЕ
	|	УчетныеЗаписи.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоОтключенных"",
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка)
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|ГДЕ
	|	НЕ УчетныеЗаписи.ИспользоватьДляОтправки
	|	И НЕ УчетныеЗаписи.ИспользоватьДляПолучения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоСОтключеннойОтправкой"",
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка)
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|ГДЕ
	|	НЕ УчетныеЗаписи.ИспользоватьДляОтправки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоСОтключеннымПолучением"",
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка)
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|ГДЕ
	|	НЕ УчетныеЗаписи.ИспользоватьДляПолучения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоСНевыполненнойДоставкой"",
	|	КОЛИЧЕСТВО(УчетныеЗаписи.Ссылка)
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыйЗагрузки
	|		ПО (ДатыйЗагрузки.УчетнаяЗапись = УчетныеЗаписи.Ссылка)
	|			И (ДатыйЗагрузки.ДатаЗагрузкиПисем МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|ГДЕ
	|	ДатыйЗагрузки.УчетнаяЗапись ЕСТЬ NULL");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	СтатистикаУчетныхЗаписей = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатистикаУчетныхЗаписей.Вставить(Выборка.Тип, Выборка.Количество);
	КонецЦикла;
	
	СтатистикаУчетныхЗаписей.Вставить("КоличествоПерсональных",
		СтатистикаУчетныхЗаписей.КоличествоВсего - СтатистикаУчетныхЗаписей.КоличествоОбщих);
	
	Возврат СтатистикаУчетныхЗаписей;
	
КонецФункции

Функция Топ5УчетныхЗаписейПоКоличествуПисем(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	КОЛИЧЕСТВО(ЭлектронноеПисьмоВходящее.Ссылка) КАК Количество
	|ПОМЕСТИТЬ КоличествоПисемЗаПериод
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.ДатаПолучения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись,
	|	КОЛИЧЕСТВО(ЭлектронноеПисьмоИсходящее.Ссылка)
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.ДатаОтправления МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 5
	|	КоличествоПисемЗаПериод.УчетнаяЗапись КАК Данные,
	|	ПРЕДСТАВЛЕНИЕ(КоличествоПисемЗаПериод.УчетнаяЗапись) КАК ПредставлениеДанных,
	|	СУММА(КоличествоПисемЗаПериод.Количество) КАК Количество
	|ИЗ
	|	КоличествоПисемЗаПериод КАК КоличествоПисемЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоПисемЗаПериод.УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Топ5 = Запрос.Выполнить().Выгрузить();
	Топ5.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Для Каждого Строка Из Топ5 Цикл
		Строка.Идентификатор = Строка(Строка.Данные.УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат Топ5;
	
КонецФункции

#КонецОбласти

#Область ВиджетТриггеры

Процедура ПолучитьДанныеТриггеров(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = ПараметрыЗадания.ДатаНачала;
	ДатаОкончания = ПараметрыЗадания.ДатаОкончания;
	
	Статистика = СтатистикаТриггеров(ДатаНачала, ДатаОкончания);
	Топ5 = Топ5ОшибокТриггеров(ДатаНачала, ДатаОкончания);
	
	Данные = Новый Структура;
	Данные.Вставить("Статистика", Статистика);
	Данные.Вставить("Топ5", ОбщегоНазначения.ТаблицаЗначенийВМассив(Топ5));
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция СтатистикаТриггеров(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""КоличествоВсего"" КАК Тип,
	|	КОЛИЧЕСТВО(Триггеры.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.CRM_Триггеры КАК Триггеры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоОтложенных"",
	|	КОЛИЧЕСТВО(Триггеры.Ссылка)
	|ИЗ
	|	Справочник.CRM_Триггеры КАК Триггеры
	|ГДЕ
	|	Триггеры.ОтложенноеВыполнение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоВключенных"",
	|	КОЛИЧЕСТВО(Триггеры.Ссылка)
	|ИЗ
	|	Справочник.CRM_Триггеры КАК Триггеры
	|ГДЕ
	|	Триггеры.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоОшибокУсловия"",
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	РегистрСведений.CRM_ЛогиТриггеров КАК ЛогиТриггеров
	|ГДЕ
	|	ЛогиТриггеров.ОшибкаУсловия
	|	И ЛогиТриггеров.ДатаСрабатывания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоОшибокДействия"",
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	РегистрСведений.CRM_ЛогиТриггеров КАК ЛогиТриггеров
	|ГДЕ
	|	ЛогиТриггеров.ОшибкаДействия
	|	И ЛогиТриггеров.ДатаСрабатывания МЕЖДУ &ДатаНачала И &ДатаОкончания");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	СтатистикаТриггеров = Новый Структура;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатистикаТриггеров.Вставить(Выборка.Тип, Выборка.Количество);
	КонецЦикла;
	
	СтатистикаТриггеров.Вставить("КоличествоСинхронных",
		СтатистикаТриггеров.КоличествоВсего - СтатистикаТриггеров.КоличествоОтложенных);
	
	Возврат СтатистикаТриггеров;
	
КонецФункции

Функция Топ5ОшибокТриггеров(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЛогиТриггеров.Триггер КАК Данные,
	|	ПРЕДСТАВЛЕНИЕ(ЛогиТриггеров.Триггер) КАК ПредставлениеДанных,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.CRM_ЛогиТриггеров КАК ЛогиТриггеров
	|ГДЕ
	|	ЛогиТриггеров.ДатаСрабатывания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ЛогиТриггеров.ОшибкаУсловия
	|			ИЛИ ЛогиТриггеров.ОшибкаДействия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогиТриггеров.Триггер");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	ДанныеОшибок = Запрос.Выполнить().Выгрузить();
	ДанныеОшибок.Сортировать("Количество Убыв");
	
	Топ5 = Новый ТаблицаЗначений;
	Топ5.Колонки.Добавить("Данные", Новый ОписаниеТипов("СправочникСсылка.CRM_Триггеры"));
	Топ5.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Топ5.Колонки.Добавить("ПредставлениеДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Топ5.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Сч = 1 По Мин(ДанныеОшибок.Количество(), 5) Цикл
		ИсходнаяСтрока = ДанныеОшибок[Сч-1];
		НоваяСтрока = Топ5.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Идентификатор = Строка(ИсходнаяСтрока.Данные.УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат Топ5;
	
КонецФункции

#КонецОбласти

#Область ВиджетРегламентныеЗадания

Процедура ПолучитьДанныеРегламентныхЗаданий(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ПараметрыЗадания.ДатаАктуальности;
	ДатаНачала = ПараметрыЗадания.ДатаНачала;
	ДатаОкончания = ПараметрыЗадания.ДатаОкончания;
	
	Топ5 = Топ5ДлительностиРегламентныхЗаданий(ТекущаяДата, ДатаНачала, ДатаОкончания);
	Статистика = СтатистикаРегламентныхЗаданий(ДатаНачала, ДатаОкончания);
	
	Данные = Новый Структура;
	Данные.Вставить("Топ5", ОбщегоНазначения.ТаблицаЗначенийВМассив(Топ5));
	Данные.Вставить("Статистика", Статистика);
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция Топ5ДлительностиРегламентныхЗаданий(ТекущаяДата, ДатаНачала, ДатаОкончания)
	
	ЗаданияДляТоп5 = Новый ТаблицаЗначений;
	ЗаданияДляТоп5.Колонки.Добавить("Данные");
	ЗаданияДляТоп5.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ЗаданияДляТоп5.Колонки.Добавить("ПредставлениеДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ЗаданияДляТоп5.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 1, ДопустимыйЗнак.Неотрицательный));
	
	ВсеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого РегламентноеЗадание Из ВсеРегламентныеЗадания Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		Отбор.Вставить("Начало", ДатаНачала);
		Отбор.Вставить("Конец", ДатаОкончания);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если НайденныеФоновыеЗадания.Количество() > 0 Тогда
			
			НаименованиеЗадания = РегламентноеЗадание.Наименование;
			Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
				НаименованиеЗадания = РегламентноеЗадание.Метаданные.Синоним;
			КонецЕсли;
			
			Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
				
				Если ФоновоеЗадание.ИмяМетода = "CRM_РаботаСМессенджерамиСервер.ОжиданиеСобытийМессенджера" Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ЗаданияДляТоп5.Добавить();
				НоваяСтрока.ПредставлениеДанных = НаименованиеЗадания;
				НоваяСтрока.Данные = Строка(РегламентноеЗадание.УникальныйИдентификатор);
				НоваяСтрока.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
				Если ЗначениеЗаполнено(ФоновоеЗадание.Конец) Тогда
					НоваяСтрока.Количество = ФоновоеЗадание.Конец - ФоновоеЗадание.Начало;
				Иначе
					НоваяСтрока.Количество = ТекущаяДата - ФоновоеЗадание.Начало;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаданияДляТоп5.Свернуть("Данные,Идентификатор,ПредставлениеДанных", "Количество");
	ЗаданияДляТоп5.Сортировать("Количество Убыв");
	
	Топ5 = ЗаданияДляТоп5.СкопироватьКолонки();
	Для Сч = 1 По Мин(ЗаданияДляТоп5.Количество(), 5) Цикл
		ИсходнаяСтрока = ЗаданияДляТоп5[Сч-1];
		Если ИсходнаяСтрока.Количество > 0 Тогда
			НоваяСтрока = Топ5.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			НоваяСтрока.Количество = Окр(ИсходнаяСтрока.Количество / 60, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Топ5;
	
КонецФункции

Функция СтатистикаРегламентныхЗаданий(ДатаНачала, ДатаОкончания)
	
	КоличествоТекущих = 0;
	КоличествоЗапущенных = 0;
	КоличествЗавершенных = 0;
	КоличествоЗавершенныхСОшибками = 0;
	
	ВсеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого РегламентноеЗадание Из ВсеРегламентныеЗадания Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
			КоличествоТекущих = КоличествоТекущих + 1;
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		Отбор.Вставить("Начало", ДатаНачала);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
			КоличествоЗапущенных = КоличествоЗапущенных + 1;
		КонецЦикла;
		
		СекундВНеделе = 7 * 60 * 60 * 24;
		СрокДавностиЗавершенныхЗаданий = НачалоДня(ДатаОкончания - СекундВНеделе);
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		Отбор.Вставить("Начало", СрокДавностиЗавершенныхЗаданий);
		СостоянияНеВыполняется = Новый Массив;
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.Завершено);
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.Отменено);
		Отбор.Вставить("Состояние", СостоянияНеВыполняется);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
			Если ФоновоеЗадание.Конец >= ДатаНачала Тогда
				КоличествЗавершенных = КоличествЗавершенных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		Отбор.Вставить("Начало", СрокДавностиЗавершенныхЗаданий);
		СостоянияНеВыполняется = Новый Массив;
		СостоянияНеВыполняется.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
		Отбор.Вставить("Состояние", СостоянияНеВыполняется);
		НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
			Если ФоновоеЗадание.Конец >= ДатаНачала Тогда
				КоличествоЗавершенныхСОшибками = КоличествоЗавершенныхСОшибками + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеСтатистики = Новый Структура;
	ДанныеСтатистики.Вставить("КоличествоТекущих", КоличествоТекущих);
	ДанныеСтатистики.Вставить("КоличествоЗапущенных", КоличествоЗапущенных);
	ДанныеСтатистики.Вставить("КоличествЗавершенных", КоличествЗавершенных);
	ДанныеСтатистики.Вставить("КоличествоЗавершенныхСОшибками", КоличествоЗавершенныхСОшибками);
	
	Возврат ДанныеСтатистики;
	
КонецФункции

#КонецОбласти

#Область ВиджетФайлы

Процедура ПолучитьДанныеФайлов(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Топ5 = Топ5ОбъектовПоОбъемуФайлов();
	
	Данные = Новый Структура;
	Данные.Вставить("Топ5",  ОбщегоНазначения.ТаблицаЗначенийВМассив(Топ5));
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция Топ5ОбъектовПоОбъемуФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКоличестваИПолногоОбъемаФайлов();
	
	ФайлыДляТоп5 = Запрос.Выполнить().Выгрузить();
	ФайлыДляТоп5.Сортировать("Объем Убыв, Количество Убыв");
	
	Топ5 = Новый ТаблицаЗначений;
	Топ5.Колонки.Добавить("Данные");
	Топ5.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Топ5.Колонки.Добавить("ПредставлениеДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Топ5.Колонки.Добавить("Объем", ОбщегоНазначения.ОписаниеТипаЧисло(12, 2, ДопустимыйЗнак.Неотрицательный));
	Топ5.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Сч = 1 По Мин(ФайлыДляТоп5.Количество(), 5) Цикл
		ИсходнаяСтрока = ФайлыДляТоп5[Сч-1];
		НоваяСтрока = Топ5.Добавить();
		НоваяСтрока.Данные = Строка(ИсходнаяСтрока.ВладелецФайлов);
		НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.ПредставлениеДанных = Строка(ИсходнаяСтрока.ВладелецФайлов);
		НоваяСтрока.Количество = ИсходнаяСтрока.Количество;
		НоваяСтрока.Объем = Окр(ИсходнаяСтрока.Объем, 2);
	КонецЦикла;
	
	Возврат Топ5;
	
КонецФункции

Функция ТекстЗапросаКоличестваИПолногоОбъемаФайлов()
	
	МетаданныеСправочники = Метаданные.Справочники;
	
	ДобавитьПсевдонимПоля = Истина;
	
	ТекстЗапроса = "";
	Для Каждого Справочник Из МетаданныеСправочники Цикл
		Если Справочник.Реквизиты.Найти("ВладелецФайла") <> Неопределено Тогда
			
			ЕстьВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Справочник);
			Если ЕстьВозможностьХранитьВерсии Тогда
				СправочникВерсийФайлов =
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Справочник.Реквизиты.ТекущаяВерсия.Тип.Типы()[0]);
				ПолноеИмяСправочникаВерсийФайлов = СправочникВерсийФайлов.ПолноеИмя;
				
				ЧастьТекстаЗапроса = "
					|ВЫБРАТЬ
					|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ВладелецФайлов,
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файлы.Ссылка) КАК Количество,
					|	СУММА(ЕСТЬNULL(ВерсииФайлов.Размер, Файлы.Размер)) / 1024 / 1024 КАК Объем
					|ИЗ
					|	#ИмяСправочника КАК Файлы
					|		ЛЕВОЕ СОЕДИНЕНИЕ #ПолноеИмяСправочникаВерсийФайлов КАК ВерсииФайлов
					|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
					|
					|СГРУППИРОВАТЬ ПО
					|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла)
					|
					|ИМЕЮЩИЕ
					|	СУММА(ЕСТЬNULL(ВерсииФайлов.Размер, Файлы.Размер)) > 0";
				
				ЧастьТекстаЗапроса = СтрЗаменить(ЧастьТекстаЗапроса, "#ИмяСправочника", "Справочник." + Справочник.Имя);
				ЧастьТекстаЗапроса = СтрЗаменить(ЧастьТекстаЗапроса, "#ПолноеИмяСправочникаВерсийФайлов",
					ПолноеИмяСправочникаВерсийФайлов);
				
				ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"", " ОБЪЕДИНИТЬ ВСЕ ") + ЧастьТекстаЗапроса;
				
				Если ДобавитьПсевдонимПоля Тогда
					ДобавитьПсевдонимПоля = Ложь;
				КонецЕсли;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"", " ОБЪЕДИНИТЬ ВСЕ") + "
					|
					|ВЫБРАТЬ
					|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) " + ?(ДобавитьПсевдонимПоля, "КАК ВладелецФайлов,",",") + "
					|	КОЛИЧЕСТВО(Файлы.Ссылка) " + ?(ДобавитьПсевдонимПоля, "КАК Количество,",",") + "
					|	СУММА(Файлы.Размер) / 1024 / 1024 " + ?(ДобавитьПсевдонимПоля, "КАК Объем","") + "
					|ИЗ
					|	Справочник." + Справочник.Имя + " КАК Файлы
					|
					|СГРУППИРОВАТЬ ПО
					|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла)
					|
					|ИМЕЮЩИЕ
					|	СУММА(Файлы.Размер) > 0";
					
				Если ДобавитьПсевдонимПоля Тогда
					ДобавитьПсевдонимПоля = Ложь;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВиджетЖурналРегистрации

Процедура ПолучитьДанныеЖурналаРегистрации(ПараметрыЗадания, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Топ5 = Топ5СобытийЖурналаРегистрации(ПараметрыЗадания.ДатаНачала, ПараметрыЗадания.ДатаОкончания);
	
	Данные = Новый Структура;
	Данные.Вставить("Топ5", ОбщегоНазначения.ТаблицаЗначенийВМассив(Топ5));
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция Топ5СобытийЖурналаРегистрации(ДатаНачала, ДатаОкончания)
	
	ПараметрыОтчета = Новый Структура;
	
	ОтборЖурналаРегистрации = Новый Структура;
	ОтборЖурналаРегистрации.Вставить("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ДатаОкончания);
	
	ОтборУровень = Новый СписокЗначений;
	ОтборУровень.Добавить("Ошибка");
	ОтборЖурналаРегистрации.Вставить("Уровень", ОтборУровень);
	
	ПараметрыОтчета.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ПараметрыОтчета.Вставить("КоличествоПоказываемыхСобытий", 0);
	ПараметрыОтчета.Вставить("МенеджерВладельца", Обработки.ЖурналРегистрации);
	ПараметрыОтчета.Вставить("ДобавлятьДополнительныеКолонки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресХранилища);
	СобытияЖурнала = ПолучитьИзВременногоХранилища(АдресХранилища).СобытияЖурнала;
	
	ТипСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипЧисло10 = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
	
	СобытияДляТоп5 = Новый ТаблицаЗначений;
	СобытияДляТоп5.Колонки.Добавить("ПредставлениеДанных", ТипСтрока0);
	СобытияДляТоп5.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	СобытияДляТоп5.Колонки.Добавить("Данные", Новый ОписаниеТипов("Массив"));
	СобытияДляТоп5.Колонки.Добавить("Количество", ТипЧисло10);
	
	Для Каждого СтрокаЖурнала Из СобытияЖурнала Цикл
		ПредставлениеДанных = СтрокаЖурнала.ПредставлениеСобытия;
		ПозицияРазделителя = СтрНайти(ПредставлениеДанных, ".");
		Если ПозицияРазделителя > 0 Тогда
			ПредставлениеДанных = Лев(ПредставлениеДанных, ПозицияРазделителя-1);
		КонецЕсли;
		СтрокаТоп5 = СобытияДляТоп5.Найти(ПредставлениеДанных, "ПредставлениеДанных");
		Если СтрокаТоп5 = Неопределено Тогда
			СтрокаТоп5 = СобытияДляТоп5.Добавить();
			СтрокаТоп5.ПредставлениеДанных = ПредставлениеДанных;
			СтрокаТоп5.Идентификатор = Строка(Новый УникальныйИдентификатор);
			СтрокаТоп5.Данные = Новый Массив;
			СтрокаТоп5.Данные.Добавить(СтрокаЖурнала.Событие);
			СтрокаТоп5.Количество = 1;
		Иначе
			Если СтрокаТоп5.Данные.Найти(СтрокаЖурнала.Событие) = Неопределено Тогда
				СтрокаТоп5.Данные.Добавить(СтрокаЖурнала.Событие);
			КонецЕсли;
			СтрокаТоп5.Количество = СтрокаТоп5.Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	СобытияДляТоп5.Сортировать("Количество Убыв, ПредставлениеДанных Возр");
	
	Топ5 = СобытияДляТоп5.СкопироватьКолонки();
	Для Сч = 1 По Мин(СобытияДляТоп5.Количество(), 5) Цикл
		ЗаполнитьЗначенияСвойств(Топ5.Добавить(), СобытияДляТоп5[Сч-1]);
	КонецЦикла;
	
	Возврат Топ5;
	
КонецФункции

#КонецОбласти

#КонецЕсли
