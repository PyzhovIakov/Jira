
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИницализироватьКонтекст();
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПриСозданииНаСервере(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиКлиент.ПриОткрытииФормы(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	ЗапуститьОбновлениеВиджетов(Контекст.ИменаВиджетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыполнениеВсехЗаданий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВиджетОбновитьНажатие(Элемент)
	
	ИмяВиджета = СтрЗаменить(Элемент.Имя, "Обновить", "");
	ЗапуститьОбновлениеВиджетов(ИмяВиджета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиджетПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВиджета = Элемент.Имя;
	Если СтрНайти(ДанныеСсылки, "ERROR_STATE_LINK") > 0 Тогда
		
		ТекстОшибки = Контекст.СостояниеВиджетов[ИмяВиджета].ТекстОшибки;
		ВызватьИсключение ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	Если ИмяВиджета = "ВиджетПоддержка" Тогда
		ВиджетПоддержкаПриНажатии(Элемент, ДанныеСсылки);
	ИначеЕсли ИмяВиджета = "ВиджетПочта" Тогда
		ВиджетПочтаПриНажатии(Элемент, ДанныеСсылки);
	ИначеЕсли ИмяВиджета = "ВиджетТриггеры" Тогда
		ВиджетТриггерыПриНажатии(Элемент, ДанныеСсылки);
	ИначеЕсли ИмяВиджета = "ВиджетРегламентныеЗадания" Тогда
		ВиджетРегламентныеЗаданияПриНажатии(Элемент, ДанныеСсылки);
	ИначеЕсли ИмяВиджета = "ВиджетФайлы" Тогда
		ВиджетФайлыПриНажатии(Элемент, ДанныеСсылки);
	ИначеЕсли ИмяВиджета = "ВиджетЖурналРегистрации" Тогда
		ВиджетЖурналРегистрацииПриНажатии(Элемент, ДанныеСсылки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиджетДатаАктуальностиОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяВиджета = СтрЗаменить(Элемент.Имя, "ДатаАктуальности", "");
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	ПредставленияПериодов = ПредставленияПериодовВиджетов();
	
	СписокПериодов = Новый СписокЗначений;
	Для Каждого Элемент Из ПредставленияПериодов Цикл
		НовыйЭлемент = СписокПериодов.Добавить(Элемент.Ключ, Элемент.Значение);
		Если Элемент.Ключ = СостояниеВиджета.ВидПериода Тогда
			НовыйЭлемент.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяВиджета", ИмяВиджета);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(
		"ВиджетДатаАктуальностиОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокПериодов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиджетДатаАктуальностиОбработкаНавигационнойСсылкиЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВиджета = ДопПараметры.ИмяВиджета;
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.ВидПериода = ВыбранныйЭлемент.Значение;
	
	ЗапуститьОбновлениеВиджетов(ИмяВиджета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВсеДанные(Команда)
	
	ЗапуститьОбновлениеВиджетов(Контекст.ИменаВиджетов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеДанных

&НаКлиенте
Процедура ЗапуститьОбновлениеВиджетов(Знач ИменаВиджетов)
	
	Если ТипЗнч(ИменаВиджетов) = Тип("Строка") Тогда
		ИменаВиджетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИменаВиджетов);
	КонецЕсли;
	
	ЗапуститьОбновлениеВиджетовНаСервере(ИменаВиджетов);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Для Каждого ИмяВиджета Из ИменаВиджетов Цикл
		Задание = Неопределено;
		Если Контекст.Задания.Свойство(ИмяВиджета, Задание) Тогда
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				Задание,
				Новый ОписаниеОповещения("ЗавершитьОбновлениеВиджета", ЭтотОбъект, ИмяВиджета),
				ПараметрыОжидания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьОбновлениеВиджетовНаСервере(Знач ИменаВиджетов)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НеЗаполнятьВиджеты = Новый Массив;
	Для Каждого ИмяВиджета Из ИменаВиджетов Цикл
		ЗаполнятьВиджет = Истина;
		ПроверитьВозможностьЗаполненияВиджета(ИмяВиджета, ЗаполнятьВиджет);
		Если Не ЗаполнятьВиджет Тогда
			НеЗаполнятьВиджеты.Добавить(ИмяВиджета);
		КонецЕсли;
	КонецЦикла;
	ИменаВиджетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИменаВиджетов, НеЗаполнятьВиджеты);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Для Каждого ИмяВиджета Из ИменаВиджетов Цикл
		
		Задание = Неопределено;
		Если Контекст.Задания.Свойство(ИмяВиджета, Задание) Тогда
			ДлительныеОперации.ОтменитьВыполнениеЗадания(Задание.ИдентификаторЗадания);
			Контекст.Задания.Удалить(ИмяВиджета);
		КонецЕсли;
		
		ПараметрыВиджета = Контекст.ПараметрыВиджетов[ИмяВиджета];
		СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
		
		СостояниеВиджета.ДатаАктуальности = ТекущаяДата;
		Если ПараметрыВиджета.ЕстьПериодАктуальности Тогда
			ЗаполнитьПериодАктуальности(ТекущаяДата, СостояниеВиджета);
		КонецЕсли;
		
		ПараметрыВыполнения.КлючФоновогоЗадания = ИмяВиджета;
		ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		ПараметрыЗадания = ПараметрыЗаданияОбновленияДанныхВиджета(ИмяВиджета);
		ПараметрыЗадания.Вставить("ДатаАктуальности", СостояниеВиджета.ДатаАктуальности);
		Если ПараметрыВиджета.ЕстьПериодАктуальности Тогда
			ПараметрыЗадания.Вставить("ДатаНачала", СостояниеВиджета.ДатаНачала);
			ПараметрыЗадания.Вставить("ДатаОкончания", СостояниеВиджета.ДатаОкончания);
		КонецЕсли;
		
		Задание = ДлительныеОперации.ВыполнитьВФоне(
			ПараметрыВиджета.ИмяПроцедуры,
			ПараметрыЗадания,
			ПараметрыВыполнения);
		
		Если Задание.Статус = "Выполняется" Тогда
			
			Контекст.Задания.Вставить(ИмяВиджета, Задание);
			ОтобразитьСостояниеВиджетаФормируется(ИмяВиджета);
			
		ИначеЕсли Задание.Статус = "Выполнено" Тогда
			
			ЗаполнитьДанныеВиджета(ИмяВиджета, Задание.АдресРезультата);
			
		ИначеЕсли Задание.Статус = "Отменено" Тогда
			
			//МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			//	НСтр("ru = 'Не удалось отобразить данные Монитора. Задание получение данных Монитора отменено администратором.'"));
			//ОтобразитьСостояниеОшибка(НСтр("ru = 'Задание отменено администратором.'"), "", Ложь);
			
		Иначе
			
			// Ошибка.
			//СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//	НСтр("ru = 'Не удалось получить данные Монитора.
			//		|%1'"),
			//	РезультатВыполнения.ПодробноеПредставлениеОшибки);
			//МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			//ОтобразитьСостояниеОшибка(
			//	РезультатВыполнения.КраткоеПредставлениеОшибки,
			//	РезультатВыполнения.ПодробноеПредставлениеОшибки,
			//	Ложь);
			ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, Задание.ПодробноеПредставлениеОшибки);
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеВиджета(Результат, ИмяВиджета) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗаполнитьДанныеВиджета(ИмяВиджета, Результат.АдресРезультата);
		Контекст.Задания.Удалить(ИмяВиджета);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, Результат.ПодробноеПредставлениеОшибки);
		Контекст.Задания.Удалить(ИмяВиджета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьЗаполненияВиджета(ИмяВиджета, ЗаполнятьВиджет)
	
	
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаданияОбновленияДанныхВиджета(ИмяВиджета)
	
	ПараметрыЗадания = Новый Структура;
	
	Если ИмяВиджета = "ВиджетПоддержка" Тогда
		ПараметрыПолученияДополнительныхДанных = Неопределено;
		ИнтеграцияПодсистемБИП.ПередПолучениемДанныхМонитора(
			ЭтотОбъект,
			ПараметрыПолученияДополнительныхДанных);
		МониторПортала1СИТСПереопределяемый.ПередПолучениемДанныхМонитора(
			ЭтотОбъект,
			ПараметрыПолученияДополнительныхДанных);
		ПараметрыЗадания.Вставить("ПараметрыПолученияДополнительныхДанных", ПараметрыПолученияДополнительныхДанных);
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Процедура ОтобразитьСостояниеВиджетаФормируется(ИмяВиджета)
	
	ПараметрыВиджета = Контекст.ПараметрыВиджетов[ИмяВиджета];
	
	Контекст.СостояниеВиджетов[ИмяВиджета].Сформирован = Ложь;
	Контекст.СостояниеВиджетов[ИмяВиджета].Ошибка = Истина;
	Контекст.СостояниеВиджетов[ИмяВиджета].ТекстОшибки = "";
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("ШаблонВиджетФормируется").ПолучитьТекст();
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "PRELOADER_URL", Контекст.АдресПрелоадера);
	ЭтотОбъект[ИмяВиджета] = ТекстВиджета;
	
	Элементы[ИмяВиджета + "ДатаАктуальности"].Заголовок = НСтр("ru = 'Получение данных'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, ПредставлениеОшибки)
	
	ПараметрыВиджета = Контекст.ПараметрыВиджетов[ИмяВиджета];
	
	Контекст.СостояниеВиджетов[ИмяВиджета].Сформирован = Истина;
	Контекст.СостояниеВиджетов[ИмяВиджета].Ошибка = Истина;
	Контекст.СостояниеВиджетов[ИмяВиджета].ТекстОшибки = ПредставлениеОшибки;
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("ШаблонВиджетОшибка").ПолучитьТекст();
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "IMAGE_URL", Контекст.АдресКартинкиОшибка);
	ЭтотОбъект[ИмяВиджета] = ТекстВиджета;
	
	Элементы[ИмяВиджета + "ДатаАктуальности"].Заголовок = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджета(ИмяВиджета, АдресРезультата)
	
	Контекст.СостояниеВиджетов[ИмяВиджета].Сформирован = Истина;
	Контекст.СостояниеВиджетов[ИмяВиджета].Ошибка = Ложь;
	Контекст.СостояниеВиджетов[ИмяВиджета].ТекстОшибки = "";
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ИмяВиджета = "ВиджетПоддержка" Тогда
		ЗаполнитьДанныеВиджетаПоддержка(Результат);
	ИначеЕсли ИмяВиджета = "ВиджетПочта" Тогда
		ЗаполнитьДанныеВиджетаПочта(Результат);
	ИначеЕсли ИмяВиджета = "ВиджетТриггеры" Тогда
		ЗаполнитьДанныеВиджетаТриггеры(Результат);
	ИначеЕсли ИмяВиджета = "ВиджетРегламентныеЗадания" Тогда
		ЗаполнитьДанныеВиджетаРегламентныеЗадания(Результат);
	ИначеЕсли ИмяВиджета = "ВиджетФайлы" Тогда
		ЗаполнитьДанныеВиджетаФайлы(Результат);
	ИначеЕсли ИмяВиджета = "ВиджетЖурналРегистрации" Тогда
		ЗаполнитьДанныеВиджетаЖурналРегистрации(Результат);
	КонецЕсли;
	
	ЗаполнитьПредставлениеДатыАктуальности(ИмяВиджета);
	
КонецПроцедуры

#КонецОбласти

#Область ВиджетПоддержка

&НаКлиенте
Процедура ВиджетПоддержкаПриНажатии(Элемент, ДанныеСсылки)
	
	Если СтрНайти(ДанныеСсылки, "ITS_LINK") > 0 Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьЛичныйКабинетПользователя();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "SERVICE_RENEW_LINK") > 0 Тогда
		
		ПерейтиПоНавигационнойСсылке("https://rarus.ru/1c/its-otraslevoi/");
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "SUPPORT_LINK") > 0 Тогда
		
		ОткрытьФорму("Обработка.МониторПортала1СИТС.Форма");
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "UPDATE_LINK") > 0 Тогда
		
		ОткрытьФорму("Обработка.МониторПортала1СИТС.Форма");
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "SERVICE_LINK") > 0 Тогда
		
		ОткрытьФорму("Обработка.МониторПортала1СИТС.Форма");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджетаПоддержка(РезультатОперацииСервиса)
	
	ДанныеМонитора = РезультатОперацииСервиса.ДанныеМонитора;
	
	ИмяВиджета = "ВиджетПоддержка";
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	Если ПустаяСтрока(ДанныеМонитора.ИмяОшибки) Тогда
		
		Если Не ДанныеМонитора.Данные.authResult.authenticated Тогда
			
			ТекстОшибки = НСтр("ru = 'Некорректные данные аутентификации пользователя Интернет-поддержки.
				|Не подключена Интернет-поддержка пользователей.'");
			ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, ТекстОшибки);
			
		Иначе
			
			ОтобразитьСодержимоеМонитора(ДанныеМонитора, ТекстВиджета);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеМонитора.ИмяОшибки = "ОшибкаСоединения" Тогда
		
		ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, РезультатОперацииСервиса.ИнформацияОбОшибке);
		
	ИначеЕсли ДанныеМонитора.ИмяОшибки = "НеЗаполненыДанныеАутентификации"
		Или ДанныеМонитора.ИмяОшибки = "НекорректныеДанныеАутентификации" Тогда
		
		ТекстОшибки = НСтр("ru = 'Некорректные данные аутентификации пользователя Интернет-поддержки.
			|Не подключена Интернет-поддержка пользователей.'");
		ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, ТекстОшибки);
		
	Иначе
		
		ОтобразитьСостояниеВиджетаОшибка(ИмяВиджета, РезультатОперацииСервиса.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	ДанныеИТСОтраслевой = РезультатОперацииСервиса.ДанныеИТСОтраслевой;
	ОтобразитьДанные1СКПОтпрслевой(ДанныеИТСОтраслевой, ТекстВиджета);
	
	ВиджетПоддержка = ТекстВиджета;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСодержимоеМонитора(ДанныеМонитора, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "LOGO_URL", Контекст.АдресЛоготипа);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	Данные = ДанныеМонитора.Данные;
	Логин = ДанныеМонитора.Логин;
	
	Если Контекст.Домен <> ДанныеМонитора.Домен Тогда
		Контекст.Домен = ДанныеМонитора.Домен;
	КонецЕсли;
	
	СохранитьОтпечатокДанныхМонитора(Логин, Данные);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "PROGRAM_NAME", Данные.programName);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "ITS_LOGIN", Логин);
	
	Если Данные.supportConditionsImplStatus.blockStatus <> "200"
		И Данные.supportConditionsImplStatus.blockStatus <> 200 Тогда
		ОтобразитьБлокУсловияСопровожденияОшибка(Данные, ТекстВиджета);
	ИначеЕсли Данные.supportConditionsImplStatus.status = "NOT_COMPLIED" Тогда
		ОтобразитьБлокУсловияСопровожденияНеВыполнены(Данные, ТекстВиджета);
	Иначе
		ОтобразитьБлокУсловияСопровожденияВыполнены(Данные, ТекстВиджета);
	КонецЕсли;
	
	Если Данные.serviceContractsStatus.blockStatus <> "200"
		И Данные.serviceContractsStatus.blockStatus <> 200 Тогда
		ОтобразитьБлокДоговорыНаСервисыОшибка(ТекстВиджета);
	Иначе
		ОтобразитьБлокДоговорыНаСервисы(Данные, ТекстВиджета);
	КонецЕсли;
	
	Если Данные.updateInfo <> Неопределено
		И Данные.updateInfo.blockStatus <> "200"
		И Данные.updateInfo.blockStatus <> 200
		Или Данные.patchesInfo <> Неопределено
		И Данные.patchesInfo.blockStatus <> "200"
		И Данные.patchesInfo.blockStatus <> 200 Тогда
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_HEADER", НСтр("ru = 'Обновление программы'"));
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_DETAILS_HIDDEN", "hidden");
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_ICON", Контекст.АдресКартинкиВнимание);
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_HIDDEN", "");
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_TEXT",
			НСтр("ru = 'Не удалось получить информацию о доступном обновлении программы'"));
	Иначе
		ОтобразитьБлокОбновлениеПрограммы(Данные, ТекстВиджета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора)
	
	Если ДанныеМонитора.supportConditionsImplStatus <> Неопределено
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> "200"
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> 200
		Или ДанныеМонитора.serviceContractsStatus <> Неопределено
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> "200"
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> 200
		Или ДанныеМонитора.updateInfo <> Неопределено
		И ДанныеМонитора.updateInfo.blockStatus <> "200"
		И ДанныеМонитора.updateInfo.blockStatus <> 200
		Или ДанныеМонитора.patchesInfo <> Неопределено
		И ДанныеМонитора.patchesInfo.blockStatus <> "200"
		И ДанныеМонитора.patchesInfo.blockStatus <> 200 Тогда
		// При ошибке получения данных не сохранять отпечаток.
		Возврат;
	КонецЕсли;
	
	МониторПортала1СИТС.СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокУсловияСопровожденияВыполнены(ДанныеМонитора, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_HEADER", НСтр("ru = 'Условия сопровождения выполнены'")); 
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_DETAILS_HIDDEN", "hidden");
	
	ВыполнениеУсловий = ДанныеМонитора.supportConditionsImplStatus;
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.itsStatus)
		И Не ЗначениеЗаполнено(ВыполнениеУсловий.supportServiceActivationStatus) Тогда
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_ICON", Контекст.АдресКартинкиУспешно);
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_HIDDEN", "hidden");
	Иначе
		Если ВыполнениеУсловий.status = "WARNING" Тогда
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_ICON", Контекст.АдресКартинкиВнимание);
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_HIDDEN", "");
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_TEXT", НСтр("ru = 'Обратите внимание'"));
		Иначе
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_ICON", Контекст.АдресКартинкиУспешно);
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_HIDDEN", "");
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_TEXT", НСтр("ru = 'Посмотреть детали'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокУсловияСопровожденияНеВыполнены(ДанныеМонитора, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_ICON", Контекст.АдресКартинкиВнимание);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_HEADER", НСтр("ru = 'Условия сопровождения не выполнены'"));
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_DETAILS_HIDDEN", "hidden");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_HIDDEN", "");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_TEXT", НСтр("ru = 'Правила сопровождения программного продукта'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокУсловияСопровожденияОшибка(Данные, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_ICON", Контекст.АдресКартинкиВнимание);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_HEADER",
		НСтр("ru = 'Условия сопровождения'"));
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_DETAILS_HIDDEN", "");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_LINK_HIDDEN", "hidden");
	
	ТекстОшибки = НСтр("ru = 'Не удалось получить информацию о выполнении условий сопровождения программного продукта.
		|Повторите попытку позднее.'");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SUPPORT_DETAILS", ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокОбновлениеПрограммы(ДанныеМонитора, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_HEADER", НСтр("ru = 'Обновление программы'"));
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_DETAILS_HIDDEN", "hidden");
	
	ДоступнаУстановкаИсправлений = ДанныеМонитора.patchesInfo <> Неопределено
		И (ДанныеМонитора.patchesInfo.blockStatus = "200"
		Или ДанныеМонитора.patchesInfo.blockStatus = 200)
		И ДанныеМонитора.patchesInfo.patchesAvailable;
	
	Если ДанныеМонитора.ДоступноОбновление Тогда
		Если ДанныеМонитора.updateInfo <> Неопределено
			И (ДанныеМонитора.updateInfo.blockStatus = "200"
			Или ДанныеМонитора.updateInfo.blockStatus = 200)
			И Не ДанныеМонитора.updateInfo.updateAvailable
			И АвтоматическаяЗагрузкаИсправленийВключена() Тогда
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_ICON", Контекст.АдресКартинкиУспешно);
		Иначе
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_ICON", Контекст.АдресКартинкиВнимание);
		КонецЕсли;
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_HIDDEN", "");
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_TEXT", НСтр("ru = 'Доступно обновление программы'"));
	Иначе
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_ICON", Контекст.АдресКартинкиУспешно);
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_DETAILS_HIDDEN", "hidden");
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_HIDDEN", "");
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPDATE_LINK_TEXT", НСтр("ru = 'Установлена актуальная версия программы'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокДоговорыНаСервисы(ДанныеМонитора, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_HEADER", НСтр("ru = 'Сервисы 1С'"));
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_LINK_HIDDEN", "");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_DETAILS_HIDDEN", "hidden");
	
	Если ДанныеМонитора.serviceContractsStatus.status = "NO_CONTRACTS" Тогда
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_ICON", Контекст.АдресКартинкиВнимание);
		ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_LINK_TEXT", НСтр("ru = 'Как подключить сервисы 1С?'"));
	Иначе
		Если ДанныеМонитора.serviceContractsStatus.status = "WARNING" Тогда
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_ICON", Контекст.АдресКартинкиВнимание);
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_LINK_TEXT", НСтр("ru = 'Заканчивается срок действия сервиса'"));
		Иначе
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_ICON", Контекст.АдресКартинкиУспешно);
			ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_LINK_TEXT", НСтр("ru = 'Срок действия сервисов'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокДоговорыНаСервисыОшибка(ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_ICON", Контекст.АдресКартинкиВнимание);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_HEADER", НСтр("ru = 'Сервисы 1С'"));
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_LINK_HIDDEN", "hidden");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_DETAILS_HIDDEN", "");
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_DETAILS",
		НСтр("ru = 'Не удалось получить информацию о подключении сервисов 1С.
					|Повторите попытку позднее.'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанные1СКПОтпрслевой(ДанныеИТСОтраслевой, ТекстВиджета)
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_TYPE", ДанныеИТСОтраслевой.ТипПредставление);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_PERIOD", ДанныеИТСОтраслевой.ДлительностьПредставление);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "SERVICE_DATES", ДанныеИТСОтраслевой.ПериодПредставление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоматическаяЗагрузкаИсправленийВключена()
	
	Возврат ПолучениеОбновленийПрограммы.АвтоматическаяЗагрузкаИсправленийВключена();
	
КонецФункции

#КонецОбласти

#Область ВиджетПочта

&НаКлиенте
Процедура ВиджетПочтаПриНажатии(Элемент, ДанныеСсылки)
	
	Если СтрНайти(ДанныеСсылки, "DELIVERY_ERROR_COUNT") > 0 Тогда
		
		ИмяСобытия = "Работа с почтовыми сообщениями.Отправка почты";
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетПочта"];
		
		ПараметрыЖурнала = Новый Структура;
		ПараметрыЖурнала.Вставить("ДатаНачала", СостояниеВиджета.ДатаНачала);
		ПараметрыЖурнала.Вставить("ДатаОкончания", СостояниеВиджета.ДатаОкончания);
		ПараметрыЖурнала.Вставить("СобытиеЖурналаРегистрации", ИмяСобытия);
		ПараметрыЖурнала.Вставить("Уровень", "Ошибка");
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыЖурнала);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "AUTH_ERROR_COUNT") > 0 Тогда
		
		ИмяСобытия = "Работа с почтовыми сообщениями.Авторизация на почтовом сервере";
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетПочта"];
		
		ПараметрыЖурнала = Новый Структура;
		ПараметрыЖурнала.Вставить("ДатаНачала", СостояниеВиджета.ДатаНачала);
		ПараметрыЖурнала.Вставить("ДатаОкончания", СостояниеВиджета.ДатаОкончания);
		ПараметрыЖурнала.Вставить("СобытиеЖурналаРегистрации", ИмяСобытия);
		ПараметрыЖурнала.Вставить("Уровень", "Ошибка");
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыЖурнала);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TOTAL_LINK") > 0 Тогда
		
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка");
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "COMMON_LINK") > 0 Тогда
		
		ФормаСписка = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаСписка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ФормаСписка.Список, "ВладелецУчетнойЗаписи",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ФормаСписка.Открыть();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "PERSONAL_LINK") > 0 Тогда
		
		ФормаСписка = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаСписка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ФормаСписка.Список, "ВладелецУчетнойЗаписи",, ВидСравненияКомпоновкиДанных.Заполнено);
		
		ФормаСписка.Открыть();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "DISABLED_LINK") > 0 Тогда
		
		ФормаСписка = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаСписка");
		
		ОтборСписка = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(ФормаСписка.Список);
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборСписка.Элементы,,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ИспользоватьДляОтправки",
			ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ИспользоватьДляПолучения",
			ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ФормаСписка.Открыть();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "DISABLED_SENDING_LINK") > 0 Тогда
		
		ФормаСписка = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаСписка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ФормаСписка.Список, "ИспользоватьДляОтправки", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		ФормаСписка.Открыть();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "DISABLED_RECEIVIVNG_LINK") > 0 Тогда
		
		ФормаСписка = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ФормаСписка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ФормаСписка.Список, "ИспользоватьДляПолучения", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		ФормаСписка.Открыть();
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "UNDELIVERED_LINK") > 0 Тогда
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетПочта"];
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("Ссылка",
			УчетныеЗаписиБездоставкиПочты(СостояниеВиджета.ДатаНачала, СостояниеВиджета.ДатаОкончания));
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", ОтборСписка);
		
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", ПараметрыОткрытия);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "РасшифроватьСтолбецДиаграммы") > 0 Тогда
		
		ОкноБраузера = Элемент.Документ.defaultView;
		Идентификатор = ОкноБраузера.ext_selectedBarData.statusRef;
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетПочта"];
		Если Не СостояниеВиджета.Свойство("Топ5") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СобытиеТоп5 Из СостояниеВиджета.Топ5 Цикл
			Если СобытиеТоп5.Идентификатор = Идентификатор Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТекущаяСтрока",СобытиеТоп5.Данные);
		
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", ПараметрыОткрытия);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетныеЗаписиБездоставкиПочты(ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетныеЗаписи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыйЗагрузки
	|		ПО (ДатыйЗагрузки.УчетнаяЗапись = УчетныеЗаписи.Ссылка)
	|			И (ДатыйЗагрузки.ДатаЗагрузкиПисем МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|ГДЕ
	|	ДатыйЗагрузки.УчетнаяЗапись ЕСТЬ NULL");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеВиджетаПочта(Данные)
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	ИмяВиджета = "ВиджетПочта";
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.Вставить("Доставка", Данные.Доставка);
	СостояниеВиджета.Вставить("Ошибки", Данные.Ошибки);
	СостояниеВиджета.Вставить("Статистика", Данные.Статистика);
	СостояниеВиджета.Вставить("Топ5", Данные.Топ5);
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	ТекущаяДата = Контекст.СостояниеВиджетов[ИмяВиджета].ДатаАктуальности;
	
	Если СостояниеВиджета.Доставка.ДоставкаВыполняется Тогда
		
		СтатусДоставки = НСтр("ru = 'Выполняется с'") + " "
			+ Формат(СостояниеВиджета.Доставка.НачалоТекущегоЗапуска, "ДФ=ЧЧ:мм");
		
	Иначе
		
		ПоследнийЗапуск = СостояниеВиджета.Доставка.КонецПредыдущегоЗапуска;
		
		МинутВЧасе = 60;
		СекундВЧасе = МинутВЧасе * 60;
		СекундВСутках = СекундВЧасе * 24;
		ЧасовСПоследнегоЗапуска = Цел((ТекущаяДата - ПоследнийЗапуск) / СекундВЧасе);
		МинутСПоследнегоЗапуска = Цел((ТекущаяДата - ПоследнийЗапуск - ЧасовСПоследнегоЗапуска * СекундВЧасе) / МинутВЧасе);
		
		Если СостояниеВиджета.Доставка.ЕстьЗавершенныеЗадания Тогда
			Если ЧасовСПоследнегоЗапуска = 0 Тогда
				Если МинутСПоследнегоЗапуска = 0 Тогда
					СтатусДоставки = НСтр("ru = 'Не выполняется менее 1 мин.'");
				Иначе
					СтатусДоставки = НСтр("ru = 'Не выполняется'") + " " + Формат(МинутСПоследнегоЗапуска, "ЧФ='Ч мин.'");
				КонецЕсли;
			Иначе
				Если МинутСПоследнегоЗапуска = 0 Тогда
					СтатусДоставки = НСтр("ru = 'Не выполняется'") + " " + Формат(ЧасовСПоследнегоЗапуска, "ЧФ='Ч ч.'");
				Иначе
					СтатусДоставки = НСтр("ru = 'Не выполняется'")
						+ " " + Формат(ЧасовСПоследнегоЗапуска, "ЧФ='Ч ч.'")
						+ " " + Формат(МинутСПоследнегоЗапуска, "ЧФ='Ч мин.'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтатусДоставки = НСтр("ru = 'Не выполняется более'") + " " + Формат(ЧасовСПоследнегоЗапуска, "ЧФ='Ч ч.'");
		КонецЕсли;
		
	КонецЕсли;
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DELIVERY_STATUS", СтатусДоставки);
	
	Если СостояниеВиджета.Доставка.ИспользуютсяПотокиДоставки Тогда
		СтатусПотоков = НСтр("ru = 'Потоки доставки: используются'")
			+ " (" + СостояниеВиджета.Доставка.КоличествоВключенныхПотоков +"/10)";
	Иначе
		СтатусПотоков = НСтр("ru = 'Потоки доставки: не используются'");
	КонецЕсли;
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "STREAM_STATUS", СтатусПотоков);
	
	КоличествоОшибокАвторизации = Формат(СостояниеВиджета.Ошибки.КоличествоОшибокАвторизации, "ЧН=нет");
	КоличествоОшибокДоставки = Формат(СостояниеВиджета.Ошибки.КоличествоОшибокДоставки, "ЧН=нет");
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "AUTH_ERROR_TEXT", КоличествоОшибокАвторизации);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DELIVERY_ERROR_TEXT", КоличествоОшибокДоставки);
	
	КоличествоВсего = Формат(СостояниеВиджета.Статистика.КоличествоВсего, "ЧН=нет");
	КоличествоОбщих = Формат(СостояниеВиджета.Статистика.КоличествоОбщих, "ЧН=нет");
	КоличествоПерсональных = Формат(СостояниеВиджета.Статистика.КоличествоПерсональных, "ЧН=нет");
	КоличествоОтключенных = Формат(СостояниеВиджета.Статистика.КоличествоОтключенных, "ЧН=нет");
	КоличествоСОтключеннойОтправкой = Формат(СостояниеВиджета.Статистика.КоличествоСОтключеннойОтправкой, "ЧН=нет");
	КоличествоСОтключеннымПолучением = Формат(СостояниеВиджета.Статистика.КоличествоСОтключеннымПолучением, "ЧН=нет");
	КоличествоСНевыполненнойДоставкой = Формат(СостояниеВиджета.Статистика.КоличествоСНевыполненнойДоставкой, "ЧН=нет");
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TOTAL_COUNT", КоличествоВсего);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "COMMON_COUNT", КоличествоОбщих);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "PERSONAL_COUNT", КоличествоПерсональных);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DISABLED_COUNT", КоличествоОтключенных);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DISABLED_SENDING_COUNT", КоличествоСОтключеннойОтправкой);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DISABLED_RECEIVIVN_COUNT", КоличествоСОтключеннымПолучением);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UNDELIVERED_COUNT", КоличествоСНевыполненнойДоставкой);
	
	Если СостояниеВиджета.Топ5.Количество() > 0 Тогда
		ДанныеТоп5 = СостояниеВиджета.Топ5;
	Иначе
		ДанныеТоп5 = ПустыеДанныеТоп5();
	КонецЕсли;
	
	Для Каждого СтрокаТоп5 Из ДанныеТоп5 Цикл
		
		ТочкаДиаграммы = Новый Структура;
		ТочкаДиаграммы.Вставить("status",		СтрокаТоп5.ПредставлениеДанных);
		ТочкаДиаграммы.Вставить("source",		"");
		ТочкаДиаграммы.Вставить("barValue",		СтрокаТоп5.Количество);
		ТочкаДиаграммы.Вставить("statusRef",	СтрокаТоп5.Идентификатор);
		ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
		ТочкаДиаграммы.Вставить("avgStageTime",	0);
		
		ЦветСерии = ЦветСерии(СтрокаТоп5.ПредставлениеДанных);
		Если ЦветаСерийДиаграммы.Получить(СтрокаТоп5.ПредставлениеДанных) = Неопределено Тогда
			ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
			ЦветаСерийДиаграммы.Вставить(СтрокаТоп5.ПредставлениеДанных, ЦветСтрокой);
		КонецЕсли;
		
		МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		
	КонецЦикла;
	
	ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	ВиджетПочта = ТекстВиджета;
	
КонецПроцедуры

#КонецОбласти

#Область ВиджетТриггеры

&НаКлиенте
Процедура ВиджетТриггерыПриНажатии(Элемент, ДанныеСсылки)
	
	Если СтрНайти(ДанныеСсылки, "TRIGGER_TOTAL_LINK") Тогда
		
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаСписка");
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TRIGGER_SYNC_LINK") Тогда
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("ОтложенноеВыполнение", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборСписка);
		
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TRIGGER_ASYNC_LINK") Тогда
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("ОтложенноеВыполнение", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборСписка);
		
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TRIGGER_ENABLED_LINK") Тогда
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("Действует", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборСписка);
		
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TRIGGER_CONDITION_ERROR_LINK") Тогда
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетТриггеры"];
		
		ОтборОтчета = Новый Структура;
		ОтборОтчета.Вставить("ПериодОтчета",
			Новый СтандартныйПериод(СостояниеВиджета.ДатаНачала, СостояниеВиджета.ДатаОкончания));
		ОтборОтчета.Вставить("ТолькоОшибки", Истина);
		ОтборОтчета.Вставить("ОшибкаУсловия", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "Основной");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "РасшифровкаВиджета");
		ПараметрыФормы.Вставить("Отбор", ОтборОтчета);
		
		ОткрытьФорму("Отчет.CRM_РаботаТриггеров.Форма", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "TRIGGER_ACTION_ERROR_LINK") Тогда
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетТриггеры"];
		
		ОтборОтчета = Новый Структура;
		ОтборОтчета.Вставить("ПериодОтчета",
			Новый СтандартныйПериод(СостояниеВиджета.ДатаНачала, СостояниеВиджета.ДатаОкончания));
		ОтборОтчета.Вставить("ТолькоОшибки", Истина);
		ОтборОтчета.Вставить("ОшибкаДействия", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "Основной");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "РасшифровкаВиджета");
		ПараметрыФормы.Вставить("Отбор", ОтборОтчета);
		
		ОткрытьФорму("Отчет.CRM_РаботаТриггеров.Форма", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ДанныеСсылки, "РасшифроватьСтолбецДиаграммы") > 0 Тогда
		
		ОкноБраузера = Элемент.Документ.defaultView;
		Идентификатор = ОкноБраузера.ext_selectedBarData.statusRef;
		
		СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетТриггеры"];
		Если Не СостояниеВиджета.Свойство("Топ5") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СобытиеТоп5 Из СостояниеВиджета.Топ5 Цикл
			Если СобытиеТоп5.Идентификатор = Идентификатор Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПоказатьЗначение(, СобытиеТоп5.Данные);
		
	Иначе;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджетаТриггеры(Данные)
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	ИмяВиджета = "ВиджетТриггеры";
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.Вставить("Статистика", Данные.Статистика);
	СостояниеВиджета.Вставить("Топ5", Данные.Топ5);
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_TOTAL_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоВсего, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_SYNC_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоСинхронных, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_ASYNC_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоОтложенных, "ЧН=нет"));
		
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_ENABLED_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоВключенных, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_CONDITION_ERROR_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоОшибокУсловия, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TRIGGER_ACTION_ERROR_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоОшибокДействия, "ЧН=нет"));
	
	Если СостояниеВиджета.Топ5.Количество() > 0 Тогда
		ДанныеТоп5 = СостояниеВиджета.Топ5;
	Иначе
		ДанныеТоп5 = ПустыеДанныеТоп5();
	КонецЕсли;
	
	Для Каждого СтрокаТоп5 Из ДанныеТоп5 Цикл
		
		ТочкаДиаграммы = Новый Структура;
		ТочкаДиаграммы.Вставить("status",		СтрокаТоп5.ПредставлениеДанных);
		ТочкаДиаграммы.Вставить("source",		"");
		ТочкаДиаграммы.Вставить("barValue",		СтрокаТоп5.Количество);
		ТочкаДиаграммы.Вставить("statusRef",	СтрокаТоп5.Идентификатор);
		ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
		ТочкаДиаграммы.Вставить("avgStageTime",	0);
		
		ЦветСерии = ЦветСерии(СтрокаТоп5.ПредставлениеДанных);
		Если ЦветаСерийДиаграммы.Получить(СтрокаТоп5.ПредставлениеДанных) = Неопределено Тогда
			ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
			ЦветаСерийДиаграммы.Вставить(СтрокаТоп5.ПредставлениеДанных, ЦветСтрокой);
		КонецЕсли;
		
		МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		
	КонецЦикла;
	
	ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	ВиджетТриггеры = ТекстВиджета;
	
КонецПроцедуры

#КонецОбласти

#Область ВиджетРегламентныеЗадания

&НаКлиенте
Процедура ВиджетРегламентныеЗаданияПриНажатии(Элемент, ДанныеСсылки)
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджетаРегламентныеЗадания(Данные)
	
	ИмяВиджета = "ВиджетРегламентныеЗадания";
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.Вставить("Статистика", Данные.Статистика);
	СостояниеВиджета.Вставить("Топ5", Данные.Топ5);
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "IN_PROGRESS_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоТекущих, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TOTAL_STARTED_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоЗапущенных, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "TOTAL_COMPLETED_COUNY",
		Формат(СостояниеВиджета.Статистика.КоличествЗавершенных, "ЧН=нет"));
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "ERROR_COMPLETED_COUNT",
		Формат(СостояниеВиджета.Статистика.КоличествоЗавершенныхСОшибками, "ЧН=нет"));
	
	Если СостояниеВиджета.Топ5.Количество() > 0 Тогда
		ДанныеТоп5 = СостояниеВиджета.Топ5;
	Иначе
		ДанныеТоп5 = ПустыеДанныеТоп5();
	КонецЕсли;
	
	Для Каждого СтрокаТоп5 Из ДанныеТоп5 Цикл
		
		ТочкаДиаграммы = Новый Структура;
		ТочкаДиаграммы.Вставить("status",		СтрокаТоп5.ПредставлениеДанных);
		ТочкаДиаграммы.Вставить("source",		"");
		ТочкаДиаграммы.Вставить("barValue",		СтрокаТоп5.Количество);
		ТочкаДиаграммы.Вставить("statusRef",	СтрокаТоп5.Идентификатор);
		ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
		ТочкаДиаграммы.Вставить("avgStageTime",	0);
		
		ЦветСерии = ЦветСерии(СтрокаТоп5.ПредставлениеДанных);
		Если ЦветаСерийДиаграммы.Получить(СтрокаТоп5.ПредставлениеДанных) = Неопределено Тогда
			ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
			ЦветаСерийДиаграммы.Вставить(СтрокаТоп5.ПредставлениеДанных, ЦветСтрокой);
		КонецЕсли;
		
		МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		
	КонецЦикла;
	
	ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы, Ложь);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	ВиджетРегламентныеЗадания = ТекстВиджета;
	
КонецПроцедуры

#КонецОбласти

#Область ВиджетЖурналРегистрации

&НаКлиенте
Процедура ВиджетЖурналРегистрацииПриНажатии(Элемент, ДанныеСсылки)
	
	Если СтрНайти(ДанныеСсылки, "РасшифроватьСтолбецДиаграммы") > 0 Тогда
		
		ОкноБраузера = Элемент.Документ.defaultView;
		Идентификатор = ОкноБраузера.ext_selectedBarData.statusRef;
		ПоказатьОшибкиЖурналаРегистрации(Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджетаЖурналРегистрации(Данные)
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	ИмяВиджета = "ВиджетЖурналРегистрации";
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.Вставить("Топ5", Данные.Топ5);
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	Если СостояниеВиджета.Топ5.Количество() > 0 Тогда
		ДанныеТоп5 = СостояниеВиджета.Топ5;
	Иначе
		ДанныеТоп5 = ПустыеДанныеТоп5();
	КонецЕсли;
	
	Для Каждого СтрокаТоп5 Из ДанныеТоп5 Цикл
		
		ТочкаДиаграммы = Новый Структура;
		ТочкаДиаграммы.Вставить("status",		СтрокаТоп5.ПредставлениеДанных);
		ТочкаДиаграммы.Вставить("source",		"");
		ТочкаДиаграммы.Вставить("barValue",		СтрокаТоп5.Количество);
		ТочкаДиаграммы.Вставить("statusRef",	СтрокаТоп5.Идентификатор);
		ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
		ТочкаДиаграммы.Вставить("avgStageTime",	0);
		
		ЦветСерии = ЦветСерии(СтрокаТоп5.ПредставлениеДанных);
		Если ЦветаСерийДиаграммы.Получить(СтрокаТоп5.ПредставлениеДанных) = Неопределено Тогда
			ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
			ЦветаСерийДиаграммы.Вставить(СтрокаТоп5.ПредставлениеДанных, ЦветСтрокой);
		КонецЕсли;
		
		МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		
	КонецЦикла;
	
	ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	ВиджетЖурналРегистрации = ТекстВиджета;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиЖурналаРегистрации(Идентификатор)
	
	СостояниеВиджета = Контекст.СостояниеВиджетов["ВиджетЖурналРегистрации"];
	Если Не СостояниеВиджета.Свойство("Топ5") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СобытиеТоп5 Из СостояниеВиджета.Топ5 Цикл
		Если СобытиеТоп5.Идентификатор = Идентификатор Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ДатаНачала", СостояниеВиджета.ДатаНачала);
	ПараметрыЖурнала.Вставить("ДатаОкончания", СостояниеВиджета.ДатаОкончания);
	ПараметрыЖурнала.Вставить("СобытиеЖурналаРегистрации", СобытиеТоп5.Данные);
	ПараметрыЖурнала.Вставить("Уровень", "Ошибка");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ВиджетФайлы

&НаКлиенте
Процедура ВиджетФайлыПриНажатии(Элемент, ДанныеСсылки)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВиджетаФайлы(Данные)
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	ИмяВиджета = "ВиджетФайлы";
	
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	СостояниеВиджета.Вставить("Топ5", Данные.Топ5);
	
	ТекстВиджета = Обработки.CRM_СистемныйМонитор.ПолучитьМакет("Шаблон" + ИмяВиджета).ПолучитьТекст();
	
	Если СостояниеВиджета.Топ5.Количество() > 0 Тогда
		ДанныеТоп5 = СостояниеВиджета.Топ5;
	Иначе
		ДанныеТоп5 = ПустыеДанныеТоп5();
	КонецЕсли;
		
	Для Каждого Строка Из Данные.Топ5 Цикл
		
		ТочкаДиаграммы = Новый Структура;
		ТочкаДиаграммы.Вставить("status",		Строка.ПредставлениеДанных);
		ТочкаДиаграммы.Вставить("source",		"");
		ТочкаДиаграммы.Вставить("barValue",		Строка.Объем);
		ТочкаДиаграммы.Вставить("statusRef",	Строка.Идентификатор);
		ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
		ТочкаДиаграммы.Вставить("avgStageTime",	Строка.Количество);
		
		ЦветСерии = ЦветСерии(Строка.ПредставлениеДанных);
		Если ЦветаСерийДиаграммы.Получить(Строка.ПредставлениеДанных) = Неопределено Тогда
			ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
			ЦветаСерийДиаграммы.Вставить(Строка.ПредставлениеДанных, ЦветСтрокой);
		КонецЕсли;
		
		МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		
	КонецЦикла;
	
	ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы, Ложь);
	
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "UPBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВверх);
	ТекстВиджета = СтрЗаменить(ТекстВиджета, "DOWNBUTTON_ICON", Контекст.АдресКартинкиСтрелкаВниз);
	
	ВиджетФайлы = ТекстВиджета;
	
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаСервере
Процедура ОтменитьВыполнениеВсехЗаданий()
	
	Для Каждого КлючИЗнаение Из Контекст.Задания Цикл
		Задание = КлючИЗнаение.Значение;
		ДлительныеОперации.ОтменитьВыполнениеЗадания(Задание.ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИницализироватьКонтекст()
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Задания", Новый Структура);
	
	АдресЛоготипа = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.Портала1СИТСЛоготип, УникальныйИдентификатор);
	Контекст.Вставить("АдресЛоготипа", АдресЛоготипа);
	
	АдресПрелоадера = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ДлительнаяОперация, УникальныйИдентификатор);
	Контекст.Вставить("АдресПрелоадера", АдресПрелоадера);
	
	АдресКартинкиУспешно = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.Успешно32, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиУспешно", АдресКартинкиУспешно);
	
	АдресКартинкиВнимание = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.ИнтернетПоддержкаВнимание, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиВнимание", АдресКартинкиВнимание);
	
	АдресКартинкиПроблема = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.МониторПортала1СИТСНегативноеСобытие, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиПроблема", АдресКартинкиПроблема);
	
	АдресКартинкиОшибка = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.МониторПортала1СИТСНегативноеСобытие, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиОшибка", АдресКартинкиОшибка);
	
	АдресКартинкиСтрелкаВверх = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СтрелкаВверхТреугольная, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиСтрелкаВверх", АдресКартинкиСтрелкаВверх);
	
	АдресКартинкиСтрелкаВниз = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СтрелкаВнизТреугольная, УникальныйИдентификатор);
	Контекст.Вставить("АдресКартинкиСтрелкаВниз", АдресКартинкиСтрелкаВниз);
	
	Контекст.Вставить("Домен", "");
	
	//ДанныеИнтернетПоддержки = Новый Структура;
	//ДанныеИнтернетПоддержки.Вставить("Логин", "");
	//ДанныеИнтернетПоддержки.Вставить("Пароль", "");
	//Контекст.Вставить("ДанныеИнтернетПоддержки", ДанныеИнтернетПоддержки);
	
	ИменаВиджетов = Новый Массив;
	ИменаВиджетов.Добавить("ВиджетПоддержка");
	ИменаВиджетов.Добавить("ВиджетПочта");
	ИменаВиджетов.Добавить("ВиджетТриггеры");
	ИменаВиджетов.Добавить("ВиджетРегламентныеЗадания");
	ИменаВиджетов.Добавить("ВиджетФайлы");
	ИменаВиджетов.Добавить("ВиджетЖурналРегистрации");
	Контекст.Вставить("ИменаВиджетов", ИменаВиджетов);
	
	ПараметрыВиджетов = Новый Структура;
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Ложь);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеПоддержки");
	ПараметрыВиджетов.Вставить("ВиджетПоддержка", ПараметрыВиджета);
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Истина);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеПочты");
	ПараметрыВиджетов.Вставить("ВиджетПочта", ПараметрыВиджета);
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Истина);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеТриггеров");
	ПараметрыВиджетов.Вставить("ВиджетТриггеры", ПараметрыВиджета);
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Истина);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеРегламентныхЗаданий");
	ПараметрыВиджетов.Вставить("ВиджетРегламентныеЗадания", ПараметрыВиджета);
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Ложь);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеФайлов");
	ПараметрыВиджетов.Вставить("ВиджетФайлы", ПараметрыВиджета);
	
	ПараметрыВиджета = Новый Структура;
	ПараметрыВиджета.Вставить("ЕстьПериодАктуальности", Истина);
	ПараметрыВиджета.Вставить("ИмяПроцедуры", "Обработки.CRM_СистемныйМонитор.ПолучитьДанныеЖурналаРегистрации");
	ПараметрыВиджетов.Вставить("ВиджетЖурналРегистрации", ПараметрыВиджета);
	
	Контекст.Вставить("ПараметрыВиджетов", ПараметрыВиджетов);
	
	СостояниеВиджетов = Новый Структура;
	Для Каждого ИмяВиджета Из ИменаВиджетов Цикл
		СостояниеВиджетов.Вставить(ИмяВиджета, СтруктураСостоянияВиджета());
	КонецЦикла;
	Контекст.Вставить("СостояниеВиджетов", СостояниеВиджетов);
	
	КоллекцияЦветов = Новый Массив;
	КоллекцияЦветов.Добавить(Новый Цвет(123, 31, 162));
	КоллекцияЦветов.Добавить(Новый Цвет(25, 118, 210));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 150, 136));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 235, 59));
	КоллекцияЦветов.Добавить(Новый Цвет(229, 115, 115));
	КоллекцияЦветов.Добавить(Новый Цвет(141, 110, 99));
	КоллекцияЦветов.Добавить(Новый Цвет(126, 87, 194));
	КоллекцияЦветов.Добавить(Новый Цвет(77, 208, 225));
	КоллекцияЦветов.Добавить(Новый Цвет(129, 199, 132));
	КоллекцияЦветов.Добавить(Новый Цвет(251, 192, 45));
	КоллекцияЦветов.Добавить(Новый Цвет(244, 67, 54));
	КоллекцияЦветов.Добавить(Новый Цвет(93, 64, 55));
	КоллекцияЦветов.Добавить(Новый Цвет(81, 45, 168));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 188, 212));
	КоллекцияЦветов.Добавить(Новый Цвет(56, 142, 60));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 152, 0));
	КоллекцияЦветов.Добавить(Новый Цвет(240, 98, 146));
	КоллекцияЦветов.Добавить(Новый Цвет(97, 97, 97));
	КоллекцияЦветов.Добавить(Новый Цвет(48, 63, 159));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 151, 167));
	КоллекцияЦветов.Добавить(Новый Цвет(156, 204, 101));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 112, 67));
	КоллекцияЦветов.Добавить(Новый Цвет(194, 24, 91));
	КоллекцияЦветов.Добавить(Новый Цвет(158, 158, 158));
	КоллекцияЦветов.Добавить(Новый Цвет(100, 181, 246));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 121, 107));
	КоллекцияЦветов.Добавить(Новый Цвет(175, 180, 43));
	КоллекцияЦветов.Добавить(Новый Цвет(230, 74, 25));
	КоллекцияЦветов.Добавить(Новый Цвет(186, 104, 200));
	КоллекцияЦветов.Добавить(Новый Цвет(69, 90, 100));
	Контекст.Вставить("КоллекцияЦветов", КоллекцияЦветов);
	
	
КонецПроцедуры

&НаСервере
Функция СтруктураСостоянияВиджета()
	
	Состояние = Новый Структура;
	Состояние.Вставить("Сформирован", Ложь);
	Состояние.Вставить("Ошибка", Ложь);
	Состояние.Вставить("ТекстОшибки", "");
	Состояние.Вставить("ДатаАктуальности", '00010101');
	Состояние.Вставить("ДатаНачала", '00010101');
	Состояние.Вставить("ДатаОкончания", '00010101');
	
	ВидыПериодов = ВидыПериодовАктуальностиВиджетов();
	Состояние.Вставить("ВидПериода", ВидыПериодов.Час);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПериодовАктуальностиВиджетов()
	
	ВидыПериодов = Новый Структура;
	ВидыПериодов.Вставить("Час", "Час");
	ВидыПериодов.Вставить("День", "День");
	ВидыПериодов.Вставить("ТриДня", "ТриДня");
	
	Возврат ВидыПериодов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставленияПериодовВиджетов()
	
	ПредставленияПериодов = Новый Структура;
	ПредставленияПериодов.Вставить("Час", НСтр("ru = 'за час'"));
	ПредставленияПериодов.Вставить("День", НСтр("ru = 'за день'"));
	ПредставленияПериодов.Вставить("ТриДня", НСтр("ru = 'за 3 дня'"));
	
	Возврат ПредставленияПериодов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодАктуальности(ТекущаяДата, СостояниеВиджета)
	
	ВидыПериодов = ВидыПериодовАктуальностиВиджетов();
	
	Если СостояниеВиджета.ВидПериода = ВидыПериодов.Час Тогда
		
		СекундВПериоде = 60 * 60;
		СостояниеВиджета.ДатаНачала = ТекущаяДата - СекундВПериоде;
		СостояниеВиджета.ДатаОкончания = ТекущаяДата;
		
	ИначеЕсли СостояниеВиджета.ВидПериода = ВидыПериодов.День Тогда
		
		СостояниеВиджета.ДатаНачала = НачалоДня(ТекущаяДата);
		СостояниеВиджета.ДатаОкончания = КонецДня(ТекущаяДата);
		
	ИначеЕсли СостояниеВиджета.ВидПериода = ВидыПериодов.ТриДня Тогда
		
		СекундВПериоде = 3 * 60 * 60 * 24;
		СостояниеВиджета.ДатаНачала = НачалоДня(ТекущаяДата - СекундВПериоде);
		СостояниеВиджета.ДатаОкончания = КонецДня(ТекущаяДата);
		
		//СостояниеВиджета.ДатаНачала = '20240101000000';
		//СостояниеВиджета.ДатаОкончания = '20241231235959';
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеДатыАктуальности(ИмяВиджета)
	
	ПараметрыВиджета = Контекст.ПараметрыВиджетов[ИмяВиджета];
	СостояниеВиджета = Контекст.СостояниеВиджетов[ИмяВиджета];
	
	ПредставленияПериодов = ПредставленияПериодовВиджетов();
	
	ТекстЗаголовка = НСтр("ru = 'Данные на'") + " " + Формат(СостояниеВиджета.ДатаАктуальности, "ДФ='ЧЧ:мм'");
	Если ПараметрыВиджета.ЕстьПериодАктуальности Тогда
		
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(ТекстЗаголовка);
		ЧастиЗаголовка.Добавить(" ");
		
		ЗаголовокПериода = ПредставленияПериодов[СостояниеВиджета.ВидПериода];
		СтрокаПериода = Новый ФорматированнаяСтрока(ЗаголовокПериода, , ЦветаСтиля.CRM_ЧерныйЦветТекста, , "PERIOD");
		ЧастиЗаголовка.Добавить(СтрокаПериода);
		
		ТекстЗаголовка = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		
	КонецЕсли;
	Элементы[ИмяВиджета + "ДатаАктуальности"].Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ДоработатьТекстВиджетаДляВыводаДиаграммы(ТекстВиджета, МассивДанныхДиаграммы, ЦветаСерийДиаграммы, ПоказыватьРасшифровку = Истина)
	
	ЕстьДанныеДиаграммы = (МассивДанныхДиаграммы.Количество() > 0);
	
	КлассБезОтображения = "class=""display-none""";
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	ТекстВиджета = СтрЗаменить(
		ТекстВиджета, """{{CRM:SHOW_EXPAND_LINK}}""", ?(ПоказыватьРасшифровку, "true", "false"));
	
	ТекстВиджета = СтрЗаменить(
		ТекстВиджета, "{{CRM:PATH_TO_LIBRARY}}", ИнтеграцияСВнешнейБиблиотекой);
	
	ТекстВиджета = СтрЗаменить(
		ТекстВиджета, """{{CRM:DATA}}""", CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(МассивДанныхДиаграммы));
	
	ТекстВиджета = СтрЗаменить(
		ТекстВиджета, """{{CRM:COLORS}}""", CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ЦветаСерийДиаграммы));
	
	ТекстВиджета = СтрЗаменить(
		ТекстВиджета, """{{CRM:SHOW_CONTEXT_MENU_FLAG}}""", "false");
	
	ТекстВиджета = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, ТекстВиджета);
	
КонецПроцедуры

&НаСервере
Функция ПустыеДанныеТоп5()
	
	ПустыеДанные = Новый Массив;
	Для Сч = 1 По 5 Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("ПредставлениеДанных", НСтр("ru = 'Нет данных'") + " (" + Сч + ")");
		Элемент.Вставить("Идентификатор", "");
		Элемент.Вставить("Количество", 0);
		ПустыеДанные.Добавить(Элемент);
	КонецЦикла;
	
	Возврат ПустыеДанные;
	
КонецФункции

&НаСервере
Функция ЦветСерии(Источник)
	
	СтрокиЦвет = ЦветаСерийДиаграмм.НайтиСтроки(Новый Структура("Источник", Источник));
	Если СтрокиЦвет.Количество() = 0 Тогда
		НовСтр = ЦветаСерийДиаграмм.Добавить();
		Цвет = ЦветИзКоллекции(ЦветаСерийДиаграмм.Количество());
		НовСтр.Цвет = Цвет;
		НовСтр.Источник = Источник;
	Иначе
		Цвет = СтрокиЦвет[0].Цвет;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

&НаСервере
Функция ЦветИзКоллекции(Индекс)
	
	Возврат Контекст.КоллекцияЦветов[Индекс % Контекст.КоллекцияЦветов.Количество()];
	
КонецФункции

#КонецОбласти

#КонецОбласти
