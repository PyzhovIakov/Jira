
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСтатистикаСайтаНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "СтатистикаСайта");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВиджетНаСайтНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "ВиджетНаСайт");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисНаСайтНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "СервисНаСайт");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияCallТрекингНаСайтНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "CallТрекингНаСайт");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИТСОтраслевойНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "ПроверитьИТСОтраслевой");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТелефонияНажатие(Элемент)
	
	ОткрытьТелефонию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокJivositeНажатие(Элемент)
	
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("ЛИТ_ИнтеграцияJivosite", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://myitlab.ru/portfolio-item/integratsiya-1s-i-jivochat-edinyj-chat-so-vsemi-klientami/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокЛИТ_СкорингНажатие(Элемент)
	
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("ЛИТ_Скоринг", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://myitlab.ru/portfolio-item/scoring/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокЛИТ_ZvonobotНажатие(Элемент)
	
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("ЛИТ_Zvonobot", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://myitlab.ru/itlab-services/zvonobot/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокЛИТ_БиткопНажатие(Элемент)
	
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("ЛИТ_Биткоп", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://myitlab.ru/portfolio-item/integratsiya-bitcop-i-1s-crm/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияМобильноеПриложениеНажатие(Элемент)
	ФормаНастроек = ОткрытьФорму("Обработка.CRM_ПанельАдминистрированияCRM.Форма.РазделСторонниеСервисы");
	ФормаНастроек.Элементы.ГруппаМобильныйСРМ.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокМобильныйКлиентНажатие(Элемент)
	ПерейтиПоНавигационнойСсылке("https://1crm.ru/products/icrm/");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияFacebookНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерFacebook");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаInstagramНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерInstagram");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаInstagramDirectНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерInstagramDirect");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаTelegramНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерTelegram");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаTelegramБотНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерTelegramBot");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаWhatsAppНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерWhatsApp");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаВКонтактеНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерВКонтакте");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаViberНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерViber");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаСистемаВзаимодействияСообщенияНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МессенджерСистемаВзаимодействия");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПомощникиКартинкаНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "МоделиМашинногоОбучения");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАКАМТоргиКартинкаНажатие(Элемент)
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("АКАМ_МодульТоргов", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОткрытьФорму("ОбщаяФорма.АКАМ_СформироватьПисьмо");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаИнвестПроектыНажатие(Элемент)
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("АКАМ_МодульИнвестиционныхПроектов",
		 СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://akam.ru/products/akam-invest-projects/");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаWhatsAppExtendedНажатие(Элемент)
	СтандартнаяОбработка = Истина;
	CRM_УправлениеПриложениямиКлиент.ВыполнитьДействиеПриКликеНаПриложение("ЛИТ_WhatsApp", СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПерейтиПоНавигационнойСсылке("https://myitlab.ru/portfolio-item/integratsiya-whatsapp-i-1s-crm/");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаСистемаВзаимодействияНажатие(Элемент)
	
	Если ЕстьДоступКПодключениюСистемыВзаимодействия() Тогда
		Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			ПерейтиПоНавигационнойСсылке("e1cib/command/Обработка.сфпПодключениеСистемыВзаимодействия.Команда.Отключение");
		Иначе 
			ПерейтиПоНавигационнойСсылке("e1cib/app/Обработка.сфпПодключениеСистемыВзаимодействия");
		КонецЕсли;
	Иначе
		ОткрытьФорму("Обработка.сфпПодключениеСистемыВзаимодействия.Форма"); // Чтобы вышло системное сообщение о недостатке прав
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаМагазинВКНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйСервис", ЭтотОбъект, "ИнтернетМагазинВКонтакте");
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЕстьДоступКПодключениюСистемыВзаимодействия()
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.сфпПодключениеСистемыВзаимодействия);
КонецФункции

&НаКлиенте
Процедура ОткрытьТелефонию()
	
	ИмяОткрываемойФормы = "Обработка.сфпАРМ_Телефония.Форма.Форма";
	Синоним = НСтр("ru='Телефония';en='Telephony'");
	
	Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) Тогда
		ИндексФормы = CRM_РабочийСтолКлиент.ПолучитьИндексФормыРабочегоСтола(ЭтотОбъект, ИмяОткрываемойФормы);
		Если ИндексФормы = -1 Тогда
			ОткрытьФорму(ИмяОткрываемойФормы);
		Иначе
			CRM_РабочийСтолКлиент.АктивироватьФормуРабочегоСтола(ЭтотОбъект, ИмяОткрываемойФормы, ИндексФормы);
		КонецЕсли;
	Иначе
		ОткрытьФорму(ИмяОткрываемойФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьНеобходимыеНастройкиНаСервере(ИмяСервиса, ПереинициализироватьРабочийСтол = Ложь, Идентификатор)
	
	ПереинициализироватьРабочийСтол = Ложь;
	
	Если ИмяСервиса = "ПроверитьИТСОтраслевой" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.CRM_СквознаяАналитика.Получить() Тогда
		Константы.CRM_СквознаяАналитика.Установить(Истина);
	КонецЕсли;
	
	Если НЕ Константы.CRM_ИспользоватьМаркетинговыеМероприятия.Получить() Тогда
		Константы.CRM_ИспользоватьМаркетинговыеМероприятия.Установить(Истина);
	КонецЕсли;
	
	Если НЕ Константы.CRM_ИспользоватьЗаявки.Получить() Тогда
		Константы.CRM_ИспользоватьЗаявки.Установить(Истина);
	КонецЕсли;
	
	// Добавим форму Сквозной аналитики на Рабочий стол
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_НастройкиРабочегоСтола.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиРабочегоСтола КАК CRM_НастройкиРабочегоСтола
	               |ГДЕ
	               |	CRM_НастройкиРабочегоСтола.Объект = ""Общие настройки""
	               |	И CRM_НастройкиРабочегоСтола.ИмяФормы = ""Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.Форма""";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ЗаписьНастройки = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьМенеджерЗаписи();
		ЗаписьНастройки.ИмяФормы = "Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.Форма";
		ЗаписьНастройки.Объект = "Общие настройки";
		ЗаписьНастройки.Идентификатор = Строка(Идентификатор);
		ЗаписьНастройки.Наименование = НСтр("ru='Сквозная аналитика';en='End-to-end Analytics'");
		ЗаписьНастройки.Порядок = 90;
		ЗаписьНастройки.Записать(Истина);
		
		ПереинициализироватьРабочийСтол = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ВключитьНеобходимыеНастройкиНаСервере()

&НаКлиенте
Процедура ПриОтветеНаВопросПодключитьТелефонию(КодВозврата, Параметры) Экспорт
	
	Если КодВозврата = "Подключить" Тогда
		ОткрытьТелефонию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыбранныйСервис(Результат, ИмяСервиса) Экспорт
	
	Если ИмяСервиса = "ПроверитьИТСОтраслевой" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сервисы по подписке доступны!';en='Services available by subscription!'"));
		Возврат;
	КонецЕсли;
	
	Если ИмяСервиса = "CallТрекингНаСайт" Тогда
		
		ТребуетсяНастройкаТелефонии = сфпСофтФонПроСервер.сфпТребуетсяНастройкаТелефонии();
		
		Если ТребуетсяНастройкаТелефонии Тогда
			ТекстВопроса = НСтр("ru='Для использования коллтрекинга требуется подключить Телефонию!"
"Это необходимо для онлайн принятия звонка в 1C:CRM.';en='It is necessary connect Telephony to use call-tracking!"
"It is necessary for online making call in 1C:CRM.'");
			ОбработчикРезультата = Новый ОписаниеОповещения("ПриОтветеНаВопросПодключитьТелефонию", ЭтотОбъект);
			ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + НСтр("ru='Подключить Телефонию?'");
			СписокКнопок = Новый СписокЗначений();
			СписокКнопок.Добавить("Подключить", НСтр("ru='Подключить'"));
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"));
			ПоказатьВопрос(ОбработчикРезультата, ТекстВопроса, СписокКнопок);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторФормыСА = Новый УникальныйИдентификатор;
	ВключитьНеобходимыеНастройкиНаСервере(ИмяСервиса, ПереинициализироватьРабочийСтол, ИдентификаторФормыСА);
	
	ИмяФормыСА = "Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.Форма";
	
	Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) И ПереинициализироватьРабочийСтол Тогда
		CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент(ИмяФормы);
		// Добавим в список форм форму Сквозной аналитики
		НоваяСтрока = ЭтотОбъект["CRM_НастройкиРабочегоСтола"].Добавить();
		НоваяСтрока.Порядок  = 90;
		НоваяСтрока.ПорядокНастроек = 3;
		НоваяСтрока.ИмяФормы = ИмяФормыСА;
		НоваяСтрока.Наименование = НСтр("ru='Сквозная аналитика'");
		НоваяСтрока.Идентификатор =  ИдентификаторФормыСА; 
	КонецЕсли;
	
	Если ИмяСервиса = "СтатистикаСайта" Тогда
		
		Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) Тогда
			CRM_РабочийСтолКлиент.АктивироватьФормуРабочегоСтола(ЭтотОбъект, ИмяФормыСА);
		Иначе
			ОткрытьФорму(ИмяФормыСА);
		КонецЕсли;
		
		ФормаНастройкиСквознойАналитики = ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаНастройкиСквознойАналитики"
										  , , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если CRM_СистемаСквознойАналитикиВызовСервера.ПроверитьПустоеКоличествоИсточниковАналитики() Тогда
			ОткрытьФорму("Справочник.CRM_ИсточникиРекламныхКампаний.Форма.ФормаПомощникВвода", ,
				 ФормаНастройкиСквознойАналитики);
		КонецЕсли;
		
	ИначеЕсли ИмяСервиса = "ВиджетНаСайт" Тогда
		
		Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) Тогда
			CRM_РабочийСтолКлиент.АктивироватьФормуРабочегоСтола(ЭтотОбъект, ИмяФормыСА);
		Иначе
			ОткрытьФорму(ИмяФормыСА);
		КонецЕсли;
		
		ФормаНастройкиСквознойАналитики = ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаНастройкиСквознойАналитики"
										  , , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		СписокСценариев = Новый СписокЗначений;
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService"));
		
		КоличествоИсточников = КоличествоИсточниковПолученияЛидов(СписокСценариев);
		Если КоличествоИсточников = 0 Тогда
		
			ФормаИсточниковЛидов = ПолучитьФорму("Справочник.CRM_ИсточникиПолученияЛидов.Форма.ФормаЭлемента", ,
				 ФормаНастройкиСквознойАналитики);
			ФормаИсточниковЛидов.Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService");
			ФормаИсточниковЛидов.РежимВыбораСценария = "Виджет";
			ФормаИсточниковЛидов.Открыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСервиса = "СервисНаСайт" Тогда
		
		Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) Тогда
			CRM_РабочийСтолКлиент.АктивироватьФормуРабочегоСтола(ЭтотОбъект, ИмяФормыСА);
		Иначе
			ОткрытьФорму(ИмяФормыСА);
		КонецЕсли;
		
		ФормаНастройкиСквознойАналитики = ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаНастройкиСквознойАналитики"
										  , , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		СписокСценариев = Новый СписокЗначений;
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat"));
	
		КоличествоИсточников = КоличествоИсточниковПолученияЛидов(СписокСценариев);
		
		Если КоличествоИсточников = 0 Тогда
			
			ФормаИсточниковЛидов = ПолучитьФорму("Справочник.CRM_ИсточникиПолученияЛидов.Форма.ФормаЭлемента", ,
				 ФормаНастройкиСквознойАналитики);
			ФормаИсточниковЛидов.Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic");
			ФормаИсточниковЛидов.РежимВыбораСценария = "Сервис";
			ФормаИсточниковЛидов.Открыть();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСервиса = "CallТрекингНаСайт" Тогда
	
		Если CRM_РабочийСтолКлиент.ФормаОткрытаНаРабочемСтоле(ЭтотОбъект) Тогда
			CRM_РабочийСтолКлиент.АктивироватьФормуРабочегоСтола(ЭтотОбъект, ИмяФормыСА);
		Иначе
			ОткрытьФорму(ИмяФормыСА);
		КонецЕсли;
		
		ФормаНастройкиСквознойАналитики = ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаНастройкиСквознойАналитики"
										  , , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		СписокСценариев = Новый СписокЗначений;
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat"));
	
		КоличествоИсточников = КоличествоИсточниковПолученияЛидов(СписокСценариев);
		
		Если КоличествоИсточников = 0 Тогда
			
			ФормаИсточниковЛидов = ПолучитьФорму("Справочник.CRM_ИсточникиПолученияЛидов.Форма.ФормаЭлемента", ,
				 ФормаНастройкиСквознойАналитики);
			ФормаИсточниковЛидов.Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic");
			ФормаИсточниковЛидов.РежимВыбораСценария = "Коллтрекинг";
			ФормаИсточниковЛидов.Объект.ИспользоватьГенераторЗвонка = Истина;
			ФормаИсточниковЛидов.Открыть();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСервиса = "МоделиМашинногоОбучения" Тогда
		CRM_МоделиМашинногоОбученияКлиент.ОткрытьНастройкиМоделей();
		
	ИначеЕсли СтрНайти(ИмяСервиса, "ИнтернетМагазин") > 0 Тогда
		СоздатьИнтеграциюСМагазином(СтрЗаменить(ИмяСервиса, "ИнтернетМагазин", ""));
		
	ИначеЕсли СтрНайти(ИмяСервиса, "Мессенджер") > 0 Тогда
		СоздатьКаналДиалогов(СтрЗаменить(ИмяСервиса, "Мессенджер", ""));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция - проверка наличия элементов в справочнике "Источники получения заявок"
//
// Параметры:
//  СписокИсключений - список значений, содержит значения для отбора в запросе
// 
// Возвращаемое значение:
//  Булево - Результат выполнения функции. Истина, если элементов нет.
//
Функция КоличествоИсточниковПолученияЛидов(СписокИсключений = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_ИсточникиПолученияЛидов.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
	|ГДЕ
	|	%СписокИсключений% НЕ CRM_ИсточникиПолученияЛидов.ПометкаУдаления";
	
	ОтборПоСпискуИсключений = "CRM_ИсточникиПолученияЛидов.Сценарий В (&СписокИсключений) И";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СписокИсключений%", ?(СписокИсключений <> Неопределено,
		 ОтборПоСпискуИсключений,
		 ""));
	Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений); 
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоЭлементов;
	
КонецФункции // КоличествоИсточниковПолученияЛидов()

&НаСервереБезКонтекста
// Функция - проверка наличия подключенных аккантов диалогов определенного типа
//
// Параметры:
//  ТипМессенджера - строка - название мессенджера
// 
// Возвращаемое значение:
//  Булево - Результат проверки. Истина, если есть элементы.
//
Функция ЕстьПодключенныеУчетныеЗаписиМессенджеров(ТипМессенджера)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	               |ГДЕ
	               |	CRM_УчетныеЗаписиМессенджеров.Включена
	               |	И НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	               |	И CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера";
	
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ЕстьПодключенныеУчетныеЗаписиМессенджеров()

&НаКлиенте
Процедура СоздатьКаналДиалогов(ТипМессенджера)

	УстановитьКонстанту("CRM_ИспользоватьИнтеграциюСМессенджерами");
	
	Канал = ЕстьПодключенныеУчетныеЗаписиМессенджеров(ТипМессенджера);
	Если Канал <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("ТекущаяСтрока", Канал);
		ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		ПараметрыФормы = Новый Структура("ТипМессенджера", ТипМессенджера);
		ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция - проверка наличия подключенных аккантов диалогов определенного типа
//
// Параметры:
//  ТипМессенджера - строка - название мессенджера
// 
// Возвращаемое значение:
//  Булево - Результат проверки. Истина, если есть элементы.
//
Функция ЕстьПодключенныеИнтернетМагазины(ТипМагазина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_ИнтеграцииСИнтернетМагазинами.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.CRM_ИнтеграцииСИнтернетМагазинами КАК CRM_ИнтеграцииСИнтернетМагазинами
	               |ГДЕ
	               |	CRM_ИнтеграцииСИнтернетМагазинами.ТипИнтернетМагазина = &ТипИнтернетМагазина
	               |	И НЕ CRM_ИнтеграцииСИнтернетМагазинами.ПометкаУдаления
	               |	И CRM_ИнтеграцииСИнтернетМагазинами.Включена";
	
	Запрос.УстановитьПараметр("ТипИнтернетМагазина", ТипМагазина);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ЕстьПодключенныеУчетныеЗаписиМессенджеров()

&НаКлиенте
Процедура СоздатьИнтеграциюСМагазином(ТипМагазина)

	УстановитьКонстанту("CRM_ИспользоватьИнтеграцииСИнтернетМагазинами");
	
	Магазин = ЕстьПодключенныеИнтернетМагазины(ТипМагазина);
	Если Магазин <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("ТекущаяСтрока", Магазин);
		ОткрытьФорму("ПланОбмена.CRM_ИнтеграцииСИнтернетМагазинами.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		ПараметрыФормы = Новый Структура("ТипИнтернетМагазина", ТипМагазина);
		ОткрытьФорму("ПланОбмена.CRM_ИнтеграцииСИнтернетМагазинами.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКонстанту(ИмяКонстанты)
	Если НЕ Константы[ИмяКонстанты].Получить() Тогда
		Константы[ИмяКонстанты].Установить(Истина);
	КонецЕсли;
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#КонецОбласти // СлужебныеПроцедурыИФункции
