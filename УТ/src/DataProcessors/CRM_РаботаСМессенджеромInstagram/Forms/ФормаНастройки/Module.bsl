
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Параметры.Свойство("ПараметрыПрокси", ПараметрыПрокси);
	
	АдресКартинки =
		ПоместитьВоВременноеХранилище(Обработки.CRM_РаботаСМессенджеромInstagram.ПолучитьМакет("Картинка_login"));
	
	Если ЗначениеЗаполнено(Объект.Токен) Тогда
		ЗаполнитьСписокСтраниц();
	Иначе
		ДанныеАккаунта = НСтр("en='Log on to site Facebook.';ru='Авторизуйтесь на сайте Facebook.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.IDГруппы) Тогда
		Если СписокГрупп.Свойство("_" + Объект.IDГруппы) Тогда
			Группа = СписокГрупп["_" + Объект.IDГруппы];
			ГруппаПриИзмененииСервер(Объект.IDГруппы, Группа.Токен);
			Объект.ИмяГруппы = Группа.Имя;
		Иначе
			Объект.ИмяГруппы = "";
			Объект.ТокенГруппы = "";
		КонецЕсли;
	Иначе
		Объект.ИмяГруппы = "";
		Объект.ТокенГруппы = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ГруппаПриИзмененииСервер(СтраницаID, Токен)
	Объект.ТокенГруппы = Обработки.CRM_РаботаСМессенджеромInstagram.ПолучитьТокенСтраницыПользователя(СтраницаID,
		 Объект.Токен, Токен,
		 ПараметрыПрокси);
КонецПроцедуры

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Токен) Тогда
		ЗаполнитьСписокСтраниц();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Декорация1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВвестиКод(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПараметрыДоступа = Новый Структура;
		ПараметрыДоступа.Вставить("Токен", Объект.Токен);
		ПараметрыДоступа.Вставить("ТокенГруппы", Объект.ТокенГруппы);
		ПараметрыДоступа.Вставить("IDГруппы", Объект.IDГруппы);
		ПараметрыДоступа.Вставить("ИмяГруппы", Объект.ИмяГруппы);
		Закрыть(ПараметрыДоступа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Вход(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВходНаСервере();
	ВвестиКод(Неопределено);
	ПодключитьОбработчикОжидания("ПроверкаАвторизации", ИнтервалЗапроса, Истина);
КонецПроцедуры

&НаСервере
Процедура ВходНаСервере()
	АвторизацияЗакончена = Ложь;
	СтруктураОтвета =
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ДанныеВерификацииInstagram(ПараметрыПрокси);
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		КодЗапроса = СтруктураОтвета.code;
		КодДоступа = СтруктураОтвета.user_code;
		АдресВерификации = СтруктураОтвета.verification_uri;
		ИнтервалЗапроса = СтруктураОтвета.interval;
		Элементы.ГруппаLogIn.Видимость = Ложь;
		Элементы.ГруппаКод.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаАвторизации()
	ПроверкаАвторизацииНаСервере();
	Если Не АвторизацияЗакончена Тогда
		ПодключитьОбработчикОжидания("ПроверкаАвторизации", ИнтервалЗапроса, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверкаАвторизацииНаСервере()
	Ресурс = "/v8.0/device/login_status";
	Запрос = "access_token=628122124383800|681a3bf8d44ac20a1f400402ea17f396&code=" + КодЗапроса;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 Запрос, Ресурс, ПараметрыПрокси,
		 "x-www-form-urlencoded"));
	Если СтруктураОтвета.Свойство("error") Тогда
		Если СтруктураОтвета.error.code = 31 Тогда
		ИначеЕсли СтруктураОтвета.error.code = 463 Тогда
			АвторизацияЗакончена = Истина;
		Иначе
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли;
	Иначе
		Объект.Токен = СтруктураОтвета.access_token;
		АвторизацияЗакончена = Истина;
		ЗаполнитьСписокСтраниц();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокенГруппы(Команда)
	ГруппаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("Telegram"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Попытка
		Если ЗначениеЗаполнено(Объект.IDГруппы) Тогда
			ПроверитьПодключениеСервер();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Connection was successful.';
				|ru='Подключение прошло успешно.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Group is not selected!';ru='Не выбрана группа!'"));
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = ?(Инфо.Причина = Неопределено, Инфо.Описание, Инфо.Причина.Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Описание);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенВК(Команда)
	Если ЗначениеЗаполнено(СсылкаАвторизацииВК) Тогда
		СтрокаНачалаТокена = "access_token=";
		Позиция = СтрНайти(СсылкаАвторизацииВК, СтрокаНачалаТокена);
		Позиция2 = СтрНайти(СсылкаАвторизацииВК, "&data_access_expiration_time");
		Если Позиция > 0 Тогда
			Объект.Токен = Сред(СсылкаАвторизацииВК, Позиция + СтрДлина(СтрокаНачалаТокена),
				  СтрНайти(СсылкаАвторизацииВК, "&data_access_expiration_time") - (Позиция 
				+ 13));
			ТокенПриИзменении(Неопределено);
		Иначе
			
		КонецЕсли;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("en='Authorization link is not completed!';
			|ru='Не заполнена ссылка авторизации!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенГруппы(Команда)
	Если ЗначениеЗаполнено(СсылкаАвторизацииГруппы) И ЗначениеЗаполнено(Объект.IDГруппы) Тогда
		СтрокаНачалаТокена = "access_token_" + Объект.IDГруппы + "=";
		Позиция = СтрНайти(СсылкаАвторизацииГруппы, СтрокаНачалаТокена);
		Если Позиция > 0 Тогда
			Объект.ТокенГруппы = Сред(СсылкаАвторизацииГруппы, Позиция + СтрДлина(СтрокаНачалаТокена));
		Иначе
			
		КонецЕсли;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("en='Group permissions link is not filled or group is not selected!';
			|ru='Не заполнена ссылка разрешений группы или не выбрана группа!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКод(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://www.facebook.com/device?user_code=" + КодДоступа);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаКомандыПродолжение(Результат, ДопПараметры) Экспорт
	// НачатьЗапускПриложения (Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект,
		// Новый Структура),
		// ДопПараметры);
	ПерейтиПоНавигационнойСсылке(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершение(Результат, ДопПараметры) Экспорт
	РезультирующаяСтрока = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтраниц()
	Попытка
		ДанныеАккаунта = НСтр("en='Connected account';ru='Подключен аккаунт'") + ": " 
			+ Обработки.CRM_РаботаСМессенджеромInstagram.ДанныеГруппы(Объект.Токен, ,
			 ПараметрыПрокси);
		Элементы.ДанныеАккаунта.ЦветТекста = WebЦвета.ТемноЗеленый;
		Элементы.ГруппаLogIn.Видимость = Ложь;
		Элементы.ГруппаКод.Видимость = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Истина;
		СписокГрупп = Обработки.CRM_РаботаСМессенджеромInstagram.ПолучитьСписокСтраницПользователя(Объект.Токен,
			 ПараметрыПрокси);
		Элементы.Группа.СписокВыбора.Очистить();
		Если СписокГрупп <> Неопределено Тогда
			Для каждого Группа Из СписокГрупп Цикл
				Элементы.Группа.СписокВыбора.Добавить(СтрЗаменить(Группа.Ключ, "_", ""), Группа.Значение.Имя);
			КонецЦикла;
		КонецЕсли;
	Исключение
		ДанныеАккаунта = НСтр("en='Log on to site Facebook.';ru='Авторизуйтесь на сайте Facebook.'");
		Элементы.ГруппаLogIn.Видимость = Истина;
		Элементы.ГруппаКод.Видимость = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Ложь;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеСервер()
	ДанныеГруппы = Обработки.CRM_РаботаСМессенджеромInstagram.ДанныеГруппы(Объект.ТокенГруппы,
		 Объект.IDГруппы,
		 ПараметрыПрокси);
КонецПроцедуры

#КонецОбласти
