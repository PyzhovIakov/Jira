#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СообщениеМессенджера.Дата) КАК Дата
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаАктуальности = ТекущаяДатаСеанса() - 30 * 24 * 60 * 60;
	ТолькоНовые = Ложь;
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		ДатаАктуальности = Выборка.Дата;
		ТолькоНовые = Истина;
	КонецЕсли;
	
	Ресурс = "/v10.0/" + СтруктураПараметровДоступа.IDГруппы 
		+ "/?fields=media{id,caption ,comments{text,user,username,timestamp,replies{timestamp,text,user,username}}}&access_token="
		+ СтруктураПараметровДоступа.ТокенГруппы;
	
	МассивСообщений = Новый Массив;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	МассивКомментариев = Новый Массив;
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Для каждого Медиа Из СтруктураОтвета.media.data Цикл
			Если Медиа.Свойство("comments") Тогда
				Для каждого Комментарий Из Медиа.comments.data Цикл
					ДатаПоследнейАктивности  = ДатаИзСтроки(Комментарий.timestamp);
					СтруктураКомментария = Новый Структура;
					СтруктураКомментария.Вставить("id", Комментарий.id);
					СтруктураКомментария.Вставить("Дата", ДатаПоследнейАктивности);
					СтруктураКомментария.Вставить("Пользователь", Комментарий.username);
					СтруктураКомментария.Вставить("Текст", Комментарий.text);
					СтруктураКомментария.Вставить("Исходящий", Комментарий.Свойство("user"));
					Если Комментарий.Свойство("replies") Тогда
						Ответы = Новый Массив;
						Для каждого Ответ Из Комментарий.replies.data Цикл
							ДатаАктивности = ДатаИзСтроки(Ответ.timestamp);
							Если НЕ ТолькоНовые ИЛИ ДатаАктивности > ДатаАктуальности Тогда
								ДатаПоследнейАктивности = Макс(ДатаАктивности, ДатаПоследнейАктивности);
								СтруктураОтвет = Новый Структура;
								СтруктураОтвет.Вставить("id", Ответ.id);
								СтруктураОтвет.Вставить("Дата", ДатаАктивности);
								СтруктураОтвет.Вставить("Пользователь", Ответ.username);
								СтруктураОтвет.Вставить("Текст", Ответ.text);
								СтруктураОтвет.Вставить("Исходящий", Ответ.Свойство("user"));
								Ответы.Добавить(СтруктураОтвет);
							КонецЕсли;
						КонецЦикла;
						СтруктураКомментария.Вставить("Ответы", Ответы);
					КонецЕсли;
					Если ДатаПоследнейАктивности > ДатаАктуальности Тогда
						МассивКомментариев.Добавить(СтруктураКомментария);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого Комментарий Из МассивКомментариев Цикл
		Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
		Сообщение.Дата = Комментарий.Дата;
		Сообщение.ID_Сообщения = Комментарий.id;
		Сообщение.ТекстСообщения = Комментарий.Текст;
		Если Комментарий.Исходящий Тогда
			Сообщение.ВидСообщения = "Исходящее";
		Иначе
			Сообщение.ВидСообщения = "Входящее";
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://www.instagram.com/" 
				+ Комментарий.Пользователь, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			Сообщение.Контакт = Контакт;
		КонецЕсли;
		Сообщение.ID_Пользователя = Комментарий.Пользователь;
		Сообщение.КонтактПредставление = Комментарий.Пользователь;
		Сообщение.Группа = Комментарий.id;
		Сообщение.ГруппаПредставление = Комментарий.Текст;
		МассивСообщений.Добавить(Сообщение);
		Если Комментарий.Свойство("Ответы") Тогда
			Для каждого Ответ Из Комментарий.Ответы Цикл
				Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
				Сообщение.Дата = Ответ.Дата;
				Сообщение.ID_Сообщения = Ответ.id;
				Сообщение.ТекстСообщения = Ответ.Текст;
				Если Ответ.Исходящий Тогда
					Сообщение.ВидСообщения = "Исходящее";
				Иначе
					Сообщение.ВидСообщения = "Входящее";
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://www.instagram.com/" 
						+ Ответ.Пользователь, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					Сообщение.Контакт = Контакт;
				КонецЕсли;
				Сообщение.ID_Пользователя = Ответ.Пользователь;
				Сообщение.КонтактПредставление = Ответ.Пользователь;
				Сообщение.Группа = Комментарий.id;
				Сообщение.ГруппаПредставление = Комментарий.Текст;
				МассивСообщений.Добавить(Сообщение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись) Экспорт
	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "Instagram";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://www.instagram.com/";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(Структура.УчетнаяЗапись);
	Ресурс = "/v10.0/" + Структура.Группа + "/?fields=media{permalink}&access_token="
		+ СтруктураПараметровДоступа.ТокенГруппы;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Возврат СтруктураОтвета.media.permalink;
	КонецЕсли;
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат НачалоАдресаСтраницыПользователя() + ID_Пользователя;
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Ложь; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Ложь; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Если УчетнаяЗапись.Включена Тогда
		СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
		Ресурс = "/v10.0/" + idГруппы + "/?fields=media{media_url,media_type,caption,permalink}&access_token="
			+ СтруктураПараметровДоступа.ТокенГруппы;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
			 "", Ресурс,
			 СтруктураПараметровДоступа.ПараметрыПрокси));
		Если СтруктураОтвета.Свойство("error") Тогда
			Если СтруктураОтвета.error.code <> 100 Тогда
				ВызватьИсключение СтруктураОтвета.error.message;
			Иначе
				HTML = Неопределено;
			КонецЕсли;
		Иначе
			HTML = Обработки.CRM_РаботаСМессенджеромInstagram.ПолучитьМакет("HTML_МакетКонтекста").ПолучитьТекст();
			HTML = СтрЗаменить(HTML, "media_url", СтруктураОтвета.media.media_url);
			HTML = СтрЗаменить(HTML, "permalink", СтруктураОтвета.media.permalink);
			Если СтруктураОтвета.media.Свойство("caption") Тогда
				HTML = СтрЗаменить(HTML, "caption", СтруктураОтвета.media.caption);
			Иначе
				HTML = СтрЗаменить(HTML, "caption", "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		HTML = Неопределено;
	КонецЕсли;
	Возврат HTML;
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
	Токен = СтруктураПараметровДоступа.ТокенГруппы;
	Ресурс = "/v10.0/me/permission?access_token=" + Токен;
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com", ,
		Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси, "x-www-form-urlencoded", Истина));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Возврат СтруктураОтвета.success;
	КонецЕсли;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт
	
КонецПроцедуры

Функция ПользовательДоступен(УчетнаяЗапись, ДополнительныеДанные) Экспорт
	
	Возврат Новый Структура("Доступен, Описание", Ложь, "");
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
	ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ПолучитьСписокСтраницПользователя(Токен, ПараметрыПрокси) Экспорт
	Ресурс = "/v10.0/me/?fields=accounts{instagram_business_account{id,name},access_token,id,name}&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.message);
	Иначе
		Результат = Новый Структура();
		Для Каждого Страница Из СтруктураОтвета.accounts.data Цикл
			Если Страница.Свойство("instagram_business_account") Тогда
				Результат.Вставить("_" + Страница.instagram_business_account.id, Новый Структура("Имя, Токен",
					 Страница.instagram_business_account.name, Страница.access_token));
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция ПолучитьТокенСтраницыПользователя(СтраницаID, Токен, КороткийТокен, ПараметрыПрокси) Экспорт
	Возврат КороткийТокен;
	Ресурс = "/v10.0/" + СтраницаID + "/?fields=access_token&account_linking_token=" + КороткийТокен 
		+ "&access_token=" 
		+ Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.message);
	Иначе
		Возврат СтруктураОтвета.access_token;
	КонецЕсли;
КонецФункции

Функция ДанныеГруппы(Токен, СтраницаID = "", ПараметрыПрокси) Экспорт
	Ресурс = "/v10.0/me/?access_token=" + Токен;
	Если СтраницаID <> "" Тогда
		Ресурс = СтрЗаменить(Ресурс, "/me/?", "/" + СтраницаID + "/?fields=id,username&");
	КонецЕсли;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Если СтруктураОтвета.Свойство("name") Тогда
			Возврат СтруктураОтвета.name;
		ИначеЕсли СтруктураОтвета.Свойство("username") Тогда
			Возврат СтруктураОтвета.username;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ДатаИзСтроки(ДатаСтрокой)
	
	Темп = СтрЗаменить(ДатаСтрокой, "-", "");
	Темп = СтрЗаменить(Темп, "T", "");
	Темп = СтрЗаменить(Темп, ":", "");
	Темп = Лев(Темп, 14);
	Возврат МестноеВремя(Дата(Темп));
	
КонецФункции

#КонецОбласти

#КонецЕсли
