#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	Параметры.Свойство("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
	Параметры.Свойство("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
	Параметры.Свойство("БалансОпцияКурьерика", БалансОпцияКурьерика);
	Параметры.Свойство("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
	Параметры.Свойство("ДоступенТестовыйПериод", ДоступенТестовыйПериод);
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Курьерика Тогда
		ОтображатьУведомлениеПоОпцииКурьерика = Истина;
		Если ОпцияДоступнаКурьерика Или ДоступенТестовыйПериод Тогда
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
			УстановитьДоступностьЭлементовПоЗначениюОпции();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбора();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Организация", ОрганизацияБизнесСетиСсылка , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипГрузоперевозки", ТипГрузоперевозки , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВариантОтбора", ВариантОтбора , Истина);
	
	УстановитьУсловноеОформление();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтбораПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ВариантОтбора", ВариантОтбора , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОрганизацияСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл // Структура
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОпцияКурьерикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьТестовыйПериод" Тогда
		
		СтандартнаяОбработка = Ложь;
		СервисДоставкиКлиент.ПодключитьТестовыйПериодКурьерика();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьСостояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСсылкаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Организация", ОрганизацияБизнесСетиСсылка , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле["Имя"] = "СписокДокументОснованиеПредставление" И ТекущиеДанные.КоличествоДокументовОснований > 0 Тогда
		
		Если ТекущиеДанные.КоличествоДокументовОснований = 1 Тогда
			ПоказатьЗначение( , ТекущиеДанные.ДокументОснование);
		Иначе
			ОткрытьФормуСпискаПроизвольныхОбъектов(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли Поле["Имя"] = "СписокИнформация" Тогда
		
		Если ТекущиеДанные.СостояниеОбработки = 1 Тогда
		
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИдентификаторыЗаказовНаДоставку", Новый Массив);
			ДополнительныеПараметры.Вставить("ДокументыКИсправлению", Новый Массив);
			
			ДополнительныеПараметры.ИдентификаторыЗаказовНаДоставку.Добавить(ТекущиеДанные.ИдентификаторДокумента);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОтразитьЧастичнуюДоставку", ЭтотОбъект, ДополнительныеПараметры),
				НСтр("ru = 'Запустить исправление документов по текущему заказу на доставку?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
			
	Иначе
		
		ОткрытьФормуЗаказа(ТекущиеДанные.ИдентификаторДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказовСервисДоставки.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДанныеЗаказовСервисДоставки.ДокументОснование КАК ДокументОснование,
	|	ДанныеЗаказовСервисДоставки.РекомендацииПоИсправлениюЧДКратко КАК Информация,
	|	ДанныеЗаказовСервисДоставки.ДокументыКИсправлению,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Ошибка)
	|			ТОГДА 0
	|		КОГДА
	|			ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Скорректировать)
	|			ТОГДА 1
	|		КОГДА
	|			ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Выгрузить)
	|			ТОГДА 3
	|		КОГДА
	|			ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработано)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СостояниеОбработки
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
	|ГДЕ
	|	ДанныеЗаказовСервисДоставки.Организация = &Организация
	|	И ДанныеЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ДанныеЗаказовСервисДоставки.ИдентификаторДокумента В (&ИдентификаторыЗаказовНаДоставку)";
	
	ИдентификаторыЗаказовНаДоставку = Новый Массив;
	Для Каждого СтрокаСписка Из Строки Цикл
		ИдентификаторыЗаказовНаДоставку.Добавить(СтрокаСписка.Значение.Данные.ИдентификаторДокумента);
	КонецЦикла;
	
	ПараметрОрганизация = Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	ПараметрТипГрузоперевозки = Настройки.ПараметрыДанных.Элементы.Найти("ТипГрузоперевозки");
	
	Запрос.УстановитьПараметр("Организация", ПараметрОрганизация.Значение);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ПараметрТипГрузоперевозки.Значение);
	Запрос.УстановитьПараметр("ИдентификаторыЗаказовНаДоставку", ИдентификаторыЗаказовНаДоставку);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого СтрокаСписка Из Строки Цикл
		
		СтрокаСписка.Значение.Данные.СвязанныеДокументы = Новый Структура("Строки, Документ, Информация", Новый Массив, Неопределено, "");
		
		// Сбор информации по документам-основаниям
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтрокаСписка.Значение.Данные.ИдентификаторДокумента, "ИдентификаторДокумента") Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаСписка.Значение.Данные, Выборка);
			
			СтрокаСписка.Значение.Данные.ДокументОснованиеПредставление = ?(СтрокаСписка.Значение.Данные.КоличествоДокументовоснований = 1,
				Строка(Выборка.ДокументОснование),
				СтрШаблон("%1: %2", НСтр("ru = 'Всего документов'"),
				Строка(СтрокаСписка.Значение.Данные.КоличествоДокументовоснований)));
			
			ДокументыКИсправлению = Выборка.ДокументыКИсправлению.Получить();
			Если ТипЗнч(ДокументыКИсправлению) <> Тип("ДеревоЗначений") Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьДеревоСтруктур(ДокументыКИсправлению, СтрокаСписка.Значение.Данные.СвязанныеДокументы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСвязанныеДокументы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеДокументы

&НаКлиенте
Процедура СвязанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Поле.Имя = "СвязанныеДокументыДокумент" Тогда

		ТекущиеДанные = СвязанныеДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			Возврат;
		КонецЕсли;

		ПоказатьЗначение(, ТекущиеДанные.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если Не ОбновлениеДанныхВыполняется() Тогда
		ПолучитьЧастичнуюДоставкуИзСервисаИнтеграции(Ложь, "ОбновитьСписок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДоставку(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыЗаказовНаДоставку", Новый Массив);
	ДополнительныеПараметры.Вставить("ДокументыКИсправлению", Новый Массив);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтразитьЧастичнуюДоставку", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Запустить исправление документов по всем заказам на доставку, требующим обработки?'"),
		РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "Очередь", Новый СписокЗначений);
		Для Каждого Операция Из Очередь Цикл
			
			ИмяМетода = Операция.Представление;
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки() Тогда
				
				Элементы.ОбновитьДанные.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
				Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = НСтр("ru = 'Идет загрузка...'");
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСкорректироватьДокументыПоЧастичнойДоставке() Тогда
			
			Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = "";
			Элементы.ОбновитьДанные.Картинка = БиблиотекаКартинок.Обновить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ОбработатьРезультатМенеджераДлительныхОпераций(Результат.АдресРезультата);
	Иначе
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСкорректироватьДокументыПоЧастичнойДоставке() Тогда
			
			Оповестить("ОбновитьСписокЗаказовНаДоставку",
				СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки));
			Элементы.Список.Обновить();
			ЗаполнитьСвязанныеДокументы();
			
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	Если ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Курьерика
		И Не (ОпцияДоступнаКурьерика Или ДоступенТестовыйПериод) Тогда
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	КонецЕсли;
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЧастичнуюДоставкуИзСервисаИнтеграции(ВыводитьОкноОжидания = Истина, Ключ = "")
	
	ОчиститьСообщения();
	
	Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = "";
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОперации.КлючФоновогоЗадания = "СинхронизацияПоЧастичнойДоставке";
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки());
	Если ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.Курьерика") Тогда
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	КонецЕсли;
	
	ВыполнитьЗапрос(ПараметрыОперации);

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЧастичнуюДоставку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыСкорректироватьДокументыПоЧастичнойДоставке());
	ПараметрыОперации.Вставить("ИдентификаторыЗаказовНаДоставку", ДополнительныеПараметры.ИдентификаторыЗаказовНаДоставку);
	ПараметрыОперации.Вставить("ДокументыКИсправлению", ДополнительныеПараметры.ДокументыКИсправлению);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяПроцедуры = Операция.Представление;
		
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеОпцииКурьерика();
			
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки() Тогда
			
			ПараметрыЗапросаЭлементаОчереди = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
		
			ПараметрыЗапросаЭлементаОчереди.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
			ПараметрыЗапросаЭлементаОчереди.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
			ПараметрыЗапросаЭлементаОчереди.Вставить("Страница", 1);
			ПараметрыЗапросаЭлементаОчереди.Вставить("РазмерСтраницы", 10);
			ПараметрыЗапросаЭлементаОчереди.Вставить("Сортировка", "ДатаОбновления ВОЗР");
			ПараметрыЗапросаЭлементаОчереди.Вставить("ФильтрПоМультизаказам","allOrdersWithoutMultiOrders");
			ПараметрыЗапросаЭлементаОчереди.Вставить("ВыгружатьДанныеПоЧастичнойДоставке", Истина);
		
			СостоянияЧастичнойДоставки = Новый Массив;
			СостоянияЧастичнойДоставки.Добавить(Новый Структура("Идентификатор", 23)); // Доставлен частично
			ПараметрыЗапросаЭлементаОчереди.Вставить("Состояние", СостоянияЧастичнойДоставки);
			
			Операция.Значение = ПараметрыЗапросаЭлементаОчереди;
			
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСкорректироватьДокументыПоЧастичнойДоставке() Тогда
			
			ПараметрыЗапросаЭлементаОчереди = Новый Структура;
			
			ПараметрыЗапросаЭлементаОчереди.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
			ПараметрыЗапросаЭлементаОчереди.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
			ПараметрыЗапросаЭлементаОчереди.Вставить("ИдентификаторыЗаказовНаДоставку", ПараметрыОперации.ИдентификаторыЗаказовНаДоставку);
			ПараметрыЗапросаЭлементаОчереди.Вставить("ДокументыКИсправлению", ПараметрыОперации.ДокументыКИсправлению);
			
			Операция.Значение = ПараметрыЗапросаЭлементаОчереди;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Функция ОбработатьРезультатМенеджераДлительныхОпераций(АдресРезультата)
	
	РезультатМенеджера = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		Результат = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			
			ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатМенеджера;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОпцияДоступна") Тогда
			
			ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
			КомментарийОпцияКурьерика = Результат.Комментарий;
			БалансОпцияКурьерика = Результат.Баланс;
			СрокДействияОпцияКурьерика = Результат.СрокДействияОпцияКурьерика;
			
			Если Не ОпцияДоступнаКурьерика Тогда
				ДоступенТестовыйПериод = Результат.ДоступенТестовыйПериод;
			КонецЕсли;
			
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
			УстановитьДоступностьЭлементовПоЗначениюОпции();
			
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Элементы.ОрганизацияСсылка.СписокВыбора;
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл //Структура
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление колонки "Основание"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДокументОснованиеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.КоличествоДокументовОснований");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиСервисДоставки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйТекстСервисДоставки);
	
	// Оформление колонки Дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
	
	// Оформление колонки "Информация" табличной части "Связанные документы"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвязанныеДокументыИнформация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СвязанныеДокументы.Информация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныйДляВыбораЭлементБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'корректировка не требуется'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоЗначениюОпции()
	
	Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыОснованияЗаказаНаДоставку(Организация, ТипГрузоперевозки, ИдентификаторЗаказаНаДоставку)
	
	ДокументыОснования = Новый Массив; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказовСервисДоставки.ДокументОснование
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
	|ГДЕ
	|	ДанныеЗаказовСервисДоставки.Организация = &Организация
	|	И ДанныеЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ДанныеЗаказовСервисДоставки.ИдентификаторДокумента = &ИдентификаторДокумента";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторЗаказаНаДоставку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДокументыОснования;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыОснования.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат ДокументыОснования;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЗаказа(ИдентификаторЗаказаНаДоставку, ЭтоЗаполнениеКопированием = Ложь)
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаказаНаДоставку) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыОткрытияФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки);
	ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
	ПараметрыОткрытияФормы.РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
	ПараметрыОткрытияФормы.ИдентификаторЗаказа = ИдентификаторЗаказаНаДоставку;
	
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		
		ПараметрыОткрытияФормы.Вставить("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
		ПараметрыОткрытияФормы.Вставить("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("БалансОпцияКурьерика", БалансОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("ОтображатьУведомлениеПоОпцииКурьерика", ОтображатьУведомлениеПоОпцииКурьерика);
		
	КонецЕсли;
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеДокументы()
	
	СвязанныеДокументы.ПолучитьЭлементы().Очистить();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СвязанныеДокументы <> Неопределено Тогда
		ЗаполнитьИзДереваСтруктур(ТекущиеДанные.СвязанныеДокументы, СвязанныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзДереваСтруктур(УзелДеревоИсточник, УзелДеревоПриемник)
	
	СтрокиИсточника = УзелДеревоИсточник["Строки"];
	СтрокиПриемника = УзелДеревоПриемник.ПолучитьЭлементы();
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		СтрокаПриемника =  СтрокиПриемника.Добавить();
		
		СтрокаПриемника.Документ = СтрокаИсточника.Документ;
		СтрокаПриемника.Информация = СтрокаИсточника.Информация;
		
		ЗаполнитьИзДереваСтруктур(СтрокаИсточника, СтрокаПриемника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоСтруктур(УзелДеревоИсточник, УзелДеревоПриемник)
	
	СтрокиИсточника = УзелДеревоИсточник["Строки"];
	СтрокиПриемника = УзелДеревоПриемник["Строки"];
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		СтрокаПриемника = Новый Структура("Строки, Документ, Информация", Новый Массив, Неопределено, "");
		
		СтрокаПриемника.Документ = СтрокаИсточника.Документ;
		СтрокаПриемника.Информация = СтрокаИсточника.Информация;
		
		СтрокиПриемника.Добавить(СтрокаПриемника);
		
		ЗаполнитьДеревоСтруктур(СтрокаИсточника, СтрокаПриемника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПроизвольныхОбъектов(ТекущиеДанные)
	
	МассивОбъектов = ДокументыОснованияЗаказаНаДоставку(ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки, ТекущиеДанные.ИдентификаторДокумента);
	ОткрытьФорму("Обработка.СервисДоставки.Форма.СписокПроизвольныхОбъектов",
		Новый Структура("МассивОбъектов, ЗаголовокФормы",
		МассивОбъектов,
		НСтр("ru ='Основания заказа на доставку'"))
		, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновлениеДанныхВыполняется()
	
	ПараметрыФЗ = Новый Структура;
	ПараметрыФЗ.Вставить("Ключ", "СинхронизацияПоЧастичнойДоставке");
	ПараметрыФЗ.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	КоличествоФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыФЗ).Количество();
	
	Возврат КоличествоФЗ <> 0;
	
КонецФункции

#КонецОбласти