
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СервисДоставки.УстановитьЗначенияРеквизитовПоПараметрам(ЭтотОбъект, Параметры);
	ОрганизацияБизнесСетиСсылка = Параметры.ОрганизацияБизнесСети;
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с настройками.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""'"));
		Возврат;
		
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		Если ЗначениеЗаполнено(КомментарийОпцияКурьерика) Или ОпцияДоступнаКурьерика Тогда
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодключениеТестовогоПериодаКурьерика" Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен") Тогда
			ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
			ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
			ВыполнитьЗапрос(ПараметрыОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПеревозчикиОписаниеПодключенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Свойство("href") И ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		
		ИмяОткрываемойСтраницы = СокрЛП(ДанныеСобытия.href);
		
		Протокол = ВРег(СтрЛевДоСимвола(ИмяОткрываемойСтраницы, ":"));
		Если Протокол <> "HTTP" И Протокол <> "HTTPS" И Протокол <> "E1C" Тогда
			Возврат;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИмяОткрываемойСтраницы);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КраткоеОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьКарточкуГрузоперевозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОпцияКурьерикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьТестовыйПериод" Тогда
		
		СтандартнаяОбработка = Ложь;
		СервисДоставкиКлиент.ПодключитьТестовыйПериодКурьерика();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьСостояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеревозчики
&НаКлиенте
Процедура ПеревозчикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеПеревозчика = Элементы.Перевозчики.ТекущиеДанные;
	
	Если Поле.Имя = "Перевозчик" Тогда
		
		ОткрытьКарточкуГрузоперевозчика();
		
	ИначеЕсли Поле.Имя = "НастройкаПодключения" Тогда
		
		ОткрытьНастройкуПодключения(ДанныеПеревозчика);
		
	Иначе
		
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииОкнаАвторизации", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Организация", ДанныеПеревозчика.Организация);
		ПараметрыФормы.Вставить("Перевозчик", ДанныеПеревозчика.Перевозчик);
		ПараметрыФормы.Вставить("ТипАвторизации", ДанныеПеревозчика.ТипАвторизации);
		ПараметрыФормы.Вставить("Авторизован", ДанныеПеревозчика.ДанныеАвторизацииВведены);
		ПараметрыФормы.Вставить("ИдентификаторСервиса", ДанныеПеревозчика.ИдентификаторСервиса);
		ПараметрыФормы.Вставить("УстаревшийТипАвторизации", ДанныеПеревозчика.УстаревшийТипАвторизации);
		ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
		ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
			
			ЗагрузитьРезультатПолученияСпискаПеревозчиков(РезультатОперации);
			
			Если Перевозчики.Количество() Тогда
				Элементы.Перевозчики.ТекущаяСтрока = Перевозчики[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			
			СтруктураПоиска = Новый Структура("Использовать", Истина);
			Если Перевозчики.Количество() > 0 И Перевозчики.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(РезультатОперации);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) И Не ЗначениеЗаполнено(КомментарийОпцияКурьерика)
		И Не ОпцияДоступнаКурьерика Тогда
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	КонецЕсли;
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьГрузоперевозчиков()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		ИмяПроцедуры = Операция.Представление;
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеОпцииКурьерика();
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат)
	
	ОперацияВыполнена = Ложь;
	
	Перевозчики.Очистить();
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Список") Тогда
			
			ЭлементыСписка = Результат.Список;
			
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				
				ПараметрыПоиска = Новый Структура();
				ПараметрыПоиска.Вставить("Перевозчик", ТекущийЭлементСписка.Наименование);
				ПараметрыПоиска.Вставить("Идентификатор", ТекущийЭлементСписка.Идентификатор);
				
				НайденныеСтроки = Перевозчики.НайтиСтроки(ПараметрыПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТаблицы = НайденныеСтроки[0];
				Иначе
					СтрокаТаблицы = Перевозчики.Добавить();
					СтрокаТаблицы.Перевозчик = ТекущийЭлементСписка.Наименование;
					СтрокаТаблицы.Идентификатор = ТекущийЭлементСписка.Идентификатор;
				КонецЕсли;
				
				СтрокаТаблицы.ТребуетсяАвторизация = ТекущийЭлементСписка.ТребуетсяАвторизация;
				СтрокаТаблицы.ИдентификаторСервиса = ТекущийЭлементСписка.ИдентификаторСервиса;
				СтрокаТаблицы.ВозможнаРаботаБезАвторизации = ТекущийЭлементСписка.ВозможнаРаботаБезАвторизации;
				СтрокаТаблицы.ДанныеАвторизацииВведены = ТекущийЭлементСписка.ДанныеАвторизацииВведены;
				СтрокаТаблицы.УстаревшийТипАвторизации = ТекущийЭлементСписка.УстаревшийТипАвторизации;
				СтрокаТаблицы.ТипАвторизации = ТекущийЭлементСписка.ТипАвторизации;
				СтрокаТаблицы.ОписаниеПодключения = ТекущийЭлементСписка.ОписаниеПодключения;
				
				Если ТекущийЭлементСписка.Свойство("УспешнаяАвторизация") Тогда
					СтрокаТаблицы.УспешнаяАвторизация = ТекущийЭлементСписка.УспешнаяАвторизация;
				КонецЕсли;
				
				Если Результат.Свойство("Организация") Тогда
					СтрокаТаблицы.Организация = Результат.Организация;
				КонецЕсли;
				
				ЗаполнитьИнформациюПоАвторизации(СтрокаТаблицы);
				
			КонецЦикла;
			
			ОперацияВыполнена = Истина;
		
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат)
	
	ОперацияВыполнена = Ложь;
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодпискаНаСервис", "Видимость", Истина);
		
		Если Результат.Свойство("ОпцияДоступна") Тогда
			
			ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
			КомментарийОпцияКурьерика = Результат.Комментарий;
			БалансОпцияКурьерика = Результат.Баланс;
			СрокДействияОпцияКурьерика = ПрочитатьДатуJSON(Результат.СрокДействия, ФорматДатыJSON.ISO);
			
			Если Не ОпцияДоступнаКурьерика Тогда
				ДоступенТестовыйПериод = СервисДоставки.ДоступенТестовыйПериодСервисаСопровождения();
			КонецЕсли;
			
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
			
			ОперацияВыполнена = Истина;
			
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Перевозчики

&НаСервере
Процедура ЗаполнитьИнформациюПоАвторизации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ТребуетсяАвторизация
		И СтрокаТаблицы.ДанныеАвторизацииВведены Тогда
			
		Если СтрокаТаблицы.УспешнаяАвторизация Тогда
			
			СтрокаТаблицы.Использовать = Истина;
			СтрокаТаблицы.Описание = НСтр("ru = 'Введены данные авторизации'");
			СтрокаТаблицы.НастройкаПодключения = НСтр("ru = 'Подключение выполнено'");
			СтрокаТаблицы.НастройкаПодключенияКартинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
			
		Иначе
			
			СтрокаТаблицы.Использовать = Истина;
			СтрокаТаблицы.Описание = НСтр("ru = 'Некорректные данные авторизации'");
			СтрокаТаблицы.НастройкаПодключения = НСтр("ru = 'Подключение не выполнено'");
			СтрокаТаблицы.НастройкаПодключенияКартинка = БиблиотекаКартинок.КрасныйШарБЭД;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.ВозможнаРаботаБезАвторизации
		И СтрокаТаблицы.ТребуетсяАвторизация Тогда
			
		СтрокаТаблицы.Использовать = Истина;
		СтрокаТаблицы.Описание = НСтр("ru = 'Возможна работа без авторизации. Для получения персональных скидок нужна авторизация'");
		СтрокаТаблицы.НастройкаПодключения = НСтр("ru = 'Возможна работа без авторизации. Для получения персональных скидок нужна авторизация'");
		СтрокаТаблицы.НастройкаПодключенияКартинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		
	ИначеЕсли СтрокаТаблицы.ВозможнаРаботаБезАвторизации Тогда
		
		СтрокаТаблицы.Описание = НСтр("ru = 'Для работы с данным сервисом авторизация не нужна'");
		СтрокаТаблицы.Использовать = Истина;
		СтрокаТаблицы.НастройкаПодключения = НСтр("ru = 'Подключение выполнено'");
		СтрокаТаблицы.НастройкаПодключенияКартинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
		
	Иначе
		
		СтрокаТаблицы.Описание = НСтр("ru = 'Для работы с данным сервисом обязательна авторизация'");
		СтрокаТаблицы.Использовать = Ложь;
		СтрокаТаблицы.НастройкаПодключения = НСтр("ru = 'Для работы с данным сервисом обязательна авторизация'");
		СтрокаТаблицы.НастройкаПодключенияКартинка = БиблиотекаКартинок.КрасныйШарБЭД;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуГрузоперевозчика(ВариантОтображения = "")
	
	ДанныеПеревозчика = Элементы.Перевозчики.ТекущиеДанные;
	
	Если ДанныеПеревозчика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = ПараметрыОткрытияФормыКарточкаГрузоперевозчика(
		ДанныеПеревозчика.Идентификатор,
		ДанныеПеревозчика.Организация,
		ТипГрузоперевозки,
		ВариантОтображения);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика",
		ПараметрыОткрытияФормы,
		,
		ДанныеПеревозчика.Идентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытииОкнаАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьГрузоперевозчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПодключения(ДанныеПеревозчика)
	
	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииОкнаАвторизации", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ДанныеПеревозчика.Организация);
	ПараметрыФормы.Вставить("Перевозчик", ДанныеПеревозчика.Перевозчик);
	ПараметрыФормы.Вставить("ТипАвторизации", ДанныеПеревозчика.ТипАвторизации);
	ПараметрыФормы.Вставить("Авторизован", ДанныеПеревозчика.ДанныеАвторизацииВведены);
	ПараметрыФормы.Вставить("ИдентификаторСервиса", ДанныеПеревозчика.ИдентификаторСервиса);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЕсли;
	Возврат СтрокаДоТочки;
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Подключение к перевозчикам'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапка", "Видимость", ЭтоКурьерика Или ЭтоСДЭК);
	СтруктураПоиска = Новый Структура("Использовать", Истина);
	Если Перевозчики.Количество() > 0 И Перевозчики.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодпискаНаСервис", "Видимость", ЭтоКурьерика);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияТарифы", "Видимость", Не ЭтоКурьерика);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Перевозчик", "Видимость", Не (ЭтоКурьерика Или ЭтоСДЭК));
	
	Элементы.Логотип.Картинка = СервисДоставкиКлиентСервер.ЛоготипГрузоперевозчика(ТипГрузоперевозки);
	
	Если ЭтоСДЭК Тогда
		КраткоеОписание = НСтр("ru = '<a href=""СДЭК (CDEK)"">СДЭК (CDEK)</a> – это крупная транспортная компания, которая занимается логистикой.
							   |
							   |Основным преимуществом транспортной компании является возможность быстрой доставки посылок, грузов и документов по всей России.
							   |Компания работает с более чем 500 городами, включая удаленные и малонаселенные регионы, что делает ее еще более удобной для покупателей и продавцов.
							   |Кроме того, она имеет собственную сеть пунктов выдачи заказов, что позволяет получателям самостоятельно забирать свои отправления в удобное для них время и близко к дому.'");
		
		Элементы.КраткоеОписание.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(КраткоеОписание);
		Элементы.ДекорацияКонтакты.Заголовок = НСтр(
			"ru = 'Контакты: Российская Федерация, Москва, пр. Завода Серп и Молот, 3, корп. 2, тел. +7 (495) 797-81-08'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыКарточкаГрузоперевозчика(Идентификатор, Организация, ТипГрузоперевозки, ВариантОтображения)
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор", Идентификатор);
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	Результат.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	Результат.Вставить("ВариантОтображения", ВариантОтображения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
