
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Параметры.Свойство("Идентификатор", Идентификатор);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Идентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	ВариантОтображения = Неопределено;
	Параметры.Свойство("ВариантОтображения", ВариантОтображения);
	Если ЗначениеЗаполнено(ВариантОтображения) Тогда
		
		Элементы.ГруппаОсновнаяСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Если ВариантОтображения = "КонтактнаяИнформация" Тогда
			Элементы.ГруппаОсновнаяСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
		ИначеЕсли ВариантОтображения = "Тарифы" Тогда
			Элементы.ГруппаОсновнаяСтраницы.ТекущаяСтраница = Элементы.ГруппаТарифы;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КарточкаГрузоперевозчикаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка,
	ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = "АдресСайта" Тогда
		
		ПоказатьСайтГрузоперевозчика();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТарифа(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТарифПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ТекущиеДанные.ТарифИдентификатор);
	ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию());
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТарифПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПоУмолчанию Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ТекущиеДанные.ТарифИдентификатор);
	ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию());
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузки;
	
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика() Тогда
			
			ОперацияВыполнена = Истина;
			ЗагрузитьРезультатПолученияДанныхГрузоперевозчика(РезультатОперации, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
			
			ОперацияВыполнена = Истина;
			ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(РезультатОперации, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
			
			ОперацияВыполнена = Истина;
			ЗагрузитьРезультатСбросаТарифаПоУмолчанию(РезультатОперации, ОперацияВыполнена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика());
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		ИмяПроцедуры = Операция.Представление;
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьДанныеГрузоперевозчика(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
			Операция.Значение = ПараметрыЗапросаУстановитьТарифПоУмолчанию(Операция.Значение, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
			Операция.Значение = ПараметрыЗапросаСброситьТарифПоУмолчанию(Операция.Значение, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДанныеГрузоперевозчика(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДанныеГрузоперевозчика();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	
	Возврат ПараметрыЗапроса;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию();
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ПараметрыОперации.ТарифИдентификатор);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию();
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ПараметрыОперации.ТарифИдентификатор);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Процедура ЗагрузитьРезультатПолученияДанныхГрузоперевозчика(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Данные") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.Данные);
			
			Если Результат.Данные.Свойство("ДанныеПоТарифам") Тогда
				ЗаполнитьДанныеТарифов(Результат.Данные.ДанныеПоТарифам);
			КонецЕсли;

		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СформироватьКарточкуГрузоперевозчика();
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОперацияВыполнена") Тогда
			ОперацияВыполнена = Результат.ОперацияВыполнена;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		Для Каждого ТекущийТариф Из Тарифы Цикл
			Если ТекущийТариф.ПоУмолчанию Тогда
				ТекущийТариф.ПоУмолчанию = Ложь;
				СформироватьПредставлениеТарифа(ТекущийТариф);
			КонецЕсли;
		КонецЦикла;
		
		Если Результат.Свойство("ТарифИдентификатор") Тогда
			НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("ТарифИдентификатор", Результат.ТарифИдентификатор));
			Если НайденныеСтроки.Количество() Тогда
				НайденныеСтроки[0].ПоУмолчанию = Истина;
				СформироватьПредставлениеТарифа(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСбросаТарифаПоУмолчанию(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОперацияВыполнена") Тогда
			ОперацияВыполнена = Результат.ОперацияВыполнена;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		Для Каждого ТекущийТариф Из Тарифы Цикл
			Если ТекущийТариф.ПоУмолчанию Тогда
				ТекущийТариф.ПоУмолчанию = Ложь;
				СформироватьПредставлениеТарифа(ТекущийТариф);
			КонецЕсли;
		КонецЦикла;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: %2'"), НСтр("ru = 'Перевозчик'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
	ДоступноУправлениеТарифами = СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки)
		И СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	Элементы.ТарифыУстановитьТарифПоУмолчанию.Видимость = Не ЭтоСДЭК;
	Элементы.ТарифыУстановитьТарифПоУмолчанию.Доступность = ДоступноУправлениеТарифами;
	Элементы.ТарифыСброситьТарифПоУмолчанию.Видимость = Не ЭтоСДЭК;
	Элементы.ТарифыСброситьТарифПоУмолчанию.Доступность = ДоступноУправлениеТарифами;
	Элементы.ТарифыКонтекстноеМенюУстановитьТарифПоУмолчанию.Видимость = Не ЭтоСДЭК;
	Элементы.ТарифыКонтекстноеМенюУстановитьТарифПоУмолчанию.Доступность = ДоступноУправлениеТарифами;
	Элементы.ТарифыКонтекстноеМенюСброситьТарифПоУмолчанию.Видимость = Не ЭтоСДЭК;
	Элементы.ТарифыКонтекстноеМенюСброситьТарифПоУмолчанию.Доступность = ДоступноУправлениеТарифами;
	
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Элементы.ГруппаОсновнаяСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКарточкуГрузоперевозчика()
	
	КарточкаГрузоперевозчика = ТабличныйДокументКарточкаГрузоперевозчика();
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументКарточкаГрузоперевозчика()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Грузоперевозчик");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.Наименование = НаименованиеПолное;
	ПараметрыОбласти.ЮридическийАдрес = ЮридическийАдрес;
	ПараметрыОбласти.ФизическийАдрес = ФизическийАдрес;
	ПараметрыОбласти.Телефон = Телефон;
	ПараметрыОбласти.АдресСайта = АдресСайта;
	ПараметрыОбласти.РасшифровкаАдресСайта = "АдресСайта";
	ПараметрыОбласти.Описание = Описание;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСайтГрузоперевозчика()
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСайта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТарифов(ДанныеПоТарифам)
	
	Тарифы.Очистить();
	Для Каждого СтрокаТарифа Из ДанныеПоТарифам Цикл
		НоваяСтрокаТарифа = Тарифы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТарифа, СтрокаТарифа);
		СформироватьПредставлениеТарифа(НоваяСтрокаТарифа);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеТарифа(Параметры)
	
	Параметры.ТарифПредставление = Параметры.ТарифНаименование
		+ ?(Параметры.ПоУмолчанию, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" (%1)", НСтр("ru='по умолчанию'")), "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа(ВыбраннаяСтрока)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ТарифИдентификатор = Тарифы.НайтиПоИдентификатору(ВыбраннаяСтрока).ТарифИдентификатор;
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Тарифы.НайтиПоИдентификатору(ВыбраннаяСтрока).ТарифИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", 
		ПараметрыОткрытияФормы,
		,
		ТарифИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

#КонецОбласти
