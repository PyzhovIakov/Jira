
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", Организация);
	ТипГрузоперевозкиСвойство = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТипГрузоперевозки", 0);
	ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Получить(ТипГрузоперевозкиСвойство - 1);
	ДокументыОснования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДокументыОснования", Новый СписокЗначений);
	ЗаполнитьТаблицуДокументов(ДокументыОснования);
	
	Если Документы.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьОформлениеПоУмолчанию();
	ИзменениеРеквизитов();
	НастроитьФормуПоТипуГрузоперевозки();
	УстановитьУсловноеОформление();
	УстановитьКэшированныеЗначения();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОформлениеПрогресса();
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;

	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СервисДоставки_ЗаказНаДоставкуОтменен" Тогда
		НайденныеСтроки = Документы.НайтиСтроки(Новый Структура("ИдентификаторЗаказа", Источник));
		Для Каждого СтрокаТаблицыДокументы Из НайденныеСтроки Цикл
			СтрокаТаблицыДокументы.Состояние = СостояниеОтменен();
			СтрокаТаблицыДокументы.Информация = СформироватьСостояние(НСтр("ru = 'Отменен заказчиком'"));
			СтрокаТаблицыДокументы.ИнформацияПолная = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантВремениОтгрузкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ДатаДоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогрессОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыполняетсяДлительнаяОперация() Тогда
		ОтменитьВыполнениеЗадания( , СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку());
	КонецЕсли;
	
	УстановитьОформлениеПрогресса( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыИнформацияПолнаяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ПоказатьПредупреждение( , Элемент.ТекстРедактирования);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Документы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОпцияКурьерикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьТестовыйПериод" Тогда
		
		СтандартнаяОбработка = Ложь;
		СервисДоставкиКлиент.ПодключитьТестовыйПериодКурьерика();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьСостояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура ДокументыПриИзменении(Элемент)
	
	УстановитьОформлениеПрогресса( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	Если ВыполняетсяДлительнаяОперация() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Значение = ТекущиеДанные[СтрЗаменить(Элементы[Элемент.Имя].ТекущийЭлемент.Имя, Элемент.ТекущийЭлемент.Родитель.Имя,"")];
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Поле = Элементы.ДокументыИнформация И Значение = СтрокаОшибка() Тогда
			ПоказатьПредупреждение( , ТекущиеДанные.ИнформацияПолная);
		ИначеЕсли Поле = Элементы.ДокументыЗаказНаДоставку И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторЗаказа) Тогда
			ОткрытьКарточкуЗаказаНаДоставку(ТекущиеДанные.ИдентификаторЗаказа);
		ИначеЕсли Поле = Элементы.ДокументыДокументОснование Тогда
			ПоказатьЗначение( , Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Документы.ТекущиеДанные;
	
	ИмяРеквизитаТекущийИдентификаторЗаказа = "ТекущийИдентификаторЗаказа";
	ИмяРеквизитаТекущийИдентификаторСтроки = "ТекущийИдентификаторСтроки";
	
	Если ТекущиеДанные = Неопределено Тогда
		ЭтотОбъект[ИмяРеквизитаТекущийИдентификаторЗаказа] = "";
		ЭтотОбъект[ИмяРеквизитаТекущийИдентификаторСтроки] = -1;
	Иначе
		ЭтотОбъект[ИмяРеквизитаТекущийИдентификаторЗаказа] = ТекущиеДанные.ИдентификаторЗаказа;
		ЭтотОбъект[ИмяРеквизитаТекущийИдентификаторСтроки] = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура СохранитьКакЧерновики(Команда)

	ОчиститьСообщения();

	Обещание = ВопросАсинх(
		НСтр("ru = 'По документам будут созданы заказы на доставку. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Ответ = Ждать Обещание;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОформлениеПрогресса();
		ПодключитьОбработчикОжидания("Подключаемый_СоздатьИзменитьЗаказыНаДоставку", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьЗаказы(Команда)

	ОчиститьСообщения();

	Обещание = ВопросАсинх(
		НСтр("ru = 'По документам будут созданы и отправлены в сервис заказы на доставку. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Ответ = Ждать Обещание;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОформлениеПрогресса();
		ПодключитьОбработчикОжидания("Подключаемый_СоздатьИзменитьОтправитьЗаказыНаДоставку", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		УстановитьОформлениеПрогресса( , Истина);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		УстановитьОформлениеПрогресса( , Истина);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить запрос в фоне.
// 
// Параметры:
//  ИнтернетПоддержкаПодключена - Булево
//  ПараметрыОперации - Структура
&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Для Каждого Операция Из ФоновоеЗадание.Очередь Цикл
			
			ИмяМетода = Операция.Представление;
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
				
				ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОповещениеОПрогрессеВыполнения", ЭтотОбъект);
				ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение", ЭтотОбъект, ПараметрыОперации);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОПрогрессеВыполнения(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Прогресс = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Прогресс");
		Если ТипЗнч(Прогресс) = Тип("Структура") Тогда
			ИдентификаторЗадания = Кэш[СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку()];
			Если Результат.ИдентификаторЗадания = ИдентификаторЗадания Тогда
				МассивРезультатов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Прогресс, "ДополнительныеПараметры");
				Если ТипЗнч(МассивРезультатов) = Тип("Массив") Тогда
					Для Каждого ДанныеЗаказа Из МассивРезультатов Цикл
						ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Текст = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Прогресс, "Текст", "");
			Если Не ПустаяСтрока(Текст) Тогда
				УстановитьОформлениеПрогресса(Текст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняется длительная операция.
// 
// Возвращаемое значение:
//  Булево - Выполняется длительная операция
&НаКлиенте
Функция ВыполняетсяДлительнаяОперация()
	
	Возврат Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница <> Элементы.ГруппаСтраницаИтоги;
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания = Неопределено, ИмяМетода = "")
	
	Если ИдентификаторЗадания = Неопределено И Не ПустаяСтрока(ИмяМетода) Тогда
		ИдентификаторЗадания = Кэш[ИмяМетода];
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	Кэш[ИмяМетода] = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		ВывестиСообщениеОбОшибке(УникальныйИдентификатор, Сообщение.Текст);
	КонецЦикла;
	
	Если Не ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
	
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			
			ЗагрузитьРезультатПолученияСостоянийЗаказов(РезультатОперации);
			УстановитьОформлениеПрогресса( , Истина);
		
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
			
			ЗагрузитьРезультатСозданияИзмененияОтправленияЗаказов(РезультатОперации);
			УстановитьОформлениеПрогресса( , Истина);
			Оповестить("ОбновитьСписокЗаказовНаДоставку",
				СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки));
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			
			ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(РезультатОперации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
			
			Если Результат = Неопределено Тогда
				УстановитьОформлениеПрогресса( , Истина);
			КонецЕсли;
			Кэш[СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку()] = Неопределено;
	
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	Если ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Курьерика Тогда
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	КонецЕсли;
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку());
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш.Вставить("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьОтправитьЗаказыНаДоставку(Отправка = Ложь)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Создание и отправка заказов на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыОперации.Вставить("Интервал", 1);
	ПараметрыОперации.Вставить("Отправка", Отправка);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
	Если ТипЗнч(ПараметрыОперации.ФоновоеЗадание) = Тип("Структура") Тогда
		ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку();
		Кэш[ИмяМетода] = ПараметрыОперации.ФоновоеЗадание.ИдентификаторЗадания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

// Параметры запроса.
// 
// Параметры:
//  ПараметрыОперации - Структура
//  Отказ - Булево
// 
// Возвращаемое значение:
//  Структура
&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеОпцииКурьерика();
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьСостоянияЗаказовНаДоставку(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаСоздатьИзменитьОтправитьЗаказыНаДоставку(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки));
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьСостоянияЗаказовНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
	Результат.Состояние.Добавить().Идентификатор = -1; // Все состояния
	
	СписокИдентификаторов = Результат.ИдентификаторыЗаказов;
	Для Каждого Строка Из Документы Цикл
		Если Не ПустаяСтрока(Строка.ИдентификаторЗаказа) Тогда
			СписокИдентификаторов.Добавить(Строка.ИдентификаторЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьОтправитьЗаказыНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаЗаписатьИзменитьОтправитьСписокЗаказовНаДоставку();
	
	Результат.Отправка = ПараметрыОперации.Отправка;
	Результат.ГрупповаяОбработка = Истина;
	Результат.ПараметрыДанныеФормы = ПараметрыДанныеФормы();
	
	СписокЗаказов = Результат.СписокЗаказов;
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(СостояниеОшибка());
	ДопустимыеСостояния.Добавить(СостояниеСоздан());
	ДопустимыеСостояния.Добавить(СостояниеПодготовлен());
	
	Для Каждого Строка Из Документы Цикл
		Если ДопустимыеСостояния.Найти(Строка.Состояние) <> Неопределено Тогда
			Строка.Обработано = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы", Документы.Выгрузить());
	Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.ДокументОснование,
	|	Документы.Идентификатор,
	|	Документы.ИдентификаторЗаказа,
	|	Документы.ИдентификаторСтроки,
	|	Документы.ЗаказНаДоставку,
	|	Документы.Состояние
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	&Документы КАК Документы
	|ГДЕ
	|	Документы.Состояние В (&ДопустимыеСостояния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.ДокументОснование КАК ДокументОснование,
	|	ВТ_Документы.ДокументОснование.Склад КАК Склад,
	|	ВТ_Документы.ДокументОснование.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ВТ_Документы.ДокументОснование.АдресДоставки, """") КАК АдресДоставки,
	|	ВТ_Документы.Идентификатор КАК ДокументОснованиеИдентификатор,
	|	ВТ_Документы.ИдентификаторЗаказа КАК Идентификатор,
	|	ВТ_Документы.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ВТ_Документы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_Документы.ЗаказНаДоставку,
	|	ВТ_Документы.Состояние
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Документы.ДокументОснование,
	|	ВТ_Документы.ЗаказНаДоставку
	|ИТОГИ
	|ПО
	|	ВТ_Документы.ДокументОснование.Склад,
	|	ВТ_Документы.ДокументОснование.Контрагент,
	|	ВТ_Документы.ДокументОснование.АдресДоставки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУровень1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУровень1.Следующий() Цикл
		
		ВыборкаУровень2 = ВыборкаУровень1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУровень2.Следующий() Цикл
		
			ВыборкаУровень3 = ВыборкаУровень2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУровень3.Следующий() Цикл
				
				ПараметрыЗаказа = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьОтправитьЗаказНаДоставку();
				
				ВыборкаУровень4 = ВыборкаУровень3.Выбрать();
				Пока ВыборкаУровень4.Следующий() Цикл
					
					Если ВыборкаУровень4.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
						Продолжить;
					КонецЕсли;
					
					РежимОбъединения = ГруппироватьЗаказыПолучателяНаОдинАдрес
						И (ВыборкаУровень4.Состояние = СостояниеПодготовлен() Или ВыборкаУровень4.Состояние = СостояниеОшибка())
						И ПустаяСтрока(ВыборкаУровень4.ИдентификаторЗаказа) И Не ПустаяСтрока(ВыборкаУровень4.АдресДоставки);
					
					Если РежимОбъединения Тогда
						ТекущиеПараметры = ПараметрыЗаказа;
					Иначе
						ИмяСвойства = "Идентификатор";
						Если Не ПустаяСтрока(ВыборкаУровень4[ИмяСвойства]) Тогда
							Для Каждого СуществующиеПараметры Из СписокЗаказов Цикл
								Если СуществующиеПараметры[ИмяСвойства] = ВыборкаУровень4[ИмяСвойства] Тогда
									ТекущиеПараметры = СуществующиеПараметры;
									РежимОбъединения = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если Не РежимОбъединения Тогда
							ТекущиеПараметры = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьОтправитьЗаказНаДоставку();
						КонецЕсли;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТекущиеПараметры, ВыборкаУровень4, , "ДокументОснование");
					ТекущиеПараметры.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки);
					ТекущиеПараметры.ИдентификаторыСтрок.Добавить(ВыборкаУровень4.ИдентификаторСтроки);
					ТекущиеПараметры.ДокументыОснования.Добавить(ВыборкаУровень4.ДокументОснование);
					ТекущиеПараметры.ДокументыОснованияИдентификаторы.Добавить(ВыборкаУровень4.ДокументОснованиеИдентификатор);
					
					Если Не РежимОбъединения Тогда
						СписокЗаказов.Добавить(ТекущиеПараметры);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПараметрыЗаказа.ДокументыОснования.Количество() > 0 Тогда
					СписокЗаказов.Добавить(ПараметрыЗаказа);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если СписокЗаказов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обработка документов не требуется.'"), , , , Отказ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОпцияДоступна") Тогда
			
			ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
			КомментарийОпцияКурьерика = Результат.Комментарий;
			БалансОпцияКурьерика = Результат.Баланс;
			СрокДействияОпцияКурьерика = ПрочитатьДатуJSON(Результат.СрокДействия, ФорматДатыJSON.ISO);
			
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
			Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
			
		КонецЕсли;
		
		Если Результат.Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(Результат.Ошибки, Символы.ПС);
			ВывестиСообщениеОбОшибке(УникальныйИдентификатор, ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСостоянийЗаказов(Результат)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(Результат.Ошибки, Символы.ПС);
		ВывестиСообщениеОбОшибке(УникальныйИдентификатор, ТекстОшибки);
	КонецЕсли;
	
	Список = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Список", Новый Массив);
	
	Для Каждого ДанныеЗаказа Из Список Цикл
		
		ДокументыОснования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаказа, "ДокументыОснования", Новый СписокЗначений);
		Отбор = Новый Структура("ИдентификаторЗаказа, ДокументОснование", "", Неопределено);
		Для Каждого ДокументОснование Из ДокументыОснования Цикл
			
			Отбор.ДокументОснование = ДокументОснование.Значение;
			Отбор.ИдентификаторЗаказа = ДанныеЗаказа.Идентификатор;
			Для Каждого СтрокаТаблицыДокументы Из Документы.НайтиСтроки(Отбор) Цикл
				
				Если ДанныеЗаказа.СостояниеИдентификатор = 0 Тогда
					Состояние = СостояниеСоздан();
				ИначеЕсли ДанныеЗаказа.СостояниеИдентификатор = 18 Тогда
					Состояние = СостояниеОтменен();
				Иначе
					Состояние = СостояниеОтправлен();
				КонецЕсли;
				
				СтрокаТаблицыДокументы.Состояние = Состояние;
				СтрокаТаблицыДокументы.Информация = СформироватьСостояние(ДанныеЗаказа.Состояние);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из Документы Цикл
		
		Если Строка.Состояние = СостояниеОтменен() Тогда
			
			ПоискПоОснованию = Документы.НайтиСтроки(Новый Структура("Идентификатор", Строка.Идентификатор));
			ЕстьЗаказНаДоставку = Ложь;
			Для Каждого СтрокаПоОснованию Из ПоискПоОснованию Цикл
				Если СтрокаПоОснованию.Состояние <> СостояниеОтменен() Тогда
					ЕстьЗаказНаДоставку = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьЗаказНаДоставку Тогда
				ИндексТекущейСтроки = Документы.Индекс(Строка);
				НоваяСтрока = Документы.Вставить(ИндексТекущейСтроки + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Идентификатор, ДокументОснование");
				НоваяСтрока.Состояние = СостояниеПодготовлен();
				НоваяСтрока.ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		ИначеЕсли Строка.Состояние = СостояниеПодготовлен() И Не ПустаяСтрока(Строка.ИдентификаторЗаказа) Тогда
			
			Строка.Состояние = СостояниеПредупреждение();
			Строка.Информация = СформироватьСостояние(Неопределено);
			Строка.ИнформацияПолная = НСтр("ru = 'Введено в другой информационной базе'");
			Строка.Обработано = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияИзмененияОтправленияЗаказов(Результат)
	
	Если Результат <> Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(Результат);
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
			
			Для Каждого ДанныеЗаказа Из Результат Цикл
				ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа)
	
	Для Каждого ИдентификаторСтроки Из ДанныеЗаказа.ИдентификаторыСтрок Цикл
	
		СтрокаТаблицыДокументы = Документы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицыДокументы = Неопределено Или СтрокаТаблицыДокументы.Обработано Тогда
			Продолжить;
		КонецЕсли;
	
		Отправка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаказа, "Отправка", Ложь);
		ДокументОснование = СтрокаТаблицыДокументы.ДокументОснование;
		Представление = СтрокаТаблицыДокументы.ЗаказНаДоставку;
		Если ПустаяСтрока(Представление) И ДанныеЗаказа.Свойство("НомерЗаказа") Тогда
			Представление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ДанныеЗаказа, Истина);
			СтрокаТаблицыДокументы.ЗаказНаДоставку = Представление;
		КонецЕсли;
	
		ИдентификаторДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаказа, "Идентификатор", "");
		Если Не ПустаяСтрока(Представление) И ПустаяСтрока(СтрокаТаблицыДокументы.ИдентификаторЗаказа)
			И Не ПустаяСтрока(ИдентификаторДокумента) Тогда
			ПараметрыСозданияДанныхЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки();
			ПараметрыСозданияДанныхЗаказа.ТипГрузоперевозки = ТипГрузоперевозки;
			ПараметрыСозданияДанныхЗаказа.Организация = Организация;
			ПараметрыСозданияДанныхЗаказа.ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ДокументОснование);
			ПараметрыСозданияДанныхЗаказа.ИдентификаторДокумента = Новый УникальныйИдентификатор(ИдентификаторДокумента);
			ПараметрыСозданияДанныхЗаказа.Представление = Представление;
			ПараметрыСозданияДанныхЗаказа.СостояниеИдентификатор = ДанныеЗаказа.СостояниеИдентификатор;
			ПараметрыСозданияДанныхЗаказа.СостояниеПредставление = ДанныеЗаказа.Состояние;
			ПараметрыСозданияДанныхЗаказа.Номер = ДанныеЗаказа.НомерЗаказа;
			ПараметрыСозданияДанныхЗаказа.Дата = ДанныеЗаказа.ДатаЗаказа;
			СервисДоставки.СоздатьОбновитьДанныеЗаказа(ПараметрыСозданияДанныхЗаказа);
		КонецЕсли;
	
		СтрокаТаблицыДокументы.ИдентификаторЗаказа = ?(ПустаяСтрока(ИдентификаторДокумента),
			СтрокаТаблицыДокументы.ИдентификаторЗаказа, ИдентификаторДокумента);
	
		Если ДанныеЗаказа.Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(ДанныеЗаказа.Ошибки, Символы.ПС);
			ВывестиСообщениеОбОшибке(УникальныйИдентификатор, ТекстОшибки, СтрокаТаблицыДокументы);
		Иначе
			СтрокаТаблицыДокументы.Состояние = ?(Отправка, СостояниеОтправлен(), СостояниеСоздан());
			СтрокаТаблицыДокументы.Информация = СформироватьСостояние(ДанныеЗаказа.Состояние);
			СтрокаТаблицыДокументы.ИнформацияПолная = "";
		КонецЕсли;
		
		СтрокаТаблицыДокументы.Обработано = Истина;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Состояния

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеОшибка()
	Возврат 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеСоздан()
	Возврат 1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеПодготовлен()
	Возврат 2;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеОтправлен()
	Возврат 3;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеПредупреждение()
	Возврат 5;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеОтменен()
	Возврат 6;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьТаблицуДокументов(ДокументыОснования)
	
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		Документы.Добавить().ДокументОснование = ДокументОснование.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ДокументыОснования.ДокументОснование) КАК Идентификатор,
		|	ДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	&ДокументыОснования КАК ДокументыОснования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.ДокументОснование КАК ДокументОснование,
		|	ВТ_Документы.Идентификатор КАК Идентификатор,
		|	ДанныеЗаказовСервисДоставки.ИдентификаторДокумента КАК ИдентификаторЗаказа,
		|	2 КАК Состояние,
		|	ЕстьNULL(ДанныеЗаказовСервисДоставки.Представление, """") КАК ЗаказНаДоставку
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
		|		ПО ДанныеЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
		|		И ДанныеЗаказовСервисДоставки.Организация = &Организация
		|		И ВТ_Документы.ДокументОснование = ДанныеЗаказовСервисДоставки.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование,
		|	ЗаказНаДоставку";
	
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДокументыОснования", Документы.Выгрузить());
	
	Результат = Запрос.Выполнить().Выгрузить();
	Документы.Загрузить(Результат);
	
	Для Каждого Строка Из Документы Цикл
		Строка.ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОбОшибке(УникальныйИдентификатор, ТекстОшибки = "", СтрокаТаблицыДокументы = Неопределено)
	
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "Bad Request", ОшибкаСервиса());
	ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), ОшибкаСервиса(), ТекстОшибки);
	
	Если СтрокаТаблицыДокументы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыДокументы.Состояние = СостояниеОшибка();
	СтрокаТаблицыДокументы.Информация = СтрокаОшибка();
	СтрокаТаблицыДокументы.ИнформацияПолная = ТекстОшибки;
	
КонецПроцедуры

// Сформировать состояние.
// 
// Возвращаемое значение:
//  Строка - Состояние
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСостояние(Состояние)
	Возврат СтрШаблон("%1: %2", НСтр("ru = 'Состояние'"),
		?(ЗначениеЗаполнено(Состояние), Состояние, НСтр("ru = 'Неизвестно'")));
КонецФункции

// Текст ошибка.
// 
// Возвращаемое значение:
//  Строка - Текст ошибка
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОшибка()
	Возврат НСтр("ru = 'Ошибка'");
КонецФункции

// Текст ошибка сервиса.
// 
// Возвращаемое значение:
//  Строка - Текст ошибка сервиса
&НаКлиентеНаСервереБезКонтекста
Функция ОшибкаСервиса()
	Возврат СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса();
КонецФункции

&НаСервере
Функция ПараметрыДанныеФормы()
	
	Структура = Новый Структура;
	
	Структура.Вставить("ФормаОплаты", 1);
	Структура.Вставить("НаложенныйПлатежВидОплаты", 2);
	Структура.Вставить("ВариантВремениОтгрузки", ВариантВремениОтгрузки);
	Структура.Вставить("ДатаДоставки", ДатаДоставки);
	Структура.Вставить("ВремяДоставки", СервисДоставки.НовыйПараметрыВремениОтгрузкиДоставки());
	Структура.ВремяДоставки.С = ВремяДоставкиС;
	Структура.ВремяДоставки.По = ВремяДоставкиПо;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИнтервалДоставки(Отказ = Ложь)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1, 1, 1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняДоставки = НачалоДня(ДатаДоставки);

	Если НачалоТекущегоДня = НачалоДняДоставки 
		И ТекущееВремя > ВремяДоставкиС 
		И ВремяДоставкиС <> Дата(1,1,1,0,0,0) Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбранное время доставки не может быть меньше текущего времени.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ВремяДоставкиС",, Отказ);
		
	ИначеЕсли НачалоТекущегоДня = НачалоДняДоставки
		И ВремяДоставкиПо <> Дата(1,1,1,0,0,0)
		И ТекущееВремя > ВремяДоставкиПо Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Невозможно оформить доставку на указанное время. Время доставки меньше, чем текущее.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ОтправительВремяПлановойОтгрузки",, Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(ВремяДоставкиС)
		И ЗначениеЗаполнено(ВремяДоставкиПо)
		И ВремяДоставкиПо <= ВремяДоставкиС Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбран неверный интервал доставки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(ИмяРеквизита)
	
	Если ИмяРеквизита = "ВариантВремениОтгрузки" Тогда
	
		ДоставитьКакМожноСкорее = ВариантВремениОтгрузки = 0;
		
		Элементы.ДатаДоставки.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиС.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиПо.Доступность = Не ДоставитьКакМожноСкорее;
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если Час(ДатаСеанса) > 22 Тогда
			ДатаСеанса = НачалоДня(ДатаСеанса + 86400);
		КонецЕсли;
		
		Если ДоставитьКакМожноСкорее Тогда
			ДатаДоставки = ДатаСеанса;
		КонецЕсли;
		
		БлижайшаяДатаНачала = ДатаСеанса + (15 - Минута(ДатаСеанса) % 15) * 60;
		ВремяДоставкиС = Дата(1, 1, 1) + Час(БлижайшаяДатаНачала) * 3600 + Минута(БлижайшаяДатаНачала) * 60;
		ВремяДоставкиПо = ВремяДоставкиС + 2 * 3600;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоУмолчанию()
	
	Элементы.ОтправитьЗаказы.Видимость = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
	ГруппироватьЗаказыПолучателяНаОдинАдрес = Истина;
	
	ЧасыДоставки = Новый Массив;
	Для ИндексЧасы = 0 По 23 Цикл
		Для ИндексМинуты = 0 По 3 Цикл
			ЧасыДоставки.Добавить(Дата(1, 1, 1, ИндексЧасы, ИндексМинуты * 15, 0));
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ВремяДоставкиС.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиС.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиС.Формат = НСтр("ru = 'ДФ=''""с ""HH:mm''; ДП=''с 00:00'''");
	Элементы.ВремяДоставкиС.ФорматРедактирования = Элементы.ВремяДоставкиС.Формат;
	
	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиС.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиС.Формат);
	КонецЦикла;
	
	Элементы.ВремяДоставкиПо.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиПо.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиПо.Формат = НСтр("ru = 'ДФ=''""до ""HH:mm''; ДП=''до 00:00'''");
	Элементы.ВремяДоставкиПо.ФорматРедактирования = Элементы.ВремяДоставкиПо.Формат;
	
	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиПо.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиПо.Формат);
	КонецЦикла;
	
	НастройкаВариантДоставки = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначениеНастройки("ВариантДоставки", ТипГрузоперевозки);
	Если НастройкаВариантДоставки <> Неопределено Тогда
		Если НастройкаВариантДоставки = 0 Тогда
			ВариантВремениОтгрузки = 0;
		Иначе
			ВариантВремениОтгрузки = 1;
			ДатаДоставки = НачалоДня(ТекущаяДатаСеанса() + 86400);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: %2'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		НСтр("ru = 'Создание и отправка заказов на доставку'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеПрогресса(Текст = "", ОбработкаЗавершена = Ложь)

	Элементы.ОтправитьЗаказы.Доступность = ОбработкаЗавершена И ОпцияДоступнаКурьерика;
	Элементы.СохранитьКакЧерновики.Доступность = ОбработкаЗавершена И ОпцияДоступнаКурьерика;
	
	МассивФС = Новый Массив;

	Если ОбработкаЗавершена Тогда
		Всего = Документы.Количество();
		Ошибки = Документы.НайтиСтроки(Новый Структура("Состояние", 0)).Количество();
		Создано = Всего - Документы.НайтиСтроки(Новый Структура("ИдентификаторЗаказа", "")).Количество();
		Отправлено = Документы.НайтиСтроки(Новый Структура("Состояние", 3)).Количество();
		Элементы.ДекорацияДокументы.Заголовок = СтрШаблон(НСтр("ru = 'Документы (%1)'"), Всего);
		Элементы.ДекорацияСоздано.Заголовок = СтрШаблон(НСтр("ru = 'Создано (%1)'"), Создано);
		Элементы.ДекорацияОтправлено.Заголовок = СтрШаблон(НСтр("ru = 'Отправлено (%1)'"), Отправлено);
		Элементы.ДекорацияОшибки.Заголовок = СтрШаблон(НСтр("ru = 'Ошибки (%1)'"), Ошибки);
		Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница = Элементы.ГруппаСтраницаИтоги;
	ИначеЕсли ПустаяСтрока(Текст) Тогда
		Элементы.ДекорацияКартинкаДлительнаяОперация.Видимость = Истина;
		МассивФС.Добавить(НСтр("ru = 'Подготовка документов'"));
		МассивФС.Добавить("...");
		Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница = Элементы.ГруппаСтраницаДлительнаяОперация;
	Иначе
		Элементы.ДекорацияКартинкаДлительнаяОперация.Видимость = Истина;
		МассивФС.Добавить(Текст);
		МассивФС.Добавить("  ");
		МассивФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Прервать'"),,,, "Прервать"));
	КонецЕсли;

	Элементы.ДекорацияПрогрессВыполнения.Заголовок = Новый ФорматированнаяСтрока(МассивФС);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеРеквизитов()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущийИдентификаторЗаказа",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36))));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущийИдентификаторСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный))));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ИмяРеквизита_ТекущийИдентификаторЗаказа = "ТекущийИдентификаторЗаказа";
	ИмяРеквизита_ТекущийИдентификаторСтроки = "ТекущийИдентификаторСтроки";
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НейтральноЗеленый);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Документы.Имя);

	ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документы.ИдентификаторЗаказа");
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита_ТекущийИдентификаторЗаказа);
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита_ТекущийИдентификаторЗаказа);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документы.ИдентификаторСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита_ТекущийИдентификаторСтроки);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыИнформация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документы.Состояние");
	ОтборЭлемента.ПравоеЗначение = СостояниеОшибка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиСервисДоставки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйТекстСервисДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьИзменитьЗаказыНаДоставку()

	СоздатьИзменитьОтправитьЗаказыНаДоставку();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьИзменитьОтправитьЗаказыНаДоставку()

	СоздатьИзменитьОтправитьЗаказыНаДоставку(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЗаказаНаДоставку(ИдентификаторЗаказа)
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыОткрытияФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки);
	ПараметрыОткрытияФормы.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки);
	ПараметрыОткрытияФормы.ОрганизацияБизнесСети = Организация;
	ПараметрыОткрытияФормы.РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
	ПараметрыОткрытияФормы.ИдентификаторЗаказа = ИдентификаторЗаказа;
	
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		
		ПараметрыОткрытияФормы.Вставить("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
		ПараметрыОткрытияФормы.Вставить("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("БалансОпцияКурьерика", БалансОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
		ПараметрыОткрытияФормы.Вставить("ОтображатьУведомлениеПоОпцииКурьерика", ОтображатьУведомлениеПоОпцииКурьерика);
		
	КонецЕсли;
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКэшированныеЗначения()
	
	Кэш = Новый Структура;
	
	Кэш.Вставить(СервисДоставкиКлиентСервер.ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку());
	
КонецПроцедуры

#КонецОбласти
