#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для настройки авторизации.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""'"));
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Параметры.Свойство("Организация", Организация);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	ТекстЗаголовок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Заголовок");
	Заголовок = ?(ЗначениеЗаполнено(ТекстЗаголовок), ТекстЗаголовок, Заголовок);
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("Перевозчик", Перевозчик);
	Параметры.Свойство("ИдентификаторСервиса", ИдентификаторСервиса);
	Параметры.Свойство("ТипАвторизации", ТипАвторизации);
	Параметры.Свойство("Авторизован", Авторизован);
	Параметры.Свойство("УстаревшийТипАвторизации", УстаревшийТипАвторизации);
	
	Элементы.ГруппаАвторизация.ТолькоПросмотр = Истина;
	Элементы.Изменить.Видимость = Ложь;
	Элементы.Подключить.Видимость = Ложь;
	
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
		
	Если ТипАвторизации <> "" Тогда
		ЗаполнитьАвторизациюПоТипу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущаяКоманда = Команды.Подключить.Имя Тогда
		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки)
			Или СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
			ПроверяемыеРеквизиты.Добавить("Логин");
			ПроверяемыеРеквизиты.Добавить("Пароль");
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
			ПроверяемыеРеквизиты.Добавить("Токен");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательКурьерикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательКурьерикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФИО = Строка(ВыбранноеЗначение);
		АдресЭлектроннойПочты = ПредставлениеАдресаЭлектроннойПочты(ВыбранноеЗначение);
		Телефон = ПредставлениеТелефона(ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			Элементы.ТелефонКурьерика.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Телефон));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Элементы.АдресЭлектроннойПочтыКурьерика.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресЭлектроннойПочты));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательКурьерикаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресЭлектроннойПочты = "";
	Телефон = "";
	
	Элементы.ТелефонКурьерика.СписокВыбора.Очистить();
	Элементы.АдресЭлектроннойПочтыКурьерика.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладКурьерикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ПунктВыдачиНаименование = Строка(Склад);
		ПунктВыдачиАдрес = ПредставлениеАдреса(Склад);
		ПунктВыдачиТелефон = ПредставлениеТелефона(Склад);
		
		Если ЗначениеЗаполнено(ПунктВыдачиНаименование) Тогда
			Элементы.ПунктВыдачиНаименование.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиНаименование));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПунктВыдачиАдрес) Тогда
			Элементы.ПунктВыдачиАдрес.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиАдрес));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПунктВыдачиТелефон) Тогда
			Элементы.ПунктВыдачиТелефон.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиТелефон));
		КонецЕсли;
		
	Иначе
		
		ПунктВыдачиНаименование = "";
		ПунктВыдачиАдрес = "";
		ПунктВыдачиТелефон = "";
		
		Элементы.ПунктВыдачиНаименование.СписокВыбора.Очистить();
		Элементы.ПунктВыдачиАдрес.СписокВыбора.Очистить();
		Элементы.ПунктВыдачиТелефон.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтправитьЗаявкуНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ПунктВыдачиЗарегистрирован Тогда
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан склад'"),,
				"Склад",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПунктВыдачиНаименование) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указано наименование пункта выдачи'"),,
				"ПунктВыдачиНаименование",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПунктВыдачиАдрес) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан адрес пункта выдачи'"),,
				"ПунктВыдачиАдрес",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЛогистЗарегистрирован Тогда
		
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указаны ФИО пользователя'"),,
				"ФИО",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан номер телефона пользователя'"),,
				"Телефон",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан адрес электронной почты пользователя'"),,
				"АдресЭлектроннойПочты",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОтправитьЗапросНаПолучениеРегистрационныхДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Пароль = Элемент.ТекстРедактирования;
	
	Элемент.РежимПароля = Не Элемент.РежимПароля;
	Если Элемент.РежимПароля Тогда
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВводимыеСимволыВидны;
	Иначе
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВводимыеСимволыСкрыты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Логин = "";
	Пароль = "";
	Токен = "";
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика()
		Или ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
		Элементы.ГруппаРегистрационныеДанные.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ГруппаАвторизация.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Элементы.Подключить.КнопкаПоУмолчанию = Истина;
	Элементы.Подключить.Видимость = Истина;
	Элементы.Изменить.Видимость = Ложь;
	
	Авторизован = Ложь;
	УстановитьОформлениеПунктовМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНаименованиеОрганизации(Команда)
	
	СкопироватьВБуфер(НаименованиеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИдентификаторОрганизации(Команда)
	
	СкопироватьВБуфер(ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)

	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	ТекущаяКоманда = Команда.Имя;
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		
		Модифицированность = Ложь;
		
		Если ПустаяСтрока(Логин) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"),
				Элементы.ИмяПользователя.Заголовок), , "Логин", , Отказ);
		КонецЕсли;

		Если ПустаяСтрока(Пароль) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"),
				Элементы.Пароль.Заголовок), , "Пароль", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьФормуПриУспешнойАвторизации = Истина;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации());
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
			
			ЗагрузитьРезультатПолученияНастроекАвторизации(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
			
			ЗагрузитьРезультатЗаписиНастроекАвторизации(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Тогда
			
			ЗагрузитьРезультатПолученияСостоянияПодключенияОрганизации(РезультатОперации);
			
		КонецЕсли;
	
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации());
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаПолучениеРегистрационныхДанных()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных());
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяПроцедуры = Операция.Представление;
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьНастройкиАвторизации(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
			Операция.Значение = ПараметрыЗапросаЗаписатьНастройкиАвторизации(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Тогда
			Операция.Значение = ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьНастройкиАвторизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьНастройкиАвторизации();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаЗаписатьНастройкиАвторизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаЗаписатьНастройкиАвторизации();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных();
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	ПараметрыЗапроса.ЗарегистрироватьОрганизацию = Не ОрганизацияЗарегистрирована;
	ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи = Не ПунктВыдачиЗарегистрирован;
	ПараметрыЗапроса.ЗарегистрироватьПользователя = Не ЛогистЗарегистрирован;
	
	ПараметрыЗапроса.НаименованиеОрганизации = НаименованиеОрганизации;
	ПараметрыЗапроса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	ПараметрыЗапроса.ИдентификаторПунктаВыдачи = Строка(Склад.УникальныйИдентификатор());
	ПараметрыЗапроса.НаименованиеПунктаВыдачи = ПунктВыдачиНаименование;
	ПараметрыЗапроса.АдресПунктаВыдачи = ПунктВыдачиАдрес;
	ПараметрыЗапроса.ТелефонПунктаВыдачи = ПунктВыдачиТелефон;
	ПараметрыЗапроса.НаименованиеПользователя = ФИО;
	ПараметрыЗапроса.НомерТелефонаПользователя = Телефон;
	ПараметрыЗапроса.АдресЭлектроннойПочтыПользователя = АдресЭлектроннойПочты;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСостоянияПодключенияОрганизации(Результат)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
	
		СостояниеПодключения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "СостояниеПодключенияОрганизации");
		Если ТипЗнч(СостояниеПодключения) = Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СостояниеПодключенияОрганизации,
				"ОрганизацияЗарегистрирована, ПунктВыдачиЗарегистрирован, ЛогистЗарегистрирован");
			
		КонецЕсли;
	
		Для Каждого ТекстОшибки Из Результат.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	
		УстановитьОформлениеПунктовМеню(СостояниеПодключения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияНастроекАвторизации(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Результат.Свойство("Авторизован", Авторизован);
		Результат.Свойство("ТипАвторизации", ТипАвторизации);
		
		ПравоДоступа = "";
		Если Результат.Ошибки.Количество() = 0 Тогда
			Элементы.ПравоДоступа.СписокВыбора.Очистить();
			Для Каждого Элемент Из Результат.ПраваДоступа Цикл
				ПравоДоступа = Элемент;
				Элементы.ПравоДоступа.СписокВыбора.Добавить(ПравоДоступа);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Авторизован = Ложь;
		
	КонецЕсли;
	
	Если Авторизован И ЗакрытьФормуПриУспешнойАвторизации Тогда
		Закрыть();
	КонецЕсли;
	
	ЗаполнитьАвторизациюПоТипу();
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		Если Авторизован Тогда
			УстановитьОформлениеПунктовМеню();
		КонецЕсли;
	
	ИначеЕсли ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
		
		УстановитьОформлениеПунктовМеню();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатЗаписиНастроекАвторизации(Результат)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		Записано = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Записано", Ложь);
		Если Записано Тогда
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура УстановитьОформлениеПунктовМеню(СостояниеПодключения = Неопределено)
	
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();
	
	Если ТипЗнч(СостояниеПодключения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеПодключения,
			"ОрганизацияЗарегистрирована, ПунктВыдачиЗарегистрирован, ЛогистЗарегистрирован");
	Иначе
		ОрганизацияЗарегистрирована = Истина;
		ПунктВыдачиЗарегистрирован = Истина;
		ЛогистЗарегистрирован = Истина;
	КонецЕсли;
	
	Если ОрганизацияЗарегистрирована Тогда
		Элементы.ГиперссылкаВыборОрганизации.Заголовок = НСтр("ru = 'Организация зарегистрирована'");
		Элементы.КартинкаЭтапОрганизация.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
	Иначе
		Элементы.ГиперссылкаВыборОрганизации.Заголовок = НСтр("ru = 'Проверьте организацию для подключения к сервису'");
		Элементы.КартинкаЭтапОрганизация.Картинка = БиблиотекаКартинок.Этап1СинийБЭД;
	КонецЕсли;
	
	Если ЭтоКурьерика Тогда
	
		Если ПунктВыдачиЗарегистрирован Тогда
			Элементы.ГиперссылкаВыборСклада.Заголовок = НСтр("ru = 'Пункт выдачи зарегистрирован'");
			Элементы.ГиперссылкаВыборСклада.Подсказка = "";
			Элементы.ГруппаСкладРеквизиты.Видимость = Ложь;
			Элементы.КартинкаЭтапПунктВыдачи.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		Иначе
			Элементы.ГиперссылкаВыборСклада.Заголовок = НСтр(
				"ru = 'Выберите склад по умолчанию для отгрузки заказов'");
			Элементы.ГиперссылкаВыборСклада.Подсказка = СтрШаблон("%1 %2",
				НСтр("ru = 'С выбранного склада курьеры будут забирать заказы.'"),
				НСтр("ru = 'Дальнейшая настройка пунктов выдачи заказов производится личном кабинете логиста (после получения доступа к сервису).'"));
			Элементы.ГруппаСкладРеквизиты.Видимость = Истина;
			Элементы.КартинкаЭтапПунктВыдачи.Картинка = БиблиотекаКартинок.Этап2СинийБЭД;
		КонецЕсли;
		
		Если ЛогистЗарегистрирован Тогда
			Элементы.ГиперссылкаВыборРеквизитовЛогиста.Заголовок = НСтр("ru = 'Логист создан'");
			Элементы.ГиперссылкаВыборРеквизитовЛогиста.Подсказка = "";
			Элементы.ГруппаРеквизитыЛогиста.Видимость = Ложь;
			Элементы.КартинкаЭтапЛогист.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		Иначе
			Элементы.ГиперссылкаВыборРеквизитовЛогиста.Заголовок = НСтр(
				"ru = 'Укажите данные пользователя для создания учетной записи'");
			Элементы.ГиперссылкаВыборРеквизитовЛогиста.Подсказка = НСтр(
				"ru = 'Данные будут использованы для создания в сервисе учетной записи логиста.'");
			Элементы.ГруппаРеквизитыЛогиста.Видимость = Истина;
			Элементы.КартинкаЭтапЛогист.Картинка = БиблиотекаКартинок.Этап3СинийБЭД;
		КонецЕсли;
		
		ЗапросОтправлен = ОрганизацияЗарегистрирована И ПунктВыдачиЗарегистрирован И ЛогистЗарегистрирован;
		Если ЗапросОтправлен Тогда
			Элементы.ГиперссылкаОтправкаЗапроса.Заголовок =
				НСтр("ru = 'Запрос на регистрацию учетной записи отправлен'");
			Элементы.ГиперссылкаОтправкаЗапроса.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ГиперссылкаОтправитьЗаявку.Видимость = Ложь;
			Элементы.ГиперссылкаОтправитьЗаявку.Заголовок =
				НСтр("ru = 'Отправить повторный запрос на получение регистрационных данных'");
			Элементы.КартинкаЭтапЗапрос.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		Иначе
			Элементы.ГиперссылкаОтправкаЗапроса.Заголовок =
				НСтр("ru = 'Отправьте запрос на регистрацию учетной записи'");
			Элементы.ГиперссылкаОтправкаЗапроса.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			Элементы.ГиперссылкаОтправитьЗаявку.Видимость = Истина;
			Элементы.ГиперссылкаОтправитьЗаявку.Заголовок =
				НСтр("ru = 'Получить регистрационные данные для подключения к сервису'");
			Элементы.КартинкаЭтапЗапрос.Картинка = БиблиотекаКартинок.Этап4СинийБЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Авторизован Тогда
		Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
	ИначеЕсли ЭтоКурьерика Тогда
		Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.Этап5СинийБЭД;
	Иначе
		Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.Этап2СинийБЭД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвторизациюПоТипу()
	
	Элементы.Изменить.Видимость = Авторизован;
	Элементы.Закрыть.КнопкаПоУмолчанию = Авторизован;
	Элементы.Подключить.Видимость = Не Авторизован;
	Элементы.Подключить.КнопкаПоУмолчанию = Не Авторизован;
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		Если ТипАвторизации = "basic" Тогда
			
			Элементы.ДекорацияНекорректныеДанныеАвторизацииМастер.Видимость = Не Авторизован;
			
			Если Авторизован Тогда
				
				Логин = БезопаснаяМаска();
				Пароль = БезопаснаяМаска();
				
			ИначеЕсли Логин = БезопаснаяМаска() Тогда
				
				Логин = "";
				Пароль = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
			Элементы.ГруппаРегистрационныеДанные.ТолькоПросмотр = Авторизован;
		КонецЕсли;
		Элементы.ГруппаАвторизация.ТолькоПросмотр = Авторизован;
		Элементы.ГруппаПравоДоступа.Видимость = Элементы.ПравоДоступа.СписокВыбора.Количество() > 0;
		ВидимостьГруппаЛогинИПароль = Элементы.ГруппаЛогинИПароль.Видимость;
		ВидимостьГруппаТокен = Элементы.ГруппаТокен.Видимость;
		
		Если ТипАвторизации = "basic" Тогда
			
			ВидимостьГруппаЛогинИПароль = Истина;
			ВидимостьГруппаТокен = Ложь;
			Элементы.ДекорацияНекорректныеДанныеАвторизации.Видимость = (Не Авторизован И Логин <> "");
			Элементы.ДекорацияНекорректныеДанныеАвторизацииМастер.Видимость = (Не Авторизован И Логин <> "");
			
			Если Авторизован Тогда
				
				Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка()
					И УстаревшийТипАвторизации Тогда
					
					Логин = "";
					Пароль = "";
					
					Элементы.Изменить.Видимость = Ложь;
					Элементы.Закрыть.КнопкаПоУмолчанию = Ложь;
					Элементы.Подключить.Видимость = Истина;
					Элементы.Подключить.КнопкаПоУмолчанию = Истина;
					
					Элементы.ГруппаАвторизация.ТолькоПросмотр = Ложь;
					
				Иначе
					
					Логин = БезопаснаяМаска();
					Пароль = БезопаснаяМаска();
					
				КонецЕсли;
				
			ИначеЕсли Логин = БезопаснаяМаска() Тогда
				
				Логин = "";
				Пароль = "";
				
			КонецЕсли;
			
		ИначеЕсли ТипАвторизации = "token" Тогда
			
			ВидимостьГруппаЛогинИПароль = Ложь;
			ВидимостьГруппаТокен = Истина;
			Элементы.ДекорацияНекорректныеДанныеАвторизации.Видимость = (Не Авторизован И Токен <> "");
			
			Если Авторизован Тогда
				Токен = БезопаснаяМаска();
			ИначеЕсли Токен = БезопаснаяМаска() Тогда
				Токен = "";
			КонецЕсли;
			
		Иначе
			
			ВидимостьГруппаЛогинИПароль = Ложь;
			ВидимостьГруппаТокен = Ложь;
			Элементы.ДекорацияНекорректныеДанныеАвторизацииМастер.Видимость = (Не Авторизован И Логин <> "");
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаЛогинИПароль",
			"Видимость",
			ВидимостьГруппаЛогинИПароль);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаТокен",
			"Видимость",
			ВидимостьГруппаТокен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БезопаснаяМаска()
	
	Возврат "**********";
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	ПредставлениеГрузоперевозчика = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки);
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Параметры авторизации'"), ПредставлениеГрузоперевозчика);
	
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();
	ЭтоСДЭК = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК();
	
	Если ЭтоКурьерика Или ЭтоСДЭК Тогда
		
		Элементы.ГруппаУпрощенная.Видимость = Ложь;
		Элементы.ГруппаМастер.Видимость = Истина;
		Элементы.ГруппаВыборСклада.Видимость = ЭтоКурьерика;
		Элементы.ГруппаВыборРеквизитовЛогиста.Видимость = ЭтоКурьерика;
		Элементы.ГруппаОжиданиеРегистрации.Видимость = ЭтоКурьерика;
		Элементы.ГруппаВыборСклада.Видимость = ЭтоКурьерика;
		Элементы.Пароль1.Видимость = ЭтоКурьерика;
		
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
		ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
		Элементы.ПодсказкаФормы.Заголовок = СтрШаблон(НСтр(
			"ru = 'Для подключения организации %1 к сервису %2, выполните следующие шаги:'"), Организация,
			ПредставлениеГрузоперевозчика);
		
		Элементы.Логотип.Картинка = СервисДоставкиКлиентСервер.ЛоготипГрузоперевозчика(ТипГрузоперевозки);
		
		Если ЭтоСДЭК Тогда
			Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.Этап2СинийБЭД;
			Элементы.ИмяПользователя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элементы.ДекорацияВводРегистрационныхДанных.РасширеннаяПодсказка.Заголовок = НСтр(
				"ru = 'Из личного кабинета на сайте в разделе ""Интеграция"".'");
			Элементы.ИмяПользователя.Заголовок = НСтр("ru = 'Идентификатор'");
			Элементы.ИмяПользователя.ПодсказкаВвода = СтрШаблон("Account / %1", НСтр("ru = 'Идентификатор'"));
			Элементы.Пароль.ПодсказкаВвода = СтрШаблон("Secure password / %1", НСтр("ru = 'Пароль'"));
			Элементы.Переместить(Элементы.Пароль, Элементы.ГруппаРегистрационныеДанные, Элементы.Пароль1);
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаУпрощенная.Видимость = Истина;
		Элементы.ГруппаМастер.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфер(Текст)
	
	#Если Не ВебКлиент И Не МобильныйКлиент Тогда
		
		ОбъектКопирование = Новый COMОбъект("htmlfile"); 
		ОбъектКопирование.ParentWindow.ClipboardData.Setdata("Text", Текст);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеАдреса(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеАдресаЭлектроннойПочты(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТелефона(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
