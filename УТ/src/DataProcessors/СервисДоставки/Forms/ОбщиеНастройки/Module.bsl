
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"),,,, Отказ);
		Возврат;
		
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с настройками.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""'"), , , , Отказ);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеСервиса();
	ЗаполнитьСпискиВыбора();
	ЗаполнитьДанныеПоУмолчанию();
	УстановитьКэшированныеЗначения();
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда

		ТаблицаСоответствия = Неопределено;
		Параметры.Свойство("СоответствиеСкладов", ТаблицаСоответствия);
		Если ТаблицаСоответствия <> Неопределено Тогда
		
			Элементы.СоответствиеОбъектовОператоровДоставки.Видимость = Истина;
			Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
				
				НоваяСтрока = СоответствиеСкладов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	Если Параметры.ВариантОтображения = ВариантОтображенияШаблоны() Тогда
		
		ПараметрыШаблона = Параметры.ПараметрыШаблона;
		Если ТипЗнч(ПараметрыШаблона) = Тип("Структура") Тогда
			НовыйШаблон = Истина;
			Модифицированность = Истина;
			Представление = ПараметрыШаблона.Представление;
			ПараметрыШаблона.Удалить("Представление");
			Шаблоны.Вставить(0, ПараметрыШаблона, Представление);
			Элементы.Шаблоны.ТекущийЭлемент = Элементы.ШаблоныПредставление;
		КонецЕсли;
		
		Если Шаблоны.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр(
				"ru = 'Нет сохраненных шаблонов. Создать шаблон можно из формы Заказа на доставку через подменю ""Шаблоны""'"),
				, , , Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	СервисДоставкиПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ЗначениеЗаполнено(ОрганизацияБизнесСети) Тогда
		ПолучитьНастройкиСервисаИнтеграцииПоОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации <> Неопределено Тогда
		Если Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации.ФоновоеЗадание <> Неопределено Тогда
			ОжидатьЗавершениеВыполненияЗапроса(Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации);
		КонецЕсли;
		Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьНастроек();
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	КонецЕсли;
	
	СформироватьПредставлениеВремениОтгрузки();
	СформироватьПредставлениеВремениДоставки();
	УстановитьОтметкуНезаполненого("СпособОтгрузки", "ВремяОтгрузкиПредставление");
	УстановитьОтметкуНезаполненого("СпособДоставки", "ВремяДоставкиПредставление");
	
	Если Параметры.ВариантОтображения = ВариантОтображенияШаблоны() И Модифицированность Тогда
		ШаблоныОбработатьДобавлениеНовогоШаблона();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ВладелецФормы <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФормы, "СоответствиеСкладов") Тогда
			
			ВладелецФормы.СоответствиеСкладов.Очистить();
			
			Для Каждого СтрокаСоответствия Из СоответствиеСкладов Цикл
				
				НоваяСтрока = ВладелецФормы.СоответствиеСкладов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСоответствия);
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда
		НепроверяемыеРеквизиты.Добавить("ВремяДоставкиПредставление");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
		НепроверяемыеРеквизиты.Добавить("ВремяОтгрузкиПредставление");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазмерГабаритПриИзменении(Элемент)
	
	ПриИзмененииГабарита(ЭтотОбъект, ПостфиксЭлемента(Элемент));
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяОтгрузкиС = Неопределено;
	ВремяОтгрузкиПо =  Неопределено;
	ВремяОтгрузкиОбедС = Неопределено;
	ВремяОтгрузкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияКонтактногоЛицаПриИзменении(Элемент)
	
	Если СпособОпределенияКонтактногоЛица <> 2 Тогда
		КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьОСостоянииПодписки(Элемент)
	
	УстановитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводитьНомерПоМаскеПриИзменении(Элемент)
	
	УстановитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообновлениеПриИзменении(Элемент)
	
	УстановитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтоСтраницаПунктыВыдачи = ТекущаяСтраница = Элементы.СоответствиеОбъектовОператоровДоставки;
	
	Элементы.Записать.Видимость = Не ЭтоСтраницаПунктыВыдачи;
	Элементы.Отмена.Видимость = Не ЭтоСтраницаПунктыВыдачи;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтгрузкиПриИзменении(Элемент)
	УстановитьОтметкуНезаполненого("СпособОтгрузки", "ВремяОтгрузкиПредставление");
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	УстановитьОтметкуНезаполненого("СпособДоставки", "ВремяДоставкиПредставление");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияТарификацииПриИзменении(Элемент)
	
	МодифицированыНастройкиСервисаИнтеграции = Истина;
	
	ОтборНастроек = Новый Структура("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	НайденныеСтроки = НастройкиСервисаИнтеграции.НайтиСтроки(ОтборНастроек);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ОрганизацияТарификации = ОрганизацияТарификации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблоны

&НаКлиенте
Процедура ШаблоныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОчиститьСообщения();
	Элементы.ГруппаШаблоныКоманднаяПанель.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ЗаписатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НовыйШаблон И ОтменаРедактирования Тогда
		Модифицированность = Ложь;
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ЕстьШаблоныСИдентичнымиНаименованиями(ЕстьОшибки, Истина);
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НовыйШаблон Тогда
		Если ОтменаРедактирования Тогда
			ТекущийШаблон = Шаблоны.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
			Шаблоны.Удалить(ТекущийШаблон);
		Иначе
			ЗаписатьНастройки();
		КонецЕсли;
		НовыйШаблон = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаШаблоныКоманднаяПанель.Доступность = Шаблоны.Количество() <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Данные = Шаблоны.НайтиПоИдентификатору(Значение);
	
	Закрыть(Данные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПослеУдаления(Элемент)
	
	Если Шаблоны.Количество() = 0 Тогда
		Закрыть();
	Иначе
		Элементы.ГруппаШаблоныКоманднаяПанель.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствиеСкладов

&НаКлиенте
Процедура СоответствиеСкладовИспользоватьПоУмолчаниюПриИзменении(Элемент)
	
	ПунктВыдачиПоУмолчаниюНаСервере();
	Элементы.СоответствиеСкладов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСкладовСкладПриИзменении(Элемент)
	
	СоответствиеСкладовСкладПриИзмененииНаСервере();
	ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСкладовПриИзменении(Элемент)
	
	ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		ЗаписатьНастройки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоответствие(Команда)
	
	Элементы.СоответствиеСкладов.Доступность = Ложь;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение списка пунктов выдачи клиента.'");
	ПараметрыОперации.Вставить("ЗакрытьФормуПоЗавершении", Ложь);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныСоздатьЗаказНаДоставку(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыОткрытияФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки);
	ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
	ПараметрыОткрытияФормы.РежимМастера = 0;
	
	ПараметрыОткрытияФормы.Вставить("ПараметрыШаблона", ТекущиеДанные.Значение);
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПоУмолчанию(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элементы.Шаблоны.ТекущаяСтрока;
	ТекущиеДанные = Шаблоны.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПометкаДо = ТекущиеДанные.Пометка;
		Шаблоны.ЗаполнитьПометки(Ложь);
		ТекущиеДанные.Пометка = ?(ПометкаДо, Ложь, Истина);
	КонецЕсли;
	
	ЗаписатьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
	
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
			
			ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(РезультатОперации);
			ОбновитьЗаголовокСоответствиеПунктовВыдачи();
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации() Тогда
			
			ЗагрузитьРезультатСостоянияПодключенияОрганизации(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКонтрагентов() Тогда
			ЗагрузитьРезультатПолученияСпискаКонтрагентов(РезультатОперации);

		КонецЕсли;
	
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Если Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции <> Неопределено Тогда
		ИдентификаторыФЗ = Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции.ИдентфикаторыФЗ;
		
		НайденноеФЗ = ИдентификаторыФЗ.Найти(ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания);
		Если НайденноеФЗ <> Неопределено Тогда
			ИдентификаторыФЗ.Удалить(НайденноеФЗ);
		КонецЕсли;
		
		Если ИдентификаторыФЗ.Количество() = 0 Тогда
			#Если Не ВебКлиент Тогда
			Выполнить(Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции.ПослеОбработкиПакета);
			#КонецЕсли
			Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиСервисаИнтеграцииПоОрганизации()
	
	Если Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Вставить("ЗакрытьФормуПоЗавершении", Ложь);
	
	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации());
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКонтрагентов());
		
	КонецЕсли;
	
	Если ПараметрыОперации.Очередь.Количество() > 0 Тогда
		ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
		Кэш.АктивныеДлительныеОперации.ПолучитьНастройкиСервисаИнтеграцииПоОрганизации = ПараметрыОперации;
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		ИмяПроцедуры = Операция.Представление;
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Тогда
			Операция.Значение = ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации() Тогда
			ПараметрыЗапроса = ПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации(ПараметрыОперации, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	ПараметрыЗапроса.ТипЗагрузки = 1; // 1 - запросить у оператора и получить
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных();
	
	ПараметрыЗапроса.ЗарегистрироватьОрганизацию = Ложь;
	ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи = Ложь;
	ПараметрыЗапроса.ЗарегистрироватьПользователя = Ложь;
	ПараметрыЗапроса.ЗарегистрироватьОрганизациюТарификации = Истина;
	
	ПараметрыЗапроса.ИдентификаторОрганизацииТарификации = ОрганизацияТарификации;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(Знач Результат)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Список") Тогда
			
			СоответствиеСкладов.Очистить();
			
			ЭлементыСписка = Результат.Список;
			
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				
				НоваяСтрока = СоответствиеСкладов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементСписка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОперацияВыполнена = Истина;
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);

	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("МассивИдентификаторов", СоответствиеСкладов.Выгрузить().ВыгрузитьКолонку("Идентификатор"));
	Запрос.Текст = ТекстЗапросаПунктыВыдачиПоИдентификаторам();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", Выборка.ИдентификаторОбъекта);
		
		ПоискСтрок = СоответствиеСкладов.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаСклад Из ПоискСтрок Цикл
			
			СтрокаСклад.ИспользоватьПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
			СтрокаСклад.Склад = Выборка.Значение;
			СервисДоставкиКлиентСерверПереопределяемый.ЗаполнитьПредставлениеАдресаСклада(Выборка.Значение,
																							СтрокаСклад.СкладАдрес);

		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.СоответствиеСкладов.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСостоянияПодключенияОрганизации(Знач Результат)
	
	ОрганизацияТарификации = Неопределено;
	ТипСтруктура = Тип("Структура");
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = ТипСтруктура Тогда
		Если Результат.Свойство("СостояниеПодключенияОрганизации")
			И ТипЗнч(Результат.СостояниеПодключенияОрганизации) = ТипСтруктура Тогда
				
			ОтборНастройки = Новый Структура("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
			НайденныеСтроки = НастройкиСервисаИнтеграции.НайтиСтроки(ОтборНастройки);
	
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = НастройкиСервисаИнтеграции.Добавить();
				НоваяСтрока.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				НоваяСтрока.ОрганизацияТарификации = Результат.СостояниеПодключенияОрганизации.ИдентификаторОрганизацииТарификации;
				
				ОрганизацияТарификации = Результат.СостояниеПодключенияОрганизации.ИдентификаторОрганизацииТарификации;
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаКонтрагентов(Знач Результат)
	
	Элементы.ОрганизацияТарификации.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		Для Каждого ОписаниеОрганизации Из Результат.Список Цикл
			Элементы.ОрганизацияТарификации.СписокВыбора.Добавить(ОписаниеОрганизации.Идентификатор, ОписаниеОрганизации.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаписьНастроек

&НаСервере
Функция ОпубликоватьНастройкиВСервисеИнтеграции(ЗакрытьФормуПоЗавершении = Ложь)

	Если Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПакетОпераций = СервисДоставкиКлиентСервер.НовыйПараметрыПакетаДлительныхОпераций();
	Если ЗакрытьФормуПоЗавершении Тогда
		ПакетОпераций.ПослеОбработкиПакета = "Закрыть()";
	КонецЕсли;
	
	ПакетПараметровДО = Новый Массив;
	
	Для Каждого НастройкиПоОрганизации Из НастройкиСервисаИнтеграции Цикл

		ПараметрыДО = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыДО.ОбработкаРезультатаНаСервере = Истина;
		ПараметрыЗапросаОбработкиОчереди = Новый Структура;
		
		Отказ = Ложь;

		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда

			ПараметрыЗапроса = ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыДО, Отказ);
			ПараметрыЗапроса.ИдентификаторОрганизацииТарификации = НастройкиПоОрганизации.ОрганизацияТарификации;

			ПараметрыДО.Очередь.Добавить(ПараметрыЗапроса,
				СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных());

		КонецЕсли;

		ПараметрыЗапросаОбработкиОчереди.Вставить("Очередь", ПараметрыДО.Очередь);
		ПараметрыЗапросаОбработкиОчереди.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		ПараметрыЗапросаОбработкиОчереди.Вставить("ОрганизацияБизнесСетиСсылка",
			НастройкиПоОрганизации.ОрганизацияБизнесСети);

		СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыДО, ПараметрыЗапросаОбработкиОчереди);
		
		ПакетОпераций.ИдентфикаторыФЗ.Добавить(ПараметрыДО.ФоновоеЗадание.ИдентификаторЗадания);
		ПакетПараметровДО.Добавить(ПараметрыДО);

	КонецЦикла;

	Кэш.АктивныеДлительныеОперации.ОпубликоватьНастройкиВСервисеИнтеграции = Новый ФиксированнаяСтруктура(ПакетОпераций);
	
	Возврат ПакетПараметровДО;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройки(ЗакрытьПослеЗаписи = Ложь)
	
	ТекстОшибки = "";
	Отказ = Ложь;
	ЗакрытьПослеДлительнойОперации = Ложь;
	
	Если Модифицированность Или МодифицированыНастройкиСервисаИнтеграции Тогда
		
		ПроверитьВозможностьЗаписиНастроек(Отказ, ТекстОшибки);
		
		Если Не Отказ Тогда
			ЗаписатьНастройкиПоУмолчанию(Отказ, ТекстОшибки);
		КонецЕсли;
		
		Если Не Отказ И МодифицированыНастройкиСервисаИнтеграции Тогда
			ПараметрыДлительныхОпераций = ОпубликоватьНастройкиВСервисеИнтеграции(Истина);
			
			Если ПараметрыДлительныхОпераций <> Неопределено Тогда
				Для Каждого ПараметрыДО Из ПараметрыДлительныхОпераций Цикл
					ОжидатьЗавершениеВыполненияЗапроса(ПараметрыДО);
				КонецЦикла;
			КонецЕсли;
			
			ЗакрытьПослеДлительнойОперации = ЗакрытьПослеЗаписи;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Модифицированность = Ложь;
			МодифицированыНастройкиСервисаИнтеграции = Ложь;
		ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Не ЗакрытьПослеДлительнойОперации Тогда
			Если ЗакрытьПослеЗаписи Тогда
				ПараметрЗакрытия = Новый Структура;
				ПараметрЗакрытия.Вставить("Результат", Истина);
				ПараметрЗакрытия.Вставить("ОрганизацияБизнесСети", Неопределено);
				Если Элементы.Организация.СписокВыбора.НайтиПоЗначению(ОрганизацияБизнесСети) <> Неопределено Тогда
					ПараметрЗакрытия.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
				КонецЕсли;
				Закрыть(ПараметрЗакрытия);
			Иначе
				НовыйШаблон = Ложь;
				ПодключитьОбработчикОжидания("Подключаемый_ОтключитьМодифицированность", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьЗаписиНастроек(Отказ, ТекстОшибки)
	
	МассивОшибок = Новый Массив;
	
	Если Параметры.ВариантОтображения = ВариантОтображенияШаблоны() Тогда
		
		ШаблоныХранимоеКоличество = СервисДоставкиКлиентСервер.ШаблоныХранимоеКоличество();
		Если Шаблоны.Количество() >= ШаблоныХранимоеКоличество + 1 Тогда
			МассивОшибок.Добавить(СтрШаблон(НСтр("ru = 'Одновременно может храниться не более %1 шаблонов.'"),
				Строка(ШаблоныХранимоеКоличество)));
			Отказ = Истина;
		КонецЕсли;
		
		ЕстьШаблоныСИдентичнымиНаименованиями(Отказ);
		
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПоУмолчанию(Отказ, ТекстОшибки)
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.НастройкиОбщиеСервисДоставки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ТипГрузоперевозки.Установить(ТипГрузоперевозки);
		
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ОрганизацияБизнесСети");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВесЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВысотаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ДлинаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ШиринаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВесГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВысотаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ДлинаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ШиринаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиОбедПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиОбедС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиОбедПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиОбедС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "КонтактноеЛицо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособОпределенияКонтактногоЛица");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособДоставки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособОтгрузки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ЗаказчикРоль");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВариантДоставки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "КоличествоКалендарныхДней");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ОстатокДоступныхЗаказов");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "УведомлятьОСостоянииПодписки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВводитьНомерПоМаске");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "МаскаНомераТелефона");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ИнтервалОбновленияИнформацииПоЗаказам");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ИспользоватьАвтообновление");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "Шаблоны");
		
		НаборЗаписей.Записать(Истина);
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Элементы.СпособОпределенияКонтактногоЛица.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'Указывать вручную'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Ответственный за доставку'"));
	
	Если Не СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		СписокВыбора.Добавить(2, НСтр("ru = 'Ответственный за доставку'"));
	КонецЕсли;
	
	СервисДоставкиПереопределяемый.ЗаполнитьСписокВыбораСпособаОпределенияКонтактногоЛица(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, НаименованиеПараметра)
	
	Если ЗначениеЗаполнено(ЭтотОбъект[НаименованиеПараметра]) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НаименованиеПараметра = НаименованиеПараметра;
		НоваяЗапись.ТипГрузоперевозки = НаборЗаписей.Отбор.ТипГрузоперевозки.Значение;
		
		Если ТипЗнч(ЭтотОбъект[НаименованиеПараметра]) = Тип("СписокЗначений") Тогда
			НоваяЗапись.ЗначениеХранилищеЗначения = Новый ХранилищеЗначения(ЭтотОбъект[НаименованиеПараметра]);
			НоваяЗапись.Значение = Неопределено;
		Иначе
			НоваяЗапись.Значение = ЭтотОбъект[НаименованиеПараметра];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВремяОтгрузки

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = 0;
	Если Результат.Свойство("ВариантВыбораВремени", ВариантВыбораВремени) Тогда 
		Если ВариантВыбораВремени = 1 Тогда
			
			Результат.Свойство("ВремяРаботыС", ВремяОтгрузкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяОтгрузкиПо);
			Результат.Свойство("ВремяОбедС", ВремяОтгрузкиОбедС);
			Результат.Свойство("ВремяОбедПо", ВремяОтгрузкиОбедПо);
			
			СформироватьПредставлениеВремениОтгрузки();
			УстановитьОтметкуНезаполненого("СпособОтгрузки", "ВремяОтгрузкиПредставление");
			
		ИначеЕсли ВариантВыбораВремени = 2 Тогда

			Результат.Свойство("ВремяРаботыС", ВремяДоставкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяДоставкиПо);
			Результат.Свойство("ВремяОбедС", ВремяДоставкиОбедС);
			Результат.Свойство("ВремяОбедПо", ВремяДоставкиОбедПо);
			
			СформироватьПредставлениеВремениДоставки();
			УстановитьОтметкуНезаполненого("СпособДоставки", "ВремяДоставкиПредставление");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениОтгрузки()
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ВремяОтгрузкиС,
									ВремяОтгрузкиПо,
									ВремяОтгрузкиОбедС,
									ВремяОтгрузкиОбедПо, 1);
									
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениДоставки()
	
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ВремяДоставкиС,
									ВремяДоставкиПо,
									ВремяДоставкиОбедС,
									ВремяДоставкиОбедПо, 2);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо, Режим)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьНастроек()
	
	Элементы.КонтактноеЛицо.Доступность = (СпособОпределенияКонтактногоЛица = 2);
	
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Элементы.КоличествоКалендарныхДней.Доступность = УведомлятьОСостоянииПодписки;
		Элементы.ОстатокДоступныхЗаказов.Доступность = УведомлятьОСостоянииПодписки;
		
		Элементы.МаскаНомераТелефона.Доступность = ВводитьНомерПоМаске;
		
		Элементы.ИнтервалОбновленияИнформацииПоЗаказам.Доступность = ИспользоватьАвтообновление;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Шаблоны

&НаКлиенте
Асинх Процедура ШаблоныОбработатьДобавлениеНовогоШаблона()
	
	Отказ = Ложь;
	
	ЕстьШаблоныСИдентичнымиНаименованиями(Отказ);
	
	Если Отказ = Истина Тогда
		
		Элементы.ГруппаШаблоныКоманднаяПанель.Доступность = Ложь;
		
		ТекущиеДанные = Шаблоны.Получить(0);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Перезаписать существующий шаблон (%1)?'"), ТекущиеДанные.Представление);
		Обещание = ВопросАсинх(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Ответ = Ждать Обещание;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Для Каждого Шаблон Из Шаблоны Цикл
				Если ТекущиеДанные.Представление = Шаблон.Представление Тогда
					Если Шаблоны.Индекс(Шаблон) <> 0 Тогда
						ТекущиеДанные.Пометка = Шаблон.Пометка;
						Шаблоны.Удалить(Шаблон);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьНастройки();
			НовыйШаблон = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ШаблоныИзменитьСтроку", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныИзменитьСтроку()
	
	Элементы.Шаблоны.ТекущаяСтрока = Шаблоны[0].ПолучитьИдентификатор();
	Элементы.Шаблоны.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьШаблоныСИдентичнымиНаименованиями(Отказ, ВыводитьСообщения = Ложь)
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Если Шаблоны.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные = Шаблоны.Получить(0);
	КонецЕсли;
	
	КоличествоСовпадений = 0;
	Для Каждого Шаблон Из Шаблоны Цикл
		Если ТекущиеДанные.Представление = Шаблон.Представление Тогда
			КоличествоСовпадений = КоличествоСовпадений + 1;
			Если КоличествоСовпадений > 1 Тогда
				Если ВыводитьСообщения Тогда
					ОчиститьСообщения();
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр(
						"ru = 'Шаблон с наименованием ""%1"" уже существует'"), ТекущиеДанные.Представление));
				КонецЕсли;
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьКэшированныеЗначения()
	
	Кэш = Новый Структура;
	
	АктивныеДлительныеОперации = Новый Структура;
	АктивныеДлительныеОперации.Вставить("ПолучитьНастройкиСервисаИнтеграцииПоОрганизации", Неопределено);
	АктивныеДлительныеОперации.Вставить("ОпубликоватьНастройкиВСервисеИнтеграции", Неопределено);
	
	Кэш.Вставить("АктивныеДлительныеОперации", АктивныеДлительныеОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСкладовНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСкладовСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоответствиеСкладов.ИспользоватьПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	Если Параметры.ВариантОтображения = ВариантОтображенияШаблоны() Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Шаблоны.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Шаблоны.Пометка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Если Параметры.ВариантОтображения = ВариантОтображенияШаблоны() Тогда
		
		НазначениеФормы = НСтр("ru = 'Шаблоны'");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблоны;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.Записать.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		
		РежимВыбора = Параметры.РежимВыбора;
		Элементы.Шаблоны.РежимВыбора = РежимВыбора;
		Элементы.ШаблоныСоздатьЗаказНаДоставку.Видимость = Не РежимВыбора;
		Элементы.ШаблоныСоздатьЗаказНаДоставку.КнопкаПоУмолчанию = Не РежимВыбора;
		Элементы.Выбрать.Видимость = РежимВыбора;
		Элементы.Выбрать.КнопкаПоУмолчанию = РежимВыбора;
		
	Иначе
		
		НазначениеФормы = НСтр("ru = 'Общие настройки'");
		Элементы.СтраницаШаблоны.Видимость = Ложь;
		Элементы.ШаблоныСоздатьЗаказНаДоставку.Видимость = Ложь;
		
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: %2'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		НазначениеФормы);
		
	ЭтоДЛ = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();
	ЭтоСДЭК = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК();
	
	Элементы.ПараметрыГруза.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаЗаказчикРоль.Видимость = Не (ЭтоКурьерика Или ЭтоСДЭК);
	Элементы.ГруппаКонтактноеЛицо.Видимость = Не ЭтоКурьерика;
	Элементы.КонтактноеЛицо.Видимость = Не ЭтоСДЭК;
	Элементы.ГруппаОсновноеПериоды.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаНастройкиКурьерика.Видимость = ЭтоКурьерика;
	Элементы.СоответствиеОбъектовОператоровДоставки.Видимость = ЭтоКурьерика;
	Элементы.ГруппаОрганизацияТарификации.Видимость = ЭтоДЛ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаПунктыВыдачиПоИдентификаторам()
	
	Возврат
		"ВЫБРАТЬ
		|	ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	Значение КАК Значение,
		|	ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
		|ГДЕ
		|	ТипГрузоперевозки = &ТипГрузоперевозки
		|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
		|	И ИдентификаторОбъекта В (&МассивИдентификаторов)";
	
КонецФункции

&НаСервере
Процедура ПунктВыдачиПоУмолчаниюНаСервере()
	
	ТекущиеДанные = СоответствиеСкладов.НайтиПоИдентификатору(Элементы.СоответствиеСкладов.ТекущаяСтрока);
	
	Если ТекущиеДанные.ИспользоватьПоУмолчанию Тогда
		
		Для Каждого СтрокаТЧ Из СоответствиеСкладов Цикл
			
			Если СтрокаТЧ.ПолучитьИдентификатор() <> Элементы.СоответствиеСкладов.ТекущаяСтрока
				И СтрокаТЧ.ИспользоватьПоУмолчанию Тогда
				СтрокаТЧ.ИспользоватьПоУмолчанию = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗаписи.Вставить("ИдентификаторОбъекта", ТекущиеДанные.Идентификатор);
	ПараметрыЗаписи.Вставить("ТипОбъекта", Перечисления.ТипыОбъектовСервисовДоставки.ПунктВыдачи);
	ПараметрыЗаписи.Вставить("Значение", ТекущиеДанные.Склад);
	ПараметрыЗаписи.Вставить("ЗначениеПоУмолчанию", ТекущиеДанные.ИспользоватьПоУмолчанию);
	
	РегистрыСведений.СоответствиеОбъектовСервисовДоставки.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура СоответствиеСкладовСкладПриИзмененииНаСервере()
	
	ТекущиеДанные = СоответствиеСкладов.НайтиПоИдентификатору(Элементы.СоответствиеСкладов.ТекущаяСтрока);
	СервисДоставкиКлиентСерверПереопределяемый.ЗаполнитьПредставлениеАдресаСклада(ТекущиеДанные.Склад,
		ТекущиеДанные.СкладАдрес);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗаписи.Вставить("ИдентификаторОбъекта", ТекущиеДанные.Идентификатор);
	ПараметрыЗаписи.Вставить("ТипОбъекта", Перечисления.ТипыОбъектовСервисовДоставки.ПунктВыдачи);
	ПараметрыЗаписи.Вставить("Значение", ТекущиеДанные.Склад);
	ПараметрыЗаписи.Вставить("ЗначениеПоУмолчанию", ТекущиеДанные.ИспользоватьПоУмолчанию);
	
	РегистрыСведений.СоответствиеОбъектовСервисовДоставки.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСоответствиеПунктовВыдачи()
	
	КоличествоЗаписей = СоответствиеСкладов.Количество();
	КоличествоНезаполненных = 0;
	Для каждого Строка Из СоответствиеСкладов Цикл
		Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
			КоличествоНезаполненных = КоличествоНезаполненных + 1;
		КонецЕсли;
	КонецЦикла;
	КоличествоЗаполненных = КоличествоЗаписей - КоличествоНезаполненных;
	
	Элементы.СоответствиеОбъектовОператоровДоставки.Заголовок = СтрШаблон(НСтр("ru = 'Пункты выдачи (%1 / %2)'"), КоличествоЗаполненных, КоличествоЗаписей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииГабарита(Форма, ПостФикс)
	
	Форма["Объем" + ПостФикс] =
		Форма["Длина" + ПостФикс] * Форма["Ширина" + ПостФикс] * Форма["Высота" + ПостФикс]/1000000;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаСервере
Процедура СписокОрганизацийБизнесСети()
	
	СписокОрганизаций = Элементы.Организация.СписокВыбора;
	СписокОрганизаций.Очистить();
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого Строка Из ОрганизацииБизнесСети Цикл
		СписокОрганизаций.Добавить(Строка.Организация, Строка["Наименование"]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСервиса()
	
	СписокОрганизацийБизнесСети();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУмолчанию()
	
	ИнтервалОбновленияИнформацииПоЗаказам = Элементы.ИнтервалОбновленияИнформацииПоЗаказам.МинимальноеЗначение;
	
	СервисДоставки.ЗаполнитьМаскиНомераТелефона(Элементы.МаскаНомераТелефона.СписокВыбора);
	
	ДанныеПоУмолчанию = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьНастройкиГрузоперевозки(ТипГрузоперевозки);
	Пока ДанныеПоУмолчанию.Следующий() Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
			ДанныеПоУмолчанию.НаименованиеПараметра) Тогда
			
			Значение = Неопределено;
			
			Если ЗначениеЗаполнено(ДанныеПоУмолчанию.Значение) Тогда
				Значение = ДанныеПоУмолчанию.Значение;
			ИначеЕсли ЗначениеЗаполнено(ДанныеПоУмолчанию.ЗначениеХранилищеЗначения) Тогда
				Значение = ДанныеПоУмолчанию.ЗначениеХранилищеЗначения.Получить();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Значение) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект,
					ДанныеПоУмолчанию.НаименованиеПараметра,
					Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПриИзмененииГабарита(ЭтотОбъект, "ЕдиницыТовара");
	ПриИзмененииГабарита(ЭтотОбъект, "ГрузовогоМеста");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксЭлемента(Элемент)
	
	Если СтрНайти(Элемент.Имя, "ЕдиницыТовара") > 0 Тогда
		Возврат "ЕдиницыТовара";
	Иначе
		Возврат "ГрузовогоМеста";
	КонецЕсли;
	
КонецФункции

// Вариант отображения шаблоны.
// 
// Возвращаемое значение:
//  Строка - Вариант отображения шаблоны
&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтображенияШаблоны()
	
	Возврат "Шаблоны";
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОтключитьМодифицированность()
	
	ОчиститьСообщения();
	Модифицированность = Ложь;
	МодифицированыНастройкиСервисаИнтеграции = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуНезаполненого(ИмяРеквизита, ИмяЭлемента)
	Элементы[ИмяЭлемента].ОтметкаНезаполненного = ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) И НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяЭлемента]);
КонецПроцедуры

#КонецОбласти
