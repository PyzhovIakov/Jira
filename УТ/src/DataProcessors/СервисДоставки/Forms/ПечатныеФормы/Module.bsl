#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	Параметры.Свойство("ПараметрыЗаказа", ПараметрыЗаказа);
	Если Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа) Тогда
		ИдентификаторыЗаказов.Очистить();
		ИдентификаторыЗаказов.Добавить(ИдентификаторЗаказа);
	Иначе
		Параметры.Свойство("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогЗагрузкиПечатныхФормНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталогЗагрузки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПечатныхФорм

&НаКлиенте
Процедура СписокПометкаПриИзменении(Элемент)
	
	Элементы.ФормаЗагрузить.Доступность = ЕстьОтмеченныеПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПечатныхФормПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ПустаяСтрока(Элемент.ТекущиеДанные.НаименованиеПараметра) Тогда
		Если Элементы.СписокПечатныхФормПараметрПредставление.Заголовок = Элемент.ТекущиеДанные.НаименованиеПараметра Тогда
			Если Не Элементы.СписокПечатныхФорм.ТолькоПросмотр И Элемент.ТекущийЭлемент = Элементы.СписокПечатныхФормПометка Тогда
				Если БлокироватьИзменениеСписка Тогда
					БлокироватьИзменениеСписка = Ложь;
				Иначе
					Элемент.ТекущиеДанные.Пометка = Не Элемент.ТекущиеДанные.Пометка;
					Элементы.ФормаЗагрузить.Доступность = ЕстьОтмеченныеПечатныеФормы();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПечатныхФормПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ПустаяСтрока(Элемент.ТекущиеДанные.НаименованиеПараметра) Тогда
		Если Элементы.СписокПечатныхФормПараметрПредставление.Заголовок <> Элемент.ТекущиеДанные.НаименованиеПараметра Тогда
			Элементы.СписокПечатныхФормПараметрПредставление.Заголовок = Элемент.ТекущиеДанные.НаименованиеПараметра;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПечатныхФормПараметрПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элементы.СписокПечатныхФорм.ТекущиеДанные.ДоступныеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПечатныхФормПараметрПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокПечатныхФорм.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ПараметрЗначение = ВыбранноеЗначение;
		ЭлементСписка = ТекущиеДанные.ДоступныеПараметры.НайтиПоЗначению(ВыбранноеЗначение);
		Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
			ТекущиеДанные.ПараметрПредставление = ЭлементСписка.Представление;
		Иначе
			ТекущиеДанные.ПараметрПредставление = Строка(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЭлемент.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометкуДляВсехЭлементовСписка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометкуДляВсехЭлементовСписка(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	
	Если ЕстьОтмеченныеПечатныеФормы() И КаталогЗагрузкиПечатныхФорм = "" Тогда
		ВыбратьКаталогЗагрузки(Истина);
	Иначе
		ЗагрузитьПечатныеФормыВКаталогНаДиске();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Элементы.ДекорацияОжидание.Видимость = Истина;
		Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Идет загрузка...'");
		
		Для Каждого Операция Из ФоновоеЗадание.Очередь Цикл
			
			ИмяМетода = Операция.Представление;
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
				
				УстановитьБлокировкуЭлементовФормы(Истина);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
			
			Элементы.ДекорацияОжидание.Видимость = Ложь;
			Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Выберите требуемые документы'");
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
			
			Элементы.ДекорацияОжидание.Видимость = Ложь;
			Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Обработка результата...'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьБлокировкуЭлементовФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ОбработатьРезультатМенеджераДлительныхОпераций(Результат.АдресРезультата);
	Иначе
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
			
			Если СписокПечатныхФорм.Количество() > 0 И Элементы.СписокПечатныхФорм.ТекущиеДанные = Неопределено Тогда
				Элементы.СписокПечатныхФорм.ТекущаяСтрока = СписокПечатныхФорм[0].ПолучитьИдентификатор();
			КонецЕсли;
			УстановитьПометкуДляВсехЭлементовСписка(Истина);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
			
			ЗагрузитьРезультатЗапросаПолучитьФайлыПечатныхФорм(РезультатОперации, ОперацияВыполнена);
			УстановитьПометкуДляВсехЭлементовСписка(Ложь);
			Если ОперацияВыполнена И Не ОткрытьПечатныеФормыПослеЗагрузки Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка документов завершена'"), , ,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
			
			Если СписокПечатныхФорм.Количество() = 0 Тогда
				Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Нет доступных печатных форм'");
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
			
			Элементы.ДекорацияСостояние.Заголовок = "";
			БлокироватьИзменениеСписка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФормаЗагрузить.Доступность = ЕстьОтмеченныеПечатныеФормы();
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение списка доступных печатных форм.'");
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы());
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПечатныеФормыВКаталогНаДиске()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Загрузка печатных форм.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм());
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяМетода = Операция.Представление;
	
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьДоступныеПечатныеФормы(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьФайлыПечатныхФорм(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДоступныеПечатныеФормы(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеПечатныеФормы();
	
	ПараметрыЗапроса.ИдентификаторыЗаказов = ИдентификаторыЗаказов.ВыгрузитьЗначения();
	
	Если ПараметрыЗапроса.ИдентификаторыЗаказов.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьФайлыПечатныхФорм(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаЗагрузитьФайлыПечатныхФорм();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторЗаказа", "");
	Отбор.Вставить("Наименование", "");
	Отбор.Вставить("Расширение", "");
	
	Для Каждого ИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
		Для Каждого ПечатнаяФорма Из СписокПечатныхФорм Цикл
		
			Если Не ПечатнаяФорма.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, ПечатнаяФорма);
			Отбор.ИдентификаторЗаказа = ИдентификаторЗаказа;
			
			НайденныеСтроки = Список.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ЭлементПараметраЗапроса = СервисДоставки.НовыйЭлементПараметровЗапросаЗагрузитьФайлыПечатныхФорм();
				ЗаполнитьЗначенияСвойств(ЭлементПараметраЗапроса, ЭтотОбъект, , "Список");
				
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					
					ПараметрыФормы = СервисДоставки.НовыйПечатнаяФормаДляЗапроса();
					ПараметрыФормы.ИдентификаторДокумента = ТекущаяСтрока.ИдентификаторДокумента;
					ПараметрыФормы.ИдентификаторПечатнойФормы = ТекущаяСтрока.Идентификатор;
					ДанныеДоступногоПараметра = Новый Структура;
					ДанныеДоступногоПараметра.Вставить("Наименование", ПечатнаяФорма.НаименованиеПараметра);
					ДанныеДоступногоПараметра.Вставить("Идентификатор", ПечатнаяФорма.ПараметрЗначение);
					ПараметрыФормы.ДоступныеПараметры.Добавить(ДанныеДоступногоПараметра);
					
					ЭлементПараметраЗапроса.Список.Добавить(ПараметрыФормы);
					
				КонецЦикла;
				
				ПараметрыЗапроса.Параметры.Добавить(ЭлементПараметраЗапроса);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

// Обрабатывает результат менеджера длительных операций на сервере.
// 
// Параметры:
//  АдресРезультата - Строка - Адрес результата
// 
// Возвращаемое значение:
//  Произвольный - Результат обработки
&НаСервере
Функция ОбработатьРезультатМенеджераДлительныхОпераций(АдресРезультата)
	
	РезультатМенеджера = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		Результат = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
			
			ЗагрузитьРезультатЗапросаПолучитьДоступныеПечатныеФормы(Результат, ОперацияВыполнена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатМенеджера;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатЗапросаПолучитьДоступныеПечатныеФормы(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если ОперацияВыполнена = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Список.Очистить();
	
	ДоступныеПараметры = Новый Соответствие;
	
	Если ТипЗнч(Результат.Список) = Тип("Массив") Тогда
		Для Каждого ТекущаяСтрока Из Результат.Список Цикл
			НоваяСтрока = Список.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.НомерКартинки = ПолучитьИндексПиктограммыФайла(ВРег(НоваяСтрока.Расширение));
			ДоступныеПараметры.Вставить(ТекущаяСтрока.НаименованиеПараметра, ТекущаяСтрока.ДоступныеПараметры);
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторыЗаказов.Количество() > 1 И ТипГрузоперевозки = 2 Тогда
		
		ВременнаяТаблица = Список.Выгрузить(Новый Структура("Идентификатор", 10));
		
		ВременнаяТаблица.Свернуть("Наименование, Идентификатор");
		Для Каждого ПечатнаяФорма Из ВременнаяТаблица Цикл
			
			НайденныеСтроки = Список.НайтиСтроки(Новый Структура("Наименование, Идентификатор", ПечатнаяФорма.Наименование, ПечатнаяФорма.Идентификатор));
			НайденныеЗначения = Новый Структура("НомерКартинки, Расширение");
			ЗаполнитьЗначенияСвойств(НайденныеЗначения, НайденныеСтроки[0]);
			
			МодифицироватьЗначения = Истина;
			Для Каждого НайденнаяПечатнаяФорма Из НайденныеСтроки Цикл
				Если Не НайденныеЗначения.НомерКартинки = НайденнаяПечатнаяФорма.НомерКартинки 
					Или Не НайденныеЗначения.Расширение = НайденнаяПечатнаяФорма.Расширение Тогда
					МодифицироватьЗначения = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если МодифицироватьЗначения Тогда
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, НайденныеЗначения);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВременнаяТаблица = Список.Выгрузить();
		ВременнаяТаблица.Свернуть("Наименование, НомерКартинки, Расширение, Идентификатор, НаименованиеПараметра");
		
	КонецЕсли;
	
	СписокПечатныхФорм.Загрузить(ВременнаяТаблица);
	
	Если ДоступныеПараметры.Количество() > 0 Тогда
		Для Каждого ПечатнаяФорма Из СписокПечатныхФорм Цикл
			ПечатнаяФорма.ДоступныеПараметры = ДоступныеПараметры[ПечатнаяФорма.НаименованиеПараметра];
			Если ПечатнаяФорма.ДоступныеПараметры.Количество() > 0 Тогда
				ДоступныйПараметрПоУмолчанию = ПечатнаяФорма.ДоступныеПараметры[0];
				ПечатнаяФорма.ПараметрЗначение = ДоступныйПараметрПоУмолчанию.Значение;
				ПечатнаяФорма.ПараметрПредставление = ДоступныйПараметрПоУмолчанию.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатЗапросаПолучитьФайлыПечатныхФорм(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СервисДоставкиКлиент.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
		Если ОперацияВыполнена И ТипЗнч(Результат.Список) = Тип("Массив") Тогда
			Для Каждого ТекущийФайл Из Результат.Список Цикл
				
				Наименование = ТекущийФайл.Наименование;
				Расширение = ТекущийФайл.Расширение;
				ИмяФайла = ТекущийФайл.ИдентификаторЗаказа + " " + Наименование + "." + Расширение;
				Если НРег(ТекущийФайл.Кодировка) = "base64" Тогда
					Попытка
						ДвоичныеДанныеФайла = Base64Значение(ТекущийФайл.Данные);
					Исключение
						ОперацияВыполнена = Ложь;
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка извлечения данных файла: %1'"),
								ИмяФайла));
					КонецПопытки;
				КонецЕсли;
				
				ТекущийФайл.Удалить("Данные");
				ПутьКФайлу = КаталогЗагрузкиПечатныхФорм + "\" + ИмяФайла;
				ТекущийФайл.Вставить("ПутьКФайлу", ПутьКФайлу);
				
				Оповещение = Новый ОписаниеОповещения("КопированиеФайлаЗавершение", ЭтотОбъект, ТекущийФайл);
				ДвоичныеДанныеФайла.НачатьЗапись(Оповещение, ПутьКФайлу);
				
			КонецЦикла;
		КонецЕсли;

	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Документы по перевозке'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	БлокироватьИзменениеСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтмеченныеПечатныеФормы()
	
	Результат = Ложь;
	
	Для Каждого ПечатнаяФорма Из СписокПечатныхФорм Цикл
		Если ПечатнаяФорма.Пометка Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуДляВсехЭлементовСписка(Пометка)
	
	Для Каждого ТекущаяПечатнаяФорма Из СписокПечатныхФорм Цикл
		ТекущаяПечатнаяФорма.Пометка = Пометка;
	КонецЦикла;
	
	Элементы.ФормаЗагрузить.Доступность = ЕстьОтмеченныеПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗагрузки(ВыполнитьЗагрузкуПослеВыбора = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполнитьЗагрузкуПослеВыбора", ВыполнитьЗагрузкуПослеВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКаталогЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФайловаяСистемаКлиент.ВыбратьКаталог(ОписаниеОповещения, НСтр("ru = 'Выберите каталог'"), КаталогЗагрузкиПечатныхФорм);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат <> "" Тогда
		
		КаталогЗагрузкиПечатныхФорм = Результат;
		Если ДополнительныеПараметры.Свойство("ВыполнитьЗагрузкуПослеВыбора")
			И ДополнительныеПараметры.ВыполнитьЗагрузкуПослеВыбора Тогда
			ЗагрузитьПечатныеФормыВКаталогНаДиске();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ОткрытьПечатныеФормыПослеЗагрузки Тогда
		ФайловаяСистемаКлиент.ОткрытьФайл(ДополнительныеПараметры.ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБлокировкуЭлементовФормы(НеДоступно = Истина)
	
	Элементы.СписокУстановитьФлажки.Доступность = Не НеДоступно;
	Элементы.СписокСнятьФлажки.Доступность = Не НеДоступно;
	Элементы.СписокПечатныхФорм.ТолькоПросмотр = НеДоступно;
	Элементы.ОткрытьПечатныеФормыПослеЗагрузки.Доступность = Не НеДоступно;
	Элементы.ФормаЗагрузить.Доступность = Не НеДоступно;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла)
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = "." + НРег(РасширениеФайла) + ";";
	
	Если СтрНайти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; // Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; // Табличный Файл.
		
	ИначеЕсли СтрНайти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; // Внешние обработки.
		
	ИначеЕсли СтрНайти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли СтрНайти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли СтрНайти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли СтрНайти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли СтрНайти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли СтрНайти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли СтрНайти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли СтрНайти(".msg;.eml;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли СтрНайти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли СтрНайти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли СтрНайти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли СтрНайти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли СтрНайти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли СтрНайти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли СтрНайти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли СтрНайти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли СтрНайти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли СтрНайти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли СтрНайти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли СтрНайти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли СтрНайти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли СтрНайти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли СтрНайти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли СтрНайти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли СтрНайти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли СтрНайти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли СтрНайти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли СтрНайти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли СтрНайти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли СтрНайти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Видимость колонки "Параметр представления" для табличной части "Список печатных форм"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПечатныхФормПараметрПредставление.Имя);
	
	ОтборГруппаЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппаЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПечатныхФорм.ДоступныеПараметры.КоличествоСтрок");
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ОтборГруппаЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПечатныхФорм.Идентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

#КонецОбласти