#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Описание реквизитов:
	// Направление - ограничивает выборку терминалов (пунктов доставки)
	// 1 - для выбора доступны пункты ПВЗ, работающие на прием товаров к перевозке
	// 2 - для выбора доступны пункты ПВЗ, работающие на выдачу товаров
	// В остальных случаях доступны для выбора все пункты ПВЗ
	//
	// ВсеПунктыПВЗ - влияет на способ получения данных из сервиса интеграции
	// Истина - список всех пунктов ПВЗ загружается при открытии формы
	// Ложь - список пунктов ПВЗ загружается каждый раз при выборе населенного пункта
	//
	// ОбластьПоискаТерминалов- определяет область поиска терминалов
	// Либо в указанном населенном пункте,  либо близлежащие к указанному адресу
	// Используется только когда ВсеПунктыПВЗ = Ложь
	СервисДоставки.УстановитьЗначенияРеквизитовПоПараметрам(ЭтотОбъект, Параметры);
	ОрганизацияБизнесСетиСсылка = Параметры.ОрганизацияБизнесСети;

	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"), , , , Отказ);
		Возврат;
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаселенныйПункт = Параметры.НаселенныйПунктИдентификатор;
	ТекущийТерминалИдентификатор = Параметры.Идентификатор;
	
	НастроитьФормуПоТипуГрузоперевозки();
	УстановитьУсловноеОформление();
	УстановитьВидимостьДоступность();
	УстановитьКэшированныеЗначения();
	ЗаполнитьСпискиВыбора();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьДоступныеТерминалы) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка доступных пунктов приема-выдачи.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КарточкаТерминалаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Расшифровка = "Грузоперевозчик" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Если Не ВсеПунктыПВЗ Тогда
		
		Список.Очистить();
		
		Если ЗначениеЗаполнено(НаселенныйПункт) Тогда
			
			НаселенныйПунктДанные = Кэш.НаселенныеПунктыДанные.Получить(НаселенныйПункт);
			
			ФоновоеЗаданиеПолучитьДоступныеТерминалы = ПолучитьДоступныеТерминалыВФоне();
			
			ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
			ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы();
			ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка доступных пунктов приема-выдачи.'");
			
			ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
			
		Иначе
			НаселенныйПунктДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктТипИдентификаторПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если ВсеПунктыПВЗ Тогда
		Возврат;
	КонецЕсли;
	
	// Получение списка населенных пунктов по подстроке.
	// Происходит вызов запроса в сервис интеграции
	Если СтрДлина(Текст) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = СервисДоставкиКлиентСервер.НовыйПараметрыЗапросаПолучитьНаселенныеПункты();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	ПараметрыЗапроса.СтрокаПоиска = Текст;
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ДанныеНаселенныхПунктов = ПолучитьНаселенныеПункты(ПараметрыЗапроса);
	
	ДанныеВыбора = ДанныеНаселенныхПунктов.НаселенныеПункты;
	
	Элемент.СписокВыбора.Очистить();
	
	// Кэшируем на клиенте найденные данные для возможности последующего выбора из списка
	Кэш.НаселенныеПунктыДанные.Очистить();
	
	Для Каждого ОписаниеНаселенногоПункта Из ДанныеНаселенныхПунктов.НаселенныеПунктыДанные Цикл
		
		Элемент.СписокВыбора.Добавить(ОписаниеНаселенногоПункта.Значение["Идентификатор"], ОписаниеНаселенногоПункта.Значение.Представление);
		Кэш.НаселенныеПунктыДанные.Вставить(ОписаниеНаселенногоПункта.Значение["Идентификатор"], ОписаниеНаселенногоПункта.Значение);
		
	КонецЦикла;
	
	СервисДоставкиКлиент.АвтоПодборИзСпискаВыбораЭлемента(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ТерминалыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		КарточкаТерминала = Новый ТабличныйДокумент();
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиСписка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	ДанныеТерминала = Новый Структура;
	ДанныеТерминала.Вставить("Идентификатор", ДанныеСтрокиСписка.Идентификатор);
	ДанныеТерминала.Вставить("Наименование", ДанныеСтрокиСписка.Наименование);
	ДанныеТерминала.Вставить("ТипНаименование", ДанныеСтрокиСписка.ТипНаименование);
	ДанныеТерминала.Вставить("Адрес", ДанныеСтрокиСписка.Адрес);
	ДанныеТерминала.Вставить("Телефон", ДанныеСтрокиСписка.Телефон);
	ДанныеТерминала.Вставить("Описание", ДанныеСтрокиСписка.Описание);
	ДанныеТерминала.Вставить("ГрафикРаботыСписок", ДанныеСтрокиСписка.ГрафикРаботыСписок);
	
	СформироватьКарточкуТерминала(КарточкаТерминала, ДанныеТерминала, ГрузоперевозчикНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПункт();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыбратьПункт();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ?(ЗначениеЗаполнено(ПараметрыОперации.ВыводитьОкноОжидания),
																	ПараметрыОперации.ВыводитьОкноОжидания,
																	Ложь);
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры 
			= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда
			
			Элементы.ДекорацияОжидание.Видимость = Истина;
			Элементы.ДекорацияСостояние.Заголовок = НСтр("ru='Идет загрузка...'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено Или ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" И ЗначениеЗаполнено(Результат.АдресРезультата)
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда

		Если ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда

			ОперацияВыполнена = Истина;
			Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ОбработатьРезультатПолученияДанныхПунктовПриемаВыдачи(Результат, ОперацияВыполнена);
			
			УстановитьОтборы();
			УстановитьТекущуюСтрокуСписка();
			
		КонецЕсли;

	КонецЕсли;
	
	ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена
	= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	Если ((ВсеПунктыПВЗ Или ЗначениеЗаполнено(НаселенныйПункт)) И Список.Количество() = 0)
		Или ЗначениеЗаполнено(Адрес) Тогда
		ФоновоеЗаданиеПолучитьДоступныеТерминалы = ПолучитьДоступныеТерминалыВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеТерминалыВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка доступных терминалов.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСпискаДоступныхТерминалов(ПараметрыЗапроса, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСпискаДоступныхТерминалов(ПараметрыЗапроса, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеТерминалы();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект, , "Адрес");
	
	Если Направление = 0 И ЗначениеЗаполнено(ГрузоперевозчикИдентификатор) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ВсеПунктыПВЗ Тогда
		Если ЭтоПоискПоНаселенномуПункту(ОбластьПоискаТерминалов) Тогда
			Если Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(АдресЗначение) Тогда
				Отказ = Истина;
			КонецЕсли;
			ПараметрыЗапроса.Адрес = Адрес;
			ПараметрыЗапроса.АдресЗначение = Новый ХранилищеЗначения(АдресЗначение, Новый СжатиеДанных(9));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса.НаселенныйПунктИдентификатор = НаселенныйПункт;
	
	Возврат ПараметрыЗапроса;

КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ОбработатьРезультатПолученияДанныхПунктовПриемаВыдачи(Результат, ОперацияВыполнена = Истина)
	
	// Скрыть элементы ожидания на форме
	Элементы.ДекорацияОжидание.Видимость = Ложь;
	Элементы.ДекорацияСостояние.Заголовок = "";
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Заполнение списка выбора населенных пунктов в которых есть терминалы. Используется для режима работы "Все пункты ПВЗ"
		Если ВсеПунктыПВЗ Тогда
			
			СписокНаселенныхПунктов = Результат.СписокНаселенныхПунктов;
			Если Направление = 1 И Результат.СписокНаселенныхПунктовОтгрузка.Количество() > 0 Тогда
				СписокНаселенныхПунктов = Результат.СписокНаселенныхПунктовОтгрузка;
			ИначеЕсли Направление = 2 И Результат.СписокНаселенныхПунктовДоставка.Количество() > 0 Тогда
				СписокНаселенныхПунктов = Результат.СписокНаселенныхПунктовДоставка;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СписокНаселенныхПунктов) Тогда
				ОперацияВыполнена = Ложь;
				Элементы.ДекорацияСостояние.Заголовок = НСтр(
					"ru = 'Не удалось определить населенные пункты, повторите действие позже'");
				Возврат;
			КонецЕсли;
			Для Каждого Элемент Из СписокНаселенныхПунктов Цикл
				ЗаполнитьЗначенияСвойств(Элементы.НаселенныйПункт.СписокВыбора.Добавить(), Элемент);
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение списка терминалов. Используется для всех режимов работы
		Список.Очистить();
		СписокПунктов = Результат.Список;
		Если Направление = 1 И Результат.СписокПунктовОтгрузка.Количество() > 0 Тогда
			СписокПунктов = Результат.СписокПунктовОтгрузка;
		ИначеЕсли Направление = 2 И Результат.СписокПунктовДоставка.Количество() > 0 Тогда
			СписокПунктов = Результат.СписокПунктовДоставка;
		КонецЕсли;
		Если ТипЗнч(СписокПунктов) = Тип("Массив") Тогда
			Для Каждого Пункт Из СписокПунктов Цикл
				НовыйПункт = Список.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПункт, Пункт);
				ГрафикРаботы = Пункт.ГрафикРаботы;
				Для Каждого ТекущаяСтрока Из ГрафикРаботы Цикл
					НоваяСтрока = НовыйПункт.ГрафикРаботыСписок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
			КонецЦикла;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	Иначе
		
		ОперацияВыполнена = Ложь;
		
	КонецЕсли;
	
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок = 0 И ЭтоПоискПоНаселенномуПункту(ОбластьПоискаТерминалов) Тогда
		Состояние = НСтр("ru = 'Нет доступных пунктов %1 заказов'");
	ИначеЕсли КоличествоСтрок = 0 Тогда
		Состояние = НСтр("ru = 'Нет доступных пунктов %1 заказов по указанному адресу'");
	Иначе
		Состояние = НСтр("ru = 'Выберите пункт %1 заказов'");
	КонецЕсли;
	Элементы.ДекорацияСостояние.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Состояние,
		ТипПунктаПоНаправлению(Направление));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если ВсеПунктыПВЗ Тогда
		Элементы.НаселенныйПункт.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.Авто;
	Иначе
		Элементы.НаселенныйПункт.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Адрес");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьКарточкуТерминала(КарточкаТерминала, ДанныеТерминала, ГрузоперевозчикНаименование)
	
	КарточкаТерминала = ТабличныйДокументКарточкаТерминала(ДанныеТерминала, ГрузоперевозчикНаименование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТабличныйДокументКарточкаТерминала(ДанныеТерминала, ГрузоперевозчикНаименование)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Макет = Обработки.СервисДоставки.ПолучитьМакет("Терминал");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.Наименование = ДанныеТерминала.Наименование;
	ПараметрыОбласти.ТипНаименование = ДанныеТерминала.ТипНаименование;
	ПараметрыОбласти.Адрес = ДанныеТерминала.Адрес;
	ПараметрыОбласти.Телефон = ДанныеТерминала.Телефон;
	ПараметрыОбласти.ГрузоперевозчикНаименование = ГрузоперевозчикНаименование;
	ПараметрыОбласти.РасшифровкаГрузоперевозчик = "Грузоперевозчик";
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если ДанныеТерминала.Описание <> "" Тогда
		ОбластьМакетаОписание = Макет.ПолучитьОбласть("Описание");
		ОбластьМакетаОписание.Параметры.Описание = ДанныеТерминала.Описание;
		ТабличныйДокумент.Вывести(ОбластьМакетаОписание);
	КонецЕсли;
	
	Если ДанныеТерминала.ГрафикРаботыСписок.Количество() > 0 Тогда
		
		ОбластьМакетаЗаголовокТаблицыГрафикРаботы = Макет.ПолучитьОбласть("ЗаголовокТаблицыГрафикРаботы");
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицыГрафикРаботы);
		
		ОбластьМакетаСтрокаТаблицыГрафикРаботы = Макет.ПолучитьОбласть("СтрокаТаблицыГрафикРаботы");
		
		Для Каждого ТекущаяСтрока Из ДанныеТерминала.ГрафикРаботыСписок Цикл
			ОбластьМакетаСтрокаТаблицыГрафикРаботы.Параметры.Заполнить(ТекущаяСтрока);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицыГрафикРаботы);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	Если Не ЭтоПоискПоНаселенномуПункту(ОбластьПоискаТерминалов) И Не ВсеПунктыПВЗ Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(НаселенныйПункт)
		И Элементы.НаселенныйПункт.СписокВыбора.НайтиПоЗначению(НаселенныйПункт) <> Неопределено Тогда
		Отбор.Вставить("НаселенныйПунктИдентификатор", НаселенныйПункт);
	КонецЕсли;
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Если ЗначениеЗаполнено(ПунктТипИдентификатор)
			И Элементы.ПунктТипИдентификатор.СписокВыбора.НайтиПоЗначению(ПунктТипИдентификатор) <> Неопределено Тогда
			Отбор.Вставить("ТипИдентификатор", ПунктТипИдентификатор);
		КонецЕсли;
	КонецЕсли;
	Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПункт()
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Идентификатор) Тогда
		
		ПараметрыРезультата = Новый Структура;
		
		ПараметрыРезультата.Вставить("Терминал", ТекущаяСтрока.Наименование);
		ПараметрыРезультата.Вставить("ТерминалИдентификатор", ТекущаяСтрока.Идентификатор);
		ПараметрыРезультата.Вставить("ТерминалИдентификаторВСистемеГрузоперевозчика", ТекущаяСтрока.ИдентификаторВСистемеГрузоперевозчика);
		ПараметрыРезультата.Вставить("Адрес", ТекущаяСтрока.Адрес);
		ПараметрыРезультата.Вставить("Телефон", ТекущаяСтрока.Телефон);
		ПараметрыРезультата.Вставить("ТипНаименование", ТекущаяСтрока.ТипНаименование);
		ПараметрыРезультата.Вставить("ТипИдентификатор", ТекущаяСтрока.ТипИдентификатор);
		ПараметрыРезультата.Вставить("НаселенныйПунктИдентификатор", ТекущаяСтрока.НаселенныйПунктИдентификатор);
		ПараметрыРезультата.Вставить("НаселенныйПунктДанные", НаселенныйПунктДанные);
		ПараметрыРезультата.Вставить("Описание", ТекущаяСтрока.Описание);
		
		Закрыть(ПараметрыРезультата);
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбран невалидный пункт %1.'"),
			ТипПунктаПоНаправлению(Направление));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	ЗаголовокПредставление = СтрШаблон(НСтр("ru='Пункты %1 заказов'"), ТипПунктаПоНаправлению(Направление));
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: %2'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаголовокПредставление);
	
	ГрузоперевозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки, Ложь);
	
	Элементы.НаселенныйПункт.Видимость = ЭтоПоискПоНаселенномуПункту(ОбластьПоискаТерминалов) Или ВсеПунктыПВЗ;
	Элементы.Адрес.Видимость = Не Элементы.НаселенныйПункт.Видимость;
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		
		Элементы.ПунктТипИдентификатор.Видимость = Истина;
		Элементы.ПунктТипИдентификатор.Доступность = Не Параметры.ИзменениеТипаПунктаЗаблокировано;
		
		СписокВыбора = Элементы.ПунктТипИдентификатор.СписокВыбора;
		СписокВыбора.Добавить(1, НСтр("ru = 'Постамат'"));
		СписокВыбора.Добавить(2, НСтр("ru = 'ПВЗ'"));
		
	Иначе
		Элементы.ПунктТипИдентификатор.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуСписка()
	
	Если Список.Количество() > 0 И ТекущийТерминалИдентификатор <> "" Тогда
		
		ПоискТерминала = Список.НайтиСтроки(Новый Структура("Идентификатор", ТекущийТерминалИдентификатор));
		Если ПоискТерминала.Количество() Тогда
			Элементы.Список.ТекущаяСтрока = ПоискТерминала[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКэшированныеЗначения()
	
	Кэш = СервисДоставки.ПолучитьКэшированныеЗначения(ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки);
	Если ВсеПунктыПВЗ Тогда
		КэшТерминалы = СервисДоставки.ПолучитьКэшированныеЗначения(ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки, "Терминалы");
		// Данные пунктов приема-выдачи из сервиса интеграции
		Для Каждого КлючИЗначение Из КэшТерминалы Цикл
			Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьРезультатПолученияДанныхПунктовПриемаВыдачи(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш,
		СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы()));
	
	// Данные населенных пунктов из сервиса интеграции
	Кэш.Вставить("НаселенныеПунктыДанные", Новый Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипПунктаПоНаправлению(Направление)
	
	Если Направление = 1 Тогда
		ЗаголовокПредставление = НСтр("ru='приема'");
	ИначеЕсли Направление = 2 Тогда
		ЗаголовокПредставление = НСтр("ru='выдачи'");
	Иначе
		ЗаголовокПредставление = НСтр("ru='приема-выдачи'");
	КонецЕсли;
	
	Возврат ЗаголовокПредставление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаселенныеПункты(ПараметрыЗапроса)

	Результат = Новый Структура("НаселенныеПункты, НаселенныеПунктыДанные", Новый СписокЗначений, Новый СписокЗначений);
	
	ПараметрыЗапроса.ЭтоФормаПунктов = Истина;
	ПараметрыЗапроса.ТолькоТерминалы = Истина;
	
	РезультатЗапроса = СервисДоставки.ПолучитьНаселенныеПункты(ПараметрыЗапроса);
	
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	Если ТипЗнч(НаселенныйПунктДанные) = Тип("Структура") Тогда
		Элементы.НаселенныйПункт.СписокВыбора.Добавить(НаселенныйПунктДанные.Идентификатор, НаселенныйПунктДанные.Представление);
		Кэш.НаселенныеПунктыДанные.Вставить(НаселенныйПунктДанные.Идентификатор, НаселенныйПунктДанные.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПоискПоНаселенномуПункту(ОбластьПоискаТерминалов)
	
	Возврат НРег(ОбластьПоискаТерминалов) = НРег(ИмяОбластиПоискаПоНаселенномуПункту());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОбластиПоискаПоНаселенномуПункту()
	
	Возврат "НаселенныйПункт";
	
КонецФункции

#КонецОбласти
