#Область ОписаниеПеременных

&НаКлиенте
Перем ТипыЗаказовСДЭК; // см. СервисДоставкиПовтИсп.ТипыЗаказовСДЭК

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СервисДоставки.УстановитьЗначенияРеквизитовПоПараметрам(ЭтотОбъект, Параметры);
	ОрганизацияБизнесСетиСсылка = Параметры.ОрганизацияБизнесСети;
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(Параметры.ТипГрузоперевозки);
	
	Если СервисДоставки.НедоступнаРаботаСФормой(ЭтотОбъект, Отказ, ДоступнаОтправкаЗаказовНаДоставку) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РежимМастера) И Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор заказа не указан. Работа с заказом на доставку невозможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОрганизацияБизнесСетиСсылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкиДоступныхДействий = ПолучитьВсеДоступныеДействия();
	ЗаполнитьСпискиВыбора();
	УстановитьКэшированныеЗначения();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		КлючИдемпотентности = Новый УникальныйИдентификатор;
		КлючОперации = "ПолучениеЗаказаНаДоставку";
		
		Если Параметры.ПараметрыЗаказа <> Неопределено Тогда
			ПараметрыЗаказа = Параметры.ПараметрыЗаказа;
			Если ПараметрыЗаказа.ДокументыОснования.Количество() Тогда
				КлючОперации = "ДобавитьИзОснования";
			КонецЕсли;
		ИначеЕсли ДокументыОснования.Количество() Тогда
			КлючОперации = "ДобавитьИзОснования";
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
		ИначеЕсли ЭтоЗаполнениеКопированием Тогда
			КлючОперации = "ДобавитьИзОснования";
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки);
		Иначе
			ПараметрыШаблона = Параметры.ПараметрыШаблона;
			ПараметрыЗаказа = СервисДоставки.ПолучитьПараметрыЗаказаИзШаблона(ПараметрыШаблона);
			Если ПараметрыЗаказа = Неопределено Тогда
				ПараметрыЗаказа = СервисДоставки.ПараметрыШаблонаПоУмолчанию(ТипГрузоперевозки);
			КонецЕсли;
			Если ПараметрыЗаказа = Неопределено Тогда
				КлючОперации = "ДобавитьИзОснования";
				ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки);
			Иначе
				ЭтоЗаполнениеШаблоном = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
			ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыЗаказа);
		ОбработатьНаселенныеПункты(ПараметрыЗаказа);
		ОбработатьРазмещениеГруза(ПараметрыЗаказа, КлючОперации);
		ПроверитьЗаполнениеНаОснованииДокументов();
		
	КонецЕсли;
	
	ПереключитьСтраницу(Элементы, Команды.ПерейтиОсновное.Имя);
	СформироватьПредставлениеДокументаОснования();
	СформироватьЗаголовокФормы();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	УстановитьВидимостьДоступность();
	НастройкаРеквизитовПриСозданииНаСервере();
	УстановитьУсловноеОформление();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТипыЗаказовСДЭК = СервисДоставкиКлиентСервер.ТипыЗаказовСДЭК();
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
	ОбработатьИзменениеРеквизитаФормы("ВключитьРасшифровкуГрузовыхМест", Ложь);
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	УстановитьВидимостьДоступностьНаСтраницеПараметрыГруза();
	
	ЭтоЗаполнениеШаблоном = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ТолькоПросмотр Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация["Наименование"]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ОрганизацияБизнесСетиСсылка <> ВыбранноеЗначение Тогда
		ОрганизацияБизнесСетиСсылка = ВыбранноеЗначение;
		ОбработатьИзменениеРеквизитаФормы("ОрганизацияБизнесСетиСсылка", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикРольОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикРольОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ЗаказчикРоль <> ВыбранноеЗначение Тогда
		ЗаказчикРоль = ВыбранноеЗначение;
		ОбработатьИзменениеРеквизитаФормы("ЗаказчикРоль", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ТипЗаказа <> ВыбранноеЗначение Тогда
		ТипЗаказа = ВыбранноеЗначение;
		ОбработатьИзменениеРеквизитаФормы("ТипЗаказа", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаказаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка,
	СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	РежимИзмененияСоставаОснований = 0;
	Если НавигационнаяСсылка = "ДобавитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		РежимИзмененияСоставаОснований = 1;
		ОткрытьФормуВыбораДокументаОснования();
	ИначеЕсли НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		РежимИзмененияСоставаОснований = 2;
		ОткрытьФормуВыбораДокументаОснования();
	ИначеЕсли НавигационнаяСсылка = "ОчиститьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ДокументыОснования.Очистить();
		Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
			ТоварныйСоставГрузовогоМеста = ГрузовоеМесто.ПолучитьЭлементы();
			ТоварныйСоставГрузовогоМеста.Очистить();
		КонецЦикла;
		РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями( , , НавигационнаяСсылка));
		НаложенныйПлатежВидОплаты = 0;
		СформироватьПредставлениеДокументаОснования();
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		УстановитьВидимостьДоступностьНаСтраницеПараметрыГруза();
		ЗарегистрироватьИзменениеОтборов( , Истина, Истина);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОснования();
	ИначеЕсли НавигационнаяСсылка = "ОбновитьДанныеПоОснованиям" Тогда
		СтандартнаяОбработка = Ложь;
		РежимИзмененияСоставаОснований = 3;
		ОбновитьДанныеПоОснованиям();
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		ПерейтиКШагуПараметрыГруза();
		ЗарегистрироватьИзменениеОтборов( , Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение( , ОтправительКонтактноеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	ОчиститьРеквизит(Элемент);
	ОтправительКонтактноеЛицоНаименование = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонДо = ОтправительКонтактноеЛицоТелефонПредставление;
	
	ПоискЗначения = Элементы.ОтправительКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ПоискЗначения <> Неопределено Тогда
		ОтправительКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
		ОтправительКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
	КонецЕсли;
	
	Если ТелефонДо <> ОтправительКонтактноеЛицоТелефонПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонДо = ОтправительКонтактноеЛицоТелефонДополнительныйПредставление;
	
	ПоискЗначения = Элементы.ОтправительКонтактноеЛицоТелефонДополнительный.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ПоискЗначения <> Неопределено Тогда
		ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = ПоискЗначения.Значение;
		ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
	КонецЕсли;
	
	Если ТелефонДо <> ОтправительКонтактноеЛицоТелефонДополнительныйПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресПриИзменении(Элемент)
	АдресПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресПриИзменении(Элемент)
	АдресПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительДобавитьДополнительныйТелефоныНажатие(Элемент)
	
	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
	УстановитьВидимостьДополнительныхТелефонов("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительУдалитьДополнительныйТелефонНажатие(Элемент)
	
	ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = "";
	ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = "";

	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
	УстановитьВидимостьДополнительныхТелефонов("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ОтправительНаселенныйПунктИдентификатор <> ВыбранноеЗначение Тогда
		ОтправительНаселенныйПунктИдентификатор = ВыбранноеЗначение;
		УстановитьВидимостьПредупрежденийПоАдресам("Отправитель");
		Если ВыбранноеЗначение <> ПунктПриемаГрузаНаселенныйПунктИдентификатор Тогда
			СброситьПунктПриемаВыдачи("ПунктПриема", Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтгрузкиПриИзменении(Элемент)
	
	СпособПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	СпособПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриемаОчистка(Элемент, СтандартнаяОбработка)
	
	СброситьПунктПриемаВыдачи("ПунктПриема");
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачиОчистка(Элемент, СтандартнаяОбработка)
	
	СброситьПунктПриемаВыдачи("ПунктВыдачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриемаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПунктаПриемаВыдачи(ПунктПриемаГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПунктаПриемаВыдачи(ПунктВыдачиГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПунктПриемаГрузаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПунктНачалоВыбора(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПолучательКонтактноеЛицоСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение( , ПолучательКонтактноеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	ОчиститьРеквизит(Элемент);
	ПолучательКонтактноеЛицоНаименование = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонДо = ПолучательКонтактноеЛицоТелефонПредставление;
	
	ПоискЗначения = Элементы.ПолучательКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ПоискЗначения <> Неопределено Тогда
		ПолучательКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
		ПолучательКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
	КонецЕсли;
	
	Если ТелефонДо <> ПолучательКонтактноеЛицоТелефонПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонДо = ПолучательКонтактноеЛицоТелефонДополнительныйПредставление;
	
	ПоискЗначения = Элементы.ПолучательКонтактноеЛицоТелефонДополнительный.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ПоискЗначения <> Неопределено Тогда
		ПолучательКонтактноеЛицоТелефонДополнительныйЗначение = ПоискЗначения.Значение;
		ПолучательКонтактноеЛицоТелефонДополнительныйПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
	КонецЕсли;
	
	Если ТелефонДо <> ПолучательКонтактноеЛицоТелефонДополнительныйПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоEmailПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(Элемент.Имя, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоEmailПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(Элемент.Имя, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ПолучательНаселенныйПунктИдентификатор <> ВыбранноеЗначение Тогда
		ПолучательНаселенныйПунктИдентификатор = ВыбранноеЗначение;
		УстановитьВидимостьПредупрежденийПоАдресам("Получатель");
		Если ВыбранноеЗначение <> ПунктВыдачиГрузаНаселенныйПунктИдентификатор Тогда
			СброситьПунктПриемаВыдачи("ПунктВыдачи", Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПунктВыдачиГрузаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПунктНачалоВыбора(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолучательКонтрагентНажатие(Элемент)
	
	ОчиститьСообщения();
	
	ПолучательКонтрагентСсылка = ОтправительКонтрагентСсылка;
	ПолучательКонтрагентИНН = ОтправительКонтрагентИНН;
	ПолучательКонтрагентКПП = ОтправительКонтрагентКПП;
	ПолучательКонтрагентНаименование = ОтправительКонтрагентНаименование;
	ПолучательКонтрагентЮрФизЛицо = ОтправительКонтрагентЮрФизЛицо;
	
	ОбработатьИзменениеРеквизитаФормы("ПолучательКонтрагентСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательДобавитьДополнительныйТелефоныНажатие(Элемент)
	
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
	УстановитьВидимостьДополнительныхТелефонов("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательУдалитьДополнительныйТелефонНажатие(Элемент)
	
	ПолучательКонтактноеЛицоТелефонДополнительныйЗначение = "";
	ПолучательКонтактноеЛицоТелефонДополнительныйПредставление = "";
	
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
	УстановитьВидимостьДополнительныхТелефонов("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура НаложенныйПлатежВидОплатыПриИзменении(Элемент)
	
 	УстановитьВидимостьДоступностьНаложенныйПлатеж()
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораВремениИДаты(1, Элемент.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораВремениИДаты(2, Элемент.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОтгрузки = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	ВремяОтгрузкиС = Неопределено;
	ВремяОтгрузкиПо = Неопределено;
	ВремяОтгрузкиОбедС = Неопределено;
	ВремяОтгрузкиОбедПо = Неопределено;
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПараметрыГруза

&НаКлиенте
Процедура ВключитьРасшифровкуГрузовыхМестПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитаФормы("ВключитьРасшифровкуГрузовыхМест", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаТарифы

&НаКлиенте
Процедура ОтправительНаселенныйПункт1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНаселенныйПункт1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНаселенныйПункт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ОтправительНаселенныйПунктИдентификатор <> ВыбранноеЗначение Тогда
		ОтправительНаселенныйПунктИдентификатор = ВыбранноеЗначение;
		УстановитьВидимостьПредупрежденийПоАдресам("Отправитель");
		Если ВыбранноеЗначение <> ПунктПриемаГрузаНаселенныйПунктИдентификатор Тогда
			СброситьПунктПриемаВыдачи("ПунктПриема", Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНаселенныйПункт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ПолучательНаселенныйПунктИдентификатор <> ВыбранноеЗначение Тогда
		ПолучательНаселенныйПунктИдентификатор = ВыбранноеЗначение;
		УстановитьВидимостьПредупрежденийПоАдресам("Получатель");
		Если ВыбранноеЗначение <> ПунктВыдачиГрузаНаселенныйПунктИдентификатор Тогда
			СброситьПунктПриемаВыдачи("ПунктВыдачи", Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительСпособОтгрузки1ПриИзменении(Элемент)
	
	СпособПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательСпособДоставки1ПриИзменении(Элемент)
	
	СпособПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриемаГрузаТипИдентификаторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ПунктПриемаГрузаТипИдентификатор <> ВыбранноеЗначение Тогда
		ПунктПриемаГрузаТипИдентификатор = ВыбранноеЗначение;
		СброситьПунктПриемаВыдачи("ПунктПриема");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриемаГрузаТипИдентификаторОчистка(Элемент, СтандартнаяОбработка)
	СброситьПунктПриемаВыдачи("ПунктПриема", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачиГрузаТипИдентификаторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ПунктВыдачиГрузаТипИдентификатор <> ВыбранноеЗначение Тогда
		ПунктВыдачиГрузаТипИдентификатор = ВыбранноеЗначение;
		СброситьПунктПриемаВыдачи("ПунктВыдачи");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачиГрузаТипИдентификаторОчистка(Элемент, СтандартнаяОбработка)
	СброситьПунктПриемаВыдачи("ПунктВыдачи", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриема1Очистка(Элемент, СтандартнаяОбработка)
	
	СброситьПунктПриемаВыдачи("ПунктПриема");
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачи1Очистка(Элемент, СтандартнаяОбработка)
	
	СброситьПунктПриемаВыдачи("ПунктВыдачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриема1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПунктаПриемаВыдачи(ПунктПриемаГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачи1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПунктаПриемаВыдачи(ПунктВыдачиГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПунктПриемаГруза1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПунктНачалоВыбора(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПунктВыдачиГруза1НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПунктНачалоВыбора(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдрес1ПриИзменении(Элемент)
	АдресПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдрес1ПриИзменении(Элемент)
	АдресПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдрес1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдрес1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдрес1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдрес1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдрес1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдрес1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРасшифровкаТарифаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если СтрНачинаетсяС(Расшифровка, "ТарифИдентификатор") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТарифа(СтрЗаменить(Расшифровка, "ТарифИдентификатор_", ""));
	ИначеЕсли Расшифровка = "Грузоперевозчик" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИтоговаяИнформацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Расшифровка = "Грузоперевозчик" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
		
	ИначеЕсли Расшифровка = "ОтправительТерминалОтправительАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособОтгрузки = 1 Тогда
			ОткрытьФормуПунктаПриемаВыдачи(ПунктПриемаГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ОтправительАдрес, ОтправительКонтрагентЭтоОрганизация);
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПолучательТерминалПолучательАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособДоставки = 1 Тогда
			ОткрытьФормуПунктаПриемаВыдачи(ПунктВыдачиГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ПолучательАдрес, ПолучательКонтрагентЭтоОрганизация);
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ОтправительКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ОтправительКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ОтправительКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПолучательКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ПолучательКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "Тариф" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТарифа();
		
	ИначеЕсли Расшифровка = "ОткрытьФормуОснования" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОснования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтопересчетТарифыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если АвтопересчетПоВсемТарифам Тогда
		
		Отказ = Ложь;
		ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьДанныеТарифов( , Истина);
		ПолучитьТарифы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеПредставлениеНажатие(Элемент)
	
	Если ПустаяСтрока(ТрекНомер) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Трек номер неопределен, невозможно перейти по ссылке.'"));
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СервисДоставкиКлиентСервер.АдресСтраницыЗаказаНаДоставку1ССДЭК(ТрекНомер));
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ТрекНомер" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрафикаДвиженияЗаказа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппаТарифыИУслуги = Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
		Если Кэш.ЕстьТабличныйДокументИнформацияПоТарифу
			Или Элемент.ТекущийЭлемент = Элементы.ТарифыКартинкаТарифОбновить Тогда
			Кэш.ЕстьТабличныйДокументИнформацияПоТарифу = Ложь;
			СформироватьИнформациюПоТарифу(Ложь);
		Иначе
			СформироватьИнформациюПоТарифу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТарифыКартинкаТарифОбновить Тогда
		Отказ = Ложь;
		ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
		Если Не Отказ Тогда
			ОбновитьДанныеТарифа(Элемент.ТекущиеДанные, , Истина);
			ОбновитьПараметрыТарифа();
		КонецЕсли;
	Иначе
		ВыбратьТарифПродолжить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазмещениеГруза

&НаКлиенте
Процедура РазмещениеГрузаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для каждого ИдентификаторСтроки Из ПараметрыПеретаскивания.Значение Цикл
		ГрузовоеМесто = РазмещениеГруза.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьРодителя();
		
		Если ГрузовоеМесто = Неопределено Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ГрузовоеМестоПриемник = РазмещениеГруза.НайтиПоИдентификатору(Строка);
	Если ГрузовоеМестоПриемник.ЭтоГрузовоеМесто Тогда
		Идентификатор = Строка;
	Иначе
		Идентификатор = ГрузовоеМестоПриемник.ПолучитьРодителя().ПолучитьИдентификатор();
		ГрузовоеМестоПриемник = РазмещениеГруза.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	ГрузовыеМестаИсточники = Новый Соответствие;
	ГрузовыеМестаИсточники.Вставить(ГрузовоеМестоПриемник.ИдентификаторГрузовогоМеста);
	
	ТоварныеПозицииГрузовогоМеста = ГрузовоеМестоПриемник.ПолучитьЭлементы();
	Для Каждого ИдентификаторПеретаскиваемойСтроки Из ПараметрыПеретаскивания.Значение Цикл
		ТоварнаяПозиция = РазмещениеГруза.НайтиПоИдентификатору(ИдентификаторПеретаскиваемойСтроки);
		НоваяСтрока = ТоварныеПозицииГрузовогоМеста.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварнаяПозиция);
		ГрузовоеМестоИсточник = ТоварнаяПозиция.ПолучитьРодителя();
		НоваяСтрока.ИдентификаторГрузовогоМеста = ГрузовоеМестоПриемник.ИдентификаторГрузовогоМеста;
		ГрузовоеМестоИсточник.ПолучитьЭлементы().Удалить(ТоварнаяПозиция);
		ГрузовыеМестаИсточники.Вставить(ГрузовоеМестоИсточник.ИдентификаторГрузовогоМеста);
	КонецЦикла;
	
	Для Каждого Элемент Из ГрузовыеМестаИсточники Цикл
		РазмещениеГрузаМестаКПересчету.Добавить(Элемент.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(Истина));
	ЗарегистрироватьИзменениеОтборов( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент <> Элементы.РазмещениеГрузаОписание И Элемент.ТекущиеДанные <> Неопределено Тогда
		РазмещениеГрузаМестаКПересчету.Добавить(Элемент.ТекущиеДанные.ИдентификаторГрузовогоМеста);
		РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(Истина), "ОчиститьПоказатели");
	КонецЕсли;
	ЗарегистрироватьИзменениеОтборов( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаПриАктивизацииЯчейки(Элемент)
	
	УстановитьТолькоПросмотрПоляРазмещениеГруза();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоУслугТарифов

&НаКлиенте
Процедура ДеревоУслугТарифовПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоУслугТарифов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Элемент.ТекущийЭлемент <> Неопределено Тогда
		
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = ТекущиеДанные.ТипСтроки <> 2 Или ТекущиеДанные.Обязательная;
		
		Если Поле = Элементы.ДеревоУслугТарифовЗначение Тогда
			Элементы.ДеревоУслугТарифовЗначение.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугТарифовИспользоватьПриИзменении(Элемент)
	
	ДеревоУслугТарифовРеквизитыПриИзменении(Элементы.ДеревоУслугТарифов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугТарифовЗначениеПриИзменении(Элемент)
	
	СтрокаДереваУслугТарифов = ДеревоУслугТарифов.НайтиПоИдентификатору(Элементы.ДеревоУслугТарифов.ТекущаяСтрока);
	СтрокаУслуги = СтрокаДереваУслугТарифов.ПолучитьРодителя();
	СтрокаУслуги.Использовать = ЗначениеЗаполнено(СтрокаДереваУслугТарифов.Значение);
	ДеревоУслугТарифовРеквизитыПриИзменении(СтрокаУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугТарифовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.ДеревоУслугТарифовПоказыватьИнформацию И ТекущиеДанные.ПоказыватьИнформацию Тогда
		
		ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
		
	ИначеЕсли Поле = Элементы.ДеревоУслугТарифовЗначение И ТекущиеДанные.ТипСтроки = 2 Тогда
		
		Услуга = ТекущиеДанные.ПолучитьРодителя();
		Если Услуга.Идентификатор = ИдентификаторУслугиСтрахование() Тогда
			ПереключитьСтраницу(Элементы, Команды.ПерейтиПараметрыГруза.Имя);
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Стоимость страхования определяется объявленной стоимостью.'"), , "ГрузСтоимость");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПерейтиОсновное(Команда)
	
	ПерейтиКШагуОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПараметрыГруза(Команда)
	
	ПерейтиКШагуПараметрыГруза();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиТарифыИУслуги(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуТарифыИУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКарточка(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(3, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТарифы(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеТарифов(Истина);
	ПолучитьТарифы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	ВыбратьТарифПродолжить();
КонецПроцедуры

&НаКлиенте
Процедура СброситьТариф(Команда)
	СброситьТарифПродолжить();
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСохранитьЗаказ(Команда)
	
	Если ДоступнаОтправкаЗаказовНаДоставку Тогда
		ОформитьЗаказ();
	Иначе
		СоздатьИзменитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТарифыПоЦене(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТарифыПоСроку(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	ОчиститьСообщения();
	
	СоздатьИзменитьЗаказНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если КлючиРеквизитовДляИзменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(5, Отказ, Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаКарточка <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
		ПерейтиКШагуПроверка();
	Иначе
		СоздатьИзменитьЗаказНаДоставку(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru = 'Отменить заказ?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ПечатныеФормы", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуУГрузоперевозчика(Команда)
	
	ОчиститьСообщения();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		ОбновитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыРедактированияРеквизитовЗаказа

&НаКлиенте
Процедура ИзменитьПараметрыЗаказа(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение реквизитов для изменения.'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	
	РежимИзмененияРеквизитов(Ложь);
	ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
	
	Если Модифицированность Тогда
		ПолучитьЗаказНаДоставку();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = СервисДоставкиКлиент.НовыеПараметрыОткрытьФормуОбщиеНастройки();
	ПараметрыФормы.Вставить("ВладелецФормы", ЭтотОбъект);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ВариантОтображения", "Шаблоны");
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОписаниеОповещенияОЗакрытии",
		Новый ОписаниеОповещения("ПослеВыбораШаблона", ЭтотОбъект));
	
	СервисДоставкиКлиент.ОткрытьФормуОбщиеНастройкиСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СозданиеШаблонаПродолжение", ЭтотОбъект, Истина),
			НСтр("ru = 'Для создания шаблона заказ на доставку будет сохранен. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		СозданиеШаблонаПродолжение(КодВозвратаДиалога.Да, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область РазмещениеГруза

&НаКлиенте
Процедура ДобавитьГрузовоеМесто(Команда)
	
	ДобавитьГрузовоеМестоВДерево(РазмещениеГруза.ПолучитьЭлементы(), ЗначенияПараметровПоУмолчаниюИзКэша(Кэш));
	РассчитатьСводнуюИнформациюПоРаспределениюГруза();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьГрузовоеМесто(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.РазмещениеГруза.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеГрузовыхМест = РазмещениеГруза.ПолучитьЭлементы();
	Если ОписаниеГрузовыхМест.Количество() = 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В заказе должно быть хотя бы одно грузовое место.'"), ,
			"РазмещениеГруза[0].Наименование");
		Возврат;
	КонецЕсли;
	
	ГрузовоеМестоКУдалению = РазмещениеГруза.НайтиПоИдентификатору(Элементы.РазмещениеГруза.ТекущаяСтрока);
	Если Не ГрузовоеМестоКУдалению.ЭтоГрузовоеМесто Тогда
		ГрузовоеМестоКУдалению = ГрузовоеМестоКУдалению.ПолучитьРодителя();
	КонецЕсли;
	
	Если ГрузовоеМестоКУдалению.ЭтоОсновноеГрузовоеМесто Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Основное грузовое место не может быть удалено.'"));
		Возврат;
	КонецЕсли;
	
	Если ГрузовоеМестоКУдалению.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Текст = НСтр("ru = 'Грузовое место №%1 будет удалено, его товарный состав будет перенесен в основное грузовое место. Продолжить?'");
		
		Обещание = ВопросАсинх(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ГрузовоеМестоКУдалению.ИдентификаторГрузовогоМеста),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Ответ = Ждать Обещание;
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеГрузовыхМест = РазмещениеГруза.ПолучитьЭлементы();
		
		ТоварныеПозицииОсновногоГрузовогоМеста = Неопределено;
		
		Для Каждого ГрузовоеМесто Из ОписаниеГрузовыхМест Цикл
			Если ГрузовоеМесто.ЭтоОсновноеГрузовоеМесто Тогда
				ТоварныеПозицииОсновногоГрузовогоМеста = ГрузовоеМесто.ПолучитьЭлементы();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТоварныеПозицииОсновногоГрузовогоМеста <> Неопределено Тогда
			Для Каждого ТоварнаяПозиция Из ГрузовоеМестоКУдалению.ПолучитьЭлементы() Цикл
				НС = ТоварныеПозицииОсновногоГрузовогоМеста.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ТоварнаяПозиция);
				НС.ИдентификаторГрузовогоМеста = ГрузовоеМесто.ИдентификаторГрузовогоМеста;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеГрузовыхМест.Удалить(ГрузовоеМестоКУдалению);
	ПеренумерацияГрузовыхМест(ОписаниеГрузовыхМест);
	Если ГрузовоеМесто <> Неопределено Тогда
		РазмещениеГрузаМестаКПересчету.Добавить(ГрузовоеМесто.ИдентификаторГрузовогоМеста);
		РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(Истина), "ОчиститьПоказатели");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура РазмещениеГрузаРучнойВвод(Команда)
	
	ОчиститьСообщения();
	
	Если РазмещениеГрузаРучнойВвод И ДокументыОснования.Количество() > 0 Тогда
		
		Обещание = ВопросАсинх(НСтр("ru = 'Показатели грузомест будут пересчитаны. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Ответ = Ждать Обещание;
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РазмещениеГрузаРучнойВвод = Не РазмещениеГрузаРучнойВвод;
	Элементы.РазмещениеГрузаРучнойВвод.Пометка = РазмещениеГрузаРучнойВвод;
	
	УстановитьОформлениеШапкиРазмещениеГруза();
	УстановитьТолькоПросмотрПоляРазмещениеГруза();
	Если ДокументыОснования.Количество() > 0 Тогда
		РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(), "ОчиститьПоказатели");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаАвтопересчетНастройка(Команда)
	
	СписокОтмеченные = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из АвтопересчетСписокКолонок Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОтмеченные.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(АвтопересчетСписокКолонок);
	СкорректироватьСписокКолонокАвтопересчета(ЗначенияДляВыбора, ТипЗаказа = ТипыЗаказовСДЭК.Доставка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", СписокОтмеченные);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", ЗначенияДляВыбора);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Поля для автопересчета'"));
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10)));
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаНастройкиАвтопересчета", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СброситьУслуги(Команда)
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			ТекущаяУслуга.Использовать = ТекущаяУслуга.Обязательная;
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.ПолучитьЭлементы() Цикл
				УслугаОснование = УслугиТарифов.НайтиПоИдентификатору(ТекущаяУслуга.ИдентификаторУслугТарифов);
				СвойствоОснование = УслугаОснование.Свойства.НайтиПоИдентификатору(ТекущееСвойство.ИдентификаторУслугТарифов);
				ТекущееСвойство.Значение = СвойствоОснование.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГрузоместаПоУмолчанию(Команда)
	
	ГрузовыеМеста = Новый Соответствие;
	
	Для Каждого Строка Из Элементы.РазмещениеГруза.ВыделенныеСтроки Цикл
		ГрузовоеМесто = РазмещениеГруза.НайтиПоИдентификатору(Строка);
		Если Не ГрузовоеМесто.ЭтоГрузовоеМесто Тогда
			ГрузовоеМесто = ГрузовоеМесто.ПолучитьРодителя();
		КонецЕсли;
		ГрузовыеМеста.Вставить(ГрузовоеМесто.ИдентификаторГрузовогоМеста, ГрузовоеМесто);
	КонецЦикла;
	
	Для Каждого ГрузовоеМесто Из ГрузовыеМеста Цикл
		ЗаполнитьПоказателиГрузовогоМестаПоУмолчанию(ГрузовоеМесто.Значение, ЗначенияПараметровПоУмолчаниюИзКэша(Кэш), Истина);
	КонецЦикла;
	
	РассчитатьСводнуюИнформациюПоРаспределениюГруза();
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ПараметрыФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	
	ПараметрыФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки);
	ПараметрыФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
	ПараметрыФормы.Вставить("РежимМастера", 0);
	ПараметрыФормы.Вставить("Уникальность", СтрШаблон("ЭтоНовый_%1", ТипГрузоперевозки));
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыФормы.Вставить("ЭтоЗаполнениеКопированием", Истина);
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Для Каждого Операция Из ФоновоеЗадание.Очередь Цикл
			
			ИмяМетода = Операция.Представление;
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы()
				Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
				
				Элементы.ВыбратьТариф.Доступность = Ложь;
				Элементы.ТарифыКартинкаТарифОбновить.Доступность = Ложь;
				
				Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
					Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
					Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = НСтр("ru = 'Поиск подходящих тарифов...'");
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры, Отказ)
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			
			Если Кэш.КлючПолучитьТарифы <> ДополнительныеПараметры.КлючФоновогоЗадания Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Элементы.ВыбратьТариф.Доступность = Истина;
			Элементы.ТарифыКартинкаТарифОбновить.Доступность = Истина;
			Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.Обновить;
			Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = "";
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
			
			Если Кэш.КлючОбновитьПараметрыТарифа <> ДополнительныеПараметры.КлючФоновогоЗадания Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Элементы.ВыбратьТариф.Доступность = Истина;
			Элементы.ТарифыКартинкаТарифОбновить.Доступность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры, Отказ);
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ОбработатьРезультатМенеджераДлительныхОпераций(Результат.АдресРезультата);
	Иначе
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
			
			ЭтоСоздание = (ИдентификаторЗаказа = "");
			ЗавершитьИзменениеОформленного = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
			ЗагрузитьРезультатСозданияИзмененияЗаказа(РезультатОперации, ОперацияВыполнена);
			
			Если ОперацияВыполнена = Истина Тогда
				
				Если ЭтоСоздание Тогда
					ТекстПояснения = НСтр("ru='Заказ на доставку создан.'");
					ТипОперации = НСтр("ru='Создание:'");
					ОбновитьКлючУникальности();
				Иначе
					ТекстПояснения = НСтр("ru='Заказ на доставку изменен.'");
					ТипОперации = НСтр("ru='Изменение:'");
				КонецЕсли;
				
				ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
				УстановитьВидимостьДоступностьОрганизации();
				
			КонецЕсли;
			
			Если ОперацияВыполнена Тогда
				
				Модифицированность = Ложь;
				
				ОформитьЗаказ = ДополнительныеПараметры.ОформитьЗаказ;
				
				Если ЭтоСоздание И Не ОформитьЗаказ Тогда
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
				КонецЕсли;
				
				Если ЗавершитьИзменениеОформленного Тогда
					ПолучитьЗаказНаДоставку();
					КлючиРеквизитовДляИзменения.Очистить();
				КонецЕсли;
				
				ЗакрытьПослеЗавершенияОперации = ДополнительныеПараметры.ЗакрытьПослеЗавершенияОперации;
				
				Если ОформитьЗаказ Тогда
					ОформитьЗаказНаДоставку( , ЗакрытьПослеЗавершенияОперации);
				ИначеЕсли ЗакрытьПослеЗавершенияОперации Тогда
					Закрыть();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
			
			ЭтоСозданиеШаблона = Ложь;
			Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
				ЭтоСозданиеШаблона = РезультатОперации.ЭтоСозданиеШаблона;
			КонецЕсли;
			
			Если ЭтоСозданиеШаблона Тогда
				СоздатьШаблонПоЗаказуНаДоставку(РезультатОперации.Значение);
			ИначеЕсли РезультатОперации = Истина Тогда
				ПослеПолученияДанныхЗаказаНаДоставку();
			КонецЕсли;
			
			ЭтоЗаполнениеКопированием = Ложь;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
			
			РезультатОтмены = 0;
			ЗагрузитьРезультатОтменыЗаказа(РезультатОперации, РезультатОтмены, ОперацияВыполнена);
			
			Если РезультатОтмены = 1 Тогда // Отменен
				
				ТекстПояснения = СтрШаблон(НСтр("ru = 'Заказ на доставку %1 отменен.'"), НомерЗаказа);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена:'"), , ТекстПояснения, БиблиотекаКартинок.Информация32);
				Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
				Модифицированность = Ложь;
				Закрыть();
				
			ИначеЕсли РезультатОтмены = 3 Тогда // Отмена заказа уже невозможна
				
				ТекстПояснения = СтрШаблон(НСтр("ru = 'Заказ на доставку %1 невозможно отменить.'"), НомерЗаказа);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена:'"), , ТекстПояснения, БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
			
			Если РезультатОперации = 1 Тогда
				ТипОперации = НСтр("ru='Оформление:'");
				ТекстПояснения = НСтр("ru='Заказ на доставку передан к оформлению грузоперевозчику'");
				ПоказатьОповещениеПользователя(ТипОперации, , ТекстПояснения, БиблиотекаКартинок.Информация32);
				Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
				Если ДополнительныеПараметры.ЗакрытьПослеЗавершенияОперации Тогда
					Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Тогда
			
			ОбработатьРезультатаПолученияДоступныхДляИзмененияРеквизитов(РезультатОперации, ОперацияВыполнена);
			Если Не ОперацияВыполнена Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить перечень изменяемых реквизитов.'"));
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
			
			ОперацияВыполнена = РезультатОперации;
			Если ОперацияВыполнена Тогда
				ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
				УстановитьВидимостьДоступностьНаСтраницеОсновная();
				ОбновитьПредставлениеДатыВремениОтгрузкиДоставки();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	
	Если Тарифы.Количество() = 0 Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги());
	КонецЕсли;
	
	Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераНовый() Или ЭтоЗаполнениеКопированием Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку());
	КонецЕсли;
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш.Вставить("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТарифы(АвтопересчетПоВсемТарифамОбязательный = Ложь)
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Поиск подходящих тарифов.'");
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.ОтменитьАктивные = АвтопересчетПоВсемТарифам;
	ПараметрыОперации.Вставить("АвтопересчетПоВсемТарифамОбязательный", АвтопересчетПоВсемТарифамОбязательный);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
	Кэш.КлючПолучитьТарифы = ПараметрыОперации.КлючФоновогоЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыТарифа()
	
	Если ПустаяСтрока(ИдентификаторТекущегоТарифа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Обновление параметров тарифа.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	Кэш.КлючОбновитьПараметрыТарифа = ПараметрыОперации.КлючФоновогоЗадания;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьЗаказНаДоставку(ОформитьЗаказ = Ложь, ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку());
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ТекстСообщения = НСтр("ru = 'Сохранение заказа на доставку.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Создание заказа на доставку.'");
	КонецЕсли;
	ПараметрыОперации.ТекстСообщения = ТекстСообщения;
	ПараметрыОперации.Вставить("ОформитьЗаказ", ОформитьЗаказ);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку(ТекстСообщения = "", ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку());
	Если ТекстСообщения = "" Тогда
		ТекстСообщения = НСтр("ru = 'Отправка заказа на доставку грузоперевозчику.'");
	КонецЕсли;
	ПараметрыОперации.ТекстСообщения = ТекстСообщения;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаказНаДоставку()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение данных по заказу на доставку.'");
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Отмена заказа на доставку.'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказНаДоставку()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Обновление данных по заказу на доставку.'");
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьЗаказНаДоставку(Операция.Значение, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ, Истина);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК());
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	
	Результат.Вставить("КлючИдемпотентности", КлючИдемпотентности);
	
	Для Каждого ТекДокументОснование Из ДокументыОснования Цикл
		Результат.ДокументыОснованияИдентификаторы.Добавить(ТекДокументОснование.Значение.УникальныйИдентификатор());
	КонецЦикла;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ДанныеФормы = Новый Структура;
	Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
		ДанныеФормы.Вставить(ТекущийРеквизит.Имя, ЭтотОбъект[ТекущийРеквизит.Имя]);
	КонецЦикла;
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Результат, ДанныеФормы);
	
	ЗаполнитьУслугиВПриемнике(Результат.Услуги, Истина);
	ЗаполнитьВГХВПриемнике(Результат.ГрузовыеМестаВГХ, Результат.Товары);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказНаДоставку();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	
	ПараметрыЗапроса.Идентификатор = ИдентификаторЗаказа;
	ПараметрыЗапроса.ЭтоСозданиеШаблона = ?(ПараметрыОперации = Неопределено, Ложь,
		ПараметрыОперации.ЭтоСозданиеШаблона);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаказа) Или Не ДоступнаОтмена Тогда
		ТекстСообщения = НСтр("ru='Отмена данного заказа недоступна. Невозможно отменить заказ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ, ЭтоОбновлениеТарифа = Ложь)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьТарифы();
	
	ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект);
	
	Если ЭтоОбновлениеТарифа Тогда
		Результат.ТарифИдентификатор = ИдентификаторТекущегоТарифа;
	Иначе
		Результат.ТарифИдентификатор = "";
		Результат.АвтопересчетПоВсемТарифам = ?(ПараметрыОперации.АвтопересчетПоВсемТарифамОбязательный, Истина,
			Результат.АвтопересчетПоВсемТарифам);
	КонецЕсли;
	
	ТабличныйДокументИнформацияПоТарифу(Элементы.Тарифы.ТекущаяСтрока);
	
	Если ЗаказчикРоль = 1 Тогда
		ЗаказчикИНН = ОтправительКонтрагентИНН;
	ИначеЕсли ЗаказчикРоль = 2 Тогда
		ЗаказчикИНН = ПолучательКонтрагентИНН;
	Иначе
		ЗаказчикИНН = "";
	КонецЕсли;
	Результат.ЗаказчикИНН = ЗаказчикИНН;
	Результат.ОтправительАдрес = ОтправительАдресПредставление;
	Результат.ПолучательАдрес = ПолучательАдресПредставление;
	Результат.ГрузОбщийВес = ГрузВес;
	Результат.ГрузОбщийОбъем = ГрузОбъем;
	
	ЗаполнитьУслугиВПриемнике(Результат.Услуги);
	ЗаполнитьВГХВПриемнике(Результат.ГрузовыеМестаВГХ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Идентификатор = ИдентификаторЗаказа;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты();
	
	ПараметрыЗапроса.Идентификатор = ИдентификаторЗаказа;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОбновитьЗаказНаДоставку();
	
	ПараметрыЗапроса.Идентификатор = ИдентификаторЗаказа;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

// Обрабатывает результат менеджера длительных операций на сервере.
// 
// Параметры:
//  АдресРезультата - Строка - Адрес результата
// 
// Возвращаемое значение:
//  Произвольный - Результат обработки
&НаСервере
Функция ОбработатьРезультатМенеджераДлительныхОпераций(Знач АдресРезультата)
	
	РезультатМенеджера = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		Результат = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги() Тогда
			
			ОбработатьРезультатПолученияТарифовИУслуг(Результат, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
			
			ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат, ОперацияВыполнена);
			Операция.Значение = ОперацияВыполнена;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
			
			ЗагрузитьРезультатОбновленияЗаказа(Результат, ОперацияВыполнена);
			Если ОперацияВыполнена Тогда
				ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат, ОперацияВыполнена);
			КонецЕсли;
			Операция.Значение = ОперацияВыполнена;
		
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			
			ЗагрузитьРезультатПолученияТарифов(Результат, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
			
			ЗагрузитьРезультатПолученияТарифа(Результат, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
			
			Операция.Значение = ЗагрузитьРезультатОформленияЗаказа(Результат, ОперацияВыполнена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатМенеджера;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатПолученияТарифовИУслуг(Результат, ОперацияВыполнена = Истина)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	СписокТарифы = Результат.Тарифы;
	СписокУслугиТарифов = Результат.УслугиТарифов;
	СписокНесовместимыеУслуги = Результат.НесовместимыеУслуги;
	
	Для Каждого ТекущаяУслуга Из СписокНесовместимыеУслуги Цикл
		НоваяУслуга = НесовместимыеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
	КонецЦикла;
	
	Для Каждого ТекущаяУслуга Из СписокУслугиТарифов Цикл
		
		НоваяУслуга = УслугиТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга, , "Свойства");
		
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = НоваяУслуга.Свойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	АвтоматическиеУслуги = УслугиТарифов.Выгрузить(Новый Структура("Автоматическая", Истина), "Идентификатор");
	
	Для Каждого ТекущийТариф Из СписокТарифы Цикл
		
		НовыйТариф = Тарифы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТариф, ТекущийТариф);
		
		Для Каждого ТекущаяУслуга Из ТекущийТариф.Услуги Цикл
			НоваяУслуга = НовыйТариф.ДополнительныеУслуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга;
			НоваяУслуга.Автоматическая = АвтоматическиеУслуги.Найти(ТекущаяУслуга) <> Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	ДеревоУслугТарифовСформировать();
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() И ДокументыОснования.Количество() > 0 Тогда
		УстановитьЗначениеСвойстваУслуги(ИдентификаторУслугиСтрахование(), ПолнаяСтоимость);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияИзмененияЗаказа(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаказа = Результат["Идентификатор"];
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);

	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		И КлючиРеквизитовДляИзменения.Количество() > 0 Тогда
		РежимИзмененияРеквизитов(Ложь);
		ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
		Модифицированность = Ложь;
		СформироватьИтоговуюИнформацию();
	ИначеЕсли РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
		ДоступнаОтмена = Истина;
	КонецЕсли;

	СформироватьЗаголовокФормы();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	УстановитьВидимостьДоступность();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;

	СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования);
	СоздатьОбновитьДанныеЗаказаНаДоставку();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат, ОперацияВыполнена = Истина)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаказа = Результат.Данные;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЭтоСозданиеШаблона Тогда
		ОперацияВыполнена = Новый Структура;
		ОперацияВыполнена.Вставить("Значение", ЗначениеВСтрокуВнутр(ДанныеЗаказа));
		ОперацияВыполнена.Вставить("ЭтоСозданиеШаблона", Истина);
		Возврат;
	КонецЕсли;
	
	ВерсияДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
	
	Если ПустаяСтрока(ДанныеЗаказа.ИдентификаторЗаказа) Тогда
		РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый();
	ИначеЕсли ДанныеЗаказа.СостояниеИдентификатор = 0 Тогда
		РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
	Иначе
		РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
	КонецЕсли;
	
	ОбработатьПараметры(ДанныеЗаказа);
	
	Если Результат.ЭтоЗаполнениеКопированием Тогда
		РассчитатьСводнуюИнформациюПоРаспределениюГруза();
	Иначе
		УстановитьОтборыТарифовНаСервере(Ложь);
		Кэш.АвтопересчетПоВсемТарифамОбязательный = Истина;
		ОбработатьРазмещениеГруза(ДанныеЗаказа, "ПолучениеЗаказаНаДоставку");
	КонецЕсли;
	
	ОбработатьНаселенныеПункты(ДанныеЗаказа);
	
	СписокДокументов.Очистить();
	Если ДанныеЗаказа.Документы.Количество() > 0 Тогда
		Для Каждого ТекущийДокумент Из ДанныеЗаказа.Документы Цикл
			НовыйДокумент = СписокДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекущийДокумент);
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеДанные.Очистить();
	Если ЗначениеЗаполнено(ДанныеЗаказа.ДополнительныеДанныеЗаказа)
		И ДанныеЗаказа.ДополнительныеДанныеЗаказа.Количество() Тогда
		
		Для Каждого ТекущиеДанные Из ДанныеЗаказа.ДополнительныеДанныеЗаказа Цикл
			НоваяСтрока = ДополнительныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,,"Список");
			Для Каждого ТекущийЭлементСписка Из ТекущиеДанные.Список Цикл
				НовыйЭлемент = НоваяСтрока.Список.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущийЭлементСписка);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьПредставлениеДокументаОснования();
	УстановитьВидимостьДоступность();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	СформироватьЗаголовокФормы();
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект);
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект, Ложь);
	
	Тариф = ОпределитьЭлементКоллекции(Тарифы, ТарифИдентификатор);
	Если Тариф <> Неопределено Тогда
		Тариф.Видимость = Истина;
		ДеревоУслугТарифовДополнитьДаннымиТарифов();
	КонецЕсли;
	
	ДеревоУслугТарифовВосстановитьУслуги(ДанныеЗаказа.Услуги);
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		СформироватьИтоговуюИнформацию();
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(Результат, РезультатВыполнения, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ДокументОтменен = Истина Тогда
		РезультатВыполнения = 1;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		СформироватьИтоговуюИнформацию();
		ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
		УстановитьВидимостьДоступность();
		СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
	ИначеЕсли Не Результат.ДоступнаОтмена Тогда
		РезультатВыполнения = 3;
	КонецЕсли;
	
	СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифов(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Если Не ПустаяСтрока(ТарифИдентификатор) Тогда
			Тариф = ОпределитьЭлементКоллекции(Тарифы, ТарифИдентификатор);
			Если Тариф <> Неопределено Тогда
				Тариф.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АвтоматическиеУслуги = Новый Соответствие;
	Для Каждого ТекущийТариф Из Результат.Список Цикл
		Тариф = ОпределитьЭлементКоллекции(Тарифы, ТекущийТариф.ТарифИдентификатор);
		Если Тариф = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьТариф(Тариф, ТекущийТариф, АвтоматическиеУслуги);
	КонецЦикла;
	НастроитьАвтоматическиеУслуги(ДеревоУслугТарифов, АвтоматическиеУслуги);
	
	ОтборПоКлючевымПараметрам = ТарифыОтборПоКлючевымПараметрам();
	КоличествоПодходящихТарифов = 0;
	СостояниеВыполненияЗапроса = СформироватьСтрокуСостоянияПоТарифам(Тарифы, ОтборПоКлючевымПараметрам,
		 КоличествоПодходящихТарифов);
	Если КоличествоПодходящихТарифов = 0 Тогда
		Элементы.ГруппаСпособыОтгрузкиДоставки1.Показать();
	КонецЕсли;
	ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
	Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = СостояниеВыполненияЗапроса;
	
	ДеревоУслугТарифовДополнитьДаннымиТарифов();
	
	Если ПустаяСтрока(ИдентификаторТекущегоТарифа) Тогда
		ТарифыПоиск = Тарифы.НайтиСтроки(ОтборПоКлючевымПараметрам);
		Если ТарифыПоиск.Количество() > 0 Тогда
			Тариф = ТарифыПоиск[0];
			ИдентификаторТекущегоТарифа = Тариф.Идентификатор;
		КонецЕсли;
	Иначе
		Тариф = ОпределитьЭлементКоллекции(Тарифы, ИдентификаторТекущегоТарифа);
	КонецЕсли;
	Если Тариф <> Неопределено Тогда
		Кэш.ЕстьТабличныйДокументИнформацияПоТарифу = Истина;
		ТабличныйДокументИнформацияПоТарифу(Тариф);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифа(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Если Не ПустаяСтрока(ТарифИдентификатор) Тогда
			Тариф = ОпределитьЭлементКоллекции(Тарифы, ТарифИдентификатор);
			Если Тариф <> Неопределено Тогда
				Тариф.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокТарифы = Результат.Список;
	Если СписокТарифы.Количество() <> 1 Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийТариф = СписокТарифы[0];
	
	Тариф = ОпределитьЭлементКоллекции(Тарифы, ТекущийТариф.ТарифИдентификатор);
	Если Тариф = Неопределено Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	АвтоматическиеУслуги = Новый Соответствие;
	ЗаполнитьТариф(Тариф, ТекущийТариф, АвтоматическиеУслуги);
	НастроитьАвтоматическиеУслуги(ДеревоУслугТарифов, АвтоматическиеУслуги);
	ТабличныйДокументИнформацияПоТарифу(Тариф);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьРезультатОформленияЗаказа(Результат, ОперацияВыполнена)
	
	РезультатОперации = 0;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Или Результат.СостояниеИдентификатор = 0 Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации = 1;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
	СформироватьЗаголовокФормы();
	СформироватьИтоговуюИнформацию();
	УстановитьВидимостьДоступность();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	СформироватьПредставлениеДокументаОснования();
	
	СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования);
	
	Возврат РезультатОперации;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатОбновленияЗаказа(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияВыполнена = ЗначениеЗаполнено(Результат.ДатаОбновления) И Результат.ЗаказОбновлен;
	
	Если Не ОперацияВыполнена Тогда
		ДанныеЗаказа = Результат.Данные;
		ВерсияПолученныхДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
		ОперацияВыполнена = ВерсияПолученныхДанных <> ВерсияДанных;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку(Результат, ДокументыОснования);
		Если Не ОперацияВыполнена Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Текущая версия заказа является актуальной.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРазмещениеГруза(ДанныеЗаказа, КлючОперации = "")
	
	ГрузовыеМеста = ДанныеЗаказа.ГрузовыеМестаВГХ;
	Если КлючОперации = "ПолучениеЗаказаНаДоставку" Тогда
		Товары = ДанныеЗаказа.Товары;
	Иначе
		Товары = ДанныеЗаказа.ТоварныйСостав;
	КонецЕсли;
	
	ОписаниеГрузовыхМест = РеквизитФормыВЗначение("РазмещениеГруза");
	
	ОписаниеГрузовыхМест.Строки.Очистить();
	
	Если ГрузовыеМеста.Количество() > 0 Тогда
		Для Каждого ГрузовоеМесто Из ГрузовыеМеста Цикл
			НовоеГрузовоеМесто = ОписаниеГрузовыхМест.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеГрузовоеМесто, ГрузовоеМесто);
			НовоеГрузовоеМесто.Наименование = СервисДоставкиКлиентСервер.ИмяГрузовогоМеста(ГрузовоеМесто.ИдентификаторГрузовогоМеста);
			НовоеГрузовоеМесто.ЭтоГрузовоеМесто = Истина;
		КонецЦикла;
		ОписаниеГрузовыхМест.Строки.Сортировать("ИдентификаторГрузовогоМеста Возр");
		ОсновноеГрузовоеМесто = ОписаниеГрузовыхМест.Строки[0];
		ОсновноеГрузовоеМесто.ЭтоОсновноеГрузовоеМесто = Истина;
	Иначе
		ОсновноеГрузовоеМесто = ДобавитьГрузовоеМестоВДерево(ОписаниеГрузовыхМест.Строки, ЗначенияПараметровПоУмолчаниюИзКэша(Кэш));
	КонецЕсли;
	
	Если КлючОперации = "ПолучениеЗаказаНаДоставку" Тогда
		КонвертироватьВесИзГраммыВКгДеревоЗначений(ОписаниеГрузовыхМест);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Товары) Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
			Товары.Сортировать("ИдентификаторГрузовогоМеста Возр");
		КонецЕсли;
		
		ТекущееГрузовоеМесто = ОсновноеГрузовоеМесто;
	
		Для Каждого ТоварнаяПозиция Из Товары Цикл
			Если ЗначениеЗаполнено(ТоварнаяПозиция.ИдентификаторГрузовогоМеста) Тогда
				Если ТоварнаяПозиция.ИдентификаторГрузовогоМеста <> ТекущееГрузовоеМесто.ИдентификаторГрузовогоМеста Тогда
					ТекущееГрузовоеМесто = ОписаниеГрузовыхМест.Строки.Найти(ТоварнаяПозиция.ИдентификаторГрузовогоМеста, "ИдентификаторГрузовогоМеста", Ложь);
					Если ТекущееГрузовоеМесто = Неопределено Тогда
						ТекущееГрузовоеМесто = ОписаниеГрузовыхМест.Строки.Добавить();
						ТекущееГрузовоеМесто.ИдентификаторГрузовогоМеста = ТоварнаяПозиция.ИдентификаторГрузовогоМеста;
						ТекущееГрузовоеМесто.Наименование = СервисДоставкиКлиентСервер.ИмяГрузовогоМеста(ТоварнаяПозиция.ИдентификаторГрузовогоМеста);
						ТекущееГрузовоеМесто.ЭтоГрузовоеМесто = Истина;
					КонецЕсли;
				КонецЕсли;
				НС = ТекущееГрузовоеМесто.Строки.Добавить();
			Иначе
				ТоварнаяПозиция.ИдентификаторГрузовогоМеста = ОсновноеГрузовоеМесто.ИдентификаторГрузовогоМеста;
				НС = ОсновноеГрузовоеМесто.Строки.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НС, ТоварнаяПозиция);
			Если КлючОперации = "ПолучениеЗаказаНаДоставку" Тогда
				КонвертироватьВесИзГраммыВКг(НС);
				КонвертироватьВесИзГраммыВКг(НС, "ВесЕдиницыТовара")
			КонецЕсли;
			НС.Стоимость = НС.Сумма;
		КонецЦикла;
	
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОписаниеГрузовыхМест, "РазмещениеГруза");
	
	Показатели = "Все";
	Если КлючОперации = "ПолучениеЗаказаНаДоставку" Тогда
		Показатели = "СуммаНДС, Сумма";
	КонецЕсли;
	РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями( , Показатели), "ОчиститьПоказатели", КлючОперации);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНаселенныеПункты(Источник)
	
	НаселенныеПункты = Кэш.НаселенныеПункты; // Соответствие Из Число
	НаселенныеПунктыДанные = Кэш.НаселенныеПунктыДанные; // Соответствие Из Структура
	
	Элемент = Элементы.ОтправительНаселенныйПунктИдентификатор;
	Элемент1 = Элементы.ОтправительНаселенныйПунктИдентификатор1;
	Если ТипЗнч(Источник.ОтправительНаселенныйПункт) = Тип("Структура") Тогда
		ОтправительНаселенныйПунктИдентификатор = Источник.ОтправительНаселенныйПункт.Идентификатор;
		Если ЗначениеЗаполнено(ОтправительНаселенныйПунктИдентификатор) Тогда
			Представление = Источник.ОтправительНаселенныйПункт.Представление;
			Если НаселенныеПункты.Получить(ОтправительНаселенныйПунктИдентификатор) = Неопределено Тогда
				НаселенныеПункты.Вставить(ОтправительНаселенныйПунктИдентификатор, Представление);
				НаселенныеПунктыДанные.Вставить(ОтправительНаселенныйПунктИдентификатор,
												Источник.ОтправительНаселенныйПункт);
			КонецЕсли;
			Если Элемент.СписокВыбора.НайтиПоЗначению(ОтправительНаселенныйПунктИдентификатор) = Неопределено Тогда
				Элемент.СписокВыбора.Добавить(ОтправительНаселенныйПунктИдентификатор, Представление);
				Элемент1.СписокВыбора.Добавить(ОтправительНаселенныйПунктИдентификатор, Представление);
			КонецЕсли;

			Кэш["НаселенныеПунктыДанные"].Вставить(ОтправительНаселенныйПунктИдентификатор,
				Источник.ОтправительНаселенныйПункт);

		КонецЕсли;
	КонецЕсли;
	
	Элемент = Элементы.ПолучательНаселенныйПунктИдентификатор;
	Элемент1 = Элементы.ПолучательНаселенныйПунктИдентификатор1;
	Если ТипЗнч(Источник.ПолучательНаселенныйПункт) = Тип("Структура") Тогда
		ПолучательНаселенныйПунктИдентификатор = Источник.ПолучательНаселенныйПункт.Идентификатор;
		Если ЗначениеЗаполнено(ПолучательНаселенныйПунктИдентификатор) Тогда
			Представление = Источник.ПолучательНаселенныйПункт.Представление;
			Если НаселенныеПункты.Получить(ПолучательНаселенныйПунктИдентификатор) = Неопределено Тогда
				НаселенныеПункты.Вставить(ПолучательНаселенныйПунктИдентификатор, Представление);
				НаселенныеПунктыДанные.Вставить(ПолучательНаселенныйПунктИдентификатор,
												Источник.ПолучательНаселенныйПункт);
			КонецЕсли;
			Если Элемент.СписокВыбора.НайтиПоЗначению(ПолучательНаселенныйПунктИдентификатор) = Неопределено Тогда
				Элемент.СписокВыбора.Добавить(ПолучательНаселенныйПунктИдентификатор, Представление);
				Элемент1.СписокВыбора.Добавить(ПолучательНаселенныйПунктИдентификатор, Представление);
			КонецЕсли;

			Кэш["НаселенныеПунктыДанные"].Вставить(ПолучательНаселенныйПунктИдентификатор,
				Источник.ПолучательНаселенныйПункт);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНаселенныеПунктыАвтоподбор(Элемент, Кэш, Источник)
	
	Имя = СтрЗаменить(Элемент.Имя, "1", "");
	ЭлементОсновной = Элементы[Имя];
	ЭлементОсновной.СписокВыбора.Очистить();
	ЭлементДополнительный = Элементы[Имя + "1"];
	ЭлементДополнительный.СписокВыбора.Очистить();
	
	// Кэшируем на клиенте найденные данные для возможности последующего выбора из списка
	Для Каждого ОписаниеНаселенногоПункта Из Источник Цикл
		
		ДанныеНаселенногоПункта = ОписаниеНаселенногоПункта.Значение;
		Идентификатор = ДанныеНаселенногоПункта.Идентификатор;
		Представление = ДанныеНаселенногоПункта.Представление;
		ЭлементОсновной.СписокВыбора.Добавить(Идентификатор, Представление);
		ЭлементДополнительный.СписокВыбора.Добавить(Идентификатор, Представление);
		
		Если Кэш.НаселенныеПункты.Получить(Идентификатор) = Неопределено Тогда
			Кэш.НаселенныеПункты.Вставить(Идентификатор, Представление);
			НаселенныеПунктыДанные = Кэш.НаселенныеПунктыДанные; // Соответствие Из Структура
			НаселенныеПунктыДанные.Вставить(Идентификатор, ДанныеНаселенногоПункта);
		КонецЕсли;
		
	КонецЦикла;
	
	// Восстановление текущего значения в случае отмены ввода
	ТекущийПунктПредставление = Кэш.НаселенныеПункты.Получить(ОтправительНаселенныйПунктИдентификатор);
	Если ТекущийПунктПредставление <> Неопределено Тогда
		ЭлементОсновной.СписокВыбора.Добавить(ЭтотОбъект[Имя], ТекущийПунктПредставление);
		ЭлементДополнительный.СписокВыбора.Добавить(ЭтотОбъект[Имя], ТекущийПунктПредставление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатаПолученияДоступныхДляИзмененияРеквизитов(Результат, ОперацияВыполнена)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ОперацияВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	Если Не ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	// Из сервиса интеграции получили список имен групп реквизитов заказа (ключей) с описанием их доступности для редактирования
	// Получаем все группы элементов формы, соответствующие ключам заказа на доставку
	// Делаем их недоступными для изменения
	ДействияСГруппамиЭлементов = ГруппыРеквизитовПоКлючам(Кэш.ФункциональныеОпции);
	Для Каждого ТекущаяГруппа Из ДействияСГруппамиЭлементов Цикл
		Для Каждого ДействияСЭлементом Из ТекущаяГруппа.Значение Цикл
			
			ИмяЭлемента = ДействияСЭлементом["ИмяЭлемента"];
			
			Если ДействияСЭлементом.ИзменитьТолькоПросмотр Тогда
				Элементы[ИмяЭлемента].ТолькоПросмотр = Истина;
			КонецЕсли;
			Если ДействияСЭлементом.ИзменитьДоступность Тогда
				Элементы[ИмяЭлемента].Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Получаем все доступные для редактирования элементы формы, соответствующие ключам заказа на доставку
	// Делаем их доступными для изменения
	КлючиРеквизитовДляИзменения.Очистить();
	ДоступностьРеквизитов = Результат.ДоступностьРеквизитов;
	ДоступныеЭлементы = Новый Соответствие;
	
	СписокДоступных = ЭлементыФормыДляИзменения(ДоступностьРеквизитов, Кэш.ФункциональныеОпции);
	Для Каждого ТекущаяГруппа Из СписокДоступных Цикл
		ТекущийЭлементФормы = Элементы.Найти(ТекущаяГруппа.ИмяЭлемента);
		Если ТекущийЭлементФормы <> Неопределено Тогда
			ДоступныеЭлементы.Вставить(ТекущийЭлементФормы, ТекущаяГруппа);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеЭлементы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет реквизитов, доступных для редактирования.'"));
		Возврат;
	КонецЕсли;
	
	// Установка возможности редактирования полей ввода
	Для Каждого ТекущийЭлементФормы Из ДоступныеЭлементы Цикл
		Если ТекущийЭлементФормы.Значение.ИзменитьТолькоПросмотр Тогда
			ПодчиненныеПоляВводаТолькоПросмотр(ТекущийЭлементФормы.Ключ, Ложь, Истина);
		КонецЕсли;
		Если ТекущийЭлементФормы.Значение.ИзменитьДоступность Тогда
			ПодчиненныеПоляВводаДоступность(ТекущийЭлементФормы.Ключ, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Кэширование ключей реквизитов формы, доступных для редактирования
	Для Каждого ТекущийРеквизитФормы Из ДоступностьРеквизитов Цикл
		Если ТекущийРеквизитФормы.Значение Тогда
			КлючиРеквизитовДляИзменения.Добавить(ТекущийРеквизитФормы.Ключ);
		КонецЕсли;
	КонецЦикла;
	РежимИзмененияРеквизитов(КлючиРеквизитовДляИзменения.Количество() > 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РедактированиеРеквизитовЗаказа

&НаКлиенте
Процедура СформироватьИнформациюПоТарифу(СформироватьИнформациюПоТарифу = Истина)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекущегоТарифа = "";
		ИнформацияПоТарифу = Новый ТабличныйДокумент;
	Иначе
		ИдентификаторТекущегоТарифа = ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Если СформироватьИнформациюПоТарифу Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьИнформациюПоТарифу", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РежимИзмененияРеквизитов(Знач Разрешено)
	
	Если Не Разрешено Тогда
		КлючиРеквизитовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Разрешено Тогда
		ПереключитьСтраницу(Элементы, Команды.ПерейтиОсновное.Имя);
		Элементы.ГруппаКоманднаяПанельНавигация.Видимость = Истина;
	Иначе
		ПереключитьСтраницу(Элементы, Команды.ПерейтиКарточка.Имя);
		Элементы.ГруппаКоманднаяПанельНавигация.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьПредставлениеДокументаОснования();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	
КонецПроцедуры

// Устанавливает связь ключевых терминов перевозки с элементами формы.
// Связь 1:М.
// Список возможных ключей описан в СервисДоставки.ОбработатьРезультатЗапросаПолучитьДоступныеДляИзмененияРеквизиты.
// 
// Возвращаемое значение:
//  Структура - Группы реквизитов по ключам. Содержит свойства:
//   *СпособОтгрузки - СписокЗначений из Строка - 
//   *СпособДоставки - СписокЗначений из Строка - 
&НаКлиентеНаСервереБезКонтекста
Функция ГруппыРеквизитовПоКлючам(ФункциональныеОпцииСервисаДоставки)
	
	Результат = Новый Соответствие;
	
	// Заблокировать все
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательСпособДоставки1", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПунктВыдачиГрузаТипИдентификатор", Истина, Ложь));
	Результат.Вставить("Заблокировать", Настройки);
	
	// Разблокировать все
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ДополнительнаяИнформация", Истина, Ложь));
	Результат.Вставить("Плательщик", Настройки);
	
	// Отправитель
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОтправитель", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОтправительРеквизиты", Истина, Ложь));
	Результат.Вставить("Отправитель", Настройки);
	
	// Получатель
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаПолучатель", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаПолучательРеквизиты", Истина, Ложь));
	Результат.Вставить("Получатель", Настройки);
	
	// СпособОтгрузки
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОтправительСпособОтгрузки", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОтправительСпособОтгрузки1", Истина, Ложь));
	Результат.Вставить("СпособОтгрузки", Настройки);
	
	// СпособДоставки
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательНаселенныйПунктИдентификатор", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательНаселенныйПунктИдентификатор1", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательПунктВыдачиГруза", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательПунктВыдачиГруза1", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательАдрес", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ПолучательАдрес1", Истина, Ложь));
	Результат.Вставить("СпособДоставки", Настройки);
	
	// СпособОплаты
	Если ФункциональныеОпцииСервисаДоставки.ИспользоватьНаложенныеПлатежи Тогда
		Настройки = Новый Массив;
		Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаНаложенныйПлатеж", Истина, Ложь));
		Результат.Вставить("СпособОплаты", Настройки);
	КонецЕсли;
	
	// Характеристики и состав грузовых мест
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаПараметрыГруза", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОснования", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаРазмещениеГрузаКоманднаяПанель", Истина, Истина));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("РазмещениеГрузаКонтекстноеМеню", Истина, Истина));
	Результат.Вставить("РазмещениеГруза", Настройки);
	
	// Тарифы
	Настройки = Новый Массив;
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаОсновныеПериоды", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаТарифы", Истина, Истина));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаУслугиТарифов", Истина, Ложь));
	Настройки.Добавить(НастройкиДоступностиЭлементаФормы("ГруппаИнформацияПоТарифамПравая", Истина, Ложь));
	Результат.Вставить("Тариф", Настройки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыКлючаДоступныДляРедактирования(Знач КлючиРеквизитовДляИзменения, Знач ИмяКлюча)
	
	РедактированиеДоступно = КлючиРеквизитовДляИзменения.Количество() = 0
		Или КлючиРеквизитовДляИзменения.НайтиПоЗначению(ИмяКлюча) <> Неопределено;
		
	Возврат РедактированиеДоступно;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиДоступностиЭлементаФормы(ИмяЭлементаФормы, ИзменитьТолькоПросмотр, ИзменитьДоступность)
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяЭлемента", ИмяЭлементаФормы);
	Настройка.Вставить("ИзменитьТолькоПросмотр", ИзменитьТолькоПросмотр);
	Настройка.Вставить("ИзменитьДоступность", ИзменитьДоступность);

	Возврат Настройка;
	
КонецФункции

&НаСервере
Процедура ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Знач ТолькоПросмотр)
	
	ПодчиненныеПоляВводаТолькоПросмотр(Элементы.ГруппаРеквизиты, ТолькоПросмотр, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодчиненныеПоляВводаТолькоПросмотр(ЭлементФормы, Знач ТолькоПросмотр, Знач ВключаяЭлементФормы = Ложь)
	
	ЦветРедактирования = РедактируемыйРеквизитЦветФона;
	ЦветНейтральный = Новый Цвет();
	
	КоллекцияПолей = Новый Массив;
	РазрешенныеТипыФормы = Новый Массив;
	РазрешенныеТипыФормы.Добавить(Тип("ГруппаФормы"));
	РазрешенныеТипыФормы.Добавить(Тип("ПолеФормы"));
	РазрешенныеТипыФормы.Добавить(Тип("ДекорацияФормы"));
	
	Если ВключаяЭлементФормы Тогда
		ЭлементФормы.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы.ПодчиненныеЭлементы, РазрешенныеТипыФормы);
	ИначеЕсли РазрешенныеТипыФормы.Найти(ТипЗнч(ЭлементФормы)) <> Неопределено Тогда
		КоллекцияПолей.Добавить(ЭлементФормы);
	КонецЕсли;
	
	Для Каждого ТекущийЭлементФормы Из КоллекцияПолей Цикл
		Если ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			
			Если ТекущийЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи
				И ТекущийЭлементФормы.ВажностьПриОтображении = ВажностьПриОтображении.Авто
				Или ТекущийЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяСвойства = "ЦветФона";
			ТекущийЭлементФормы.ТолькоПросмотр = ТолькоПросмотр;
			Если Не ТолькоПросмотр Тогда
				ТекущийЭлементФормы[ИмяСвойства] = ЦветРедактирования;
			ИначеЕсли ТолькоПросмотр И ТекущийЭлементФормы[ИмяСвойства] = ЦветРедактирования Тогда
				ТекущийЭлементФормы[ИмяСвойства] = ЦветНейтральный;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ГруппаФормы") Тогда
			
			ТекущийЭлементФормы.ТолькоПросмотр = ТолькоПросмотр;
			
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ДекорацияФормы") Тогда
			
			ТекущийЭлементФормы.Доступность = Не ТолькоПросмотр;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодчиненныеПоляВводаДоступность(ЭлементФормы, Знач Доступность, Знач ВключаяЭлементФормы = Ложь)
	
	ЦветРедактирования = РедактируемыйРеквизитЦветФона;
	ЦветНейтральный = Новый Цвет();
	
	КоллекцияПолей = Новый Массив;
	РазрешенныеТипыФормы = Новый Массив;
	РазрешенныеТипыФормы.Добавить(Тип("ГруппаФормы"));
	РазрешенныеТипыФормы.Добавить(Тип("ПолеФормы"));
	РазрешенныеТипыФормы.Добавить(Тип("ДекорацияФормы"));
	
	Если ВключаяЭлементФормы Тогда
		ЭлементФормы.Доступность = Доступность;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы.ПодчиненныеЭлементы, РазрешенныеТипыФормы);
	ИначеЕсли РазрешенныеТипыФормы.Найти(ТипЗнч(ЭлементФормы)) <> Неопределено Тогда
		КоллекцияПолей.Добавить(ЭлементФормы);
	КонецЕсли;
	
	Для каждого ТекущийЭлементФормы Из КоллекцияПолей Цикл
		Если ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			ТекущийЭлементФормы.Доступность = Доступность;
			Если ТекущийЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
				// Элемент этого типа не содержит свойства ЦветФона.
				Продолжить;
			КонецЕсли;
			Если Не Доступность Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветРедактирования;
			ИначеЕсли Доступность И ТекущийЭлементФормы.ЦветФона = ЦветРедактирования Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветНейтральный;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ГруппаФормы") Тогда
			ТекущийЭлементФормы.Доступность = Доступность;
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ДекорацияФормы") Тогда
			ТекущийЭлементФормы.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает коллекцию подчиненных элементов определенного типа
// 
// Параметры:
//  КоллекцияЭлементов - Массив из ЭлементыФормы - 
//  ПодчиненныеЭлементы - ЭлементыФормы - элементы формы, проверяемые на соответствие типам
//  ТипыЭлементов - массив из ОписаниеТипов - Типы искомых элементов. Негрупповые элементы.
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, Знач ПодчиненныеЭлементы, Знач ТипыЭлементов)
	
	Если ТипЗнч(КоллекцияЭлементов) <> Тип("Массив") Тогда
		КоллекцияЭлементов = Новый Массив;
	КонецЕсли;
	
	Для каждого ТекущийЭлементФормы Из ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ТекущийЭлементФормы) = Тип("ГруппаФормы") Тогда
			ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, ТекущийЭлементФормы.ПодчиненныеЭлементы, ТипыЭлементов);
		ИначеЕсли ТипыЭлементов.Найти(ТипЗнч(ТекущийЭлементФормы)) <> Неопределено Тогда
			КоллекцияЭлементов.Добавить(ТекущийЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает элементы формы для изменения. Пометка - флаг обязательности заполнения связанного реквизита формы
// 
// Параметры:
//  ДоступныеГруппыРеквизитов - Структура - Доступные группы реквизитов
//  ФункциональныеОпцииСервисаДоставки - Структура - значения функциональных опций, доступных при работе с
// сервисом перевозчика.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Имя элемента формы, разрешенного к редактированию
&НаСервереБезКонтекста
Функция ЭлементыФормыДляИзменения(ДоступныеГруппыРеквизитов, ФункциональныеОпцииСервисаДоставки)
	
	Результат = Новый Массив;
	
	СтруктураГрупп = ГруппыРеквизитовПоКлючам(ФункциональныеОпцииСервисаДоставки);
	
	Для каждого ТекущийЭлементФормы Из ДоступныеГруппыРеквизитов Цикл
		
		Если Не ТекущийЭлементФормы.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппыРеквизитов = СтруктураГрупп.Получить(ТекущийЭлементФормы.Ключ);
		
		Если ГруппыРеквизитов <> Неопределено Тогда
			Для Каждого Элемент Из ГруппыРеквизитов Цикл
				Результат.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппуДействийПоИмениДействия(Знач ИмяДействия)

	Если ПустаяСтрока(ИмяДействия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяЭлемента = НастройкиДоступныхДействий[ИмяДействия]["ИмяЭлемента"];
	Возврат Элементы[ИмяЭлемента];
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступныхДействий()
	
	ГруппаДоступныеДействия = Элементы.ГруппаДоступныеДействия;
	ГруппаДействияПриИзменении = ПолучитьГруппуДействийПоИмениДействия(ИмяДействияПриИзменении());
	
	// Скорректируем настройки (устраним возможные противоречия)
	ЭлементОтменитьЗаказ = НастройкиДоступныхДействий[ИмяДействияОтменитьЗаказ()];
	ЭлементОтменитьЗаказ.Видимость = ДоступнаОтмена;
	ЭлементОтменитьЗаказ.Доступность = ДоступнаОтмена;
	
	Если ДоступноРедактированиеПослеОформления И Не ДокументыОснованияВведеныВДругойИБ Тогда
		ВПроцессеИзменения = КлючиРеквизитовДляИзменения.Количество() > 0;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = Не ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Доступность = Не ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Доступность = ВПроцессеИзменения;
	Иначе
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = Ложь;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = Ложь;
	КонецЕсли;
	
	Для каждого ТекущееДействие Из НастройкиДоступныхДействий Цикл
		ИмяЭлемента = ТекущееДействие.Значение["ИмяЭлемента"];
		ЗаполнитьЗначенияСвойств(Элементы[ИмяЭлемента], ТекущееДействие.Значение, "Видимость, Доступность");
	КонецЦикла;
	
	ЕстьВидимыеПодчиненные = Ложь;
	Для каждого ТекущееДействие Из ГруппаДоступныеДействия.ПодчиненныеЭлементы Цикл
		Если ТекущееДействие.Видимость Тогда
			ЕстьВидимыеПодчиненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаДоступныеДействия.Видимость = ЕстьВидимыеПодчиненные;
	
	Если ГруппаДействияПриИзменении <> Неопределено Тогда
		ГруппаДоступныеДействия.Видимость = ГруппаДоступныеДействия.Видимость И Не ГруппаДействияПриИзменении.Видимость;
		
		Элементы.Печать.Доступность = Не ГруппаДействияПриИзменении.Видимость;
		Элементы.Обновить.Доступность = Не ГруппаДействияПриИзменении.Видимость;
	КонецЕсли;
	
КонецПроцедуры

// Получить все доступные действия.
// 
// Возвращаемое значение:
//  Структура - Получить все доступные действия
&НаСервере
Функция ПолучитьВсеДоступныеДействия()
	
	Результат = Новый Структура;
	
	ПараметрыДействияШаблон = Новый Структура("ИмяЭлемента, Видимость, Доступность", "", Ложь, Ложь);
	
	КлючДействия = ИмяДействияИзменить();
	ПараметрыДействия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействияШаблон);
	ПараметрыДействия.Видимость = Истина;
	ПараметрыДействия.Доступность = Истина;
	ПараметрыДействия.ИмяЭлемента = СтрШаблон("Группа%1", КлючДействия);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияОтменитьЗаказ();
	ПараметрыДействия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействияШаблон);
	ПараметрыДействия.ИмяЭлемента = СтрШаблон("Группа%1", КлючДействия);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияПриИзменении();
	ПараметрыДействия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействияШаблон);
	ПараметрыДействия.ИмяЭлемента = СтрШаблон("Группа%1", КлючДействия);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияИзменить()
	Возврат "ДоступныеДействияИзменить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияОтменитьЗаказ()
	Возврат "ДоступныеДействияОтменитьЗаказ";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияПриИзменении()
	Возврат "ДействияПриИзменении";
КонецФункции

#КонецОбласти

#Область Шаблоны

&НаКлиенте
Процедура СозданиеШаблонаПродолжение(Результат, СоздатьИзменить) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ЭтоСозданиеШаблона", Истина);
		
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
		Если СоздатьИзменить Тогда
			ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку());
		КонецЕсли;
		ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку());
		
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораШаблона(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьПоШаблонуНаСервере(Результат);
		УстановитьВидимостьДоступностьНаСтраницеОсновная();
		ПроверитьЗаполнениеОбязательныхРеквизитов(3, , , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ПараметрыШаблона)
	
	ПараметрыЗаказа = СервисДоставки.ПолучитьПараметрыЗаказаИзШаблона(ПараметрыШаблона);
	
	ОбработатьПараметры(ПараметрыЗаказа);
	ОбработатьНаселенныеПункты(ПараметрыЗаказа);
	СформироватьПредставлениеДокументаОснования();
	АктуализироватьДату(ДатаОтгрузки);
	
	Если ОрганизацияБизнесСетиСсылка = ОтправительКонтрагентСсылка Тогда
		ЗаказчикРоль = 1;
	ИначеЕсли ОрганизацияБизнесСетиСсылка = ПолучательКонтрагентСсылка Тогда
		ЗаказчикРоль = 2;
	Иначе
		ЗаказчикРоль = 4;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонПоЗаказуНаДоставку(Значение)
	
	СервисДоставкиКлиент.СоздатьШаблонПоЗаказуНаДоставку(ЭтотОбъект, Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьИнформациюПоТарифу()
	
	Если Элементы.Тарифы.ТекущиеДанные <> Неопределено Тогда
		ТабличныйДокументИнформацияПоТарифу(Элементы.Тарифы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПараметрыТарифов()
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если АвтопересчетПоВсемТарифам Тогда
		ОбновитьДанныеТарифов( , Истина);
		ПолучитьТарифы();
	ИначеЕсли Элементы.Тарифы.ТекущиеДанные <> Неопределено Тогда
		ОбновитьДанныеТарифов();
		ОбновитьДанныеТарифа(Элементы.Тарифы.ТекущиеДанные, , Истина);
		ОбновитьПараметрыТарифа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПолученияДанныхЗаказаНаДоставку()
	
	УстановитьОформлениеШапкиРазмещениеГруза();
	УстановитьДоступностьДополнительныхТелефонов();
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	УстановитьВидимостьДоступностьНаСтраницеПараметрыГруза();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик() Тогда
		ПерейтиКТекущемуШагуМастера(Ложь, Истина);
		Кэш.АвтопересчетПоВсемТарифамОбязательный = Ложь;
	ИначеЕсли РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		ПереключитьСтраницу(Элементы, Команды.ПерейтиКарточка.Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснованиеДляДобавления) Тогда
		
		РежимИзмененияСоставаОснований = 0; // Изменений нет
		Если ДокументыОснования.Количество() > 0 Тогда
			НайденныйЭлемент = ДокументыОснования.НайтиПоЗначению(ДокументОснованиеДляДобавления);
			Если НайденныйЭлемент = Неопределено Тогда
				РежимИзмененияСоставаОснований = 1; // Добавление нового документа-основания
				ДокументыОснования.Добавить(ДокументОснованиеДляДобавления);
			КонецЕсли;
		Иначе
			ДокументыОснования.Добавить(ДокументОснованиеДляДобавления);
			РежимИзмененияСоставаОснований = 2; // Добавление первого документа-основания
		КонецЕсли;
		
		Если РежимИзмененияСоставаОснований <> 0 Тогда
			ОбработатьИзменениеРеквизитаФормы("ДокументыОснования");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказ(ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(4, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаКарточка <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
		ПерейтиКШагуПроверка();
	ИначеЕсли Модифицированность Или ИдентификаторЗаказа = "" Тогда
		СоздатьИзменитьЗаказНаДоставку(Истина, ЗакрытьПослеЗавершенияОперации);
	Иначе
		ОформитьЗаказНаДоставку( , ЗакрытьПослеЗавершенияОперации);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов
// 
// Параметры:
//  НомерШага - Число - Номер текущего этапа. 0 - "Основное", 1 - "Параметры груза", 2 - "Тарифы и услуги",
//  3 - "Проверка", 4 - отправка заказа в сервис перевозчика, 5 - изменение оформленного заказа.
//  Отказ - Булево - Отказ
//  ВыводитьПредупреждения - Булево - Выводить предупреждения
//  ПолучитьТарифыАвтоматически - Булево - Получить тарифы автоматически
&НаКлиенте
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(НомерШага, Отказ = Ложь, ВыводитьПредупреждения = Истина, ПолучитьТарифыАвтоматически = Ложь)
	
	ОчиститьСообщения();
	
	Если Не НомерШага = 5 И (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Или НомерШага < 1) Тогда
		Возврат;
	КонецЕсли;
	
	ШагОшибки = 99; // Шаг возникновения ошибки
	ТекстОшибки = НСтр("ru = 'Поле ""%1"" на шаге ""%2"" не заполнено'");
	
	Если НомерШага > 0 Тогда
	
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыКонтрагентов(ЭтотОбъект, ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 0;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 0;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
		ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 0;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерШага > 1 Тогда
		
		ЕстьОшибки = Ложь;
		ПроверитьПоказателиГрузовыхМест(ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 1;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ПроверитьВГХ( , ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 1;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ПроверитьЗаполнениеЗначенийДеревоУслугТарифов(ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 2;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбязательныеРеквизиты = ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага);
	Для Каждого ТекущийРеквизит Из ОбязательныеРеквизиты Цикл
		
		ПараметрыРеквизита = СтрРазделить(ТекущийРеквизит.Значение, ".");
		ШагТекущейОшибки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРеквизита[0]);
		Значение = ПараметрыРеквизита[1];
		
		Если ШагТекущейОшибки > ШагОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Значение]) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
										ТекущийРеквизит.Представление,
										Элементы.ГруппаСтраницы.ПодчиненныеЭлементы[ШагТекущейОшибки].Заголовок);
			Отказ = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Значение);
			КонецЕсли;
			
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РазрешеноПолучениеТарифов = Не Отказ;
	
	Если НомерШага > 2 Тогда
		
		Если ПустаяСтрока(ТарифИдентификатор) Тогда
			Отказ = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибкиТариф = НСтр("ru = 'Не выбран тариф на шаге ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиТариф,
					Элементы.ГруппаТарифыИУслуги.Заголовок);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Тарифы");
			КонецЕсли;
			ШагТекущейОшибки = 2;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверки на сервере перед отправкой
	Если НомерШага > 3 И Не Отказ Тогда
		
		ЕстьОшибки = Ложь;
		ПроверитьДанныеКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ШагТекущейОшибки = 0;
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Переход на страницу, с которой начались ошибки
	Если Отказ Тогда
		Если ШагОшибки = 0 Тогда
			ПерейтиКШагуОсновное();
		ИначеЕсли ШагОшибки = 1 Тогда
			ПерейтиКШагуПараметрыГруза();
		ИначеЕсли ШагОшибки = 2 Тогда
			ПерейтиКШагуТарифыИУслуги(ПолучитьТарифыАвтоматически, Отказ, РазрешеноПолучениеТарифов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОснованиям()
	
	ОбработатьИзменениеРеквизитаФормыНаСервере("ДокументыОснования");
	РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(), "ОчиститьПоказатели");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Адресат = ОпределитьАдресата(Элемент.Имя);
	ПредставлениеАдресаДо = ЭтотОбъект[Адресат + "АдресПредставление"];

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		// Результата выбора из адресного классификатора

		ЭтотОбъект[Адресат + "АдресЗначение"] = ВыбранноеЗначение.Адрес;
		
		Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ВыбранноеЗначение.Адрес);
		ЭтотОбъект[Адресат + "АдресПредставление"] = ?(ПустаяСтрока(Представление),
			ВыбранноеЗначение.Представление, Представление);

	Иначе

		Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
			АдресОбработкаВыбораПродолжение(Элемент, ВыбранноеЗначение);
		Иначе

			ПоискЗначения = Элементы[Адресат + "Адрес"].СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
			Если ПоискЗначения <> Неопределено Тогда

				ЭтотОбъект[Адресат + "АдресЗначение"] = ПоискЗначения.Значение;
				
				Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ПоискЗначения.Значение);
				ЭтотОбъект[Адресат + "АдресПредставление"] = ?(ПустаяСтрока(Представление),
					ПредставлениеКонтактнойИнформации(ЭтотОбъект[Адресат + "АдресЗначение"]), Представление);

				КомментарийКАдресу = КомментарийИзКонтактнойИнформации(ЭтотОбъект[Адресат + "АдресЗначение"]);
				Если ЗначениеЗаполнено(КомментарийКАдресу) Тогда
					ЗадатьВопросДобавлениеКомментария(КомментарийКАдресу);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПредставлениеАдресаДо <> ЭтотОбъект[Адресат + "АдресПредставление"] Тогда
		УстановитьВидимостьПредупрежденийПоАдресам(Адресат);
		ЗарегистрироватьИзменениеОтборов(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбораПродолжение(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "1", "");
	Префикс = СтрЗаменить(ИмяЭлемента, "Адрес", "");
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", ИмяЭлемента + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		
		ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", ИмяЭлемента + "Владелец", ПараметрыОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст)
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыТарифов(СброситьТариф = Истина, ОбновитьТарифы = Ложь)
	
	УстановитьОтборыТарифовНаСервере(ОбновитьТарифы);
	ЗарегистрироватьИзменениеОтборов(СброситьТариф, ОбновитьТарифы);
	СформироватьИнформациюПоТарифу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыТарифовНаСервере(Знач ОбновитьТарифы)
	
	ТарифыОтборПоКлючевымПараметрам = ТарифыОтборПоКлючевымПараметрам();
	Элементы.Тарифы.ОтборСтрок = Новый ФиксированнаяСтруктура(ТарифыОтборПоКлючевымПараметрам);
	
	Если Не ОбновитьТарифы Тогда
		Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = СформироватьСтрокуСостоянияПоТарифам(Тарифы,
			ТарифыОтборПоКлючевымПараметрам);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТарифыОтборПоКлючевымПараметрам()
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Видимость", Истина);
	Отбор.Вставить("СпособОтгрузки", СпособОтгрузки);
	Отбор.Вставить("СпособДоставки", СпособДоставки);
	
	Если СпособОтгрузки = 1 Тогда
		Если ПунктПриемаГрузаТипИдентификатор > 0 Тогда
			Отбор.Вставить("ПунктПриемаГрузаТипИдентификатор", ПунктПриемаГрузаТипИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если СпособДоставки = 1 Тогда
		Если ПунктВыдачиГрузаТипИдентификатор > 0 Тогда
			Отбор.Вставить("ПунктВыдачиГрузаТипИдентификатор", ПунктВыдачиГрузаТипИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Страница "Параметры груза"
	
	// Горизонтальное положение колонок "Количество" и "Единица измерения" для товарной части дерева размещение груза
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаКоличество.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Блокировка колонки "Описание" для товарной части дерева размещение груза для интернет-магазина
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаОписание.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаказа");
	ОтборЭлемента.ПравоеЗначение = 1;
	
	// Скрытие колонки "Описание" для товарной части дерева размещение груза
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаОписание.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Скрытие колонок "Количество" и "Единица измерения" для грузовых мест дерева размещение груза
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаКоличество.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// Отметка незаполненной информации по ВГХ в грузовых местах
	Массив = Новый Массив;
	Массив.Добавить(Элементы.РазмещениеГрузаДлина);
	Массив.Добавить(Элементы.РазмещениеГрузаШирина);
	Массив.Добавить(Элементы.РазмещениеГрузаВысота);
	
	Для Каждого Элемент Из Массив Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ГруппаОтборов = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.Вес");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ОтборЭлемента.ПравоеЗначение = 0.1;
		
		ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПунктВыдачиГрузаТипИдентификатор");
		ОтборЭлемента.ПравоеЗначение = 1;
		
		Если Элемент <> Элементы.РазмещениеГрузаДлина Тогда
			ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.Длина");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = 0;
		КонецЕсли;
		
		Если Элемент <> Элементы.РазмещениеГрузаШирина Тогда
			ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.Ширина");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = 0;
		КонецЕсли;
		
		Если Элемент <> Элементы.РазмещениеГрузаВысота Тогда
			ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.Высота");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	// Отметка незаполненного описания в грузовых местах
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаОписание.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаОписание.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаказа");
	ОтборЭлемента.ПравоеЗначение = 2;
	
	// Оттенение вспомогательной информации в строках расшифровки грузовых мест
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеСопоставленногоОбъектаБЭД);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаВес.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаСуммаНДС.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Запрет изменения данных по стоимости в строках дерева "РазмещениеГруза" для Интернет-магазина
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГрузаСтоимость.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаказа");
	ОтборЭлемента.ПравоеЗначение = 1; // Интернет-магазин
	
	// Запрет изменения данных в строках расшифровки грузовых мест
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеГруза.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Скрытие строк товарной части дерева "РазмещениеГруза"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	Для Каждого ЭлементРазмещениеГруза Из Элементы.РазмещениеГруза.ПодчиненныеЭлементы Цикл
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементРазмещениеГруза.Имя);
		
		Если ТипЗнч(ЭлементРазмещениеГруза) = Тип("ГруппаФормы") Тогда
			
			Для Каждого ЭлементГруппыРазмещениеГруза Из ЭлементРазмещениеГруза.ПодчиненныеЭлементы Цикл
				ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементГруппыРазмещениеГруза.Имя);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазмещениеГруза.ЭтоГрузовоеМесто");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВключитьРасшифровкуГрузовыхМест");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Конец Страница "Параметры груза"
	
	// Страница "Тарифы и услуги"
	
	// Выделение строки "Текущий тариф" для табличной части тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тарифы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.Идентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТарифИдентификатор");
	
	// Настройка колонки "Стоимость" для табличной части тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Требуется пересчет>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Право);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаЗаголовокУспешнаяПроверкаМЧД);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТарифыЦена.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.Стоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Настройка колонки "Стоимость" для табличной части тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Идет пересчет...>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Право);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаЗаголовокУспешнаяПроверкаМЧД);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТарифыЦена.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.Стоимость");
	ОтборЭлемента.ПравоеЗначение = 1;
	
	// Скрытие колонки "Использовать" для категорий тарифов и свойств дерева услуг тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУслугТарифовИспользовать.Имя);
	
	СписокТиповСтрок = Новый СписокЗначений;
	СписокТиповСтрок.Добавить(0);
	СписокТиповСтрок.Добавить(2);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповСтрок;
	
	// Блокировка колонки "Использовать" для свойств дерева услуг тарифов типа заказа Интернет-магазин
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУслугТарифовИспользовать.Имя);
	
	ГруппаОтборов = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.Автоматическая");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.Идентификатор");
	ОтборЭлемента.ПравоеЗначение = ИдентификаторУслугиСтрахование();
	
	ОтборЭлемента = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаказа");
	ОтборЭлемента.ПравоеЗначение = 1; // Интернет-магазин
	
	// Выделение колонки "Наименование" для категорий дерева услуг тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУслугТарифовНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.ТипСтроки");
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Наклонный шрифт строк свойств для категорий дерева услуг тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУслугТарифов.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.ТипСтроки");
	ОтборЭлемента.ПравоеЗначение = 2;
	
	// Настройка колонки "Значение" для свойств дерева услуг тарифов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУслугТарифовЗначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.ТипСтроки");
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Скрытие строк "Дерева услуг тарифов"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "СкрытиеСтрокДеревоУслугТарифов";
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Для Каждого ЭлементДеревоУслугТарифов Из Элементы.ДеревоУслугТарифов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементДеревоУслугТарифов) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементГруппы Из ЭлементДеревоУслугТарифов.ПодчиненныеЭлементы Цикл
				ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементГруппы.Имя);
			КонецЦикла;
		Иначе
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементДеревоУслугТарифов.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторТекущегоТарифа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Конец Страница "Тарифы и услуги"
	
КонецПроцедуры

// Возвращает идентификатор услуги смс уведомление о доставке.
// 
// Возвращаемое значение:
//  Строка - Идентификатор услуги смс уведомление о доставке
&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторУслугиСМСУведомлениеОДоставке()
	Возврат "SMS";
КонецФункции

// Возвращает идентификатор услуги страхование.
// 
// Возвращаемое значение:
//  Строка - Идентификатор услуги страхование
&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторУслугиСтрахование()
	Возврат "INSURANCE";
КонецФункции

// Установить значение свойства услуги.
// 
// Параметры:
//  Идентификатор - Строка - Идентификатор услуги
//  Значение - Число - Значение
&НаСервере
Процедура УстановитьЗначениеСвойстваУслуги(Идентификатор, Значение)
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Идентификатор = Идентификатор Тогда
				Услуга = УслугиТарифов.НайтиПоИдентификатору(ТекущаяУслуга.ИдентификаторУслугТарифов);
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.ПолучитьЭлементы() Цикл
					ТекущееСвойство.Значение = Значение;
				КонецЦикла;
				Если Идентификатор = ИдентификаторУслугиСтрахование() Тогда
					Если ТипЗаказа = 1 Тогда
						ТекущаяУслуга.Использовать = Истина;
						Услуга.Использовать = Истина;
					КонецЕсли;
					Свойство = Услуга.Свойства.НайтиПоИдентификатору(ТекущееСвойство.ИдентификаторУслугТарифов);
					Свойство.Значение = Значение;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущаяУслуга.Идентификатор = Идентификатор Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("ТипЗаказа", ТипЗаказа);
	ПараметрыДляФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыДляФормы.Вставить("ГрузоперевозчикНаименование", ГрузоперевозчикНаименование);
	ПараметрыДляФормы.Вставить("СпособОтгрузки", СпособОтгрузки);
	ПараметрыДляФормы.Вставить("СпособДоставки", СпособДоставки);
	ПараметрыДляФормы.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
	ПараметрыДляФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	ПрефиксыИсключение = Новый Массив;
	Если Не РеквизитыКлючаДоступныДляРедактирования(КлючиРеквизитовДляИзменения, "СпособОтгрузки") Тогда
		ПрефиксыИсключение.Добавить("ОтправительНаселенныйПункт");
		ПрефиксыИсключение.Добавить("ПунктПриемаГруза");
	КонецЕсли;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс, ПрефиксыИсключение);
	
	Если ПараметрыДляФормы.ТипЗаказа = 0 Тогда
		ПараметрыДляФормы.ТипЗаказа = ТипЗаказа;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПараметрыДляФормы.ГрузоперевозчикИдентификатор) Тогда
		ПараметрыДляФормы.ГрузоперевозчикИдентификатор = ГрузоперевозчикИдентификатор;
		ПараметрыДляФормы.ГрузоперевозчикНаименование = ГрузоперевозчикНаименование;
	КонецЕсли;
	Если ПараметрыДляФормы.СпособОтгрузки = 0 Тогда
		ПараметрыДляФормы.СпособОтгрузки = СпособОтгрузки;
	КонецЕсли;
	Если ПараметрыДляФормы.СпособДоставки = 0 Тогда
		ПараметрыДляФормы.СпособДоставки = СпособДоставки;
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда
		ПараметрыДляФормы.ДополнительнаяИнформация = ДополнительнаяИнформация;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляФормы);
	
	Если ПрефиксыИсключение.Найти("ЗаказчикРоль") = Неопределено Тогда
		ЗаказчикРоль = СервисДоставкиКлиентСервер.ОпределитьРольЗаказчикаПеревозки(ТипГрузоперевозки,
			ОрганизацияБизнесСетиСсылка, ОтправительКонтрагентСсылка,
			ПолучательКонтрагентСсылка, ЗаказчикРоль);
	КонецЕсли;
	
	УстановитьПризнакОрганизаций();
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
	
	Если Не ЗначениеЗаполнено(ПунктПриемаГрузаИдентификатор) Тогда
		ЗначениеСписка = Элементы.ПунктПриемаГрузаТипИдентификатор.СписокВыбора.НайтиПоЗначению(ПунктПриемаГрузаТипИдентификатор);
		Если ЗначениеСписка = Неопределено Тогда
			ПунктПриемаГрузаТипИдентификатор = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПунктВыдачиГрузаИдентификатор) Тогда
		ЗначениеСписка = Элементы.ПунктВыдачиГрузаТипИдентификатор.СписокВыбора.НайтиПоЗначению(ПунктВыдачиГрузаТипИдентификатор);
		Если ЗначениеСписка = Неопределено Тогда
			ПунктВыдачиГрузаТипИдентификатор = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для перезаполнения данных, зависимых от документов-оснований
// 
// Параметры:
//  ПараметрыДанных - Структура - Параметры данных
//  СпособОбновленияТоварногоСостава - Строка - указывает способ обновления:
//  "ДобавитьТСОснования" - добавляет позиции по новому документу-основанию,
//  "Обновить" - приводит товарный состав в соответствие с документами-основаниями.
&НаСервере
Процедура ОбработатьПараметрыПослеДобавленияОснований(ПараметрыДанных, СпособОбновленияТоварногоСостава)
	
	ОписаниеГрузовыхМест = РеквизитФормыВЗначение("РазмещениеГруза");
	
	ОписаниеГрузовыхМест.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	Если ОписаниеГрузовыхМест.Строки.Количество() = 0 Тогда
		ОсновноеГрузовоеМесто = ДобавитьГрузовоеМестоВДерево(ОписаниеГрузовыхМест.Строки);
	Иначе
		ОсновноеГрузовоеМесто = ОписаниеГрузовыхМест.Строки.Найти(Истина, "ЭтоОсновноеГрузовоеМесто", Ложь);
	КонецЕсли;
	
	Если СпособОбновленияТоварногоСостава = "ДобавитьИзОснования" Тогда
		
		// Определим документы-основания, товарный состав которых необходимо загрузить в основное грузовое место
		ПараметрыОтбора = Новый Структура("ИдентификаторДокументаОснования, ЭтоГрузовоеМесто", "", Ложь);
		
		УникальныеИдентификаторыДокументовОснований = Новый Соответствие;
		Для Каждого Элемент Из ПараметрыДанных.ТоварныйСостав Цикл
			УникальныеИдентификаторыДокументовОснований.Вставить(Элемент.ИдентификаторДокументаОснования);
		КонецЦикла;
		
		УникальныеИдентификаторыКДобавлению = Новый Соответствие;
		Для Каждого Элемент Из УникальныеИдентификаторыДокументовОснований Цикл
			ПараметрыОтбора.ИдентификаторДокументаОснования = Элемент.Ключ;
			Строки = ОписаниеГрузовыхМест.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если Строки.Количество() = 0 Тогда
				УникальныеИдентификаторыКДобавлению.Вставить(Элемент.Ключ, Истина);
			Иначе
				Для Каждого Строка Из Строки Цикл
					Строка.Найден = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Внесение товарного состава
		Для Каждого Элемент Из ПараметрыДанных.ТоварныйСостав Цикл
			Если УникальныеИдентификаторыКДобавлению[Элемент.ИдентификаторДокументаОснования] = Истина Тогда
				НС = ОсновноеГрузовоеМесто.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элемент);
				НС.Стоимость = Элемент.Сумма; // Объявленная стоимость приравнивается к стоимости товара
				НС.ИдентификаторГрузовогоМеста = ОсновноеГрузовоеМесто.ИдентификаторГрузовогоМеста;
				НС.Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СпособОбновленияТоварногоСостава = "ОбновитьДанныеПоОснованиям" Тогда
		
		СтруктураПоиска = Новый Структура("ИдентификаторДокументаОснования, ИдентификаторСтроки", "", "");
		
		// Внесение товарного состава
		Для Каждого СтрокаТоварныйСостав Из ПараметрыДанных.ТоварныйСостав Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварныйСостав);
			НайденныеТоварныеПозиции = ОписаниеГрузовыхМест.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			
			Если НайденныеТоварныеПозиции.Количество() > 0 Тогда
				СтрокаДляОбновления = НайденныеТоварныеПозиции[0];
			Иначе
				СтрокаДляОбновления = ОсновноеГрузовоеМесто.Строки.Добавить();
				СтрокаДляОбновления.ИдентификаторГрузовогоМеста = ОсновноеГрузовоеМесто.ИдентификаторГрузовогоМеста;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДляОбновления, СтрокаТоварныйСостав, , "ИдентификаторГрузовогоМеста");
			СтрокаДляОбновления.Стоимость = СтрокаТоварныйСостав.Сумма; // Объявленная стоимость приравнивается к стоимости товара
			СтрокаДляОбновления.Найден = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаление строк, отсутствующих в документах-основаниях
	ПараметрыОтбора = Новый Структура("Найден, ЭтоГрузовоеМесто", Ложь, Ложь);
	ТоварныеПозицииКУдалению = ОписаниеГрузовыхМест.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	Для Каждого НайденнаяПозиция Из ТоварныеПозицииКУдалению Цикл
		НайденнаяПозиция.Родитель.Строки.Удалить(НайденнаяПозиция);
	КонецЦикла;
	
	ОписаниеГрузовыхМест.Колонки.Удалить(ОписаниеГрузовыхМест.Колонки.Индекс(ОписаниеГрузовыхМест.Колонки.Найден));
	
	ЗначениеВРеквизитФормы(ОписаниеГрузовыхМест, "РазмещениеГруза");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТарифПродолжить()
	
	ОчиститьСообщения();
	
	Если Элементы.ВыбратьТариф.Доступность = Ложь Или Элементы.Тарифы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Тарифы.ТекущиеДанные.Стоимость = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Для тарифа ""%1"" требуется пересчет.'"), Элементы.Тарифы.ТекущиеДанные.Наименование);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ОбработатьВыборТарифа(Элементы.Тарифы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОрганизаций()
	
	ТипКонтрагента = ТипЗнч(ОтправительКонтрагентСсылка);
	ОтправительКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПолучательКонтрагентСсылка);
	ПолучательКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АктуализироватьДату(Дата)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Дата = НачалоДня(Дата);
	
	Если Дата < НачалоДня(ТекущаяДата) Тогда
		Дата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДатуНаКлиенте(Дата)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Дата = НачалоДня(Дата);
	
	Если Дата < НачалоДня(ТекущаяДата) Тогда
		Дата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтгрузкиПоУмолчанию()
	
	ВремяОтгрузкиС = '00010101090000';
	ВремяОтгрузкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодДоставкиПоУмолчанию()
	
	ВремяДоставкиС = '00010101090000';
	ВремяДоставкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	ЗаполнитьСписокВыбораТиповЗаказа();
	ЗаполнитьСписокВыбораАвтопересчетНастройка(АвтопересчетСписокКолонок);
	СписокВыбораТиповДокументовОснований();
	
	СписокВыбора = Элементы.ОтправительКонтрагент.СписокВыбора;
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
	СписокВыбора = Элементы.ПолучательКонтрагент.СписокВыбора;
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
	СписокВыбора = Элементы.НаложенныйПлатежВидОплаты.СписокВыбора;
	СписокВыбора.Добавить(0, НСтр("ru='Не требуется'"));
	СписокВыбора.Добавить(1, НСтр("ru='Картой'"));
	СписокВыбора.Добавить(2, НСтр("ru='Наличными'"));
	
КонецПроцедуры

&НаСервере
Процедура НастройкаРеквизитовПриСозданииНаСервере()
	
	ТипыЗаказовСДЭК = СервисДоставкиПовтИсп.ТипыЗаказовСДЭК();
	
	КлючНастроекФормы = "Обработка.СервисДоставки.Форма.КарточкаЗаказа/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	
	Если Настройки <> Неопределено И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ТарифыРежимСортировки = Настройки.Получить("ТарифыРежимСортировки");
	КонецЕсли;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый()
		Или РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик() Тогда
		ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
	КонецЕсли;
	
	ГрузоперевозчикИдентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
	ГрузоперевозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки);
	
	АктуализироватьДату(ДатаОтгрузки);
	
	Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
		УстановитьПериодОтгрузкиПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
		УстановитьПериодДоставкиПоУмолчанию();
	КонецЕсли;
	
	ВыбиратьКонтактноеЛицоКонтрагента = Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.Типы().Количество() > 1
		Или Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.СодержитТип(Тип("Строка"));
	
	ВыбиратьКонтактноеЛицоОрганизации = Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.Типы().Количество() > 1
		Или Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.СодержитТип(Тип("Строка"));
	
	Если Не ЗначениеЗаполнено(ТипЗаказа) Тогда
		ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
		СпособОтгрузки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда
		СпособДоставки = 1;
	КонецЕсли;
	
	ПараметрыВалюты = СервисДоставки.НовыйПараметрыВалюты();
	ВалютаНаименование = ПараметрыВалюты.Наименование;
	ВалютаКод = ПараметрыВалюты.Код;
	
	Если Не ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ВалютаСсылка = ПараметрыВалюты.Ссылка;
	КонецЕсли;
	Элементы.СуммаОбъявленнойЦенностиВалюта.Заголовок = ВалютаНаименование;
	
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ПараметрыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка, "Код, Наименование");
		ВалютаНаименование = ПараметрыВалюты.Наименование;
		ВалютаКод = ПараметрыВалюты.Код;
	КонецЕсли;
	
	ГрузОграничениеВес = 29000;
	ГрузОграничениеОбъем = 0;
	ГрузОграничениеВысота = 1000;
	ГрузОграничениеДлина = 1000;
	ГрузОграничениеШирина = 1000;
	ГрузОграничениеСтоимость = 0;
	
	РедактируемыйРеквизитЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКэшированныеЗначения()
	
	Кэш = СервисДоставки.ПолучитьКэшированныеЗначения(ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки);
	
	Кэш.Вставить(ИмяКэшаГрузовогоМестаПоУмолчанию(), ЗначенияГрузовогоМестаПоУмолчанию(ТипГрузоперевозки));
	Кэш.Вставить("ВариантыСортировки", ВариантыСортировки());
	Кэш.Вставить("АвтопересчетПоВсемТарифамОбязательный", Ложь);
	Кэш.Вставить("ЕстьТабличныйДокументИнформацияПоТарифу", Ложь);
	Кэш.Вставить("ДеревоУслугТарифовЗаполнено", Ложь);
	Кэш.Вставить("НаселенныеПункты", Новый Соответствие);
	Кэш.Вставить("НаселенныеПунктыДанные", Новый Соответствие);
	Кэш.Вставить("ФункциональныеОпции", ФункциональныеОпции());
	Кэш.Вставить("КлючОбновитьПараметрыТарифа");
	Кэш.Вставить("КлючПолучитьТарифы");
	
	ОбработатьРезультатПолученияТарифовИУслуг(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш,
		СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги()));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДокументаОснования()
	
	ЕстьДоступныеДокументы = СписокВыбораДокументовОснований.Количество() <> 0;
	
	РазрешеноРедактироватьДокументыОснования = РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		Или КлючиРеквизитовДляИзменения.НайтиПоЗначению("РазмещениеГруза") <> Неопределено;
	
	Элементы.ДокументыОснованияПредставление.Доступность = ЕстьДоступныеДокументы;
	ДокументыОснованияПредставление = "";
	
	Если ЕстьДоступныеДокументы Тогда
		
		КоличествоОснований = ДокументыОснования.Количество();
		
		Если КоличествоОснований = 0 Тогда
			
			Если РазрешеноРедактироватьДокументыОснования Тогда
				ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать'"), , , ,
					"ИзменитьДокументыОснования");
			КонецЕсли;
			
		Иначе
			
			МассивПредставлений = Новый Массив;
			
			Если КоличествоОснований = 1 Тогда
				ПервыйДокумент = ДокументыОснования[0].Значение;
				МассивПредставлений.Добавить(СтрШаблон("<a href = %1>%2</a>",
					ПолучитьНавигационнуюСсылку(ПервыйДокумент), Строка(ПервыйДокумент)));
			Иначе
				МассивПредставлений.Добавить(СтрШаблон("<a href = ""ОткрытьФормуОснования"">%1: %2</a>",
					НСтр("ru = 'Всего документов'"), КоличествоОснований));
			КонецЕсли;
			
			Если РазрешеноРедактироватьДокументыОснования Тогда
				МассивПредставлений.Добавить(СтрШаблон("<a href = ДобавитьДокументыОснования>(%1)</a>", НСтр("ru = 'Добавить'")));
				МассивПредставлений.Добавить(СтрШаблон("<a href = ОбновитьДанныеПоОснованиям>(%1)</a>", НСтр("ru = 'Обновить'")));
				МассивПредставлений.Добавить(СтрШаблон("<a href = ОчиститьДокументыОснования>(%1)</a>", НСтр("ru = 'Очистить'")));
			КонецЕсли;
			
			ДокументыОснованияПредставление = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(МассивПредставлений, " "));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеДатыВремениОтгрузкиДоставки()
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект);
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОнЖе()
	
	Элементы.ДекорацияПолучательКонтрагент.Видимость = (РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован())
		И (ТипЗнч(ПолучательКонтрагентСсылка) = ТипЗнч(ОтправительКонтрагентСсылка))
		И (ПолучательКонтрагентСсылка <> ОтправительКонтрагентСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьУчастниковГрузоперевозки()
	
	Элементы.ОтправительКонтрагент.Заголовок = ?(ОтправительКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	Элементы.ПолучательКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	
	Элементы.ОтправительКонтактноеЛицо.КнопкаВыбора = ЗначениеЗаполнено(ОтправительКонтрагентСсылка)
		И ((ОтправительКонтрагентЭтоОрганизация И ВыбиратьКонтактноеЛицоОрганизации)
		Или (Не ОтправительКонтрагентЭтоОрганизация И ВыбиратьКонтактноеЛицоКонтрагента));
	Элементы.ОтправительКонтактноеЛицо.КнопкаОткрытия = ЗначениеЗаполнено(ОтправительКонтактноеЛицоСсылка);
	
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = ЗначениеЗаполнено(ПолучательКонтрагентСсылка)
		И ((ПолучательКонтрагентЭтоОрганизация И ВыбиратьКонтактноеЛицоОрганизации)
		Или (Не ПолучательКонтрагентЭтоОрганизация И ВыбиратьКонтактноеЛицоКонтрагента));
	Элементы.ПолучательКонтактноеЛицо.КнопкаОткрытия = ЗначениеЗаполнено(ПолучательКонтактноеЛицоСсылка);
	
	Элементы.ГруппаОтправительРеквизиты.Доступность = ЗначениеЗаполнено(ОтправительКонтрагентНаименование);
	Элементы.ГруппаПолучательРеквизиты.Доступность = ЗначениеЗаполнено(ПолучательКонтрагентНаименование);
	Элементы.ОтправительКонтрагент.ТолькоПросмотр = (ЗаказчикРоль = 1) И ЗначениеЗаполнено(ОтправительКонтрагентСсылка);
	Элементы.ПолучательКонтрагент.ТолькоПросмотр = (ЗаказчикРоль = 2) И ЗначениеЗаполнено(ПолучательКонтрагентСсылка);
	
	УстановитьВидимостьОнЖе();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьОрганизации()
	
	ДоступноИзменениеОрганизации = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый());
	Элементы.ОрганизацияБизнесСетиСсылка.ТолькоПросмотр = Не ДоступноИзменениеОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаложенныйПлатеж()
	
	ВидимостьГруппыНаложенныйПлатеж = Кэш.ФункциональныеОпции.ИспользоватьНаложенныеПлатежи И ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин;
	
	Если ДокументыОснования.Количество() <> 1 Тогда
		НаложенныйПлатежВидОплаты = 0;
	КонецЕсли;
	
	Элементы.ДекорацияСуммаНаложенногоПлатежа.Видимость = НаложенныйПлатежВидОплаты > 0;
	Элементы.ГруппаНаложенныйПлатеж.Видимость = ВидимостьГруппыНаложенныйПлатеж;
	Элементы.ГруппаНаложенныйПлатеж.Доступность = ДокументыОснования.Количество() = 1 И ЗначениеЗаполнено(ПолучательКонтрагентНаименование);

	Если ВидимостьГруппыНаложенныйПлатеж И НаложенныйПлатежВидОплаты > 0 Тогда
		СуммаНаложенногоПлатежа = ПолнаяСтоимость;
		ДекорацияСуммаНаложенногоПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сумма к оплате - %1 %2'"), СуммаНаложенногоПлатежа, ВалютаНаименование);
	Иначе
		СуммаНаложенногоПлатежа = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеПараметрыГруза()
	
	СформироватьЗаголовокРазмещениеГрузаКолонкаОписаниеКоличество();
	Элементы.ГруппаСуммыПоДокументуОснованию.Видимость = ДокументыОснования.Количество() > 0
		Или ДокументыОснованияВведеныВДругойИБ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	ТолькоПросмотр = ДокументыОснованияВведеныВДругойИБ;
	
	Если ТолькоПросмотр Тогда
		Элементы.ГруппаЗаказчик.ТолькоПросмотр = Истина;
		Элементы.ГруппаОсновное.ТолькоПросмотр = Истина;
		Элементы.ГруппаОснования.Доступность = Ложь;
		Элементы.ОтправительДобавитьТелефонДополнительный.Доступность = Ложь;
		Элементы.ОтправительУдалитьТелефонДополнительный.Доступность = Ложь;
		Элементы.ПолучательДобавитьТелефонДополнительный.Доступность = Ложь;
		Элементы.ПолучательУдалитьТелефонДополнительный.Доступность = Ложь;
		Элементы.ГруппаРазмещениеГрузаШапка.ТолькоПросмотр = Истина;
		Элементы.ГруппаРазмещениеГрузаШапка.Доступность = Ложь;
		Элементы.РазмещениеГруза.ТолькоПросмотр = Ложь;
		Элементы.ГруппаТарифыИУслуги.ТолькоПросмотр = Истина;
		Элементы.ГруппаТарифыИУслуги.Доступность = Ложь;
	КонецЕсли;
	
	РежимМастераНовый = РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый();
	РежимМастераЧерновик = РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
	РежимМастераЗарегистрирован = РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
	РежимРедактированияЗарегистрированного = КлючиРеквизитовДляИзменения.Количество() > 0;
	
	Элементы.СохранитьКакЧерновик.Видимость = Не РежимМастераЗарегистрирован И Не ТолькоПросмотр;
	Элементы.ОформитьЗаказ.Видимость = ДоступнаОтправкаЗаказовНаДоставку И Не ТолькоПросмотр;
	Элементы.Печать.Видимость = РежимМастераЗарегистрирован;
	Элементы.Обновить.Видимость = РежимМастераЗарегистрирован;
	Элементы.ОрганизацияБизнесСетиСсылка.Видимость = Не РежимМастераЗарегистрирован;
	Элементы.ОрганизацияБизнесСетиГиперссылка.Видимость = РежимМастераЗарегистрирован;
	Элементы.ЗаполнитьПоШаблону.Доступность = Не РежимМастераЗарегистрирован;
	Элементы.СохранитьКакШаблон.Доступность = Не РежимМастераНовый;
	Элементы.Скопировать.Доступность = Не РежимМастераНовый;
	Элементы.ГруппаСуммыПоДокументуОснованию.Видимость = ДокументыОснования.Количество() > 0 Или ТолькоПросмотр;
	Элементы.ДекорацияСостояниеПредставление.Гиперссылка = ЗначениеЗаполнено(ТрекНомер);
	
	Если РежимМастераНовый Или РежимМастераЧерновик Тогда
		
		УстановитьВидимостьСпособовОтгрузкиДоставки(Элементы, СпособОтгрузки, СпособДоставки)
		
	Иначе // РежимМастераЗарегистрирован
		
		Элементы.ОформитьЗаказ.Видимость = Ложь;
		Элементы.ЗаказчикРоль.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельНавигация.Видимость = РежимРедактированияЗарегистрированного;
		
		Если Не ДоступноРедактированиеПослеОформления Тогда
			Элементы.ГруппаПараметрыГруза.ТолькоПросмотр = РежимМастераЗарегистрирован;
			ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ИмяКоманды)
	
	Если Элементы[ИмяКоманды].Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Найти(СтрЗаменить(ИмяКоманды, "Перейти", "Группа"));
	
	Для Каждого ЭлементКнопки Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		ЭлементКнопки.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
		ЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Авто;
	КонецЦикла;
	Элементы[ИмяКоманды].Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Элементы[ИмяКоманды].ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	Элементы.ЗаказчикРоль.ТолькоПросмотр = Не (ИмяКоманды = "ПерейтиОсновное");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДополнительныхТелефонов()
	
	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление);
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (создание)'");
	ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) Тогда
		ЗаказНаДоставкуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Заказ на доставку %1 от %2'"),
			НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=DT"));
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (открытие)'");
	КонецЕсли;
	
	ТекстЗаголовка =  НСтр("ru = '%1: %2'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуПредставлениеСостоянияЗаказаФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		СостояниеПредставление = НСтр("ru = 'Новый'");
	ИначеЕсли ЗначениеЗаполнено(Состояние) Тогда
		СостояниеПредставление = Состояние;
	КонецЕсли;
	
	УстановитьВидимостьДоступныхДействий();
	
	Если НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость Тогда
		СостояниеПредставление = СтрШаблон("%1 (%2)", СостояниеПредставление,
			НСтр("ru='режим изменения оформленного заказа'"));
	КонецЕсли;
	
	Элементы.ДекорацияСостояниеПредставление.Заголовок = СостояниеПредставление;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокРазмещениеГрузаКолонкаОписаниеКоличество()
	
	Если ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин Тогда
		Элементы.РазмещениеГрузаГруппаКолонокОписаниеКоличество.Заголовок = НСтр("ru = 'Количество'");
	Иначе
		Элементы.РазмещениеГрузаГруппаКолонокОписаниеКоличество.Заголовок = СтрШаблон("%1 / %2",
			НСтр("ru = 'Описание'"), НСтр("ru = 'Количество'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаОснования()
	
	Если СписокВыбораДокументовОснований.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаОснования", ЭтотОбъект);
		СписокВыбораДокументовОснований.ПоказатьВыборЭлемента(ОписаниеОповещения);
	ИначеЕсли СписокВыбораДокументовОснований.Количество() = 1 Тогда
		ОбработатьВыборТипаОснования(СписокВыбораДокументовОснований[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОснования()
	
	РежимИзмененияСоставаОснований = 4;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ДокументыОснования", ДокументыОснования.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Режим", РежимМастера);
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытия.Вставить("Отправитель", ОтправительКонтрагентСсылка);
	ПараметрыОткрытия.Вставить("Получатель", ПолучательКонтрагентСсылка);
	ПараметрыОткрытия.Вставить("ОтправительАдрес", ОтправительАдресПредставление);
	ПараметрыОткрытия.Вставить("ПолучательАдрес", ПолучательАдресПредставление);
	ПараметрыОткрытия.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ПараметрыОткрытия.Вставить("СпособОтгрузки", СпособОтгрузки);
	ПараметрыОткрытия.Вставить("СпособДоставки", СпособДоставки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения", ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДокументыОснования"));
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.СписокДокументовОснований", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено,
	ИмяПроцедурыОбработки = "ОбработатьВыборЗначения")
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
			Новый Структура("ИмяРеквизита", ИмяРеквизита));
		
		ОткрытьФорму(
			ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяОбъекта, ИмяРеквизита, ИмяПроцедурыОбработки = "ОбработатьИзменениеРеквизитовОбъекта")
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыОбъекта = СервисДоставкиВызовСервера.ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОбъекта, ТекущееЗначениеРеквизита);
	
	Если Не ПустаяСтрока(ИмяФормыОбъекта) Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ТекущееЗначениеРеквизита);
		
		Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
			Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
			ОткрытьФорму(ИмяФормыОбъекта, ПараметрыОткрытия, ЭтотОбъект, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
				Новый Структура("ИмяРеквизита", ИмяРеквизита));
			ОткрытьФорму(ИмяФормыОбъекта, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = Результат.Значение;
	
	ИмяФормыВыбора = "";
	СервисДоставкиКлиентПереопределяемый.УстановитьИмяФормыВыбораОбъектаПоИмени(ПолноеИмяОбъекта, ИмяФормыВыбора);
	
	Если ИмяФормыВыбора = "" Тогда
		ИмяФормыВыбора = ПолноеИмяОбъекта + ".ФормаВыбора";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Если ДокументыОснования.Количество() = 1 Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДокументыОснования[0].Значение);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Проведен", Истина));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения", ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДокументыОснования"));
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		РежимИзмененияСоставаОснований = 0;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("КодВозвратаДиалога") И Результат = КодВозвратаДиалога.Отмена Тогда
		РежимИзмененияСоставаОснований = 0;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Если ДополнительныеПараметры.ИмяРеквизита = "ДокументыОснования" Тогда
			Если СервисДоставкиКлиент.ОбработатьВыборДокументовОснованийАвтоматически(ЭтотОбъект, Результат) Тогда
				ОбработатьВыборДокументовОснований(КодВозвратаДиалога.ОК, Результат);
			КонецЕсли;
			Возврат;
		Иначе
			ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		КонецЕсли;
		ОбработатьИзменениеРеквизитаФормы(ДополнительныеПараметры.ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументовОснований(Результат, ВыбранныеДокументы = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеДокументы = ?(ТипЗнч(ВыбранныеДокументы) = Тип("Массив"), ВыбранныеДокументы, Новый Массив);
	
	Если РежимИзмененияСоставаОснований = 1 Тогда
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Если ДокументыОснования.НайтиПоЗначению(ВыбранныйДокумент) = Неопределено Тогда
				ДокументыОснования.Добавить(ВыбранныйДокумент);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли РежимИзмененияСоставаОснований = 2 Или РежимИзмененияСоставаОснований = 4 Тогда
		ДокументыОснования.ЗагрузитьЗначения(ВыбранныеДокументы);
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 Тогда
		Если Не СервисДоставкиКлиент.ЭтотДокументДоступенДляНаложенногоПлатежа(ДокументыОснования[0].Значение) Тогда
			НаложенныйПлатежВидОплаты = 0;
		КонецЕсли;
	Иначе
		НаложенныйПлатежВидОплаты = 0;
	КонецЕсли;
	
	ОбработатьИзменениеРеквизитаФормы("ДокументыОснования");
	Если РежимИзмененияСоставаОснований = 2 Тогда
		// Выполняем только после выбора первого документа-основания
		ОбработатьИзменениеРеквизитаФормы("ОтправительКонтрагентСсылка");
		ОбработатьИзменениеРеквизитаФормы("ПолучательКонтрагентСсылка");
	КонецЕсли;
	
	РежимИзмененияСоставаОснований = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитовОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ИмяРеквизита = СтрЗаменить(ДополнительныеПараметры.ИмяРеквизита, "Ссылка", "");
		ИмяРеквизита = ИмяРеквизита + "Реквизиты";
		ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита, ОбработкаНаСервере = Истина)
	
	Отказ = Ложь;
	
	Если ОбработкаНаСервере Тогда
		ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ДокументыОснования" Тогда
		
		РазмещениеГрузаРазвернутьСтроки();
		УстановитьВидимостьСпособовОтгрузкиДоставки(Элементы, СпособОтгрузки, СпособДоставки);
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		
	ИначеЕсли ИмяРеквизита = "ЗаказчикРоль" Или ИмяРеквизита = "ОрганизацияБизнесСетиСсылка" Тогда
		
		Если ЗаказчикРоль = 1 Тогда // Отправитель
			ОтправительКонтрагентСсылка = ОрганизацияБизнесСетиСсылка;
			ОбработатьИзменениеРеквизитаФормы("ОтправительКонтрагентСсылка");
			Если ПолучательКонтрагентСсылка = ОрганизацияБизнесСетиСсылка Тогда
				ОчиститьКонтрагента("Получатель");
				ОчиститьКонтактноеЛицо("Получатель");
				ОбработатьИзменениеРеквизитаФормы("ПолучательКонтрагентСсылка", Ложь);
			КонецЕсли;
		ИначеЕсли ЗаказчикРоль = 2 Тогда // Получатель
			ПолучательКонтрагентСсылка = ОрганизацияБизнесСетиСсылка;
			ОбработатьИзменениеРеквизитаФормы("ПолучательКонтрагентСсылка");
			Если ОтправительКонтрагентСсылка = ОрганизацияБизнесСетиСсылка Тогда
				ОчиститьКонтрагента("Отправитель");
				ОчиститьКонтактноеЛицо("Отправитель");
				ОбработатьИзменениеРеквизитаФормы("ОтправительКонтрагентСсылка", Ложь);
			КонецЕсли;
		ИначеЕсли ЗаказчикРоль = 4 Тогда // Третья сторона
			УстановитьВидимостьДоступностьУчастниковГрузоперевозки();
			УстановитьВидимостьДоступностьНаложенныйПлатеж();
			Если ПолучательКонтрагентСсылка = ОрганизацияБизнесСетиСсылка Тогда
				ОчиститьКонтрагента("Получатель");
				ОчиститьКонтактноеЛицо("Получатель");
				ОбработатьИзменениеРеквизитаФормы("ПолучательКонтрагентСсылка", Ложь);
			КонецЕсли;
			Если ОтправительКонтрагентСсылка = ОрганизацияБизнесСетиСсылка Тогда
				ОчиститьКонтрагента("Отправитель");
				ОчиститьКонтактноеЛицо("Отправитель");
				ОбработатьИзменениеРеквизитаФормы("ОтправительКонтрагентСсылка", Ложь);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентСсылка"
		Или ИмяРеквизита = "ПолучательКонтрагентСсылка" Тогда
		
		УстановитьВидимостьДоступностьУчастниковГрузоперевозки();
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтактноеЛицоСсылка"
		Или ИмяРеквизита = "ПолучательКонтактноеЛицоСсылка" Тогда
		
		УстановитьВидимостьДоступностьУчастниковГрузоперевозки();
		
	ИначеЕсли ИмяРеквизита = "ТипЗаказа" Тогда
		
		ЗарегистрироватьИзменениеОтборов( , Истина);
		УстановитьОформлениеШапкиРазмещениеГруза();
		СформироватьЗаголовокРазмещениеГрузаКолонкаОписаниеКоличество();
		Если ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин Тогда
			РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями( , "Стоимость"), "ОчиститьПоказатели");
		КонецЕсли;
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		
	ИначеЕсли ИмяРеквизита = "ВключитьРасшифровкуГрузовыхМест" Тогда
		
		Если ВключитьРасшифровкуГрузовыхМест Тогда
			Элементы.РазмещениеГруза.Отображение = ОтображениеТаблицы.Дерево;
		Иначе
			Элементы.РазмещениеГруза.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ = Ложь)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ДокументыОснования" Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыРеквизита = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ЭтотОбъект[ИмяРеквизита]);
		
		ПараметрыРеквизита.Удалить("ДатаДоставки");
		ПараметрыРеквизита.Удалить("ВремяДоставки");
		
		КлючОперации = "";
		
		Если РежимИзмененияСоставаОснований = 1 Или РежимИзмененияСоставаОснований = 4 Тогда
			
			// Добавление документов-оснований после первого. Дополняется только товарный состав основного грузового места
			ОбработатьПараметрыПослеДобавленияОснований(ПараметрыРеквизита, "ДобавитьИзОснования");
			
		ИначеЕсли РежимИзмененияСоставаОснований = 2 Тогда
			
			// Добавление первого документа-основания. Значения некоторых реквизитов документа-основания являются приоритетными
			ОбработатьПараметры(ПараметрыРеквизита);
			АктуализироватьДату(ДатаОтгрузки);
			Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
				УстановитьПериодОтгрузкиПоУмолчанию();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
				УстановитьПериодДоставкиПоУмолчанию();
			КонецЕсли;
			ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект);
			ВремяДоставкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект, Ложь);
			ОбработатьПараметрыПослеДобавленияОснований(ПараметрыРеквизита, "ДобавитьИзОснования");
			КлючОперации = "ДобавитьИзОснования";
			
		ИначеЕсли РежимИзмененияСоставаОснований = 3 Тогда // Обновление данных по всем документам-основаниям
			
			ОбработатьПараметрыПослеДобавленияОснований(ПараметрыРеквизита, "ОбновитьДанныеПоОснованиям");
			Возврат;
			
		КонецЕсли;
		
		// Очистим показатели основного грузового места, в которое добавили товар
		Для Каждого ОписаниеГрузовогоМеста Из РазмещениеГруза.ПолучитьЭлементы() Цикл
			Если ОписаниеГрузовогоМеста.ЭтоОсновноеГрузовоеМесто Тогда
				РазмещениеГрузаМестаКПересчету.Добавить(ОписаниеГрузовогоМеста.ИдентификаторГрузовогоМеста);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОчиститьПоказателиГрузовыхМест(Истина);
		ЗаполнитьПоказателиГрузовыхМестПоУмолчанию(Истина);
		РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(Истина), "ОчиститьПоказатели", КлючОперации);
		УстановитьВидимостьДоступность();
		СформироватьПредставлениеДокументаОснования();
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентСсылка"
		Или ИмяРеквизита = "ПолучательКонтрагентСсылка" Тогда
		
		Если ЭтоЗаполнениеШаблоном Тогда
			ПараметрыУчастника = Новый Структура;
		Иначе
			ПараметрыУчастника = ПараметрыУчастникаГрузоперевозки(ЭтотОбъект[ИмяРеквизита]);
		КонецЕсли;
		
		// В режиме редактирования реквизитов учесть доступность изменения адреса получателя
		Если ИмяРеквизита = "ПолучательКонтрагентСсылка"
			И КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательАдрес") = Неопределено Тогда
			ПараметрыУчастника.Удалить("Адрес");
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыУчастника, СтрЗаменить(ИмяРеквизита, "КонтрагентСсылка", ""));
		
		СбросЗначенияРазрешен = Ложь;
		ПрефиксИмениРеквизита = СтрЗаменить(ИмяРеквизита, "КонтрагентСсылка", "");
		Если ПрефиксИмениРеквизита = "Отправитель"
			И НЕ РеквизитыКлючаДоступныДляРедактирования(КлючиРеквизитовДляИзменения, "СпособОтгрузки") Тогда
			
			СбросЗначенияРазрешен = Ложь;
		ИначеЕсли ПрефиксИмениРеквизита = "Получатель"
			И НЕ РеквизитыКлючаДоступныДляРедактирования(КлючиРеквизитовДляИзменения, "СпособДоставки") Тогда
			
			СбросЗначенияРазрешен = Ложь;
		КонецЕсли;
		Если СбросЗначенияРазрешен Тогда
			ИмяЭлемента = ПрефиксИмениРеквизита + "НаселенныйПунктИдентификатор";
			ЭтотОбъект[Элементы[ИмяЭлемента].ПутьКДанным] = Неопределено;
		КонецЕсли;
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Ссылка", "");
		ПроверитьРеквизитыКонтрагента(ЭтотОбъект, ИмяЭлемента);
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентРеквизиты"
		Или ИмяРеквизита = "ПолучательКонтрагентРеквизиты" Тогда
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Реквизиты", "");
		ПараметрыКонтрагента = ПараметрыКонтрагента(ЭтотОбъект[ИмяЭлемента + "Ссылка"]);
		
		ЕстьИзменения = Ложь;
		Для Каждого ТекущийПараметр Из ПараметрыКонтрагента Цикл
			
			Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли ТекущийПараметр.Значение <> ЭтотОбъект[ИмяЭлемента + ТекущийПараметр.Ключ] Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ОбработатьПараметры(ПараметрыКонтрагента, ИмяЭлемента);
			ПроверитьРеквизитыКонтрагента(ЭтотОбъект, ИмяЭлемента);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтактноеЛицоСсылка"
		Или ИмяРеквизита = "ПолучательКонтактноеЛицоСсылка" Тогда
		
		Если ТипЗнч(ЭтотОбъект[ИмяРеквизита]) <> Тип("Строка") Тогда
			ПараметрыРеквизита = ПараметрыКонтактногоЛица(ЭтотОбъект[ИмяРеквизита]);
			ОбработатьПараметры(ПараметрыРеквизита, СтрЗаменить(ИмяРеквизита, "Ссылка", ""));
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительАдресВладелец"
		Или ИмяРеквизита = "ПолучательАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ПараметрыРеквизита.Значение);
		ПараметрыРеквизита.Представление = ?(ПустаяСтрока(Представление), ПараметрыРеквизита.Представление,
			Представление);
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыАдреса(ИмяЭлемента, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры заказа на доставку по документам основаниям.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
//  Значение - СписокЗначений Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - Документы основания
// 
// Возвращаемое значение:
//  Структура - См. СервисДоставки.НовыйПараметрыЗаказаНаДоставку
&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение)
	
	Возврат СервисДоставкиВызовСервера.ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки)
	
	Возврат СервисДоставки.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки);
	
КонецФункции

&НаСервере
Функция ПараметрыУчастникаГрузоперевозки(Значение)
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	
	ПараметрыУчастника.Контрагент = ПараметрыКонтрагента(Значение);
	
	ПараметрыПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(ТипГрузоперевозки);
	
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		Если ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица = 2
			И ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
			Если ТипЗнч(ПараметрыПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ПараметрыПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ПараметрыПоУмолчанию.КонтактноеЛицо;
				СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
		Иначе
			ПараметрыУчастника.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица;
			СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтактногоЛицаПоУмолчанию(ЭтотОбъект, ПараметрыУчастника);
		КонецЕсли;
	ИначеЕсли ПараметрыУчастника.Контрагент.ЮрФизЛицо = 2 Тогда
		ПараметрыУчастника.КонтактноеЛицо.Ссылка = ПараметрыУчастника.Контрагент.Ссылка;
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
	КонецЕсли;
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Значение)
	
	ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
	ПараметрыКонтрагента.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
	КонецЕсли;
	
	Возврат ПараметрыКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтактногоЛица(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыКонтактногоЛица();
	Параметры.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	Параметры.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеОсновная()
	
	УстановитьВидимостьДоступностьУчастниковГрузоперевозки();
	УстановитьВидимостьДоступностьОрганизации();
	УстановитьВидимостьПредупрежденийПоАдресам();
	УстановитьВидимостьСпособовОтгрузкиДоставки(Элементы, СпособОтгрузки, СпособДоставки);
	УстановитьВидимостьДоступностьНаложенныйПлатеж();
	УстановитьВидимостьДополнительныхТелефонов();
	ОбновитьПредставлениеДатыВремениОтгрузкиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВГХ(ИмяРеквизита = "", ЕстьОшибки = Ложь, ВыводитьПредупреждения = Истина)
	
	ПроверитьВсе = (ИмяРеквизита = "");
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузСтоимость") И ЗначениеЗаполнено(ГрузСтоимость)
		И ЗначениеЗаполнено(ГрузОграничениеСтоимость) И ГрузСтоимость > ГрузОграничениеСтоимость Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Стоимость превышает максимальное значение, допустимо не более %1 рублей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(ГрузОграничениеСтоимость,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ГрузСтоимость");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузВес") И ЗначениеЗаполнено(ГрузВес) И ЗначениеЗаполнено(ГрузОграничениеВес)
		И ГрузВес > ГрузОграничениеВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Вес превышает максимальное значение, допустимо не более %1 т.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузОбъем") И ЗначениеЗаполнено(ГрузОбъем)
		И ЗначениеЗаполнено(ГрузОграничениеОбъем) И ГрузОбъем > ГрузОграничениеОбъем Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Объем превышает максимальное значение, допустимо не более %1 м³.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(ГрузОграничениеОбъем, "ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузМаксимальнаяДлина") И ЗначениеЗаполнено(ГрузМаксимальнаяДлина)
		И ЗначениеЗаполнено(ГрузОграничениеДлина) И ГрузМаксимальнаяДлина > ГрузОграничениеДлина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Длина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(ГрузОграничениеДлина/100, "ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузМаксимальнаяШирина") И ЗначениеЗаполнено(ГрузМаксимальнаяШирина)
		И ЗначениеЗаполнено(ГрузОграничениеШирина) И ГрузМаксимальнаяШирина > ГрузОграничениеШирина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Ширина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(ГрузОграничениеШирина/100, "ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе Или ИмяРеквизита = "ГрузМаксимальнаяВысота") И ЗначениеЗаполнено(ГрузМаксимальнаяВысота)
		И ЗначениеЗаполнено(ГрузОграничениеВысота) И ГрузМаксимальнаяВысота > ГрузОграничениеВысота Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru = 'Высота превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Формат(ГрузОграничениеВысота/100, "ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокВыбораТиповДокументовОснований()
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
	
	Для Каждого ТекущийТип Из ТипыДокументов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);
		
		Если ОбъектМетаданных <> Неопределено И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				СписокВыбораДокументовОснований.Добавить(ПолноеИмя, ОбъектМетаданных.Синоним);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповЗаказа()
	
	СписокВыбора = Элементы.ТипЗаказа.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого Элемент Из СервисДоставкиПовтИсп.СписокТиповЗаказовСДЭК() Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАвтопересчетНастройка(АвтопересчетСписокКолонок)
	
	// Список выбора по кнопке "РазмещениеГрузаАвтопересчетНастройка"
	АвтопересчетСписокКолонок.Добавить("Вес", НСтр("ru = 'Вес'"), Истина);
	АвтопересчетСписокКолонок.Добавить("Длина", НСтр("ru = 'Длина'"), Истина);
	АвтопересчетСписокКолонок.Добавить("Ширина", НСтр("ru = 'Ширина'"), Истина);
	АвтопересчетСписокКолонок.Добавить("Высота", НСтр("ru = 'Высота'"), Истина);
	АвтопересчетСписокКолонок.Добавить("Стоимость", НСтр("ru = 'Объявленная стоимость'"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Элемент, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ЭтотОбъект[ИмяРеквизита] = Неопределено;
	ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтрагента(Имя = "")
	
	ЭтотОбъект[Имя + "КонтрагентСсылка"] = Неопределено;
	ЭтотОбъект[Имя + "КонтрагентНаименование"] = Неопределено;
	ЭтотОбъект[Имя + "КонтрагентИНН"] = Неопределено;
	ЭтотОбъект[Имя + "КонтрагентКПП"] = Неопределено;
	ЭтотОбъект[Имя + "КонтрагентЭтоОрганизация"] = Неопределено;
	ЭтотОбъект[Имя + "КонтрагентЮрФизЛицо"] = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактноеЛицо(Имя = "")
	
	ЭтотОбъект[Имя + "КонтактноеЛицоEmail"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоНаименование"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоСсылка"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоТелефонДополнительныйДоступен"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоТелефонДополнительныйЗначение"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоТелефонДополнительныйПредставление"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоТелефонЗначение"] = Неопределено;
	ЭтотОбъект[Имя + "КонтактноеЛицоТелефонПредставление"] = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, "ТелефонКонтактногоЛицаОрганизации",
		"ТелефонКонтактногоЛицаКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, "АдресСкладаОрганизации", "АдресСкладаКонтрагента"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьАдресата(ИмяЭлемента)
	
	Если СтрНачинаетсяС(ИмяЭлемента, "Получатель") Тогда
		Адресат = "Получатель";
	ИначеЕсли СтрНачинаетсяС(ИмяЭлемента, "Отправитель") Тогда
		Адресат = "Отправитель";
	КонецЕсли;
	
	Возврат Адресат;
	
КонецФункции

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "1", "");
	
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[ИмяРеквизитаПредставление] Тогда 
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = ""
		И ЭтотОбъект[ИмяРеквизитаПредставление] <> "")
		Или ЕстьИзменение Тогда
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей]
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
	
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],, ПараметрыВидаКонтактнойИнформации.Тип);
	
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элемент.ТолькоПросмотр
		Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеКонтактнойИнформации(Элемент, ТипКонтактнойИнформацииСтрока)
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	Если ТипКонтактнойИнформацииСтрока = "Телефон" Тогда
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление], ТипКонтактнойИнформацииСтрока);
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ЕстьИзменения = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ, ЕстьИзменения);
	Если ЕстьИзменения Тогда
		ЗарегистрироватьИзменениеОтборов(Ложь);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяРеквизитаПредставление] <> Элемент.ТекстРедактирования Тогда
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
		ТипКонтактнойИнформацииСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПредставлениеКонтактнойИнформации(Знач Префикс, ЕстьОшибки, ЕстьИзменения = Ложь)
	
	Если СтрНайти(Префикс, "Телефон") > 0 Тогда
		
		ПроверитьНомерТелефона(ЭтотОбъект, Префикс, ЕстьОшибки);
		
	ИначеЕсли СтрНайти(Префикс, "Адрес") > 0 Тогда
		
		ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки, ЕстьИзменения);
		
	ИначеЕсли СтрНайти(Префикс, "Email") > 0 Тогда
		
		ПроверитьEmail(Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Представление"];
		Если Результат.Свойство("Представление") И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
			Модифицированность = Истина;
		КонецЕсли;
		
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Значение"];
		Если Результат.Свойство("Значение") И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
			Модифицированность = Истина;
		КонецЕсли;
		
		Отказ = Ложь;
		ЕстьИзменения = Ложь;
		ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ, ЕстьИзменения);
		Если ЕстьИзменения Тогда
			ЗарегистрироватьИзменениеОтборов(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗначенийДеревоУслугТарифов(Отказ, ВыводитьСообщения = Истина)
	
	ТекстОшибки = НСтр("ru='Значение поля ""%1"" услуги ""%2"" не заполнено'");
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Использовать Тогда
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.ПолучитьЭлементы() Цикл
					Если Не ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
						Отказ = Истина;
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
								ТекущееСвойство.Наименование, ТекущаяУслуга.Наименование);
							ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					ИначеЕсли ТекущаяУслуга.Идентификатор = ИдентификаторУслугиСМСУведомлениеОДоставке() Тогда
						НомерИзЦифр = СервисДоставкиКлиентСервер.ТолькоЦифры(ТекущееСвойство.Значение);
						Если СтрДлина(НомерИзЦифр) < 6 Тогда
							Отказ = Истина;
							Если ВыводитьСообщения Тогда
								ТекстОшибкиНомер = НСтр("ru='Значение поля ""%1"" услуги ""%2"" короче 6 цифр'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиНомер,
									ТекущееСвойство.Наименование, ТекущаяУслуга.Наименование);
								ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент)
	
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ИмяРеквизитаЭтоОрганизация = Элемент.Имя + "ЭтоОрганизация";
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	ЭтоОрганизация = ЭтотОбъект[ИмяРеквизитаЭтоОрганизация];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЭтоОрганизация Тогда
			ОткрытьФормуОбъекта("ОрганизацияСервисДоставки", ИмяРеквизита);
		Иначе
			ОткрытьФормуОбъекта("КонтрагентСервисДоставки", ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоУслугТарифовСформировать()
	
	ДеревоУслугТарифовКатегории = ДеревоУслугТарифов.ПолучитьЭлементы();
	
	Категория = "";
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		
		Если Категория <> ТекущаяУслуга.Категория Тогда
			
			Категория = ТекущаяУслуга.Категория;
			
			ТекущаяКатегория = ДеревоУслугТарифовКатегории.Добавить();
			ТекущаяКатегория.Наименование = ТекущаяУслуга.Категория;
			ТекущаяКатегория.Использовать = Истина;
			
		КонецЕсли;
		
		ДеревоУслугТарифовУслуги = ТекущаяКатегория.ПолучитьЭлементы();
		НоваяУслуга = ДеревоУслугТарифовУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
		НоваяУслуга.Использовать = НоваяУслуга.Обязательная;
		НоваяУслуга.ТипСтроки = 1;
		НоваяУслуга.ИдентификаторУслугТарифов = ТекущаяУслуга.ПолучитьИдентификатор();
		
		ДеревоУслугТарифовСвойства = НоваяУслуга.ПолучитьЭлементы();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = ДеревоУслугТарифовСвойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			НовоеСвойство.ТипСтроки = 2;
			НовоеСвойство.Обязательная = НоваяУслуга.Обязательная;
			НовоеСвойство.ИдентификаторУслугТарифов = ТекущееСвойство.ПолучитьИдентификатор();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоУслугТарифовВосстановитьУслуги(Услуги)
	
	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства  = "Идентификатор";
	ОписаниеУслугТарифов = РеквизитФормыВЗначение("ДеревоУслугТарифов");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСтроки", 1);
	Отбор.Вставить("Идентификатор");
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		
		ИдентификаторУслуги = ТекущаяУслуга["Идентификатор"];
		Если ПустаяСтрока(ИдентификаторУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Идентификатор = ИдентификаторУслуги;
		НайденныеУслуги = ОписаниеУслугТарифов.Строки.НайтиСтроки(Отбор, Истина);
		Для Каждого УслугаТарифа Из НайденныеУслуги Цикл
			УслугаТарифа.Использовать = ТекущаяУслуга.Использовать;
			Для Каждого СвойствоУслуги Из УслугаТарифа.Строки Цикл
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
					Если ТекущееСвойство[ИмяСвойства] = СвойствоУслуги[ИмяСвойства] Тогда
						СвойствоУслуги.Значение = ТекущееСвойство.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОписаниеУслугТарифов, "ДеревоУслугТарифов");
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеГрузаРазвернутьСтроки()
	
	Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
		Элементы.РазмещениеГруза.Развернуть(ГрузовоеМесто.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗарегистрироватьИзменениеОтборов( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаСВыбраннымиСтроками()
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоУслугТарифов.Развернуть(ТекущаяКатегория.ПолучитьИдентификатор());
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Использовать Тогда
				Элементы.ДеревоУслугТарифов.Развернуть(ТекущаяУслуга.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ТарифыУстановитьРежимСортировки(ВыбранныйВариантСортировки)
	
	ВариантыСортировки = Кэш.ВариантыСортировки;
	
	Если Не ЗначениеЗаполнено(ВыбранныйВариантСортировки) Тогда
		ВыбранныйВариантСортировки = "СортироватьТарифыПоЦене";
	КонецЕсли;
	
	КомандаФормы = Команды[ВыбранныйВариантСортировки]; // КомандаФормы
	Элементы.ГруппаПодменюТарифыСортировать.Заголовок = КомандаФормы.Заголовок;
	
	Для Каждого ТекущийВариант Из ВариантыСортировки Цикл
		Элементы[ТекущийВариант.Ключ].Пометка = ТекущийВариант.Ключ = ВыбранныйВариантСортировки;
	КонецЦикла;
	
	ТарифыРежимСортировки = ВыбранныйВариантСортировки;
	Тарифы.Сортировать(ВариантыСортировки[ТарифыРежимСортировки]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТарифа(Знач ДанныеПоТарифу = Неопределено, Отказ = Ложь)
	
	ПроверитьЗаполнениеЗначенийДеревоУслугТарифов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоТарифу = Неопределено Тогда
		ДанныеПоТарифу = ОпределитьЭлементКоллекции(Тарифы, ТарифИдентификатор);
	ИначеЕсли ТипЗнч(ДанныеПоТарифу) = Тип("Число") Тогда
		Модифицированность = Истина; // Интерактивное действие
		ДанныеПоТарифу = Тарифы.НайтиПоИдентификатору(Элементы.Тарифы.ТекущаяСтрока);
	КонецЕсли;
	
	Если ДанныеПоТарифу = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТарифИдентификатор = ДанныеПоТарифу.Идентификатор;
	ТарифНаименование = ДанныеПоТарифу.Наименование;
	ТарифОписание = ДанныеПоТарифу.Описание;
	СуммаДокумента = ?(ДанныеПоТарифу.Стоимость = 0, СуммаДокумента, ДанныеПоТарифу.Стоимость);
	СуммаСкидки = ?(ДанныеПоТарифу.СуммаСкидки = 0, СуммаСкидки, ДанныеПоТарифу.СуммаСкидки);
	
КонецПроцедуры

&НаСервере
Функция ТабличнаяЧастьУслуги(Макет, Услуги)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
	
	ОбластьМакетаКатегория = Макет.ПолучитьОбласть("СтрокаТаблицыКатегория");
	ОбластьМакетаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицыУслуга");
	ОбластьМакетаСвойство = Макет.ПолучитьОбласть("СтрокаТаблицыСвойство");
	
	ТекущаяКатегория = "";
	Для Каждого ТекущаяУслугаТарифа Из Услуги Цикл
		
		Если ТекущаяКатегория <> ТекущаяУслугаТарифа.Категория Тогда
			ТекущаяКатегория = ТекущаяУслугаТарифа.Категория;
			ОбластьСтрокаТаблицы = ОбластьМакетаКатегория;
			ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Категория;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЕсли;
		
		ОбластьСтрокаТаблицы = ОбластьМакетаУслуга;
		ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Наименование;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		Для Каждого ТекущееСвойство Из ТекущаяУслугаТарифа.Свойства Цикл
			ОбластьСтрокаТаблицы = ОбластьМакетаСвойство;
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, ТекущееСвойство);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура ТабличныйДокументИнформацияПоТарифу(Источник)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Источник = Неопределено Тогда
		ИнформацияПоТарифу = ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Число") Тогда
		ДанныеПоТарифу = Тарифы.НайтиПоИдентификатору(Источник);
	Иначе
		ДанныеПоТарифу = Источник;
	КонецЕсли;
	
	Макет = Обработки.СервисДоставки.ПолучитьМакет("ДетализацияСтоимости");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыОбычная");
	ОбластьСтрокаТаблицыВнимание = Макет.ПолучитьОбласть("СтрокаТаблицыБезСтоимости");
	ОбластьПредупреждениеВерх = Макет.ПолучитьОбласть("ПредупреждениеВерх");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьШапка.Параметры.ГрузоперевозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки, Ложь);
	ОбластьШапка.Параметры.РасшифровкаНаименование = "Грузоперевозчик";
	ОбластьШапка.Параметры.ТарифНаименование = ДанныеПоТарифу.Наименование;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "ТарифИдентификатор_" + ИдентификаторТекущегоТарифа;
	
	ОбластьСтрокаТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
	ОбластьСтрокаТаблицыВнимание.Параметры.ВалютаНаименование = ВалютаНаименование;
	ОбластьПодвалТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
	
	СуммаУслуг = 0;
	ДанныеУслуг = Новый Массив;
	Для Каждого Услуга Из ПолучитьУслугиТарифов() Цикл
		ДанныеУслуги = ОпределитьЭлементКоллекции(ДанныеПоТарифу.ДополнительныеУслуги, Услуга.Идентификатор);
		Если ДанныеУслуги <> Неопределено Тогда
			Если ДанныеПоТарифу.Стоимость <= 1 Тогда
				ДанныеУслуги.Стоимость = 0;
			Иначе
				СуммаУслуг = СуммаУслуг + ДанныеУслуги.Стоимость;
			КонецЕсли;
			ДанныеУслуг.Добавить(Новый Структура("УслугаНаименование, Стоимость, Автоматическая",
				Услуга.Наименование, Формат(ДанныеУслуги.Стоимость, "ЧДЦ=2; ЧН=-"), Услуга.Автоматическая));
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрокаТаблицы.Параметры.УслугаНаименование = НСтр("ru = 'Доставка'");
	Если ДанныеПоТарифу.Стоимость <= 1 Тогда
		ОбластьСтрокаТаблицы.Параметры.Стоимость = "-";
		ОбластьПодвалТаблицы.Параметры.Стоимость = "-";
	Иначе
		ОбластьСтрокаТаблицы.Параметры.Стоимость = Формат(ДанныеПоТарифу.Стоимость - СуммаУслуг, "ЧДЦ=2; ЧН=-");
		ОбластьПодвалТаблицы.Параметры.Стоимость = Формат(ДанныеПоТарифу.Стоимость, "ЧДЦ=2; ЧН=-");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьПредупреждениеВерх);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
	
	Для Каждого ДанныеУслуги Из ДанныеУслуг Цикл
		Если ДанныеУслуги.Автоматическая Тогда
			ОбластьУслуги = ОбластьСтрокаТаблицыВнимание;
		Иначе
			ОбластьУслуги = ОбластьСтрокаТаблицы;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьУслуги.Параметры, ДанныеУслуги);
		ТабличныйДокумент.Вывести(ОбластьУслуги);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	Если ЗначениеЗаполнено(ДанныеПоТарифу.Описание) Тогда
		ОбластьОписаниеТарифа = Макет.ПолучитьОбласть("ОписаниеТарифа");
		ОбластьОписаниеТарифа.Параметры.ОписаниеТарифа = ДанныеПоТарифу.Описание;
		ТабличныйДокумент.Вывести(ОбластьОписаниеТарифа);
	КонецЕсли;
	
	ИнформацияПоТарифу = ТабличныйДокумент;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументИтоговаяИнформация()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Макет = Обработки.СервисДоставки.ПолучитьМакет("Заказ");
	
	Если Заблокирован Тогда
		ОбластьМакетаЗаголовокБлокировки = Макет.ПолучитьОбласть("ЗаголовокБлокировки");
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокБлокировки);
	КонецЕсли;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	КоличествоОснований = ДокументыОснования.Количество();
	Если КоличествоОснований = 1 Тогда
		ПараметрыОбласти.РасшифровкаОснование = ДокументыОснования[0].Значение;
		ПараметрыОбласти.ОснованиеПредставление = ДокументыОснования[0].Значение;
	ИначеЕсли КоличествоОснований > 1 Тогда
		ПараметрыОбласти.РасшифровкаОснование = "ОткрытьФормуОснования";
		ПараметрыОбласти.ОснованиеПредставление = СтрШаблон(Нстр("ru = 'Всего документов: %1'", КоличествоОснований));
	КонецЕсли;
	
	ПараметрыОбласти.ГрузоперевозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки, Ложь);
	ПараметрыОбласти.РасшифровкаГрузоперевозчик = "Грузоперевозчик";
	ПараметрыОбласти.ТарифНаименование = ТарифНаименование;
	ПараметрыОбласти.РасшифровкаТариф = "Тариф";
	ПараметрыОбласти.ОплатаПредставление = ?(Оплачен, НСтр("ru='Оплачено'"), НСтр("ru='Требует оплаты'"));
	ПараметрыОбласти.ДатаИВремяОформления = Формат(ДатаСозданияЗаказа,"ДЛФ=DT");
	ПараметрыОбласти.Состояние = ?(ПустаяСтрока(Состояние), СервисДоставки.ПредставлениеСостоянияЧерновик(), Состояние);
	ПараметрыОбласти.ТрекНомер = Новый ФорматированнаяСтрока(ТрекНомер, , , , "ТрекНомер");
	ПараметрыОбласти.ОсновнаяИнформация = НСтр("ru = 'Тип заказа'") + ":";
	ПараметрыОбласти.РасшифровкаОсновнаяИнформация = Элементы.ТипЗаказа.СписокВыбора.НайтиПоЗначению(ТипЗаказа).Представление;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если ИсполнительНаименование <> "" Или ИсполнительТелефон <> "" Тогда
		ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
		ПараметрыОбласти = ОбластьМакетаИсполнитель.Параметры;
		ПараметрыОбласти.ИсполнительПредставление = ИсполнительНаименование;
		ПараметрыОбласти.ИсполнительНомерТелефонаПредставление = ИсполнительТелефон;
		ТабличныйДокумент.Вывести(ОбластьМакетаИсполнитель);
	КонецЕсли;
	
	Если АвтомобильМарка <> "" Или АвтомобильНомер <> "" Тогда
		ОбластьМакетаАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
		ПараметрыОбласти = ОбластьМакетаАвтомобиль.Параметры;
		ПараметрыОбласти.АвтомобильПредставление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2'"),
			АвтомобильМарка,
			АвтомобильНомер));
		ТабличныйДокумент.Вывести(ОбластьМакетаАвтомобиль);
	КонецЕсли;
	
	ОбластьМакетаКонтрагенты = Макет.ПолучитьОбласть("Контрагенты");
	ПараметрыОбласти = ОбластьМакетаКонтрагенты.Параметры;
	
	ПараметрыОбласти.ОтправительНаименование = ОтправительКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаОтправительКонтрагент = "ОтправительКонтрагент";
	ПараметрыОбласти.ОтправительКонтактноеЛицо = ОтправительКонтактноеЛицоНаименование;
	ПараметрыОбласти.ОтправительТелефон = ОтправительКонтактноеЛицоТелефонПредставление;
	
	ПараметрыОбласти.ПолучательНаименование = ПолучательКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаПолучательКонтрагент = "ПолучательКонтрагент";
	ПараметрыОбласти.ПолучательКонтактноеЛицо = ПолучательКонтактноеЛицоНаименование;
	ПараметрыОбласти.ПолучательТелефон = ПолучательКонтактноеЛицоТелефонПредставление;

	ПараметрыОбласти.Отправитель = НСтр("ru = 'Отправитель'");
	ПараметрыОбласти.Получатель = НСтр("ru = 'Получатель'");

	ТабличныйДокумент.Вывести(ОбластьМакетаКонтрагенты);

	Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) 
		Или ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		
		ОбластьМакетаДополнительныйТелефон = Макет.ПолучитьОбласть("ДополнительныйТелефон");
		ПараметрыОбласти = ОбластьМакетаДополнительныйТелефон.Параметры;
	
		Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст1 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный1 = ОтправительКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст2 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный2 = ПолучательКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительныйТелефон);
		
	КонецЕсли;
	
	Если Кэш.ФункциональныеОпции.ИспользоватьНаложенныеПлатежи И ТипЗаказа = 1 И НаложенныйПлатежВидОплаты <> 0 Тогда
		ОбластьМакетаНаложенныйПлатеж = Макет.ПолучитьОбласть("НаложенныйПлатеж");
		СуммаНаложенногоПлатежа = ПолнаяСтоимость;
		ПараметрыОбласти = ОбластьМакетаНаложенныйПлатеж.Параметры;
		ПараметрыОбласти.НаложенныйПлатежВидОплаты = ?(НаложенныйПлатежВидОплаты = 1, НСтр("ru='Картой'"), НСтр("ru='Наличными'"));
		ПараметрыОбласти.СуммаНаложенногоПлатежа = СуммаНаложенногоПлатежа;
		ПараметрыОбласти.СуммаНаложенногоПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
			СуммаНаложенногоПлатежа,
			ВалютаНаименование,
			?(НаложенныйПлатежПолучен, НСтр("ru='(оплачено)'"), НСтр("ru='(ожидает оплаты)'")));
		ТабличныйДокумент.Вывести(ОбластьМакетаНаложенныйПлатеж);
	Иначе
		СуммаНаложенногоПлатежа = 0;
	КонецЕсли;
	
	ОбластьМакетаАдреса = Макет.ПолучитьОбласть("АдресаРасширенный");
	ПараметрыОбласти = ОбластьМакетаАдреса.Параметры;
	
	ЭлементСписка = Элементы.ОтправительНаселенныйПунктИдентификатор.СписокВыбора.НайтиПоЗначению(ОтправительНаселенныйПунктИдентификатор);
	ПараметрыОбласти.НаселенныйПунктОтгрузки = ?(ЭлементСписка <> Неопределено, ЭлементСписка.Представление, "");
	ПараметрыОбласти.СпособОтгрузки = ПредставлениеСпособаОтгрузки(СпособОтгрузки);
	Если СпособОтгрузки = 1 Тогда
		ОтправительТерминалОтправительАдрес = ПунктПриемаГрузаНаименование;
		ОтправительТипАдресаНаименование = ?(ПунктПриемаГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктПриемаГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктПриемаГрузаАдрес) Тогда
			ОтправительТерминалОтправительАдрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1
			|(%2)", ОтправительТерминалОтправительАдрес, ПунктПриемаГрузаАдрес);
		КонецЕсли;
	Иначе
		Если Не АдресОтноситсяКНаселенномуПункту(ОтправительАдресПредставление,
			Кэш.НаселенныеПункты[ЭтотОбъект["ОтправительНаселенныйПунктИдентификатор"]]) Тогда
			ОбластьМакетаАдреса.Область("ПунктАдресОтгрузки").Картинка = БиблиотекаКартинок.ПредупреждениеБЭД;
		КонецЕсли;
		ОтправительТерминалОтправительАдрес = ОтправительАдресПредставление;
		ОтправительТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	ПараметрыОбласти.РасшифровкаОтправительТерминалОтправительАдрес = "ОтправительТерминалОтправительАдрес";
	ПараметрыОбласти.ОтправительТипАдресаНаименование = ОтправительТипАдресаНаименование;
	ПараметрыОбласти.ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес;
	ПараметрыОбласти.ОтправительТерминалТелефон = ПунктПриемаГрузаТелефон;
	
	ЭлементСписка = Элементы.ПолучательНаселенныйПунктИдентификатор.СписокВыбора.НайтиПоЗначению(ПолучательНаселенныйПунктИдентификатор);
	ПараметрыОбласти.НаселенныйПунктДоставки = ?(ЭлементСписка <> Неопределено, ЭлементСписка.Представление, "");
	ПараметрыОбласти.СпособДоставки = ПредставлениеСпособаДоставки(СпособДоставки);
	Если СпособДоставки = 1 Тогда
		ПолучательТерминалПолучательАдрес = ПунктВыдачиГрузаНаименование;
		ПолучательТипАдресаНаименование = ?(ПунктВыдачиГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктВыдачиГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктВыдачиГрузаАдрес) Тогда
			ПолучательТерминалПолучательАдрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1
			|(%2)", ПолучательТерминалПолучательАдрес, ПунктВыдачиГрузаАдрес);
		КонецЕсли;
	Иначе
		Если Не АдресОтноситсяКНаселенномуПункту(ПолучательАдресПредставление,
			Кэш.НаселенныеПункты[ЭтотОбъект["ПолучательНаселенныйПунктИдентификатор"]]) Тогда
			ОбластьМакетаАдреса.Область("ПунктАдресДоставки").Картинка = БиблиотекаКартинок.ПредупреждениеБЭД;
		КонецЕсли;
		ПолучательТерминалПолучательАдрес = ПолучательАдресПредставление;
		ПолучательТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	ПараметрыОбласти.РасшифровкаПолучательТерминалПолучательАдрес = "ПолучательТерминалПолучательАдрес";
	ПараметрыОбласти.ПолучательТипАдресаНаименование = ПолучательТипАдресаНаименование;
	ПараметрыОбласти.ПолучательТерминалПолучательАдрес = ПолучательТерминалПолучательАдрес;
	ПараметрыОбласти.ПолучательТерминалТелефон = ПунктВыдачиГрузаТелефон;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаАдреса);
	
	ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
	ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
	
	СтрокиДляПодстановки = Новый Массив();
	СтрокиДляПодстановки.Добавить(Формат(ДатаОтгрузки,"ДЛФ=D"));
	СтрокиДляПодстановки.Добавить(" (");
	СтрокиДляПодстановки.Добавить(Формат(ВремяОтгрузкиС, "ДФ=ЧЧ:мм; ДП=00:00"));
	СтрокиДляПодстановки.Добавить("-");
	СтрокиДляПодстановки.Добавить(Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм; ДП=00:00"));
	СтрокиДляПодстановки.Добавить(")");
	
	ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = СтрСоединить(СтрокиДляПодстановки);
	
	ПараметрыОбласти.ПолучательДатаИВремяОтгрузкиПредставление = Формат(ДатаДоставки,"ДЛФ=DT;");
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаВремя);
	
	ОбластьМакетаПараметрыГруза = Макет.ПолучитьОбласть("ПараметрыГруза");
	
	ПараметрыОбласти = ОбластьМакетаПараметрыГруза.Параметры;
	
	ОписаниеГрузовыхМест = РазмещениеГруза.ПолучитьЭлементы();
	Если ТипЗаказа = 2 Тогда
		ГрузСодержимое = Новый Массив;
		Для Каждого ГрузовоеМесто Из ОписаниеГрузовыхМест Цикл
			ОписаниеГрузовогоМеста = СокрЛП(ГрузовоеМесто.Описание);
			Если СтрДлина(ОписаниеГрузовогоМеста) > 0 Тогда
				ГрузСодержимое.Добавить(ОписаниеГрузовогоМеста);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОбласти.ГрузСодержимое = СтрСоединить(ГрузСодержимое, "; ");
	КонецЕсли;
	ПараметрыОбласти.ГрузКоличествоГрузовыхМест = ОписаниеГрузовыхМест.Количество();
	ПараметрыОбласти.Валюта = ВалютаНаименование;
	ПараметрыОбласти.ГрузСтоимость = ГрузСтоимость;
	ПараметрыОбласти.ГрузВес = ГрузВес;
	ПараметрыОбласти.ГрузОбъем = ГрузОбъем;
	ПараметрыОбласти.ГрузМаксимальныйВес = ГрузМаксимальныйВес;
	ПараметрыОбласти.ГрузМаксимальнаяВысота = ГрузМаксимальнаяВысота;
	ПараметрыОбласти.ГрузМаксимальнаяШирина = ГрузМаксимальнаяШирина;
	ПараметрыОбласти.ГрузМаксимальнаяДлина = ГрузМаксимальнаяДлина;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметрыГруза);
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);
	
	Если СуммаСкидки <> 0 Тогда
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("ПодвалСоСкидкой");
		ОбластьМакетаПодвал.Параметры.СуммаСкидки = Формат(СуммаСкидки,"ЧДЦ=2; ЧН=-");
	Иначе
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.СуммаДокумента = Формат(СуммаДокумента,"ЧДЦ=2; ЧН=-");
	ОбластьМакетаПодвал.Параметры.Валюта = ВалютаНаименование;
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если ДополнительнаяИнформация <> "" Тогда
		ОбластьМакетаДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьМакетаДополнительнаяИнформация.Параметры.Комментарий = ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительнаяИнформация);
	КонецЕсли;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		
		ОбластьМакетаДополнительныеДанныеЗаголовок1 = Макет.ПолучитьОбласть("ДополнительныеДанныеЗаголовок1");
		ОбластьМакетаДополнительныеДанныеСтрока = Макет.ПолучитьОбласть("ДополнительныеДанныеСтрока");
		ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием
			= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрокаСНаименованием");
		
		Для Каждого ТекущиеДополнительныеДанные Из ДополнительныеДанные Цикл
			
			ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеЗаголовок1;
			
			ТекущаяОбласть.Параметры.Наименование = ТекущиеДополнительныеДанные.Наименование;
			ТабличныйДокумент.Вывести(ТекущаяОбласть);
			
			Если ТекущиеДополнительныеДанные.Список.Количество() = 0 Тогда
				ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
				ТекущаяОбласть.Параметры.Значение = ТекущиеДополнительныеДанные.Значение;
				ТабличныйДокумент.Вывести(ТекущаяОбласть);
			Иначе
				Для Каждого ТекущиеДанныеИзСписка Из ТекущиеДополнительныеДанные.Список Цикл
					Если ЗначениеЗаполнено(ТекущиеДанныеИзСписка.Наименование) Тогда
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием;
						ТекущаяОбласть.Параметры.Наименование = ТекущиеДанныеИзСписка.Наименование;
					Иначе
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
					КонецЕсли;
					ТекущаяОбласть.Параметры.Значение = ТекущиеДанныеИзСписка.Значение;
					ТабличныйДокумент.Вывести(ТекущаяОбласть);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКлючУникальности()
	
	Если СтрНайти(КлючУникальности, "ЭтоНовый") > 0 Тогда
		КлючУникальности = ИдентификаторЗаказа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИтоговуюИнформацию()
	
	ОбновитьИнформациюПоВыбраннымУслугам();
	ИтоговаяИнформация = ТабличныйДокументИтоговаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени, ТолькоПросмотр)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаОтгрузки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		ПараметрыОткрытияФормы.Вставить("ВариантОтображения", "ДатаВремя");
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаДоставки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза", ПараметрыОткрытияФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = Результат.ВариантВыбораВремени;
	Если ВариантВыбораВремени = 1 Тогда
		
		ДатаОтгрузки = Результат.Дата;
		ВремяОтгрузкиС = Результат.ВремяРаботыС;
		ВремяОтгрузкиПо = Результат.ВремяРаботыПо;
		ВремяОтгрузкиОбедС = Результат.ВремяОбедС;
		ВремяОтгрузкиОбедПо = Результат.ВремяОбедПо;
		
		АктуализироватьДатуНаКлиенте(ДатаОтгрузки);
		ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда

		ВремяДоставкиС = Результат.ВремяРаботыС;
		ВремяДоставкиПо = Результат.ВремяРаботыПо;
		ВремяДоставкиОбедС = Результат.ВремяОбедС;
		ВремяДоставкиОбедПо = Результат.ВремяОбедПо;
		
		ВремяДоставкиПредставление = ПредставлениеДатыВремени(ЭтотОбъект, Ложь);
		
	КонецЕсли;
	
	ПроверитьВремяОтгрузки( , Истина);
	ЗарегистрироватьИзменениеОтборов( , Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ТекущийОбъект, ДатаВремяОтгрузки = Истина)
	
	СтрокаПредставления = "";
	
	Если ДатаВремяОтгрузки Тогда
		Дата = ТекущийОбъект.ДатаОтгрузки;
		ВремяРаботыС = ТекущийОбъект.ВремяОтгрузкиС;
		ВремяРаботыПо = ТекущийОбъект.ВремяОтгрузкиПо;
		ВремяОбедС = ТекущийОбъект.ВремяОтгрузкиОбедС;
		ВремяОбедПо = ТекущийОбъект.ВремяОтгрузкиОбедПо;
	Иначе
		Дата = ТекущийОбъект.ДатаДоставки;
		ВремяРаботыС = ТекущийОбъект.ВремяДоставкиС;
		ВремяРаботыПо = ТекущийОбъект.ВремяДоставкиПо;
		ВремяОбедС = ТекущийОбъект.ВремяДоставкиОбедС;
		ВремяОбедПо = ТекущийОбъект.ВремяДоставкиОбедПо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		СтрокаПредставления = СтрШаблон("%1 ", Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяРаботыС) Или ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрШаблон("%1%2-%3", СтрокаПредставления, Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00"),
			Формат(ВремяРаботыПо, "ДФ=HH:mm"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) Или ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрШаблон("%1 (%2 %3-%4)", СтрокаПредставления, НСтр("ru = 'Обед'"),
			Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00"), Формат(ВремяОбедПо, "ДФ=HH:mm"));
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаПредставления);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодборПункта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Направление = ДополнительныеПараметры["Направление"];
	Если Направление = 1 Тогда
		Адресат = "Отправитель";
		Пункт = "ПунктПриемаГруза";
	Иначе
		Адресат = "Получатель";
		Пункт = "ПунктВыдачиГруза";
	КонецЕсли;
	
	ИмяРеквизита = Адресат + "НаселенныйПунктИдентификатор";
	
	НаселенныйПунктДо = ЭтотОбъект[ИмяРеквизита];
	
	ЭтотОбъект[Пункт + "Идентификатор"] = Результат.ТерминалИдентификатор;
	ЭтотОбъект[Пункт + "Наименование"] = Результат.Терминал;
	ЭтотОбъект[Пункт + "Адрес"] = Результат.Адрес;
	ЭтотОбъект[Пункт + "Телефон"] = Результат.Телефон;
	ЭтотОбъект[Пункт + "Описание"] = Результат.Описание;
	ЭтотОбъект[Пункт + "ТипНаименование"] = Результат.ТипНаименование;
	ЭтотОбъект[Пункт + "ТипИдентификатор"] = Результат.ТипИдентификатор;
	ЭтотОбъект[ИмяРеквизита] = Результат.НаселенныйПунктИдентификатор;
	ЭтотОбъект[Пункт + "НаселенныйПунктИдентификатор"] = Результат.НаселенныйПунктИдентификатор;
	
	// Добавим населенный пункт в список доступных к выбору, в случае его отсутствия
	Если ЭтотОбъект[ИмяРеквизита] > 0 Тогда
		НаселенныйПунктДанные = Результат.НаселенныйПунктДанные;
		Если НаселенныйПунктДанные <> Неопределено Тогда
			ИдентификаторПунктаАдресата = ЭтотОбъект[Адресат + "НаселенныйПунктИдентификатор"];
			Если Элементы[ИмяРеквизита].СписокВыбора.НайтиПоЗначению(ИдентификаторПунктаАдресата) = Неопределено Тогда
				Элементы[ИмяРеквизита].СписокВыбора.Добавить(ИдентификаторПунктаАдресата, НаселенныйПунктДанные.Представление);
				Элементы[ИмяРеквизита + "1"].СписокВыбора.Добавить(ИдентификаторПунктаАдресата, НаселенныйПунктДанные.Представление);
			КонецЕсли;
			Если Кэш.НаселенныеПунктыДанные.Получить(ЭтотОбъект[ИмяРеквизита]) = Неопределено Тогда
				Кэш.НаселенныеПунктыДанные.Вставить(ЭтотОбъект[ИмяРеквизита], НаселенныйПунктДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТарифы = НаселенныйПунктДо <> ЭтотОбъект[ИмяРеквизита];
	
	УстановитьОтборыТарифов( , ОбновитьТарифы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПунктаПриемаВыдачи(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТерминала", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеОтборов(СброситьТариф = Истина, ОбновитьТарифы = Ложь, СкрытьТарифы = Истина)
	
	Если СброситьТариф Тогда
		СброситьТарифПродолжить();
	КонецЕсли;
	
	Если ОбновитьТарифы Тогда
		ОбновитьДанныеТарифов(СкрытьТарифы);
		Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = НСтр("ru = 'Требуется обновление тарифов'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияГрузовыхМест(ОписаниеГрузовыхМест)
	
	ИдентификаторГрузовогоМеста = 1;
	Для Каждого ГрузовоеМесто Из ОписаниеГрузовыхМест Цикл
		ГрузовоеМесто.ИдентификаторГрузовогоМеста = ИдентификаторГрузовогоМеста;
		ГрузовоеМесто.Наименование = СервисДоставкиКлиентСервер.ИмяГрузовогоМеста(ИдентификаторГрузовогоМеста);
		ГрузовоеМесто.ЭтоОсновноеГрузовоеМесто = ИдентификаторГрузовогоМеста = 1;
		Для Каждого ТоварнаяПозиция Из ГрузовоеМесто.ПолучитьЭлементы() Цикл
			ТоварнаяПозиция.ИдентификаторГрузовогоМеста = ИдентификаторГрузовогоМеста;
		КонецЦикла;
		ИдентификаторГрузовогоМеста = ИдентификаторГрузовогоМеста + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТарифПродолжить()
	
	Если Не ПустаяСтрока(ТарифИдентификатор) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ТарифИдентификатор = "";
	ТарифНаименование = "";
	ТарифНеГабарит = Ложь;
	СуммаДокумента = 0;
	СуммаСкидки = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда // Отменить
		ОтменитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрафикаДвиженияЗаказа()
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ОтслеживаниеЗаказа", ПараметрыОткрытияФормы, ЭтотОбъект,
		ИдентификаторЗаказа, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика()
	
	ПараметрыОткрытияФормы = Новый Структура();
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", ПараметрыОткрытияФормы, ,
		ГрузоперевозчикИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУслуги(ИдентификаторУслуги)
	
	ПараметрыОткрытияФормы = Новый Структура();
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ИдентификаторУслуги);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаУслуги", ПараметрыОткрытияФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа(Идентификатор = "")
	
	Идентификатор = ?(ПустаяСтрока(Идентификатор), ТарифИдентификатор, Идентификатор);
	
	ПараметрыОткрытияФормы = Новый Структура();
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", ПараметрыОткрытияФормы, , Идентификатор, , , ,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Возвращает список ошибок заполнения в виде списка значений.
// 
// Параметры:
//  Представление - Строка - Описание ошибки
//  Значение - Строка - XPath для поля
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Ошибки заполнения телефона
&НаСервереБезКонтекста
Функция ОшибкиЗаполненияТелефона(Знач Представление, Знач Значение)
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если Отказ Тогда
		СписокОшибок.Добавить(ТекстОшибки);
		Возврат СписокОшибок;
	КонецЕсли;
	
	ПолныйНомерТелефона = "";
	
	ПараметрыТелефона =  СервисДоставки.НовыйПараметрыТелефона();
	ЗаполнитьЗначенияСвойств(ПараметрыТелефона, СтруктураТелефона);
	
	Если ЗначениеЗаполнено(ПараметрыТелефона.countryCode) Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + ПараметрыТелефона.countryCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыТелефона.areaCode) Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + ПараметрыТелефона.areaCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыТелефона.number) Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + ПараметрыТелефона.number;
	КонецЕсли;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 цифр)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

// Проверяет, содержит ли строка только
// 
// Параметры:
//  СтрокаПроверки - Строка - Строка для проверки.
// 
// Возвращаемое значение:
//  Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
&НаКлиентеНаСервереБезКонтекста
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиентСервер.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

// Получение списка организаций, подключенных к 1С Бизнес-сеть
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.Организация - организации подключенные к 1С Бизнес-сеть
&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюПоВыбраннымУслугам()
	
	УслугиТарифа.Очистить();
	
	ВыбранныеУслуги = ПолучитьУслугиТарифов(ТарифИдентификатор);
	Для Каждого ТекущаяУслуга Из ВыбранныеУслуги Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = УслугиТарифа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Строки Цикл
				Если ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
					НовоеСвойство = НоваяУслуга.Свойства.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДополнительныхТелефонов(ВидДополнительногоТелефона = "Все")
	
	Если ВидДополнительногоТелефона = "Все" Или ВидДополнительногоТелефона = "Отправитель" Тогда
		Элементы.ГруппаОтправительТелефонДополнительный.Видимость = ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
		Элементы.ОтправительДобавитьТелефонДополнительный.Видимость = Не ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
	КонецЕсли;
	
	Если ВидДополнительногоТелефона = "Все" Или ВидДополнительногоТелефона = "Получатель" Тогда
		Элементы.ГруппаПолучательТелефонДополнительный.Видимость = ПолучательКонтактноеЛицоТелефонДополнительныйДоступен;
		Элементы.ПолучательДобавитьТелефонДополнительный.Видимость = Не ПолучательКонтактноеЛицоТелефонДополнительныйДоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСпособовОтгрузкиДоставки(Элементы, СпособОтгрузки, СпособДоставки)
	
	ОтправкаОтАдреса = СпособОтгрузки = 2;
	ДоставкаДоАдреса = СпособДоставки = 2;
	
	Элементы.ГруппаОтправительАдрес.Видимость = ОтправкаОтАдреса;
	Элементы.ГруппаОтправительАдрес1.Видимость = ОтправкаОтАдреса;
	Элементы.ГруппаОтправительПунктПриема.Видимость = Не ОтправкаОтАдреса;
	Элементы.ГруппаОтправительПунктПриема1.Видимость = Не ОтправкаОтАдреса;
	
	Элементы.ГруппаПолучательАдрес.Видимость = ДоставкаДоАдреса;
	Элементы.ГруппаПолучательАдрес1.Видимость = ДоставкаДоАдреса;
	Элементы.ПолучательПунктВыдачиГруза.Видимость = Не ДоставкаДоАдреса;
	Элементы.ГруппаПолучательПунктВыдачи1.Видимость = Не ДоставкаДоАдреса;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросДобавлениеКомментария(ТекстКомментария)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьКомментарийИзКонтактнойИнформации",
		ЭтотОбъект,
		Новый Структура("КомментарийКАдресу", ТекстКомментария));
	
	ПоказатьВопрос(ОбработчикОповещения,
		СтрШаблон(НСтр("ru = 'В выбранном адресе содержится комментарий. Добавить его в заказ?
			|
			|Комментарий: ""%1""'"),
			СокрЛП(ТекстКомментария)),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Добавление комментария'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарийИзКонтактнойИнформации(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		
		ДополнительнаяИнформация = СокрЛП(ДополнительнаяИнформация + Символы.ПС + ДополнительныеПараметры.КомментарийКАдресу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомментарийИзКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначениеКонтактнойИнформации);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации()
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
		ОтправительКонтрагентСсылка,
		ОтправительКонтрагентЭтоОрганизация,
		ОтправительКонтактноеЛицоСсылка,
		Элементы.ОтправительАдрес,
		Элементы.ОтправительКонтактноеЛицоТелефон,
		Элементы.ОтправительКонтактноеЛицоТелефонДополнительный);
		
	СкопироватьСписокВыбора(Элементы.ОтправительАдрес1.СписокВыбора, Элементы.ОтправительАдрес.СписокВыбора);
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
		ПолучательКонтрагентСсылка,
		ПолучательКонтрагентЭтоОрганизация,
		ПолучательКонтактноеЛицоСсылка,
		Элементы.ПолучательАдрес,
		Элементы.ПолучательКонтактноеЛицоТелефон,
		Элементы.ПолучательКонтактноеЛицоТелефонДополнительный);

	СкопироватьСписокВыбора(Элементы.ПолучательАдрес1.СписокВыбора, Элементы.ПолучательАдрес.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(Контрагент, ЭтоОрганизация, КонтактноеЛицо, ЭлементАдрес, ЭлементТелефон, ЭлементТелефонДополнительный)
	
	ЭлементАдрес.СписокВыбора.Очистить();
	ЭлементТелефон.СписокВыбора.Очистить();
	ЭлементТелефонДополнительный.СписокВыбора.Очистить();
	
	МассивВладельцевКонтактнойИнформации = Новый Массив;
	МассивВладельцевКонтактнойИнформации.Добавить(Контрагент);
	МассивВладельцевКонтактнойИнформации.Добавить(КонтактноеЛицо);
	
	Если ЗначениеЗаполнено(Контрагент)
		И Контрагент.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
		МассивВладельцевКонтактнойИнформации.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"));
	КонецЕсли;
	
	СтруктураКонтактнаяИнформация = СервисДоставкиСлужебный.КонтактнаяИнформацияОбъектов(МассивВладельцевКонтактнойИнформации);
	
	Для Каждого ЭлементСоответствия Из СтруктураКонтактнаяИнформация Цикл
		
		Для Каждого СтрокаКонтактнаяИнформация Из ЭлементСоответствия.Значение Цикл
			
			Если СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				
				ЭлементАдрес.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			ИначеЕсли СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				
				ЭлементТелефон.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
				ЭлементТелефонДополнительный.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЭтоОрганизация Тогда
		ЭлементАдрес.СписокВыбора.Добавить(1, НСтр("ru = 'Наш склад...'"));
	Иначе
		ЭлементАдрес.СписокВыбора.Добавить(2, НСтр("ru = 'Адрес контрагента...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСписокВыбора(Приемник, Источник)
	
	Приемник.Очистить();
	Для Каждого Строка Из Источник Цикл
		Приемник.Добавить(Строка.Значение, Строка.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеАдресаБезМуниципальнойЧасти(Знач АдресЗначение)

	Представление = "";

	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресЗначение) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресЗначение);
		Представление = СведенияОбАдресе.Представление;
	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиГрузовыхМестПоУмолчанию(ТолькоИзмененные = Ложь)
	
	ЗначенияПараметровПоУмолчанию = ЗначенияПараметровПоУмолчаниюИзКэша(Кэш);
	
	Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
		
		Если ТолькоИзмененные
			И РазмещениеГрузаМестаКПересчету.НайтиПоЗначению(ГрузовоеМесто.ИдентификаторГрузовогоМеста) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПоказателиГрузовогоМестаПоУмолчанию(ГрузовоеМесто, ЗначенияПараметровПоУмолчанию);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиГрузовыхМест(ТолькоИзмененные = Ложь, Показатели = "", КлючОперации = "")
	
	ИменаКолонокДляПересчета = Новый Массив;
	
	Если Не РазмещениеГрузаРучнойВвод Тогда
	
		Если Показатели = "Все" Тогда
			ПоказателиКПересчету = АвтопересчетСписокКолонок.ВыгрузитьЗначения();
		Иначе
			ПоказателиКПересчету = СтрРазделить(Показатели, ", ", Ложь);
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из АвтопересчетСписокКолонок Цикл
			Значение = ЭлементСписка.Значение;
			Если ПоказателиКПересчету.Количество() > 0 И ПоказателиКПересчету.Найти(Значение) = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			ИменаКолонокДляПересчета.Добавить(Значение);
		КонецЦикла;
	
	КонецЕсли;
	
	ИменаКолонокДляПересчета.Добавить("Сумма");
	ИменаКолонокДляПересчета.Добавить("СуммаНДС");
	Если ТипЗаказа = 1 И ИменаКолонокДляПересчета.Найти("Стоимость") = Неопределено Тогда
		ИменаКолонокДляПересчета.Добавить("Стоимость");
	КонецЕсли;
	
	Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
		
		Если ТолькоИзмененные
			И РазмещениеГрузаМестаКПересчету.НайтиПоЗначению(ГрузовоеМесто.ИдентификаторГрузовогоМеста) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючОперации = "ДобавитьИзОснования" Тогда
			ПараметрыГрузовогоМеста = НовыеПараметрыГрузовогоМеста();
			ЗаполнитьЗначенияСвойств(ПараметрыГрузовогоМеста, ГрузовоеМесто);
		КонецЕсли;
		
		Для Каждого ИмяКолонки Из ИменаКолонокДляПересчета Цикл
			ГрузовоеМесто[ИмяКолонки] = 0;
		КонецЦикла;
		
		ТоварныйСоставГрузовогоМеста = ГрузовоеМесто.ПолучитьЭлементы();
		Для Каждого ТоварнаяПозиция Из ТоварныйСоставГрузовогоМеста Цикл
			Для Каждого ИмяКолонки Из ИменаКолонокДляПересчета Цикл
				Если СтрНайти("ДлинаШиринаВысота", ИмяКолонки) > 0 Тогда
					ГрузовоеМесто[ИмяКолонки] = Макс(ГрузовоеМесто[ИмяКолонки], ТоварнаяПозиция[ИмяКолонки]);
				Иначе
					ГрузовоеМесто[ИмяКолонки] = ГрузовоеМесто[ИмяКолонки] + ТоварнаяПозиция[ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если КлючОперации = "ДобавитьИзОснования" Тогда
			Для Каждого КлючИЗначение Из ПараметрыГрузовогоМеста Цикл
				Ключ = КлючИЗначение.Ключ;
				Если ГрузовоеМесто[Ключ] = 0 Тогда
					ГрузовоеМесто[Ключ] = ПараметрыГрузовогоМеста[Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Новые параметры грузового места.
// 
// Возвращаемое значение:
//  Структура - Новые параметры грузового места:
// * Вес - Число - 
// * Длина - Число - 
// * Ширина - Число - 
// * Высота - Число - 
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыГрузовогоМеста()
	
	ПараметрыГрузовогоМеста = Новый Структура;
	
	ПараметрыГрузовогоМеста.Вставить("Вес", 0);
	ПараметрыГрузовогоМеста.Вставить("Длина", 0);
	ПараметрыГрузовогоМеста.Вставить("Ширина", 0);
	ПараметрыГрузовогоМеста.Вставить("Высота", 0);
	
	Возврат ПараметрыГрузовогоМеста;
	
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиГрузовыхМест(ТолькоИзмененные = Ложь, ОчищатьОписание = Ложь)
	
	ИменаКолонокДляПересчета = Новый Массив;
	Для Каждого Элемент Из Элементы.РазмещениеГруза.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
				Реквизит = СтрЗаменить(ЭлементГруппы.ПутьКДанным, "РазмещениеГруза.", "");
				Если Реквизит = "Описание" И Не ОчищатьОписание
					Или Реквизит = "ИдентификаторГрузовогоМеста" Тогда
					Продолжить;
				КонецЕсли;
				ИменаКолонокДляПересчета.Добавить(Реквизит);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Реквизит = СтрЗаменить(Элемент.ПутьКДанным, "РазмещениеГруза.", "");
			Если Реквизит = "Наименование"
				Или Реквизит = "ИдентификаторГрузовогоМеста" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ИменаКолонокДляПересчета.Добавить(Реквизит);
	КонецЦикла;
	
	Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
		
		Если ТолькоИзмененные
			И РазмещениеГрузаМестаКПересчету.НайтиПоЗначению(ГрузовоеМесто.ИдентификаторГрузовогоМеста) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяКолонки Из ИменаКолонокДляПересчета Цикл
			ГрузовоеМесто[ИмяКолонки] = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСводнуюИнформациюПоРаспределениюГруза()
	
	ГрузВес = 0;
	ГрузОбъем = 0;
	ГрузСтоимость = 0;
	ГрузМаксимальныйВес = 0;
	ГрузМаксимальнаяДлина = 0;
	ГрузМаксимальнаяШирина = 0;
	ГрузМаксимальнаяВысота = 0;
	
	ОписаниеГрузовыхМест = РазмещениеГруза.ПолучитьЭлементы();
	Для Каждого ГрузовоеМесто Из ОписаниеГрузовыхМест Цикл
		ГрузВес = ГрузВес + ГрузовоеМесто.Вес;
		ГрузОбъем = ГрузОбъем + (ГрузовоеМесто.Длина * ГрузовоеМесто.Ширина * ГрузовоеМесто.Высота) * 0.000001;
		ГрузМаксимальныйВес = Макс(ГрузМаксимальныйВес, ГрузовоеМесто.Вес);
		ГрузМаксимальнаяДлина = Макс(ГрузМаксимальнаяДлина, ГрузовоеМесто.Длина);
		ГрузМаксимальнаяШирина = Макс(ГрузМаксимальнаяШирина, ГрузовоеМесто.Ширина);
		ГрузМаксимальнаяВысота = Макс(ГрузМаксимальнаяВысота, ГрузовоеМесто.Высота);
		ГрузСтоимость = ГрузСтоимость + ГрузовоеМесто.Стоимость;
	КонецЦикла;
	
	ИмяШрифтВыделения = "ЖирныйШрифтБЭД";
	Шаблон = НСтр("ru = 'Сумма: %1 руб; вес: %2 кг; объем %3 м³'");
	
	СводнаяИнформацияПоРаспределениюГруза = СтроковыеФункции.ФорматированнаяСтрока(
		Шаблон,
		ШрифтТекста(Формат(ГрузСтоимость, "ЧДЦ=2; ЧН=0,00;"), ИмяШрифтВыделения),
		ШрифтТекста(ГрузВес, ИмяШрифтВыделения),
		ШрифтТекста(ГрузОбъем, ИмяШрифтВыделения));
	
	ПолнаяСтоимость = ГрузСтоимость;
	
	УстановитьЗначениеСвойстваУслуги(ИдентификаторУслугиСтрахование(), ГрузСтоимость);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШрифтТекста(ЗначениеПараметра, ИмяШрифта)
	Возврат СтрШаблон("<span style=""font: %1"">%2</span>", ИмяШрифта, ЗначениеПараметра);
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияГрузовогоМестаПоУмолчанию(ТипГрузоперевозки)
	
	ИменаПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВесГрузовогоМеста");
	ИменаПараметров.Добавить("ДлинаГрузовогоМеста");
	ИменаПараметров.Добавить("ШиринаГрузовогоМеста");
	ИменаПараметров.Добавить("ВысотаГрузовогоМеста");
		
	Возврат РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначенияНастроек(ИменаПараметров, ТипГрузоперевозки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВариантыСортировки()
	
	Результат = Новый Структура;
	Результат.Вставить("СортироватьТарифыПоЦене", "Стоимость Возр");
	Результат.Вставить("СортироватьТарифыПоСроку", "МинимальныйСрок Возр, МаксимальныйСрок Возр");

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональныеОпции()
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьНаложенныеПлатежи", ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1ССДЭК"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКэшаГрузовогоМестаПоУмолчанию()
	Возврат "ЗначенияГрузовогоМестаПоУмолчанию";
КонецФункции

// Значения параметров по умолчанию из кэша.
// 
// Параметры:
//  Кэш - Структура - Кэш
// 
// Возвращаемое значение:
//  Структура - Значения параметров по умолчанию
&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияПараметровПоУмолчаниюИзКэша(Кэш)
	Возврат Кэш[ИмяКэшаГрузовогоМестаПоУмолчанию()];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказателиГрузовогоМестаПоУмолчанию(ГрузовоеМесто, ЗначенияПараметров, ПерезаполнятьВсегда = Ложь)
	
	Если ГрузовоеМесто = Неопределено Или ЗначенияПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ЗначенияПараметров Цикл
		Если ПерезаполнятьВсегда Или Не ЗначениеЗаполнено(ГрузовоеМесто[ИмяКолонкиГрузовогоМеста(ИмяПараметра.Ключ)]) Тогда
			ГрузовоеМесто[ИмяКолонкиГрузовогоМеста(ИмяПараметра.Ключ)] = ИмяПараметра.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяКолонкиГрузовогоМеста(ИмяПараметра)
	Возврат СтрЗаменить(ИмяПараметра, "ГрузовогоМеста", "");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьГрузовоеМестоВДерево(ОписаниеГрузовыхМест, ЗначенияПараметровПоУмолчанию = Неопределено)
	
	ГрузовоеМесто = ОписаниеГрузовыхМест.Добавить();
	ГрузовоеМесто.ИдентификаторГрузовогоМеста = ОписаниеГрузовыхМест.Количество();
	ГрузовоеМесто.Наименование = СервисДоставкиКлиентСервер.ИмяГрузовогоМеста(ГрузовоеМесто.ИдентификаторГрузовогоМеста);
	ГрузовоеМесто.ЭтоГрузовоеМесто = Истина;
	
	Если ГрузовоеМесто.ИдентификаторГрузовогоМеста = 1 Тогда
		ГрузовоеМесто.ЭтоОсновноеГрузовоеМесто = Истина;
	КонецЕсли;
	
	ЗаполнитьПоказателиГрузовогоМестаПоУмолчанию(ГрузовоеМесто, ЗначенияПараметровПоУмолчанию);
	
	Возврат ГрузовоеМесто;
	
КонецФункции

&НаКлиенте
Процедура ПунктНачалоВыбора(Направление)
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Направление", Направление);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодборПункта", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	
	Если Направление = 1 Тогда
		Адресат = "Отправитель";
		Пункт = "ПунктПриемаГруза";
		ОбластьПоискаТерминалов = ?(СпособОтгрузки = 1, "НаселенныйПункт", "Адрес");
	Иначе
		Адресат = "Получатель";
		Пункт = "ПунктВыдачиГруза";
		ОбластьПоискаТерминалов = ?(СпособДоставки = 1, "НаселенныйПункт", "Адрес");
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Направление", Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ОбластьПоискаТерминалов", ОбластьПоискаТерминалов);
	ПараметрыОткрытияФормы.Вставить("НаселенныйПунктИдентификатор", ЭтотОбъект[Адресат + "НаселенныйПунктИдентификатор"]);
	ПараметрыОткрытияФормы.Вставить("НаселенныйПунктДанные", Кэш.НаселенныеПунктыДанные.Получить(ЭтотОбъект[Адресат + "НаселенныйПунктИдентификатор"]));
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ЭтотОбъект[Пункт + "Идентификатор"]);
	ПараметрыОткрытияФормы.Вставить("ПунктТипИдентификатор", ЭтотОбъект[Пункт + "ТипИдентификатор"]);
	ПараметрыОткрытияФормы.Вставить("ИзменениеТипаПунктаЗаблокировано", Элементы[Пункт + "ТипИдентификатор"].ТолькоПросмотр);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.СписокТерминалов", ПараметрыОткрытияФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеСпособаОтгрузки(Значение)
	
	Результат = "";
	
	Поиск = Элементы.ОтправительСпособОтгрузки.СписокВыбора.НайтиПоЗначению(Значение);
	Если Поиск <> Неопределено Тогда
		Результат = Поиск.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеСпособаДоставки(Значение)
	
	Результат = "";
	
	Поиск = Элементы.ПолучательСпособДоставки.СписокВыбора.НайтиПоЗначению(Значение);
	Если Поиск <> Неопределено Тогда
		Результат = Поиск.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьИзменитьЗаказНаДоставку( , Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбработкаНастройкиАвтопересчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	ТребуетсяПересчет = Ложь;
	
	Для Каждого Элемент Из Результат Цикл
		ПоискЭлемента = АвтопересчетСписокКолонок.НайтиПоЗначению(Элемент.Значение);
		Если ПоискЭлемента.Пометка <> Элемент.Пометка Тогда
			ЕстьИзменения = Истина;
			Если Не ПоискЭлемента.Пометка И Элемент.Пометка Тогда
				ТребуетсяПересчет = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПересчет И Не РазмещениеГрузаРучнойВвод Тогда
		
		Обещание = ВопросАсинх(НСтр("ru = 'Показатели грузомест будут пересчитаны. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Ответ = Ждать Обещание;
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Результат Цикл
		АвтопересчетСписокКолонок.НайтиПоЗначению(Элемент.Значение).Пометка = Элемент.Пометка;
	КонецЦикла;
	
	УстановитьОформлениеШапкиРазмещениеГруза();
	УстановитьТолькоПросмотрПоляРазмещениеГруза();
	РазмещениеГрузаРаботаСПоказателями(НовыеПараметрыРаботыСПоказателями(), "ОчиститьПоказатели");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьДанныеЗаказаНаДоставку()
	
	ПараметрыСозданияДанныхЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки();
	
	ПараметрыСозданияДанныхЗаказа.ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.СДЭК;
	ПараметрыСозданияДанныхЗаказа.Организация = ОрганизацияБизнесСетиСсылка;
	ПараметрыСозданияДанныхЗаказа.ИдентификаторДокумента = Новый УникальныйИдентификатор(ИдентификаторЗаказа);
	ПараметрыСозданияДанныхЗаказа.ДокументыОснования = ДокументыОснования.ВыгрузитьЗначения();
	ПараметрыСозданияДанныхЗаказа.Представление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ЭтотОбъект, Истина);
	ПараметрыСозданияДанныхЗаказа.СостояниеИдентификатор = СостояниеИдентификатор;
	ПараметрыСозданияДанныхЗаказа.СостояниеПредставление = СостояниеПредставление;
	ПараметрыСозданияДанныхЗаказа.Номер = НомерЗаказа;
	ПараметрыСозданияДанныхЗаказа.Дата = ДатаЗаказа;
	
	СервисДоставки.СоздатьОбновитьДанныеЗаказа(ПараметрыСозданияДанныхЗаказа);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки, ЕстьИзменения)
	
	ИмяРеквизитаАдресЗначение = Префикс + "Значение";
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(ЭтотОбъект[ИмяРеквизитаАдресЗначение]);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
			
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЭтотОбъект[ИмяРеквизитаАдресЗначение],
				Новый Структура("КодыАдреса", Истина));
			ЭтотОбъект[ИмяРеквизитаАдресЗначение] = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНомерТелефона(Знач Форма, Знач Префикс, ЕстьОшибки = Ложь, Знач ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	Представление = Форма[ИмяРеквизита];
	Значение = Форма[Префикс + "Значение"];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = "";
	Если СтрНайти(ИмяРеквизита, "Отправитель") > 0 Тогда
		ИмяГруппы = "Отправитель";
	ИначеЕсли СтрНайти(ИмяРеквизита, "Получатель") > 0 Тогда
		ИмяГруппы = "Получатель";
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Представление, Значение);
	
	Если СписокОшибок.Количество() > 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ВыводитьПредупреждения И ЕстьОшибки Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректный формат номера телефона в поле ""Телефон"" группы ""%1"".'"),
			ИмяГруппы);
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = ИмяРеквизита;
		Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		
		ТекущаяДата = '00010101';
		АктуализироватьДатуНаКлиенте(ТекущаяДата);
		
		Если ТекущаяДата > ДатаОтгрузки Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru = 'Выбранная дата отгрузки недоступна. Укажите актуальную дату.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВремяОтгрузкиПредставление");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоказателиГрузовыхМест(ЕстьОшибки, ВыводитьПредупреждения)
	
	КонтрольныеРеквизиты = Новый Массив;
	КонтрольныеРеквизиты.Добавить("Вес");
	Если ТипЗаказа = ТипыЗаказовСДЭК.Доставка Тогда // Доставка
		КонтрольныеРеквизиты.Добавить("Описание");
	КонецЕсли;
	
	КонтрольныеРеквизитыСВГХ = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(КонтрольныеРеквизиты);
	КонтрольныеРеквизитыСВГХ.Добавить("Длина");
	КонтрольныеРеквизитыСВГХ.Добавить("Ширина");
	КонтрольныеРеквизитыСВГХ.Добавить("Высота");
	
	РазмещениеГрузаЭлементы = РазмещениеГруза.ПолучитьЭлементы();
	Для Каждого ГрузовоеМесто Из РазмещениеГрузаЭлементы Цикл
		
		Если ПунктВыдачиГрузаТипИдентификатор = 1 Или ГрузовоеМесто.Вес >= 0.1
			Или ГрузовоеМесто.Длина > 0 Или ГрузовоеМесто.Ширина > 0 Или ГрузовоеМесто.Высота > 0 Тогда
			ПроверяемыеРеквизиты = КонтрольныеРеквизитыСВГХ;
		Иначе
			ПроверяемыеРеквизиты = КонтрольныеРеквизиты;
		КонецЕсли;
		
		Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(ГрузовоеМесто[ИмяРеквизита]) Тогда
				ЕстьОшибки = Истина;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru = 'В грузовом месте ""%1"" не заполнено поле ""%2""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ГрузовоеМесто.Наименование,
						ИмяРеквизита);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин Тогда // Интернет-магазин
			Если ГрузовоеМесто.ПолучитьЭлементы().Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru = 'Для грузового места ""%1"" не указан товарный состав. Выберите документ основание'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ГрузовоеМесто.Наименование);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВремяОтгрузки(ЕстьОшибки = Ложь, ВыводитьПредупреждения = Ложь)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1, 1, 1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняОтгрузки = НачалоДня(ДатаОтгрузки);
	ВремяНачалаОжиданияКурьера = Дата(1, 1, 1, 9, 0, 0);
	ВремяЗавершенияПринятияЗаявок = Дата(1, 1, 1, 15, 0, 0);
	ВремяОкончанияОжиданияКурьера = Дата(1, 1, 1, 22, 0, 0);
	ТриЧаса = 3 * 3600;
	
	Если НачалоТекущегоДня = НачалоДняОтгрузки Тогда
		
		Если ТекущееВремя > ВремяОтгрузкиПо Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Конечное время отгрузки %1 должно быть не меньше текущего времени %2'"),
				Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм"), Формат(ТекущееВремя, "ДФ=ЧЧ:мм"));
			ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки,  ЕстьОшибки);
		КонецЕсли;
		
		Если ТекущееВремя > ВремяЗавершенияПринятияЗаявок Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Завершено принятие заявок на текущую дату отгрузки (до %1)'"),
				Формат(ВремяЗавершенияПринятияЗаявок, "ДФ=ЧЧ:мм"));
			ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособОтгрузки = 2 Тогда
		
		Если ВремяОтгрузкиС < ВремяНачалаОжиданияКурьера Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Время начала ожидания курьера %1 должно быть не ранее %2 по местному времени'"),
				Формат(ВремяОтгрузкиС, "ДФ=ЧЧ:мм"), Формат(ВремяНачалаОжиданияКурьера, "ДФ=ЧЧ:мм"));
			ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки, ЕстьОшибки);
		КонецЕсли;
		
		Если ВремяОтгрузкиПо > ВремяОкончанияОжиданияКурьера Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Конечное время отгрузки %1 должно быть меньше %2 по местному времени'"),
				Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм"), Формат(ВремяОкончанияОжиданияКурьера, "ДФ=ЧЧ:мм"));
			ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки, ЕстьОшибки);
		КонецЕсли;
		
		Если ВремяОтгрузкиПо - ВремяОтгрузкиС < ТриЧаса Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Разница между начальным %1 и конечным %2 временем отгрузки должна быть не менее 3-х часов.
				|Скорректируйте время отгрузки'"),
				Формат(ВремяОтгрузкиС, "ДФ=ЧЧ:мм"), Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм"));
			ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуПроверкиВремяОтгрузки(ВыводитьПредупреждения, ТекстОшибки, ЕстьОшибки = Ложь)
	
	ЕстьОшибки = Истина;
	
	Если ВыводитьПредупреждения Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ВремяОтгрузкиПредставление");
	КонецЕсли;
	
КонецПроцедуры

// Обязательные реквизиты для перехода на страницу.
// 
// Параметры:
//  НомерШага - Число - Тарифы и Услуги - 2, Проверка - 3, Отправка - 4
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Обязательные реквизиты для перехода на страницу
&НаКлиенте
Функция ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага)
	
	ОбязательныеРеквизиты = Новый СписокЗначений;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Или НомерШага < 1 Тогда
		Возврат ОбязательныеРеквизиты;
	КонецЕсли;
	
	ИндексСтраницыСпособыОтгрузкиДоставки = "0";
	Если Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаСтраницы.ТекущаяСтраница) > 1 Тогда
		ИндексСтраницыСпособыОтгрузкиДоставки = "2";
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ОрганизацияБизнесСетиСсылка", НСтр("ru='Организация Бизнес-сети'"));
	ОбязательныеРеквизиты.Добавить("0.ТипЗаказа", НСтр("ru='Тип заказа'"));
	ОбязательныеРеквизиты.Добавить("0.ЗаказчикРоль", НСтр("ru='Роль заказчика'"));
	ОбязательныеРеквизиты.Добавить("0.ОтправительКонтрагентНаименование", НСтр("ru='Отправитель'"));
	ОбязательныеРеквизиты.Добавить("0.ПолучательКонтрагентНаименование", НСтр("ru='Получатель'"));
	ОбязательныеРеквизиты.Добавить("0.ДатаОтгрузки", НСтр("ru='Дата отгрузки'"));
	ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ОтправительНаселенныйПунктИдентификатор",
		НСтр("ru='Населенный пункт отправки'"));
	ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ПолучательНаселенныйПунктИдентификатор",
		НСтр("ru='Населенный пункт доставки'"));
	
	Если НомерШага > 2 Тогда // Проверка и Отправка
		
		Если ЗначениеЗаполнено(ОтправительКонтрагентНаименование) Тогда
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо отправителя'"));
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица отправителя'"));
			Если ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
				ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление",
					НСтр("ru='Дополнительный телефон контактного лица отправителя'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучательКонтрагентНаименование) Тогда
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо получателя'"));
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица получателя'"));
			Если ПолучательКонтактноеЛицоТелефонДополнительныйДоступен Тогда
				ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление",
					НСтр("ru='Дополнительный телефон контактного лица получателя'"));
			КонецЕсли;
		КонецЕсли;
		
		Если СпособОтгрузки = 1 Тогда
			ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ПунктПриемаГрузаНаименование",
				НСтр("ru='Пункт приема'"));
		Иначе
			ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ОтправительАдресПредставление",
				НСтр("ru='Адрес отправителя'"));
		КонецЕсли;
		
		Если СпособДоставки = 1 Тогда
			ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ПунктВыдачиГрузаНаименование",
				НСтр("ru='Пункт выдачи'"));
		Иначе
			ОбязательныеРеквизиты.Добавить(ИндексСтраницыСпособыОтгрузкиДоставки + ".ПолучательАдресПредставление",
				НСтр("ru='Адрес получателя'"));
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерШага > 3 Тогда // Отправка
		
		Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			
			Если СпособОтгрузки = 2 Тогда
				ОбязательныеРеквизиты.Добавить("0.ВремяОтгрузкиПредставление", НСтр("ru='Время отгрузки'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки = Ложь, ВыводитьПредупреждения = Истина)
	
	СервисДоставкиСлужебный.ПроверитьРеквизитыАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРеквизитыКонтрагентов(Знач Форма, ЕстьОшибки = Ложь, Знач ВыводитьПредупреждения = Истина)
	
	ПроверитьРеквизитыКонтрагента(Форма, "ОтправительКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыКонтрагента(Форма, "ПолучательКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРеквизитыКонтрагента(Знач Форма, Знач Префикс, ЕстьОшибки = Ложь, Знач ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Наименование";
	КонтрагентСсылка = Форма[Префикс + "Ссылка"];
	КонтрагентНаименование = Форма[Префикс + "Наименование"];
	КонтрагентЮрФизЛицо = Форма[Префикс + "ЮрФизЛицо"];
	
	ЭтоОтправитель = СтрНайти(Префикс, "Отправитель") > 0;
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) И КонтрагентНаименование = "" Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = Новый СписокЗначений;
	
	УчастникГрузоперевозки = СтрЗаменить(Префикс, "Контрагент", "");
	
	ТекстОшибки = НСтр("ru = 'Некорректное значение реквизита ""%1"" участника грузоперевозки в поле ""%2"".'");
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) И КонтрагентНаименование = "" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, НСтр("ru='Наименование'"), УчастникГрузоперевозки);
			СписокОшибок.Добавить(ТекстСообщения, ИмяРеквизита);
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, НСтр("ru='Вид контрагента'"), УчастникГрузоперевозки);
		СписокОшибок.Добавить(ТекстСообщения, ИмяРеквизита);
	КонецЕсли;
	
	Если СписокОшибок.Количество() = 0 И КонтрагентЮрФизЛицо = 2 И ЭтоОтправитель Тогда
		ТекстСообщения = НСтр("ru='Отправитель не может быть физическим лицом'");
		СписокОшибок.Добавить(ТекстСообщения, ИмяРеквизита);
	КонецЕсли;
	
	Если СписокОшибок.Количество() > 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ВыводитьПредупреждения Тогда
		Для Каждого Элемент Из СписокОшибок Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Элемент.Значение;
			Сообщение.Поле = Элемент.Представление;
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеКонтактныхЛиц(ЕстьОшибки, Знач ВыводитьПредупреждения)
	
	ПроверитьНомерТелефона(ЭтотОбъект, "ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ПроверитьНомерТелефона(ЭтотОбъект, "ОтправительКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
	ПроверитьНомерТелефона(ЭтотОбъект, "ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ПолучательКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ПроверитьНомерТелефона(ЭтотОбъект, "ПолучательКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
	ПроверитьEmail("ОтправительКонтактноеЛицоEmail", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьEmail("ПолучательКонтактноеЛицоEmail", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьEmail(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс;
	ЭтоEmailОтправителя = (СтрНайти(ИмяРеквизита, "Отправитель") > 0);
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибкиЛокально = Ложь;
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Представление) Тогда
		ЕстьОшибки = Истина;
		ЕстьОшибкиЛокально = Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ВыводитьПредупреждения И ЕстьОшибкиЛокально Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Адрес электронной почты группы ""%1"" содержит ошибки.'"),
			?(ЭтоEmailОтправителя, "Отправитель", "Получатель"));
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуШагуМастера(ВыводитьПредупреждения, ПолучитьТарифыАвтоматически = Ложь)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(3, Отказ, ВыводитьПредупреждения, ПолучитьТарифыАвтоматически);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуОсновное()
	
	ПереключитьСтраницу(Элементы, Команды.ПерейтиОсновное.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПараметрыГруза()
	
	ПереключитьСтраницу(Элементы, Команды.ПерейтиПараметрыГруза.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуТарифыИУслуги(ПолучитьТарифыАвтоматически = Ложь, Отказ = Ложь, РазрешеноПолучениеТарифов = Истина)
	
	АвтопересчетПоВсемТарифамОбязательный = Кэш.АвтопересчетПоВсемТарифамОбязательный;
	Если АвтопересчетПоВсемТарифамОбязательный Тогда
		Кэш.АвтопересчетПоВсемТарифамОбязательный = Ложь;
	Иначе
		АвтопересчетПоВсемТарифамОбязательный = ПерейтиКШагуТарифыИУслугиНаСервере();
	КонецЕсли;
	
	Если (ПолучитьТарифыАвтоматически Или АвтопересчетПоВсемТарифамОбязательный) И РазрешеноПолучениеТарифов Тогда
		ПолучитьТарифы(АвтопересчетПоВсемТарифамОбязательный);
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	СформироватьИнформациюПоТарифу();
	ПереключитьСтраницу(Элементы, Команды.ПерейтиТарифыИУслуги.Имя);
	
КонецПроцедуры

&НаСервере
Функция ПерейтиКШагуТарифыИУслугиНаСервере()
	
	УстановитьОтборыТарифовНаСервере(Ложь);
	
	Возврат Тарифы.Количество() = Тарифы.НайтиСтроки(Новый Структура("Стоимость", 0)).Количество();
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКШагуПроверка()
	
	Отказ = Ложь;
	ОбработатьВыборТарифа( , Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьИтоговуюИнформацию();
	ПереключитьСтраницу(Элементы, Команды.ПерейтиКарточка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПунктПриемаВыдачи(Префикс, СброситьТип = Ложь, ОбновитьТарифы = Ложь)
	
	ИмяРеквизита = Префикс + "Груза";
	
	ЭтотОбъект[ИмяРеквизита + "Адрес"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Телефон"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Описание"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Наименование"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Идентификатор"] = Неопределено;
	Если СброситьТип Тогда
		ЭтотОбъект[ИмяРеквизита + "ТипИдентификатор"] = Неопределено;
	КонецЕсли;
	ЭтотОбъект[ИмяРеквизита + "НаселенныйПунктИдентификатор"] = Неопределено;
	
	УстановитьОтборыТарифов( , ОбновитьТарифы);
	
КонецПроцедуры

// Дополняет "дерево услуг тарифов" колонками, показывающими используется услуга в указанном тарифе или нет.
// Далее эти колонки используются в качестве отбора для отображения услуг при активизации строки табличной части "Тарифы".
&НаСервере
Процедура ДеревоУслугТарифовДополнитьДаннымиТарифов()
	
	Если Кэш.ДеревоУслугТарифовЗаполнено Тогда
		Возврат;
	КонецЕсли;
	Кэш.ДеревоУслугТарифовЗаполнено = Истина;
	
	ОписаниеУслугТарифов = РеквизитФормыВЗначение("ДеревоУслугТарифов");
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(9));
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "СкрытиеСтрокДеревоУслугТарифов" Тогда
			ЭлементУсловногоОформления.Отбор.Элементы.Очистить();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторТекущегоТарифа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	Для Каждого ТекущийТариф Из Тарифы Цикл
		
		ИмяКолонкиТарифа = "Тариф_" + ТекущийТариф.Идентификатор;
		
		РеквизитФормы = Новый РеквизитФормы(ИмяКолонкиТарифа, ОписаниеТиповСтрока, "ДеревоУслугТарифов");
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ОписаниеУслугТарифов.Колонки.Добавить(ИмяКолонкиТарифа, ОписаниеТиповСтрока);
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоУслугТарифов.Тариф_" + ТекущийТариф.Идентификатор);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторТекущегоТарифа");
		
		Для Каждого ТекущаяКатегория Из ОписаниеУслугТарифов.Строки Цикл
			Для Каждого ТекущаяУслуга Из ТекущаяКатегория.Строки Цикл
				
				Услуга = ОпределитьЭлементКоллекции(ТекущийТариф.ДополнительныеУслуги, ТекущаяУслуга.Идентификатор);
				ИдентификаторТарифа = ?(Услуга = Неопределено, "", ТекущийТариф.Идентификатор);
				ТекущаяУслуга[ИмяКолонкиТарифа] = ИдентификаторТарифа;
				
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.Строки Цикл
					ТекущееСвойство[ИмяКолонкиТарифа] = ИдентификаторТарифа;
				КонецЦикла;
				
				ТекущаяКатегория[ИмяКолонкиТарифа] = Макс(ТекущаяКатегория[ИмяКолонкиТарифа], ИдентификаторТарифа);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЗначениеВРеквизитФормы(ОписаниеУслугТарифов, "ДеревоУслугТарифов");
	
КонецПроцедуры

// Получить выбранные услуги.
// 
// Параметры:
//  Идентификатор - Строка, Неопределено - Идентификатор тарифа.
//  Если Неопределено - выбранные услуги по всем тарифам;
//  Если Пустая Строка - выбранные услуги по идентификатору выделенного тарифа;
//  Если Не Пустая Строка - выбранные услуги по переданному идентификатору тарифа.
//  ТолькоВыбранные - Булево - Признак выбранных (используемых) услуг
// 
// Возвращаемое значение:
//  Массив из СтрокаДереваЗначений - Выбранные услуги в дереве услуг тарифов
&НаСервере
Функция ПолучитьУслугиТарифов(Знач Идентификатор = "", Знач ТолькоВыбранные = Истина)
	
	Если Идентификатор = "" Тогда
		Идентификатор = ИдентификаторТекущегоТарифа;
	КонецЕсли;
	
	ОписаниеУслугТарифов = РеквизитФормыВЗначение("ДеревоУслугТарифов");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСтроки", 1);
	Если ТолькоВыбранные Тогда
		Отбор.Вставить("Использовать", Истина);
	КонецЕсли;
	Если ТипЗнч(Идентификатор) = Тип("Строка") И Не ПустаяСтрока(Идентификатор) Тогда
		Отбор.Вставить("Тариф_" + Идентификатор, Идентификатор);
	КонецЕсли;
	
	Возврат ОписаниеУслугТарифов.Строки.НайтиСтроки(Отбор, Истина);
	
КонецФункции

&НаКлиенте
Процедура ДеревоУслугТарифовРеквизитыПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать Тогда
		НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокиДерева = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					Если СтрокаДерева.Идентификатор = ТекущаяСтрока.ИдентификаторНесовместимойУслуги Тогда
						СтрокаДерева.Использовать = Ложь;
						Элементы.ДеревоУслугТарифов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Для Каждого ТекущееСвойство Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Если Не ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
				УслугаОснование = УслугиТарифов.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторУслугТарифов);
				СвойствоОснование = УслугаОснование.Свойства.НайтиПоИдентификатору(ТекущееСвойство.ИдентификаторУслугТарифов);
				ТекущееСвойство.Значение = СвойствоОснование.Значение;
			КонецЕсли;
		КонецЦикла;
		Элементы.ДеревоУслугТарифов.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ДеревоУслугТарифов.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	СброситьТарифПродолжить();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПараметрыТарифов", 0.1, Истина);
	
КонецПроцедуры

// Определяет единственный элемент коллекции по значению и свойству.
// 
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция
//  Значение - Произвольный - Значение
//  Свойство - Строка - Свойство
// 
// Возвращаемое значение:
//  Неопределено, ДанныеФормыЭлементКоллекции - Результат поиска элемента в коллекции
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьЭлементКоллекции(Знач Коллекция, Знач Значение, Знач Свойство = "Идентификатор")
	
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) <> Тип("Строка") Или ПустаяСтрока(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Поиск = Коллекция.НайтиСтроки(Новый Структура(Свойство, Значение));
	
	Если Поиск.Количество() = 1 Тогда
		Результат = Поиск[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУслугиВПриемнике(Приемник, ДобавлятьОбязательные = Ложь)
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Использовать Или (ТекущаяУслуга.Обязательная И ДобавлятьОбязательные) Тогда
				Если ТекущаяУслуга.Автоматическая Тогда
					Продолжить;
				КонецЕсли;
				НоваяУслуга = Приемник.Добавить();
				НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
				НоваяУслуга.Использовать = ТекущаяУслуга.Использовать;
				НоваяУслуга.Свойства = Новый Массив;
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.ПолучитьЭлементы() Цикл
					ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
					ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
					ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
					НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВГХВПриемнике(ГрузовыеМестаВГХ, Товары = Неопределено)
	
	Артикулы = Новый Массив;
	
	Для Каждого ГрузовоеМесто Из РазмещениеГруза.ПолучитьЭлементы() Цикл
		НовыйВГХГрузовогоМеста = СервисДоставки.НовыйПараметрыЭлементаГрузовогоМеста();
		ЗаполнитьЗначенияСвойств(НовыйВГХГрузовогоМеста, ГрузовоеМесто);
		КонвертироватьВесИзКгВГраммы(НовыйВГХГрузовогоМеста);
		ГрузовыеМестаВГХ.Добавить(НовыйВГХГрузовогоМеста);
		Если Товары <> Неопределено Тогда
			Для Каждого ТекущаяПозиция Из ГрузовоеМесто.ПолучитьЭлементы() Цикл
				
				НоваяПозиция = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПозиция, ТекущаяПозиция);
				КонвертироватьВесИзКгВГраммы(НоваяПозиция);
				КонвертироватьВесИзКгВГраммы(НоваяПозиция, "ВесЕдиницыТовара");
				
				Если Артикулы.Найти(НоваяПозиция.Артикул) = Неопределено Тогда
					Артикулы.Добавить(НоваяПозиция.Артикул);
				Иначе
					СтрокаЗначение = СтрШаблон("%1%2", НоваяПозиция.ИдентификаторСтроки, НоваяПозиция.ИдентификаторДокументаОснования);
					НоваяПозиция.Артикул = СтрШаблон("%1 %2", СокрЛП(НоваяПозиция.Артикул), ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрокаЗначение));
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаселенныеПункты(СтрокаПоиска, ОрганизацияБизнесСетиСсылка)

	Результат = Новый Структура("НаселенныеПункты, НаселенныеПунктыДанные", Новый СписокЗначений, Новый Соответствие);
	
	ПараметрыЗапроса = СервисДоставкиКлиентСервер.НовыйПараметрыЗапросаПолучитьНаселенныеПункты();
	
	ПараметрыЗапроса.СтрокаПоиска = СтрокаПоиска;
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК());
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
	
	РезультатЗапроса = СервисДоставки.ПолучитьНаселенныеПункты(ПараметрыЗапроса);
	
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса);
	
	СервисДоставки.СтрНайтиИВыделитьОформлениемСписок(Результат.НаселенныеПункты, СтрокаПоиска, Ложь);
	
	Возврат Результат;
	
КонецФункции

// Новые параметры работы с показателями.
// 
// Параметры:
//  ТолькоИзмененные - Булево - Только измененные
//  Показатели - Строка - Показатели
//  Ключ - Строка - Произвольный идентификатор операции
// 
// Возвращаемое значение:
//  Структура - Новые параметры работы с показателями:
// * ТолькоИзмененные - Булево - 
// * Показатели - Строка - 
// * ОчищатьОписание - Булево - 
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыРаботыСПоказателями(ТолькоИзмененные = Ложь, Показатели = "", Ключ = "")
	
	ПараметрыРаботыСПоказателями = Новый Структура;
	
	ПараметрыРаботыСПоказателями.Вставить("ТолькоИзмененные", ТолькоИзмененные);
	ПараметрыРаботыСПоказателями.Вставить("Показатели", Показатели);
	ПараметрыРаботыСПоказателями.Вставить("ОчищатьОписание", ?(Ключ = "ОчиститьДокументыОснования", Истина, Ложь));

	Возврат ПараметрыРаботыСПоказателями;
	
КонецФункции

// Выполнение набор методов по показателям размещения груза.
// 
// Параметры:
//  ПараметрыРаботыСПоказателями - Неопределено, Структура - Параметры работы:
// * ТолькоИзмененные - Булево - 
// * Показатели - Строка - 
// * ОчищатьОписание - Булево - 
//  ИсключаемыеМетоды - Строка - Исключаемые методы из набора выполнения через запятую
//  КлючОперации - Строка - Ключ операции
&НаСервере
Процедура РазмещениеГрузаРаботаСПоказателями(Знач ПараметрыРаботыСПоказателями = Неопределено, Знач ИсключаемыеМетоды = "",
	Знач КлючОперации = "")
	
	Если ТипЗнч(ПараметрыРаботыСПоказателями) <> Тип("Структура") Тогда
		ПараметрыРаботыСПоказателями = Новый Структура;
	КонецЕсли;
	
	ТолькоИзмененные = ПараметрыРаботыСПоказателями.ТолькоИзмененные;
	
	Если СтрНайти(ИсключаемыеМетоды, "ОчиститьПоказатели") = 0 Тогда
		ОчиститьПоказателиГрузовыхМест(ТолькоИзмененные, ПараметрыРаботыСПоказателями.ОчищатьОписание);
	КонецЕсли;
	
	Если СтрНайти(ИсключаемыеМетоды, "РассчитатьПоказатели") = 0 Тогда
		Показатели = ПараметрыРаботыСПоказателями.Показатели;
		РассчитатьПоказателиГрузовыхМест(ТолькоИзмененные, Показатели, КлючОперации);
	КонецЕсли;
	
	Если СтрНайти(ИсключаемыеМетоды, "РассчитатьСводнуюИнформацию") = 0 Тогда
		РассчитатьСводнуюИнформациюПоРаспределениюГруза();
	КонецЕсли;
	
	РазмещениеГрузаМестаКПересчету.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеШапкиРазмещениеГруза()
	
	Для Каждого ОписаниеКолонки Из АвтопересчетСписокКолонок Цикл
		ИмяКолонки = "РазмещениеГруза" + ОписаниеКолонки.Значение;
		Если ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин И ОписаниеКолонки.Значение = "Стоимость" Тогда
			Элементы.РазмещениеГрузаСтоимость.КартинкаШапки = Новый Картинка;
		ИначеЕсли ОписаниеКолонки.Пометка И Не РазмещениеГрузаРучнойВвод Тогда
			Элементы[ИмяКолонки].КартинкаШапки = БиблиотекаКартинок.Калькулятор;
		Иначе
			Элементы[ИмяКолонки].КартинкаШапки = БиблиотекаКартинок.Изменить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьВесИзГраммыВКгДеревоЗначений(Грузы)
	
	Для Каждого ГрузовоеМесто Из Грузы.Строки Цикл
		КонвертироватьВесИзГраммыВКг(ГрузовоеМесто);
		КонвертироватьВесИзГраммыВКг(ГрузовоеМесто, "ВесЕдиницыТовара");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьВесИзКгВГраммы(Родитель, Подчиненный = "Вес")
	Родитель[Подчиненный] = Родитель[Подчиненный] * 1000;
КонецПроцедуры

&НаСервере
Процедура КонвертироватьВесИзГраммыВКг(Родитель, Подчиненный = "Вес")
	Родитель[Подчиненный] = Родитель[Подчиненный] * 0.001;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкорректироватьСписокКолонокАвтопересчета(СписокЗначений, ЭтоДоставка = Ложь)
	
	ЕстьСтоимость = СписокЗначений.НайтиПоЗначению("Стоимость");
	
	Если ЭтоДоставка Тогда
		Если ЕстьСтоимость = Неопределено Тогда
			СписокЗначений.Добавить("Стоимость", НСтр("ru = 'Объявленная стоимость'"), Истина);
		КонецЕсли;
	Иначе
		Если ЕстьСтоимость <> Неопределено Тогда
			СписокЗначений.Удалить(ЕстьСтоимость);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеНаОснованииДокументов()
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ПроверитьРеквизитыКонтрагентов(ЭтотОбъект);
		ПроверитьНомерТелефона(ЭтотОбъект, "ОтправительКонтактноеЛицоТелефон");
		ПроверитьНомерТелефона(ЭтотОбъект, "ПолучательКонтактноеЛицоТелефон");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрПоляРазмещениеГруза();
	
	Элемент = Элементы.РазмещениеГруза;
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		
		Поле = Элемент.ТекущийЭлемент;
		ПолеТолькоПросмотр = Ложь;
		
		Если Поле = Элементы.РазмещениеГрузаВес Или Поле = Элементы.РазмещениеГрузаДлина
			Или Поле = Элементы.РазмещениеГрузаШирина Или Поле = Элементы.РазмещениеГрузаВысота
			Или Поле = Элементы.РазмещениеГрузаСтоимость Тогда
			
			Если Поле = Элементы.РазмещениеГрузаСтоимость И ТипЗаказа = ТипыЗаказовСДЭК.ИнтернетМагазин Тогда
				ПолеТолькоПросмотр = Истина;
			Иначе
				ДанныеСтроки = АвтопересчетСписокКолонок.НайтиПоЗначению(СтрЗаменить(Поле.Имя, "РазмещениеГруза", ""));
				Если ДанныеСтроки <> Неопределено Тогда
					ПолеТолькоПросмотр = ДанныеСтроки.Пометка;
				КонецЕсли;
			КонецЕсли;
			Поле.ТолькоПросмотр = Не РазмещениеГрузаРучнойВвод И ПолеТолькоПросмотр;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	Адресат = ОпределитьАдресата(Элемент.Имя);
	
	ЭтотОбъект[Адресат + "АдресЗначение"] = "";
	ЭтотОбъект[Адресат + "АдресВладелец"] = "";
	ЭтотОбъект[Адресат + "АдресВладелецНаименование"] = "";
	ЭтотОбъект[Адресат + "АдресПредставление"] = СокрЛП(ЭтотОбъект[Адресат + "АдресПредставление"]);
	
	УстановитьВидимостьПредупрежденийПоАдресам(Адресат);
	ЗарегистрироватьИзменениеОтборов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПриИзменении()
	
	УстановитьВидимостьСпособовОтгрузкиДоставки(Элементы, СпособОтгрузки, СпособДоставки);
	УстановитьОтборыТарифов();
	РазвернутьРодителейСпискаСВыбраннымиСтроками();
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ПолучитьНаселенныеПункты(Текст, ОрганизацияБизнесСетиСсылка);
	Если Результат <> Неопределено Тогда
		ОбработатьНаселенныеПунктыАвтоподбор(Элемент, Кэш, Результат.НаселенныеПунктыДанные);
		ДанныеВыбора = Результат.НаселенныеПункты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтрокуСостоянияПоТарифам(Знач Тарифы, Знач ТарифыОтборПоКлючевымПараметрам, КоличествоПодходящихТарифов = 0)
	
	КоличествоТарифов = Тарифы.НайтиСтроки(Новый Структура("Видимость", Истина)).Количество();
	КоличествоПодходящихТарифов = Тарифы.НайтиСтроки(ТарифыОтборПоКлючевымПараметрам).Количество();
	
	СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Доступно: %1 | Подходящих: %2'"),
		КоличествоТарифов, КоличествоПодходящихТарифов);
	
	Возврат СтрокаСостояния;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТариф(Тариф, Данные, АвтоматическиеУслуги)
	
	ЗаполнитьЗначенияСвойств(Тариф, Данные);
	Тариф.Видимость = Истина;
	Тариф.Срок = СтрШаблон("%1 - %2", Тариф.МинимальныйСрок, Тариф.МаксимальныйСрок);
	
	Для Каждого ТекущаяУслуга Из Данные.ДетализацияСтоимости Цикл
		УслугаИдентификатор = ТекущаяУслуга["Идентификатор"];
		Услуга = ОпределитьЭлементКоллекции(Тариф.ДополнительныеУслуги, УслугаИдентификатор);
		Если Услуга <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Услуга, ТекущаяУслуга);
			Если Услуга.Автоматическая Тогда
				АвтоматическиеУслуги.Вставить(УслугаИдентификатор, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьАвтоматическиеУслуги(ДеревоУслугТарифов, АвтоматическиеУслуги)
	
	Для Каждого ТекущаяКатегория Из ДеревоУслугТарифов.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Автоматическая Тогда
				ТекущаяУслуга.Использовать = АвтоматическиеУслуги[ТекущаяУслуга["Идентификатор"]] = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредупрежденийПоАдресам(Адресат = "Все")
	
	Если Адресат = "Все" Тогда
		УстановитьВидимостьПредупрежденийПоАдресам("Отправитель");
		УстановитьВидимостьПредупрежденийПоАдресам("Получатель");
		Возврат;
	КонецЕсли;
	
	Адрес = ЭтотОбъект[Адресат + "АдресПредставление"];
	НаселенныйПункт = Кэш.НаселенныеПункты[ЭтотОбъект[Адресат + "НаселенныйПунктИдентификатор"]];
	
	Видимость = АдресОтноситсяКНаселенномуПункту(Адрес, НаселенныйПункт);
	
	Элементы[Адресат + "АдресПредупреждение"].Видимость = Не Видимость;
	Элементы[Адресат + "АдресПредупреждение1"].Видимость = Не Видимость;
	Если Адресат = "Отправитель" Тогда
		Элементы.ДекорацияОтступОтправительАдрес.Видимость = Видимость;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АдресОтноситсяКНаселенномуПункту(Знач Адрес, Знач НаселенныйПункт)
	
	Результат = Истина;
	
	Если Не ПустаяСтрока(Адрес) И ТипЗнч(НаселенныйПункт) = Тип("Строка") Тогда
		Адрес = НРег(Адрес);
		ЧастиНаселенногоПункта = СтрРазделить(НРег(НаселенныйПункт), ",", Ложь);
		Для Каждого Элемент Из ЧастиНаселенногоПункта Цикл
			Если СтрНайти(Адрес, СокрЛП(Элемент)) = 0 Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеТарифов(СкрытьТарифы = Ложь, ИдетПересчет = Ложь)
	
	ДоступныеТарифы = Тарифы.НайтиСтроки(Новый Структура("Видимость", Истина));
	Для Каждого Тариф Из ДоступныеТарифы Цикл
		ОбновитьДанныеТарифа(Тариф, СкрытьТарифы, ИдетПересчет);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТарифа(Тариф, СкрытьТарифы = Ложь, ИдетПересчет = Ложь)
	
	Если ИдетПересчет Тогда
		Тариф.Стоимость = 1;
	Иначе
		Тариф.Стоимость = 0;
	КонецЕсли;
	
	Если СкрытьТарифы Тогда
		Тариф.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти