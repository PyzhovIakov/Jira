
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Идентификатор", Идентификатор);
	
	ДоступноРедактирование = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	НастроитьФормуПоТипуГрузоперевозки();
	УстановитьУсловноеОформление();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслугиПоУмолчанию

&НаКлиенте
Процедура УслугиПоУмолчаниюИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		
		СтрокаДерева = УслугиПоУмолчанию.НайтиПоИдентификатору(Элементы.УслугиПоУмолчанию.ТекущаяСтрока);
		Если СтрокаДерева <> Неопределено Тогда
			Родитель = СтрокаДерева.ПолучитьРодителя();
			Родитель.Использовать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = УслугиПоУмолчанию.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) 
		И ТекущиеДанные.ТипСтроки = 1 
		И ДоступноРедактирование Тогда
		ТекущиеДанные.Использовать = Истина;
		ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если Элементы.УслугиПоУмолчанию.ТекущийЭлемент = Элементы.УслугиПоУмолчаниюПоказыватьИнформацию
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
		ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = УслугиПоУмолчанию.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТерминалыПоУмолчанию

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаправлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	ЗначениеСписка = Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	Если ЗначениеСписка = Неопределено Тогда
		ПараметрыСтроки.Направление = 0;
		ПараметрыСтроки.НаправлениеПредставление = "";
	Иначе
		Если ПараметрыСтроки.Направление <> ВыбранноеЗначение Тогда
			ПараметрыСтроки.Направление = ВыбранноеЗначение;
			ПараметрыСтроки.НаправлениеПредставление = ЗначениеСписка.Представление;
			
			ПараметрыСтроки.Идентификатор = "";
			ПараметрыСтроки.Наименование = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаправлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
	ПараметрыСтроки.Идентификатор = "";
	ПараметрыСтроки.Наименование = "";
	ПараметрыСтроки.Направление = 0;
	ПараметрыСтроки.НаправлениеПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюАдресПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
	ПараметрыСтроки.Идентификатор = "";
	ПараметрыСтроки.Наименование = "";
	ПараметрыСтроки.АдресЗначение = 0;
	ПараметрыСтроки.АдресПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюАдресПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторСтроки = Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока;
	ПараметрыСтроки = Элементы.ТерминалыПоУмолчанию.ТекущиеДанные;
	Если ЗначениеЗаполнено(ПараметрыСтроки.Направление)
		И ЗначениеЗаполнено(ПараметрыСтроки.АдресЗначение) Тогда
		ТерминалНачалоВыбора(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(Элементы.ТерминалыПоУмолчанию.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТарифПоУмолчанию(Команда)
	
	Если ПоУмолчанию Тогда
		ВыполнитьЗапросСброситьТарифПоУмолчанию();
	Иначе
		ВыполнитьЗапросУстановитьТарифПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВыполнитьЗапросЗаписатьТариф(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполнитьЗапросЗаписатьТариф();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;

	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузки;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ОбработатьРезультатМенеджераДлительныхОпераций(Результат.АдресРезультата);
	Иначе
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
			
			Если Не Операция.Значение Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкаПолученияДанных;
			Иначе
				РазвернутьСвойстваДляИспользуемыхУслуг();
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа() Тогда
			
			ЗагрузитьРезультатСохраненияПараметровТарифа(РезультатОперации, ОперацияВыполнена);
			
			Если ОперацияВыполнена
				И ДополнительныеПараметры.Свойство("ЗакрытьФорму")
				И ДополнительныеПараметры.ЗакрытьФорму = Истина Тогда
				Закрыть();
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
			
			ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(РезультатОперации, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
			
			ЗагрузитьРезультатСброситьТарифаПоУмолчанию(РезультатОперации, ОперацияВыполнена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу());
	Если ДоступноРедактирование И Не СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов());
	КонецЕсли;
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш = Новый Структура("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросУстановитьТарифПоУмолчанию()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Установка тарифа по умолчанию'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросСброситьТарифПоУмолчанию()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Сброс тарифа по умолчанию'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗаписатьТариф(ЗакрытьФорму = Ложь)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеКарточкиТарифа(Отказ);
	
	Если Не Отказ Тогда
		
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа());
		ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Сохранение параметров тарифа'");
		ПараметрыОперации.Вставить("Идентификатор", Идентификатор);
		ПараметрыОперации.Вставить("ЗакрытьФорму", ЗакрытьФорму);
		
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьДанныеТарифа(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьУслугиТарифов();
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
			Операция.Значение = ПараметрыЗапросаУстановитьСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
			Операция.Значение = ПараметрыЗапросаУстановитьСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа() Тогда
			Операция.Значение = ПараметрыЗапросаСохранитьПараметрыТарифа(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДанныеТарифа(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДанныеПоТарифу();
	
	ПараметрыЗапроса.Идентификатор = Идентификатор;
	
	Возврат ПараметрыЗапроса;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаСохранитьПараметрыТарифа(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаСохранитьПараметрыТарифа();
	
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("ФормаОплаты", ФормаОплаты);
	
	УзлыДереваУслуг = УслугиПоУмолчанию.ПолучитьЭлементы();
	Для Каждого ТекущийУзел Из УзлыДереваУслуг Цикл
		КатегорииДереваУслуг = ТекущийУзел.ПолучитьЭлементы();
		Для Каждого ТекущаяКатегория Из КатегорииДереваУслуг Цикл
			УслугиКатегории = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из УслугиКатегории Цикл
				Если ТекущаяУслуга.Использовать Тогда
					НоваяУслуга = ПараметрыЗапроса.Услуги.Добавить();
					НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
					НоваяУслуга.Свойства = Новый Массив();
					
					СвойстваУслуги = ТекущаяУслуга.ПолучитьЭлементы();
					Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
						ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
						ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
						ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
						НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекущийТерминал Из ТерминалыПоУмолчанию Цикл
		НоваяСтрока = ПараметрыЗапроса.Терминалы.Добавить();
		НоваяСтрока.Идентификатор = ТекущийТерминал.Идентификатор;
		НоваяСтрока.Направление = ТекущийТерминал.Направление;
		НоваяСтрока.АдресПредставление = ТекущийТерминал.АдресПредставление;
		НоваяСтрока.АдресЗначение = ТекущийТерминал.АдресЗначение;
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаУстановитьСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию();
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ?(ПоУмолчанию, "", Идентификатор));
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Функция ОбработатьРезультатМенеджераДлительныхОпераций(АдресРезультата)
	
	РезультатМенеджера = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		Результат = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
			
			ЗагрузитьРезультатПолученияДанныхТарифов(Результат, ОперацияВыполнена);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
			
			ЗагрузитьРезультатПолученияУслугТарифов(Результат, ОперацияВыполнена);
			
		КонецЕсли;
		
		Операция.Значение = ОперацияВыполнена;
		
	КонецЦикла;
	
	Возврат РезультатМенеджера;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПолученияДанныхТарифов(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Данные") Тогда
			Данные = Результат.Данные;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Данные);
			
			Если ТипЗнч(Данные.ДоступныеФормыОплаты) = Тип("Массив") Тогда
				ДоступныеФормыОплаты.ЗагрузитьЗначения(Данные.ДоступныеФормыОплаты);
			КонецЕсли;
			
			Если Результат.Данные.Свойство("УслугиТарифа") Тогда
				СформироватьУслугиПоУмолчанию(Результат.Данные.УслугиТарифа);
			КонецЕсли;
			
			Если Результат.Данные.Свойство("ТерминалыТарифа") Тогда
				ТерминалыТарифа = Результат.Данные.ТерминалыТарифа;
				Для Каждого ТекущийТерминал Из ТерминалыТарифа Цикл
					НоваяСтрока = ТерминалыПоУмолчанию.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийТерминал);
					НоваяСтрока.НаправлениеПредставление =
						Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора.НайтиПоЗначению(НоваяСтрока.Направление);
				КонецЦикла;
			КонецЕсли;
			
			СформироватьЗаголовокФормы();
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СформироватьКарточкуТарифа();
		СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
		ЗаполнитьЗначенияСписковВыбора();
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияУслугТарифов(Результат, ОперацияВыполнена = Истина)
	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("СписокНесовместимыеУслуги") Тогда
				НесовместимыеУслуги.Очистить();
				Для Каждого ТекущаяУслуга Из Результат.СписокНесовместимыеУслуги Цикл
					НоваяУслуга = НесовместимыеУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
				КонецЦикла;;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСохраненияПараметровТарифа(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОперацияВыполнена") Тогда
			ОперацияВыполнена = Результат.ОперацияВыполнена;
			Модифицированность = Ложь;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОперацияВыполнена") Тогда
			ОперацияВыполнена = Результат.ОперацияВыполнена;
			ПоУмолчанию = Истина;
			СформироватьЗаголовокФормы();
			СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСброситьТарифаПоУмолчанию(Результат, ОперацияВыполнена)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОперацияВыполнена") Тогда
			ОперацияВыполнена = Результат.ОперацияВыполнена;
			ПоУмолчанию = Ложь;
			СформироватьЗаголовокФормы();
			СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура СформироватьКарточкуТарифа()
	
	КарточкаТарифа = ТабличныйДокументКарточкаТарифа();
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументКарточкаТарифа()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Тариф");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.МаксВес = МаксВес;
	ПараметрыОбласти.МаксОбъем = МаксОбъем;
	ПараметрыОбласти.МаксДлина = МаксДлина;
	ПараметрыОбласти.НегабаритныйВес = НегабаритныйВес;
	ПараметрыОбласти.НегабаритныйОбъем = НегабаритныйОбъем;
	ПараметрыОбласти.НегабаритнаяДлина = НегабаритнаяДлина;

	ПараметрыОбласти.Описание = Описание;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура СформироватьУслугиПоУмолчанию(Знач УслугиТарифа)
	
	ДеревоУслуг = РеквизитФормыВЗначение("УслугиПоУмолчанию");
	ДеревоУслуг.Строки.Очистить();
	
	УзелОсновная = Неопределено;
	УзелДополнительная = Неопределено;
	ТекущийУзел = Неопределено;
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		УзелОсновная = ДеревоУслуг;
		УзелДополнительная = ДеревоУслуг;
	КонецЕсли;
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		
		Если ТекущаяУслуга.Дополнительная Тогда
			
			Если УзелДополнительная = Неопределено Тогда
				УзелДополнительная = ДеревоУслуг.Строки.Добавить();
				УзелДополнительная.Представление = НСтр("ru = 'Дополнительные услуги'");
				УзелДополнительная.Использовать = Истина;
				УзелДополнительная.Идентификатор = "";
				УзелДополнительная.Значение = Неопределено;
				УзелДополнительная.ТребуетсяЗначение = Ложь;
				УзелДополнительная.Обязательная = Ложь;
				УзелДополнительная.ТипСтроки = 0;
			КонецЕсли;
			
			ТекущийУзел = УзелДополнительная;
			
			СтрокаДерева = ТекущийУзел.Строки.Найти(ТекущаяУслуга.Категория, "Представление");
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ТекущийУзел.Строки.Добавить();
				СтрокаДерева.Представление = ТекущаяУслуга.Категория;
				СтрокаДерева.Использовать = Истина;
				СтрокаДерева.Идентификатор = "";
				СтрокаДерева.Значение = Неопределено;
				СтрокаДерева.ТребуетсяЗначение = Ложь;
				СтрокаДерева.Обязательная = Ложь;
				СтрокаДерева.ТипСтроки = 0;
			КонецЕсли;
			
		Иначе
			
			Если УзелОсновная = Неопределено Тогда
				УзелОсновная = ДеревоУслуг.Строки.Добавить();
				УзелОсновная.Представление = НСтр("ru = 'Основные услуги'");
				УзелОсновная.Использовать = Истина;
				УзелОсновная.Идентификатор = "";
				УзелОсновная.Значение = Неопределено;
				УзелОсновная.ТребуетсяЗначение = Ложь;
				УзелОсновная.Обязательная = Ложь;
				УзелОсновная.ТипСтроки = 0;
			КонецЕсли;
			
			ТекущийУзел = УзелОсновная;
			
			СтрокаДерева = ТекущийУзел.Строки.Найти(ТекущаяУслуга.Категория, "Представление");
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ТекущийУзел.Строки.Добавить();
				СтрокаДерева.Представление = ТекущаяУслуга.Категория;
				СтрокаДерева.Использовать = Истина;
				СтрокаДерева.Идентификатор = "";
				СтрокаДерева.Значение = Неопределено;
				СтрокаДерева.ТребуетсяЗначение = Ложь;
				СтрокаДерева.Обязательная = Ложь;
				СтрокаДерева.ТипСтроки = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.Строки.Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.Дополнительная = ТекущаяУслуга.Дополнительная;
		СтрокаДереваВетка.Категория = ТекущаяУслуга.Категория;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		СтрокаДереваВетка.Обязательная = ТекущаяУслуга.Обязательная;
		СформироватьПредставлениеНаименованияУслуги(СтрокаДереваВетка);
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.Строки;
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.Значение = СтрокаДереваСвойство.ТипЗначения.ПривестиЗначение(СтрокаДереваСвойство.Значение);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоУслуг, "УслугиПоУмолчанию");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = '%1: %2'");
	ТекстНаименования = НСтр("ru = 'Тариф'");
	
	Если Наименование <> "" Тогда
		
		ТекстНаименования = Наименование
			+ " ("
			+ ?(ПоУмолчанию, НСтр("ru = 'Тариф по умолчанию'"), НСтр("ru = 'Тариф'"))
			+ ")";
			
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ТекстНаименования);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокКнопкиУстановитьПоУмолчанию()
	
	Элементы.ФормаУстановитьТарифПоУмолчанию.Заголовок = ?(ПоУмолчанию,
		НСтр("ru='Сбросить тариф по умолчанию'"),
		НСтр("ru='Установить тариф по умолчанию'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбора()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ДоступныеФормыОплаты.Количество() = 0 Тогда
		Элементы.ФормаОплаты.Видимость = Ложь;
		ФормаОплаты = 0;
	Иначе
		Элементы.ФормаОплаты.Видимость = Истина;
		Для каждого ЗначениеФормыОплаты Из ДоступныеФормыОплаты Цикл
			Если ЗначениеФормыОплаты.Значение = 1 Тогда
				СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
			ИначеЕсли ЗначениеФормыОплаты.Значение = 2 Тогда
				СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	Элементы.ГруппаПараметрыТарифа.Видимость = Не ЭтоСДЭК;
	Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Не ДоступноРедактирование;
	Элементы.УслугиПоУмолчанию.ТолькоПросмотр = Не ДоступноРедактирование;
	Элементы.УслугиПоУмолчаниюИспользовать.Видимость = Не ЭтоСДЭК;
	Элементы.УслугиПоУмолчаниюПояснение.Видимость = Не ЭтоСДЭК;
	Элементы.ФормаУстановитьТарифПоУмолчанию.Видимость = ДоступноРедактирование И Не ЭтоСДЭК;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДоступноРедактирование;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ЭтоСДЭК;
	Элементы.ФормаЗаписать.Доступность = ДоступноРедактирование;
	Элементы.ФормаЗаписать.Видимость = Не ЭтоСДЭК;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Категории услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Категории услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчанию.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Приемка'"));
	СписокВыбора.Добавить(2, НСтр("ru='Выдача'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающие(ТекущиеДанные)
	
	НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СброситьВзаимоисключающее(ТекущиеДанные, ТекущаяСтрока.Идентификатор,
			ТекущаяСтрока.ИдентификаторНесовместимойУслуги);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающее(ТекущиеДанные, ИдентификаторНового, ИдентификаторТекущего)
	
	Если ТекущиеДанные.Идентификатор = ИдентификаторНового Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаДерева Из СтрокиДерева Цикл
			Если ТекущаяСтрокаДерева.Идентификатор = ИдентификаторТекущего Тогда
				ТекущаяСтрокаДерева.Использовать = Ложь;
				Элементы.УслугиПоУмолчанию.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеУслуг()
	
	УслугиИзменение = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвойстваДляИспользуемыхУслуг()
	
	УзлыДереваУслуг = УслугиПоУмолчанию.ПолучитьЭлементы();
	
	Для Каждого ТекущийУзел Из УзлыДереваУслуг Цикл
		Элементы.УслугиПоУмолчанию.Развернуть(ТекущийУзел.ПолучитьИдентификатор());
		КатегорииУзла = ТекущийУзел.ПолучитьЭлементы();
		Для Каждого ТекущаяКатегория Из КатегорииУзла Цикл
			УслугиКатегории = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из УслугиКатегории Цикл
				Если ТекущаяУслуга.Использовать Тогда
					Элементы.УслугиПоУмолчанию.Развернуть(ТекущаяУслуга.ПолучитьИдентификатор());
					Элементы.УслугиПоУмолчанию.Развернуть(ТекущаяКатегория.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеНаименованияУслуги(Параметры)
	
	Параметры.Представление = Параметры.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(ИдентификаторСтроки)

	КонтактнаяИнформацияНачалоВыбора(ИдентификаторСтроки, "АдресСкладаОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(ИдентификаторСтроки, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	ПараметрыВидаКонтактнойИнформации.Вид.НастройкиПроверки.ПроверятьКорректность = Ложь;
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	АдресПредставление = ПараметрыАдреса.АдресПредставление;
	АдресЗначение = ПараметрыАдреса.АдресЗначение;
	
	Если (АдресЗначение = ""
		И АдресПредставление <> "") Тогда
		АдресЗначение
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(АдресПредставление,
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, АдресЗначение,
		АдресПредставление,, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Не ДоступноРедактирование);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если (Не ЗначениеЗаполнено(Результат)) 
		ИЛИ Не ДоступноРедактирование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		Реквизит = ПараметрыАдреса.АдресПредставление;
		Если Результат.Свойство("Представление") 
			И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ПараметрыАдреса.АдресПредставление);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Реквизит = ПараметрыАдреса.АдресЗначение;
		Если Результат.Свойство("Значение") 
			И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ПараметрыАдреса.АдресЗначение);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ПараметрыАдреса.Идентификатор = "";
			ПараметрыАдреса.Наименование = "";
		КонецЕсли;
		
		Отказ = Ложь;
		ПроверитьДозаполнитьАдрес(ДополнительныеПараметры.ИдентификаторСтроки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(ИдентификаторСтроки, ЕстьОшибки)
	
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	АдресЗначение = ПараметрыАдреса.АдресЗначение; 
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(АдресЗначение);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресЗначение) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(АдресЗначение) Тогда
			
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресЗначение,
				Новый Структура("КодыАдреса", Истина));
			ПараметрыАдреса.АдресЗначение = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТерминала", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбора(ИдентификаторСтроки)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодборТерминала", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Адрес", ПараметрыСтроки.АдресПредставление);
	ПараметрыОткрытияФормы.Вставить("АдресЗначение", ПараметрыСтроки.АдресЗначение);
	ПараметрыОткрытияФормы.Вставить("Направление", ПараметрыСтроки.Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ПараметрыСтроки.Идентификатор);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокТерминалов",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодборТерминала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Результат.Свойство("ТерминалИдентификатор", ПараметрыСтроки.Идентификатор);
	Результат.Свойство("Терминал", ПараметрыСтроки.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеКарточкиТарифа(Отказ)
	
	ТекстОшибки = НСтр("ru='Значение поля ""%1"" в строке ""%2"" не заполнено'");
	НомерСтроки = 0;
	Для Каждого ТекущийТерминал Из ТерминалыПоУмолчанию Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекущийТерминал.Направление = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Направление", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.Идентификатор = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Терминал", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.АдресЗначение = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Адрес", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.АдресПредставление = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Адрес", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные)
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.УслугиПоУмолчанию.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.УслугиПоУмолчанию.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗарегистрироватьИзменениеУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУслуги(ИдентификаторУслуги)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ИдентификаторУслуги);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаУслуги", ПараметрыОткрытияФормы, ,
		ГрузоперевозчикИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗапросЗаписатьТариф(Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	ЗаполнитьСпискиВыбора();
	СформироватьЗаголовокФормы();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти
