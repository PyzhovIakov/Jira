#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СервисДоставки.УстановитьЗначенияРеквизитовПоПараметрам(ЭтотОбъект, Параметры);
	ОрганизацияБизнесСетиСсылка = Параметры.ОрганизацияБизнесСетиСсылка;
	
	Если СервисДоставки.НедоступнаРаботаСФормой(ЭтотОбъект, Отказ, ДоступнаОтправкаЗаказовНаДоставку) Тогда
		Возврат;
	КонецЕсли;

	ОтборОтправитель = Параметры.Отправитель;
	ОтборПолучатель = Параметры.Получатель;
	
	Если РежимВыбора
		И ОбработкаВыбора = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку() Тогда
		МассивСсылокДляДобавления = Новый Массив();
		МассивСсылокДляДобавления.Добавить(ДокументОснование);
		ДокументыОснованияСписок = СервисДоставки.ДокументыОснованияСписок(МассивСсылокДляДобавления);
		Если ДокументыОснованияСписок.Количество() Тогда
			ПараметрыЗаказаНаДоставку = ДокументыОснованияСписок[0];
			Если Не ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
				ОтборОтправитель = ?(ЗначениеЗаполнено(ОтборОтправитель), ОтборОтправитель, ПараметрыЗаказаНаДоставку.Отправитель);
			КонецЕсли;
			ОтборПолучатель = ?(ЗначениеЗаполнено(ОтборПолучатель), ОтборПолучатель, ПараметрыЗаказаНаДоставку.Получатель);
		КонецЕсли;
		ОтборСостояние = Новый СписокЗначений();
		ОтборСостояние.Добавить(0, "Черновик");
	Иначе
		ОтборДокументОснование = Параметры.ДокументОснование;
	КонецЕсли;
	
	ОтборыИзменение = ЗначениеЗаполнено(ОтборОтправитель) Или ЗначениеЗаполнено(ОтборПолучатель)
						Или ЗначениеЗаполнено(ОтборОтправительАдресПредставление)
						Или ЗначениеЗаполнено(ОтборПолучательАдресПредставление)
						Или ЗначениеЗаполнено(ОтборДокументОснование);
	
	ЗаполнитьСпискиВыбора();
	ЗаполнитьНастройкиПодсистемы();
	УстановитьЗначенияПоУмолчанию();
	СформироватьПараметрыОтбора();
	НастроитьФормуПоТипуГрузоперевозки();
	УстановитьУсловноеОформление();
	УстановитьКэшированныеЗначения();
	ВыполнитьДлительныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Кэш.ПараметрыМенеджераДлительныхОпераций.ФоновоеЗадание) Тогда
		ОжидатьЗавершениеВыполненияЗапроса(Кэш.ПараметрыМенеджераДлительныхОпераций);
		Кэш.Удалить("ПараметрыМенеджераДлительныхОпераций");
	КонецЕсли;
	
	НастроитьЭлементыОтбораДляРолиОрганизации();
	СформироватьПредставлениеОтбораСостояния();
	ПометитьКомандуСТекущимРазмеромСтраницы();
	
	Если ЗначениеЗаполнено(ИнтервалОбновленияИнформацииПоЗаказам) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеИнформацииПоЗаказам", ИнтервалОбновленияИнформацииПоЗаказам);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СинхронизироватьДанныеПоЧастичнойДоставке", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		
		Если ЗначениеЗаполнено(Параметр) И Параметр = ТипГрузоперевозки Тогда
			Страницы.Страница = ?(ОтборыИзменение, -1, Страницы.Страница);
			ПолучитьЗаказыНаДоставку( , "ОбновитьСписокЗаказовНаДоставку");
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодключениеТестовогоПериодаКурьерика" Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен") Тогда
			ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
			ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
			ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
			ВыполнитьЗапрос(ПараметрыОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РежимВыбора Тогда
		СохранитьНастройкиСпискаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЭлементыБыстрогоОтбора

&НаКлиенте
Процедура ОрганизацияСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОрганизацияСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл // Структура
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаПриИзменении(Элемент)
	
	ПолучитьЗаказыНаДоставку( , "ОрганизацияБизнесСети");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПунктВыдачиПриИзменении(Элемент)

	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРольОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ОтборРольОрганизации) Тогда
		ОтборРольОрганизации = 0;
		ОтборРольОрганизацииПредставление = "";
		НастроитьЭлементыОтбораДляРолиОрганизации();
		ПолучитьЗаказыНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРольОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтборРольОрганизации = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ОтборРольОрганизации.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборРольОрганизации = 0;
		ОтборРольОрганизацииПредставление = "";
	Иначе
		ОтборРольОрганизации = ВыбранноеЗначение;
		ОтборРольОрганизацииПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	НастроитьЭлементыОтбораДляРолиОрганизации();
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСостояний();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОтборСостояние.Количество() > 0 Тогда
		ОтборСостояние.Очистить();
		СформироватьПредставлениеОтбораСостояния();
		ПолучитьЗаказыНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = 107 Тогда
		ОткрытьФормуВыбораСостояний();
	Иначе
		ЭлементСписка = Элементы.ОтборСостояние.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		ОтборСостояние.Очистить();
		ОтборСостояние.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		СформироватьПредставлениеОтбораСостояния();
		ПолучитьЗаказыНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКурьерОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКурьерПриИзменении(Элемент)
	
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлементыОтборов

&НаКлиенте
Процедура ОтборНомерЗаказаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборНомерЗаказа) Тогда
		ОтборНомерЗаказа = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОтборНомерЗаказа, 9);
	КонецЕсли;
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЗаказаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если Текст = ОтборНомерЗаказа Или НомерЗаказаНекорректный(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Текст = ОтборНомерЗаказа Тогда
			Элемент.ОбновитьТекстРедактирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЗаказаОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДокументОснованиеПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя);
	
КонецПроцедуры

#Область Отправитель

&НаКлиенте
Процедура ОтборОтправительПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УчастникГрузоперевозкиНачалоВыбора(Элемент, 1, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаКлиенте
Процедура ОтборПолучательПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УчастникГрузоперевозкиНачалоВыбора(Элемент, 2, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Откуда

&НаКлиенте
Процедура ОтборОткудаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов( , "ОтборОтправительАдресПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , "ОтборОтправительАдресПредставление", СтандартнаяОбработка);
	ОтборОтправительАдресЗначение = "";
	ОтборОтправительАдресВладелец = Неопределено;
	ОтборОтправительАдресПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область Куда

&НаКлиенте
Процедура ОтборКудаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов( , "ОтборПолучательАдресПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , "ОтборПолучательАдресПредставление", СтандартнаяОбработка);
	ОтборПолучательАдресЗначение = "";
	ОтборПолучательАдресВладелец = Неопределено;
	ОтборПолучательАдресПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусОплаты

&НаКлиенте
Процедура ОтборСтатусОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ОтборСтатусОплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ОтборСтатусОплаты.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборСтатусОплаты = 0;
		ОтборСтатусОплатыНаименование = "";
	Иначе
		ОтборСтатусОплаты = ВыбранноеЗначение;
		ОтборСтатусОплатыНаименование = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаложенныйПлатежОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ОтборНаложенныйПлатеж Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = 2 Тогда
		ОтборНаложенныйПлатежПолучен = 0;
		ОтборНаложенныйПлатежПолученНаименование = "";
		Элементы.ОтборНаложенныйПлатежПолучен.Доступность = Ложь;
	Иначе
		Элементы.ОтборНаложенныйПлатежПолучен.Доступность = Истина;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ОтборНаложенныйПлатеж.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборНаложенныйПлатеж = 0;
		ОтборНаложенныйПлатежНаименование = "";
	Иначе
		ОтборНаложенныйПлатеж = ВыбранноеЗначение;
		ОтборНаложенныйПлатежНаименование = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаложенныйПлатежПолученОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ОтборНаложенныйПлатежПолучен Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ОтборНаложенныйПлатежПолучен.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборНаложенныйПлатежПолучен = 0;
		ОтборНаложенныйПлатежПолученНаименование = "";
	Иначе
		ОтборНаложенныйПлатежПолучен = ВыбранноеЗначение;
		ОтборНаложенныйПлатежПолученНаименование = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	ОтборСтатусОплаты = 0;
	ОтборСтатусОплатыНаименование = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаложенныйПлатежОчистка(Элемент, СтандартнаяОбработка)

	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	ОтборНаложенныйПлатеж = 0;
	ОтборНаложенныйПлатежПолучен = 0;
	ОтборНаложенныйПлатежПолученНаименование = "";
	ОтборНаложенныйПлатежНаименование = "";
	Элементы.ОтборНаложенныйПлатежПолучен.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаложенныйПлатежПолученОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов( , Элемент.Имя, СтандартнаяОбработка);
	ОтборНаложенныйПлатежПолучен = 0;
	ОтборНаложенныйПлатежПолученНаименование = "";
	
КонецПроцедуры

#КонецОбласти

#Область Периоды

&НаКлиенте
Процедура ПериодДатаСозданияДатаНачалаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаСозданияДатаОкончанияПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаОтгрузкиДатаНачалаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаОтгрузкиДатаОкончанияПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаДоставкиДатаНачалаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаДоставкиДатаОкончанияПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ДекорацияПереходНаНовыйТипАвторизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыФормыУстаревшегоПодключения) = Тип("Структура") Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПриЗакрытииОкнаАвторизации", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика",
			ПараметрыФормыУстаревшегоПодключения,
			ЭтотОбъект,,,,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТребуетсяПовторнаяОтправкаНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ТипГрузоперевозки));
	ПараметрыОткрытия.Вставить("СписокЗаказов", СписокЗаказовТребуетсяПовторнаяОтправка);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеПовторнойОтправкиЗаказов", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ПовторнаяОтправкаЗаказов",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОпцияКурьерикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьТестовыйПериод" Тогда
		
		СтандартнаяОбработка = Ложь;
		СервисДоставкиКлиент.ПодключитьТестовыйПериодКурьерика();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьСостояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
		ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТребуетсяОбработкаЧастичнойДоставкиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ТипГрузоперевозки));
	ПараметрыФормы.Вставить("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
	ПараметрыФормы.Вставить("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
	ПараметрыФормы.Вставить("БалансОпцияКурьерика", БалансОпцияКурьерика);
	ПараметрыФормы.Вставить("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
	ПараметрыФормы.Вставить("ДоступенТестовыйПериод", ДоступенТестовыйПериод);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ОтражениеДоставки", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	
	ПоискСтроки = Список.НайтиСтроки(Новый Структура("Идентификатор", ПредыдущийИдентификатор));
	Если ЗначениеЗаполнено(ПоискСтроки) Тогда
		Элементы.Список.ТекущаяСтрока = ПоискСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ТекущиеДанныеОпределены = ТекущиеДанные <> Неопределено;
	Если ТекущиеДанныеОпределены Тогда
		Элементы.ВыполнитьДействиеОтменить.Доступность = ТекущиеДанные.ДоступнаОтмена;
		ПредыдущийИдентификатор = Элементы.Список.ТекущиеДанные.Идентификатор;
	Иначе
		Элементы.ВыполнитьДействиеОтменить.Доступность = Ложь;
	КонецЕсли;
	Элементы.Скопировать.Доступность = ТекущиеДанныеОпределены И Не ТекущиеДанные.ЭтоМультизаказ;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле.Имя = "СписокДокументОснованиеПредставление"
		И ТекущиеДанные.ДокументыОснования.Количество() > 0 Тогда
		
		Если ТекущиеДанные.ДокументыОснования.Количество() = 1 Тогда
			ПоказатьЗначение(,ТекущиеДанные.ДокументыОснования[0].Значение);
		Иначе
		
			Основания = Новый Массив;
			Для Каждого ТекЭлемент Из ТекущиеДанные.ДокументыОснования Цикл
				Основания.Добавить(ТекЭлемент.Значение);
			КонецЦикла;
			
			ОткрытьФорму("Обработка.СервисДоставки.Форма.СписокПроизвольныхОбъектов",
				Новый Структура("МассивОбъектов, ЗаголовокФормы", Основания, НСтр(
				"ru = 'Основания заказа на доставку'")), , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокСостояние" И ЗначениеЗаполнено(ТекущиеДанные.ТрекНомер)
		И Не ТекущиеДанные.ЭтоМультизаказ И Не СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
			
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
				СервисДоставкиКлиентСервер.АдресСтраницыЗаказаНаДоставку(ТипГрузоперевозки, ТекущиеДанные.ТрекНомер));
			
	ИначеЕсли Поле.Имя = "СписокТрекНомер" И ЗначениеЗаполнено(ТекущиеДанные.ТрекНомер)
		И ТекущиеДанные.СостояниеИдентификатор <> 0 И Не ТекущиеДанные.ЭтоМультизаказ
		И Не (СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки)
		Или СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки)
		И (ТекущиеДанные.СостояниеИдентификатор = 18 Или ТекущиеДанные.СостояниеИдентификатор = 17)) Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ТекущиеДанные.Идентификатор);
		ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
		ОткрытьФорму(
			"Обработка.СервисДоставки.Форма.ОтслеживаниеЗаказа",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,ТекущиеДанные.Идентификатор,,,,
			РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли Поле.Имя = "СписокМультизаказПредставление" И ТекущиеДанные.МультизаказИдентификатор <> "" Тогда
		
		ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
		ПараметрыОткрытияФормы.ИмяФормы = "КарточкаМультизаказа";
		ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
		ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
		ПараметрыОткрытияФормы.ИдентификаторЗаказа = ТекущиеДанные.МультизаказИдентификатор;
		ПараметрыОткрытияФормы.Уникальность = ПараметрыОткрытияФормы.ИдентификаторЗаказа;
		
		СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
		
	ИначеЕсли РежимВыбора Тогда
		
		ОбработатьРезультатВыбораЗаказаНаДоставку(ВыбраннаяСтрока);
		
	ИначеЕсли ТекущиеДанные.ЭтоМультизаказ Тогда
		
		ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
		ПараметрыОткрытияФормы.ИмяФормы = "КарточкаМультизаказа";
		ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
		ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
		ПараметрыОткрытияФормы.ИдентификаторЗаказа = ТекущиеДанные.Идентификатор;
		ПараметрыОткрытияФормы.Уникальность = ПараметрыОткрытияФормы.ИдентификаторЗаказа;
		
		СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
		
	Иначе
	
		ОткрытьФормуЗаказа(Список.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуЗаказа(Элементы.Список.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОтчетРеестрЗаказов(Команда)
	
	ЭтоКурьерика = СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытия.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытия.Вставить("ПунктВыдачи", ОтборПунктВыдачи);
	ПараметрыОткрытия.Вставить("Состояние", ОтборСостояние);
	Если ЭтоКурьерика Тогда
		ПараметрыОткрытия.Вставить("КлючВарианта", "РеестрЗаказовКурьерика");
		ПараметрыОткрытия.Вставить("ПериодДоставки", ПериодДатаДоставки);
	Иначе
		ПараметрыОткрытия.Вставить("КлючВарианта", "РеестрЗаказов");
		ПараметрыОткрытия.Вставить("ПериодСоздания", ПериодДатаСоздания);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("КурьерИдентификатор", ОтборКурьер);
	ПараметрыОткрытия.Вставить("СписокКурьеров", Элементы.ОтборКурьер.СписокВыбора);
	
	ОткрытьФорму("Отчет.СервисДоставкиРеестрЗаказов.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборы(Команда)
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	Элементы.ГруппаОтборы.Скрыть();
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	Если ВыделенныеСтроки.Количество() > 1 И СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru = 'Отменить выделенные заказы?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru = 'Отменить заказ?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ОтборыИзменение = Истина Тогда
		ЗарегистрироватьИзменениеОтборов(Ложь);
	КонецЕсли;
	
	ПолучитьЗаказыНаДоставку( , Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторыЗаказов = Новый СписокЗначений();
	
	ТекущаяСтрока = Неопределено;
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока = Неопределено Или ТекущаяСтрока.СостояниеИдентификатор = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыЗаказов.Добавить(ТекущаяСтрока.Идентификатор);
	КонецЦикла;
	
	Если ИдентификаторыЗаказов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет доступных печатных форм'"));
		Возврат;
	КонецЕсли;

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ПечатныеФормы", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаДоставкуБезОснования(Команда)
	
	СоздатьЗаказНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПомощникОтправкиЗаказов",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,"ПомощникОтправкиЗаказов",,,,
		РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДатаДоставки(Команда)
	УстановитьИнтервал("ПериодДатаДоставки");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДатаОтгрузки(Команда)
	УстановитьИнтервал("ПериодДатаОтгрузки");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДатаСоздания(Команда)
	УстановитьИнтервал("ПериодДатаСоздания");
КонецПроцедуры

&НаКлиенте
Процедура НавигацияСтраницаПервая(Команда)
	
	ПерейтиПоНомеруСтраницы(0);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияСтраницаПоследняя(Команда)
	
	ПерейтиПоНомеруСтраницы(Страницы.КоличествоСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияСтраницаПредыдущая(Команда)
	
	ПерейтиПоНомеруСтраницы(Страницы.Страница - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияСтраницаСледующая(Команда)
	
	ПерейтиПоНомеруСтраницы(Страницы.Страница + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияСтраницаТекущаяСтраница(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("МаксимальныйНомерСтраницы", Страницы.КоличествоСтраниц);
	ПараметрыОткрытияФормы.Вставить("НомерСтраницы",             Страницы.Страница);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПереходКСтраницеПоНомеру",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПослеВыбораНомераСтраницы", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеГрузоперевозчики(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыФормы.ИмяФормы = "ДоступныеПеревозчики";
	ПараметрыФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		ПараметрыФормы.Вставить("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
		ПараметрыФормы.Вставить("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
		ПараметрыФормы.Вставить("БалансОпцияКурьерика", БалансОпцияКурьерика);
		ПараметрыФормы.Вставить("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
		ПараметрыФормы.Вставить("ОтображатьУведомлениеПоОпцииКурьерика", ОтображатьУведомлениеПоОпцииКурьерика);
		
	КонецЕсли;
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазмерСтраницы(Команда)
	
	ИмяЭлемента = Команда.Имя;
	СтрокаПоиска = "ИзменитьРазмерСтраницы";
	
	Если СтрНайти(ИмяЭлемента, СтрокаПоиска) Тогда
		
		РазмерСтраницы = Число(СтрЗаменить(ИмяЭлемента, СтрокаПоиска, ""));
		
		Если РазмерСтраницы <> Страницы.РазмерСтраницы Тогда
			Страницы.РазмерСтраницы = РазмерСтраницы;
			СброситьСтраницы();
			ПолучитьЗаказыНаДоставку();
		КонецЕсли;
		
		ПометитьКомандуСТекущимРазмеромСтраницы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокуИзСписка(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбработатьРезультатВыбораЗаказаНаДоставку(ТекущаяСтрока)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНаложенныеПлатежи(Команда)
	ЗагрузитьНаложенныеПлатежи();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуПлатежныхДокументов(Команда)
	
	ПараметрыСписка = ПолучитьДанныеДляСпискаПлатежныхДокументов(ОрганизацияБизнесСетиСсылка);
	СервисДоставкиКлиентПереопределяемый.ПерейтиКСпискуПлатежныхДокументов(ПараметрыСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗаказыИзМультизаказов(Команда)
	
	ПоказыватьТолькоМультизаказы = Не ПоказыватьТолькоМультизаказы;
	УстановитьВидимостьДоступностьЭлементовМультизаказов();
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНастройки(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = СервисДоставкиКлиент.НовыеПараметрыОткрытьФормуОбщиеНастройки();
	ПараметрыФормы.Вставить("ВладелецФормы", ЭтотОбъект);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("СоответствиеСкладов", СоответствиеСкладов);
	ПараметрыФормы.Вставить("ОписаниеОповещенияОЗакрытии",
		Новый ОписаниеОповещения("ПослеРедактированияНастроек", ЭтотОбъект));
	
	СервисДоставкиКлиент.ОткрытьФормуОбщиеНастройкиСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналЗаказов(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ИсторияЗаказов",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетРеестрЗаказовПоКурьеру(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	КурьерИдентификатор = ОтборКурьер;
	Если ПустаяСтрока(КурьерИдентификатор) Тогда
		СписокВыбора = Элементы.ОтборКурьер.СписокВыбора;
		Если СписокВыбора.Количество() > 0 Тогда
			КурьерИдентификатор = СписокВыбора[0].Значение;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите курьера'"), , "ОтборКурьер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПериодОтчета = Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней);
	ПериодОтчета.ДатаНачала = ?(ЗначениеЗаполнено(ПериодДатаДоставки.ДатаНачала),
		ПериодДатаДоставки.ДатаНачала,
		ПериодОтчета.ДатаНачала);
	ПериодОтчета.ДатаОкончания = ?(ЗначениеЗаполнено(ПериодДатаДоставки.ДатаОкончания),
		ПериодДатаДоставки.ДатаОкончания,
		ПериодОтчета.ДатаОкончания);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", "РеестрЗаказовПоКурьеру");
	ПараметрыОткрытия.Вставить("ПериодОтчета", ПериодОтчета);
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытия.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытия.Вставить("ПунктВыдачи", ОтборПунктВыдачи);
	ПараметрыОткрытия.Вставить("Состояние", ОтборСостояние);
	ПараметрыОткрытия.Вставить("КурьерИдентификатор", КурьерИдентификатор);
	ПараметрыОткрытия.Вставить("СписокКурьеров", Элементы.ОтборКурьер.СписокВыбора);
	
	ОткрытьФорму("Отчет.СервисДоставкиРеестрЗаказов.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ОткрытьФормуЗаказа(Элементы.Список.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблоны(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = СервисДоставкиКлиент.НовыеПараметрыОткрытьФормуОбщиеНастройки();
	ПараметрыФормы.Вставить("ВладелецФормы", ЭтотОбъект);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ВариантОтображения", "Шаблоны");
	
	СервисДоставкиКлиент.ОткрытьФормуОбщиеНастройкиСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	Иначе
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ФоновоеЗадание = ДополнительныеПараметры.ФоновоеЗадание;
	КонецЕсли;
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ФоновоеЗадание, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ФоновоеЗадание = ПараметрыОперации.ФоновоеЗадание;
	
	Если Не ПараметрыОперации.ВыводитьОкноОжидания Тогда
		
		Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ФоновоеЗадание, "Очередь", Новый СписокЗначений);
		Для Каждого Операция Из Очередь Цикл
			
			ИмяМетода = Операция.Представление;
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку()
				Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
				Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
				
				Элементы.СписокОбновить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
				Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = НСтр("ru='Идет загрузка...'");
				
				Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
					ПодключитьОбработчикОжидания("Подключаемый_СинхронизироватьДанныеПоЧастичнойДоставке", 0.1, Истина);
				КонецЕсли;
				
			ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам() Тогда
				
				СформироватьПредставленияПоНаложеннымПлатежам(Элементы.ЗагрузитьНаложенныеПлатежи, Истина);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПараметрыОперации.ИмяПроцедурыЗавершения, ЭтотОбъект, ПараметрыОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	Если Не СервисДоставки.ВозможенЗапускФоновогоЗадания(ЭтотОбъект, ПараметрыОперации, ИнтернетПоддержкаПодключена) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставки.ЗапуститьФоновоеЗадание(ЭтотОбъект, ПараметрыОперации, ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры)
	
	Очередь = ДополнительныеПараметры.Очередь;
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			
			Элементы.СписокОбновить.Картинка = БиблиотекаКартинок.Обновить;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
			
			Элементы.СписокОбновить.Картинка = БиблиотекаКартинок.Обновить;
			Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗавершениемДлительнойОперации(Результат, ДополнительныеПараметры);
	
	Отказ = ТипЗнч(Результат) <> Тип("Структура");
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Отказ Или Результат.Статус <> "Выполнено" Или Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработкаРезультатаНаСервере Тогда
		РезультатМенеджера = ОбработатьРезультатМенеджераДлительныхОпераций(Результат.АдресРезультата);
	Иначе
		РезультатМенеджера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		РезультатОперации = Операция.Значение;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			
			// Сохранение текущей строки для позиционирования после загрузки.
			ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные;
			
			// Подготовка данных для элементов постраничной выдачи данных.
			Если Список.Количество() = 0 Тогда
				СостояниеВыполненияЗапроса = НСтр("ru = 'Заказы на доставку не найдены'");
			Иначе
				СостояниеВыполненияЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отображается заказов на доставку: %1 из %2'"),
					Список.Количество(),
					Страницы.КоличествоСтрок);
			КонецЕсли;
			Элементы.ДекорацияСостояниеВыполненияЗапроса.Заголовок = СостояниеВыполненияЗапроса;
			
			ОбновитьНавигационноеМеню();
			ОтборыИзменение = Ложь;
			СформироватьНадписьОтбора();
			
			// Позиционирование на текущей строке списка.
			Если ТекущиеДанныеСписка = Неопределено Тогда
				Если Список.Количество() > 0 Тогда
					Элементы.Список.ТекущаяСтрока = Список[0].ПолучитьИдентификатор();
				КонецЕсли;
			Иначе
				СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанныеСписка.Идентификатор));
				Если СтрокиСписка.Количество() Тогда
					Элементы.Список.ТекущаяСтрока = СтрокиСписка[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			ОбновлениеИнформацииПоТребуемымДействиямСЗаказамиНаДоставку();
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаСинхронизироватьДанныеРегистровПоЧастичнойДоставке() Тогда
			
			ОбновлениеИнформацииПоТребуемымДействиямСЗаказамиНаДоставку();
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
			
			СтатусОповещения = ?(РезультатОперации.Количество() > 1, СтатусОповещенияПользователя.Важное,
				СтатусОповещенияПользователя.Информация);
			
			Для Каждого ЭлементРезультата Из РезультатОперации Цикл
				
				Номер = ЭлементРезультата.Номер;
				СуммаОтмены = ЭлементРезультата.СуммаОтмены;
				РезультатОтмены = ЭлементРезультата.РезультатОтмены;
				
				Если РезультатОтмены = 1 Тогда // Отменен
					
					ТекстПояснения = НСтр("ru = 'Заказ на доставку %1 отменен.'");
					
				ИначеЕсли РезультатОтмены = 3 Тогда // Отмена заказа уже невозможна
					
					ТекстПояснения = НСтр("ru = 'Заказ на доставку %1 невозможно отменить.'");
					
				ИначеЕсли РезультатОтмены = 2 Тогда // Возможна платная отмена
					
					ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
					
					СписокКнопок = Новый СписокЗначений();
					СписокКнопок.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru='Да'"));
					СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
					
					ТекстСообщения = НСтр("ru = 'Доступна только платная отмена заказа %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Номер);
					Если СуммаОтмены > 0 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сумма отмены заказа %1 - %2.'"), Номер, СуммаОтмены);
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "  ", "");
					ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Отменить платно?'");
					ПоказатьВопрос(ОписаниеОЗавершении, ТекстСообщения, СписокКнопок);
					
					Продолжить;
					
				ИначеЕсли РезультатОтмены = 0 Тогда // Ошибка
					
					Продолжить;
					
				КонецЕсли;
				
				Если РезультатОтмены = 1 Тогда
					Картинка = БиблиотекаКартинок.Информация32
				Иначе
					Картинка = БиблиотекаКартинок.ПредупреждениеБЭД;
				КонецЕсли;
				
				ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПояснения, Номер);
				ТекстПояснения = СтрЗаменить(ТекстПояснения, "  ", " ");
				ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена:'"), , ТекстПояснения, Картинка, СтатусОповещения, Номер);
				
			КонецЦикла;
			
			Если Список.Количество() = 0 И Страницы.Страница > 1 Тогда
				Страницы.Страница = Страницы.Страница - 1;
				ПолучитьЗаказыНаДоставку();
			ИначеЕсли Список.Количество() <> Страницы.РазмерСтраницы Тогда
				ПолучитьЗаказыНаДоставку();
			КонецЕсли;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
			
			ЗагрузитьРезультатПолученияСпискаПеревозчиков(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
			
			ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКурьеров() Тогда
			
			ЗагрузитьРезультатПолученияСпискаКурьеров(РезультатОперации);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам() Тогда
			
			СформироватьПредставленияПоНаложеннымПлатежам(Элементы.ЗагрузитьНаложенныеПлатежи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СервисДоставкиКлиент.ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ИнициализацияДлительныхОпераций

&НаСервере
Процедура ВыполнитьДлительныеОперации()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	Если Не Кэш.Свойство(СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния()) Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния());
	КонецЕсли;
	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента());
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКурьеров());
	КонецЕсли;
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку());
	
	ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	Кэш.Вставить("ПараметрыМенеджераДлительныхОпераций", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаказыНаДоставку(ВыводитьОкноОжидания = Ложь, Ключ = "")
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьОтборы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Список.Очистить();
	
	Если Страницы.Страница = -1 Тогда
		СброситьСтраницы();
		ОбновитьНавигационноеМеню();
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыДляПроверки = Новый Структура("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыДляПроверки.Вставить("ИмяФормы", "СписокЗаказов");
	
	СервисДоставкиКлиент.ПроверитьОрганизациюБизнесСетиСВопросом(ПараметрыДляПроверки, Отказ);
	Если Отказ Тогда
		Список.Очистить();
		СброситьСтраницы();
		ОбновитьНавигационноеМеню();
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку());
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Если Ключ = Команды.Обновить.Имя Или Ключ = "ОбновитьСписокЗаказовНаДоставку" Или Ключ = "ОбновлениеИнформацииПоЗаказам" Тогда
			ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
			Если Ключ = Команды.Обновить.Имя Тогда
				ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКурьеров());
			КонецЕсли;
		КонецЕсли;
		УстановитьДоступностьЭлементовПоЗначениюОпции();
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) И Ключ = "ОрганизацияБизнесСети" Тогда
		ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	КонецЕсли;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьГрузоперевозчиков()
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить( , СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	ПараметрыОперации.ТекстСообщения = НСтр("ru = 'Получение списка грузоперевозчиков.'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНаложенныеПлатежи()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПараметрыДляПроверки = Новый Структура("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	СервисДоставкиКлиент.ПроверитьОрганизациюБизнесСетиСВопросом(ПараметрыДляПроверки, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам());
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку(ПлатнаяОтмена = Ложь)
	
	ИдентификаторыЗаказы = Новый СписокЗначений;
	ИдентификаторыМультизаказы = Новый СписокЗначений;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДанныеСтроки.ЭтоМультизаказ Тогда
			Если ИдентификаторыМультизаказы.Количество() > 0 И Не СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
				Прервать;
			КонецЕсли;
			ИдентификаторыМультизаказы.Добавить(ДанныеСтроки.Идентификатор, ДанныеСтроки.НомерЗаказа);
		Иначе
			Если ИдентификаторыЗаказы.Количество() > 0 И Не СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
				Прервать;
			КонецЕсли;
			ИдентификаторыЗаказы.Добавить(ДанныеСтроки.Идентификатор, ДанныеСтроки.НомерЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыЗаказы.Количество() > 0 Тогда
		
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		
		ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("Идентификаторы", ИдентификаторыЗаказы);
		ПараметрыЗапроса.Вставить("ПлатнаяОтмена", ПлатнаяОтмена);
		ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку());
		
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
	Если ИдентификаторыМультизаказы.Количество() > 0 Тогда
		
		ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
		
		ПараметрыОперации.ОбработкаРезультатаНаСервере = Истина;
		ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("Идентификаторы", ИдентификаторыМультизаказы);
		ПараметрыЗапроса.Вставить("ПлатнаяОтмена", ПлатнаяОтмена);
		ПараметрыОперации.Очередь.Добавить(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку());
		
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СинхронизироватьДанныеПоЧастичнойДоставке()
	
	Если Не СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций();
	
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.Очередь.Добавить(Неопределено, СервисДоставкиКлиентСервер.ИмяМетодаСинхронизироватьДанныеРегистровПоЧастичнойДоставке());
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДлительныхОпераций

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		
		ИмяПроцедуры = Операция.Представление;
		
		Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьЗаказыНаДоставку(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаОтменитьЗаказНаДоставку(Операция.Значение, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
			Операция.Значение = ПараметрыЗапросаОтменитьМультизаказНаДоставку(Операция.Значение, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния() Тогда
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояния();
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			Операция.Значение = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеОпцииКурьерика();
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСписокКурьеров() Тогда
			Операция.Значение = ПараметрыЗапросаПолучитьСписокКурьеров(ПараметрыОперации, Отказ);
		ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам() Тогда
			Операция.Значение = ПараметрыЗапросаВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(ПараметрыОперации, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("Очередь", ПараметрыОперации.Очередь);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказыНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
	ПараметрыЗапроса.Страница = Страницы.Страница;
	ПараметрыЗапроса.РазмерСтраницы = Страницы.РазмерСтраницы;
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоМультизаказам = ?(ПоказыватьТолькоМультизаказы,
											СервисДоставки.ФильтрПоМультизаказамОдиночныеИМультизаказы(),
											СервисДоставки.ФильтрПоМультизаказамВсеЗаказы());
	
	Если ТипГрузоперевозки <> СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() И ЗначениеЗаполнено(ОтборРольОрганизации) Тогда
		ПараметрыЗапроса.Роль = ОтборРольОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСтатусОплаты) Тогда
		ПараметрыЗапроса.Оплата = ОтборСтатусОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКурьер) Тогда
		ПараметрыЗапроса.Курьер = ОтборКурьер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаложенныйПлатеж) Тогда
		ПараметрыЗапроса.НаложенныйПлатеж = ОтборНаложенныйПлатеж;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаложенныйПлатежПолучен) Тогда
		ПараметрыЗапроса.НаложенныйПлатежПолучен = ОтборНаложенныйПлатежПолучен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНомерЗаказа) Тогда
		ПараметрыЗапроса.НомерЗаказа = ОтборНомерЗаказа;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборДокументОснование) Тогда
		ПараметрыЗапроса.ДокументОснованиеИдентификатор = ОтборДокументОснование.УникальныйИдентификатор();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаСоздания.ДатаНачала) Тогда
		ПараметрыЗапроса.ДатаСозданияОт = ПериодДатаСоздания.ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаСоздания.ДатаОкончания) Тогда
		ПараметрыЗапроса.ДатаСозданияДо = ПериодДатаСоздания.ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаОтгрузки.ДатаНачала) Тогда
		ПараметрыЗапроса.ДатаОтгрузкиОт = ПериодДатаОтгрузки.ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаОтгрузки.ДатаОкончания) Тогда
		ПараметрыЗапроса.ДатаОтгрузкиДо = ПериодДатаОтгрузки.ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаДоставки.ДатаНачала) Тогда
		ПараметрыЗапроса.ДатаДоставкиОт = ПериодДатаДоставки.ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаДоставки.ДатаОкончания) Тогда
		ПараметрыЗапроса.ДатаДоставкиДо = ПериодДатаДоставки.ДатаОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтправитель) Тогда
		НовыйЭлемент = ПараметрыЗапроса.Отправитель.Добавить();
		
		ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
		ПараметрыКонтрагента.Ссылка = ОтборОтправитель;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыКонтрагента);
		
		Для каждого СтрокаОтправителя Из ПараметрыЗапроса.Отправитель Цикл
			Если СтрокаОтправителя.ЮрФизЛицо = 0 Тогда
				ТекстОшибки = НСтр("ru='Некорректное значение поля ""Отправитель"".
								|Отправитель может быть ИП, либо юридическим лицом.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Отказ = Истина;
			ИначеЕсли СтрокаОтправителя.ЮрФизЛицо = 0 Тогда
				ТекстОшибки = НСтр("ru='Некорректное значение поля ""Отправитель"".
								|Отправитель не может быть физическим лицом.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучатель) Тогда
		НовыйЭлемент = ПараметрыЗапроса.Получатель.Добавить();
		
		ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
		ПараметрыКонтрагента.Ссылка = ОтборПолучатель;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтправительАдресЗначение) Тогда
		
		ПараметрыЗначения = СервисДоставки.ЗначениеИзСтрокиJSON(ОтборОтправительАдресЗначение);
		НовыйЭлемент = ПараметрыЗапроса.Откуда.Добавить();
		НовыйЭлемент.КодФИАС = ПараметрыЗначения.ID;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПунктВыдачи) Тогда
		
		ПараметрыЗапроса.ПунктВыдачиКлиента = ОтборПунктВыдачи;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучательАдресЗначение) Тогда
		
		ПараметрыЗначения = СервисДоставки.ЗначениеИзСтрокиJSON(ОтборПолучательАдресЗначение);
		НовыйЭлемент = ПараметрыЗапроса.Куда.Добавить();
		НовыйЭлемент.КодФИАС = ПараметрыЗначения.ID;
		
	КонецЕсли;
	
	Для Каждого ТекущееЗначение Из ОтборСостояние Цикл
		
		Если ТекущееЗначение.Значение > 100 Тогда
			КоллекцияСостояний = КоллекцияСостоянийПоИдентификатору(ТекущееЗначение.Значение);
			
			Для Каждого ТекущееСостояние Из КоллекцияСостояний Цикл
				НовоеСостояние = ПараметрыЗапроса.Состояние.Добавить();
				НовоеСостояние.Идентификатор = ТекущееСостояние;
			КонецЦикла;
			
			Прервать;
		Иначе
			НовоеСостояние = ПараметрыЗапроса.Состояние.Добавить();
			НовоеСостояние.Идентификатор = ТекущееЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	ПараметрыЗапроса.Идентификаторы = ПараметрыОперации.Идентификаторы;
	ПараметрыЗапроса.ОтменитьЗаказПлатно = ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьМультизаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьМультизаказНаДоставку();
	
	ПараметрыЗапроса.Идентификаторы = ПараметрыОперации.Идентификаторы;
	ПараметрыЗапроса.ОтменитьЗаказПлатно = ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьСписокКурьеров(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьСписокКурьеров();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам();
	
	ПараметрыЗапроса.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область РезультатыДлительныхОпераций

&НаСервере
Функция ОбработатьРезультатМенеджераДлительныхОпераций(АдресРезультата)
	
	РезультатМенеджера = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатМенеджера, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		
		ИмяМетода = Операция.Представление;
		Результат = Операция.Значение;
		ОперацияВыполнена = Истина;
		
		Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			
			Операция.Значение = ЗагрузитьРезультатПолученияЗаказов(Результат);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
			Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
			
			Результаты = Новый Массив;
			
			Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
				СписокРезультатов = Результат;
			Иначе
				СписокРезультатов = Новый СписокЗначений;
				СписокРезультатов.Добавить(Результат, ?(ТипЗнч(Результат) = Тип("Структура"), Результат.Номер, ""));
			КонецЕсли;
			
			РезультатОтмены = 0;
			Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
				РезультатОтмены = 3;
			КонецЕсли;
			
			Для Каждого ЭлементСпискаЗначений Из СписокРезультатов Цикл
				
				ПараметрыОтмены = СервисДоставки.НовыйПараметрыОтветаОтменитьЗаказНаДоставку();
				ПараметрыОтмены.Вставить("Номер", ЭлементСпискаЗначений.Представление);
				ПараметрыОтмены.Вставить("СуммаОтмены", 0);
				ПараметрыОтмены.Вставить("РезультатОтмены", РезультатОтмены);
				
				Если ТипЗнч(ЭлементСпискаЗначений.Значение) = Тип("Структура") Тогда
					ЗагрузитьРезультатОтменыЗаказа(ЭлементСпискаЗначений.Значение, ПараметрыОтмены, ОперацияВыполнена);
				КонецЕсли;
				
				Результаты.Добавить(ПараметрыОтмены);
				
			КонецЦикла;
			
			Операция.Значение = Результаты;
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
			
			ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат);
			
		ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния() Тогда
			
			ЗагрузитьРезультатПолученияСпискаСостояний(Результат);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат РезультатМенеджера;
	
КонецФункции

// Загрузка результата получения заказов. Проверка наличия заказов, нуждающихся в дополнительной обработке пользователем
// 
// Параметры:
//  Результат - Произвольный - информация о заказах на доставку, полученных из сервиса интеграции
//  ОперацияВыполнена - Булево - исходящий параметр, отражающий успешность получения и обработки данных из сервиса интеграции
// 
// Возвращаемое значение:
//  Структура - вспомогательные свойства, необходимые для отражения на форме:
//		* КоличествоНовыхЗаказовКПовторнойОтправке - число - количество заказов, нуждающихся в повторной отправке в сервис интеграции
//		* КоличествоЗаказовТребующихОбработкиЧастичнойДоставки - число - количество заказов, нуждающихся в обработке пользователем
&НаСервере
Функция ЗагрузитьРезультатПолученияЗаказов(Результат, ОперацияВыполнена = Истина)
	
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("КоличествоНовыхЗаказовКПовторнойОтправке", 0);
	РезультатЗагрузки.Вставить("КоличествоЗаказовТребующихОбработкиЧастичнойДоставки", 0);
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Список.Очистить();
		Если Результат.Свойство("Список") Тогда
		
			Если ТипЗнч(Результат.Список) = Тип("Массив") Тогда
				
				ПараметрыОтбораЗаказов = Новый Структура;
				ПараметрыОтбораЗаказов.Вставить("Список", Результат.Список);
				
				Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
					ИдентификаторыЗаказовТребуетсяПовторнаяОтправка =
						РегистрыСведений.ЖурналЗаказовСервисДоставки.ЗаказыКПовторнойОтправке(ПараметрыОтбораЗаказов);
						
					ИдентификаторыЗаказовТребуетсяКорректировкаЧД =
						РегистрыСведений.ЖурналЗаказовСервисДоставки.ЗаказыТребующиеОбработкиЧастичнойДоставки(ПараметрыОтбораЗаказов);
				Иначе
					ИдентификаторыЗаказовТребуетсяПовторнаяОтправка = Новый СписокЗначений();
					ИдентификаторыЗаказовТребуетсяКорректировкаЧД = Новый СписокЗначений();
				КонецЕсли;
				
				Для Каждого ТекущаяСтрока Из Результат.Список Цикл
					
					НоваяСтрока = Список.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					
					Если ТекущаяСтрока.ЗаборОтАдреса Тогда
						НоваяСтрока.ВариантОтгрузки = НСтр("ru='От адреса'");
					Иначе
						НоваяСтрока.ВариантОтгрузки = НСтр("ru='От терминала'");
					КонецЕсли;
					
					Если ТекущаяСтрока.ДоставкаДоАдреса Тогда
						НоваяСтрока.ВариантДоставки = НСтр("ru='До адреса'");
					Иначе
						НоваяСтрока.ВариантДоставки = НСтр("ru='До терминала'");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекущаяСтрока.АдресОтгрузкиНаименование) Тогда
						НоваяСтрока.АдресОтгрузкиПредставление = ТекущаяСтрока.АдресОтгрузкиТипНаименование
							+ ": " + ТекущаяСтрока.АдресОтгрузкиНаименование;
					ИначеЕсли ТекущаяСтрока.ЗаборОтАдреса Или ЭтоСДЭК Тогда
						НоваяСтрока.АдресОтгрузкиПредставление = ТекущаяСтрока.ОтправительАдресПредставление;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекущаяСтрока.АдресДоставкиНаименование) Тогда
						НоваяСтрока.АдресДоставкиПредставление = ТекущаяСтрока.АдресДоставкиТипНаименование
							+ ": " + ТекущаяСтрока.АдресДоставкиНаименование;
					ИначеЕсли ТекущаяСтрока.ДоставкаДоАдреса Или ЭтоСДЭК Тогда
						НоваяСтрока.АдресДоставкиПредставление = ТекущаяСтрока.ПолучательАдресПредставление;
					КонецЕсли;
					
					НоваяСтрока.КартинкаИдентификатор = 3;
					Если НоваяСтрока.ЭтоМультизаказ Тогда
						НоваяСтрока.КартинкаИдентификатор = 0;
					ИначеЕсли НоваяСтрока.МультизаказНомер <> "" Тогда
						НоваяСтрока.КартинкаИдентификатор = 5;
					КонецЕсли;

					НоваяСтрока.ПунктВыдачи = ТекущаяСтрока.ПунктВыдачиКлиентаНаименование;
					
					Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
						Если ТекущаяСтрока.НаложенныйПлатежВидОплаты = 2 Тогда
							НоваяСтрока.КОплатеНаличные = ТекущаяСтрока.СуммаНаложенногоПлатежа;
							НоваяСтрока.КОплатеКарта = ТекущаяСтрока.СуммаНаложенногоПлатежаДополнительный;
						Иначе
							НоваяСтрока.КОплатеНаличные = ТекущаяСтрока.СуммаНаложенногоПлатежаДополнительный;
							НоваяСтрока.КОплатеКарта = ТекущаяСтрока.СуммаНаложенногоПлатежа;
						КонецЕсли;
						НоваяСтрока.ТребуетсяСинхронизация =
							ИдентификаторыЗаказовТребуетсяПовторнаяОтправка.НайтиПоЗначению(ТекущаяСтрока.ИдентификаторДокумента) <> Неопределено
							Или ИдентификаторыЗаказовТребуетсяКорректировкаЧД.НайтиПоЗначению(ТекущаяСтрока.ИдентификаторДокумента) <> Неопределено;
					КонецЕсли;
					
					СервисДоставкиПереопределяемый.ОбработатьРезультатСостоянияЗаказаНаДоставку(ТекущаяСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.Свойство("Страницы") Тогда
			ЗаполнитьЗначенияСвойств(Страницы,Результат.Страницы);
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Загрузить результат отмены заказа.
// 
// Параметры:
//  Результат - Структура - Результат
//  ПараметрыОтмены - Структура - Параметры отмены:
// * Номер - Строка - 
// * СуммаОтмены - Число - 
// * РезультатОтмены - Число - 
//  ОперацияВыполнена - Булево - Операция выполнена
&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(Результат, ПараметрыОтмены, ОперацияВыполнена)
	
	ДокументыОснования = Неопределено;
	
	Если НЕ СервисДоставки.ЕстьОшибки(Результат, ОперацияВыполнена) Тогда
		
		Если Результат.ДокументОтменен Тогда
			Идентификатор = Результат.Идентификатор;
			НайденныеСтроки = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если НайденныеСтроки.Количество() Тогда
				ДокументыОснования = НайденныеСтроки[0].ДокументыОснования;
				Список.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			ПараметрыОтмены.РезультатОтмены = 1;
		ИначеЕсли Результат.ДоступнаПлатнаяОтмена Тогда
			ПараметрыОтмены.РезультатОтмены = 2;
			ПараметрыОтмены.СуммаОтмены = Результат.СуммаПлатнойОтмены;
		ИначеЕсли Не Результат.ДоступнаОтмена Тогда
			ПараметрыОтмены.РезультатОтмены = 3;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаСостояний(Результат, ОперацияВыполнена = Истина)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Список") Тогда
		
			ЭлементыДеревоСписка = ОтборДеревоСостояний.ПолучитьЭлементы();
			ЭлементыДеревоСписка.Очистить();
			
			ЭлементыСписка = Результат.Список;
			
			ТекущаяГруппа = "";
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				
				Если ТекущийЭлементСписка.НаименованиеГруппы = "" Тогда
					НовыйЭлементДерева = ЭлементыДеревоСписка.Добавить();
					НовыйЭлементДерева.Наименование = ТекущийЭлементСписка.Наименование;
					НовыйЭлементДерева.Идентификатор = ТекущийЭлементСписка.Идентификатор;
					ЭлементОтбора = ОтборСостояние.НайтиПоЗначению(НовыйЭлементДерева.Идентификатор);
					НовыйЭлементДерева.Пометка = (ЭлементОтбора <> Неопределено);
				Иначе
					Если ТекущаяГруппа <> ТекущийЭлементСписка.НаименованиеГруппы Тогда
						НовыйЭлементДерева = ЭлементыДеревоСписка.Добавить();
						НовыйЭлементДерева.Наименование = ТекущийЭлементСписка.НаименованиеГруппы;
						ТекущаяГруппа = НовыйЭлементДерева.Наименование;
					КонецЕсли;
					ЭлементыНовойВеткиДерева = НовыйЭлементДерева.ПолучитьЭлементы();
					ЭлементНовойВеткиДерева = ЭлементыНовойВеткиДерева.Добавить();
					ЭлементНовойВеткиДерева.Наименование = ТекущийЭлементСписка.Наименование;
					ЭлементНовойВеткиДерева.Идентификатор = ТекущийЭлементСписка.Идентификатор;
					ЭлементОтбора = ОтборСостояние.НайтиПоЗначению(ЭлементНовойВеткиДерева.Идентификатор);
					ЭлементНовойВеткиДерева.Пометка = (ЭлементОтбора <> Неопределено);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ОперацияВыполнена = Ложь;
			
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	Иначе
		
		ОперацияВыполнена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат, ОперацияВыполнена = Истина)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СервисДоставкиКлиент.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Если ОперацияВыполнена Тогда
			
			ЭлементыСписка = Результат.Список;//ТаблицаЗначений
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				
				Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
					
					Элементы.ГруппаПереходНаНовыйТипАвторизации.Видимость = ТекущийЭлементСписка.Свойство("УстаревшийТипАвторизации")
						И ТекущийЭлементСписка.УстаревшийТипАвторизации;
					
					ПараметрыФормыУстаревшегоПодключения = Новый Структура;
					ПараметрыФормыУстаревшегоПодключения.Вставить("Авторизован", Ложь);
					ПараметрыФормыУстаревшегоПодключения.Вставить("ИдентификаторСервиса", ТекущийЭлементСписка.ИдентификаторСервиса);
					ПараметрыФормыУстаревшегоПодключения.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
					ПараметрыФормыУстаревшегоПодключения.Вставить("Перевозчик", ТекущийЭлементСписка.Наименование);
					ПараметрыФормыУстаревшегоПодключения.Вставить("ТипАвторизации", ТекущийЭлементСписка.ТребуетсяАвторизация);
					ПараметрыФормыУстаревшегоПодключения.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
					ПараметрыФормыУстаревшегоПодключения.Вставить("УстаревшийТипАвторизации", ТекущийЭлементСписка.УстаревшийТипАвторизации);
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
			
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(Результат, ОперацияВыполнена = Истина)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СервисДоставкиКлиент.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
		Если ОперацияВыполнена Тогда
			
			СоответствиеСкладов.Очистить();
			
			ЭлементыСписка = Результат.Список;
			СписокВыбора = Элементы.ОтборПунктВыдачи.СписокВыбора;
			
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				
				НоваяСтрока = СоответствиеСкладов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементСписка);
				
				Если СписокВыбора.НайтиПоЗначению(НоваяСтрока.Идентификатор) = Неопределено Тогда
					
					СписокВыбора.Добавить(НоваяСтрока.Идентификатор,
						СтрШаблон("%1%2",
							НоваяСтрока.Наименование,
							?(НоваяСтрока.Склад.Пустая(), "", " (" + НоваяСтрока.Склад + ")")));
							
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат)
	
	ОперацияВыполнена = Ложь;
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОпцияДоступна") Тогда
			
			ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
			КомментарийОпцияКурьерика = Результат.Комментарий;
			БалансОпцияКурьерика = Результат.Баланс;
			СрокДействияОпцияКурьерика = ПрочитатьДатуJSON(Результат.СрокДействия, ФорматДатыJSON.ISO);
			
			Если Не ОпцияДоступнаКурьерика Тогда
				ДоступенТестовыйПериод = СервисДоставки.ДоступенТестовыйПериодСервисаСопровождения();
			КонецЕсли;
			
			СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
			УстановитьДоступностьЭлементовПоЗначениюОпции();
			
			ОперацияВыполнена = Истина;
			
		КонецЕсли;
		
		СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСпискаКурьеров(Результат, ОперацияВыполнена = Истина)
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		СервисДоставкиКлиент.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Если ОперацияВыполнена Тогда
			ЭлементыСписка = Результат.Список;
			СписокВыбора = Элементы.ОтборКурьер.СписокВыбора;
			СписокВыбора.Очистить();
			Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
				СписокВыбора.Добавить(ТекущийЭлементСписка.Идентификатор, СокрЛП(ТекущийЭлементСписка.Наименование));
			КонецЦикла;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ЗаполнитьНастройкиПодсистемы()
	
	МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ИспользоватьАвтообновление");
	МассивПараметров.Добавить("ИнтервалОбновленияИнформацииПоЗаказам");

	НастройкиПодсистемы = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначенияНастроек(МассивПараметров, ТипГрузоперевозки);
	
	ИспользоватьАвтообновление = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПодсистемы,
		"ИспользоватьАвтообновление", Ложь);
	ИнтервалОбновления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПодсистемы,
		"ИнтервалОбновленияИнформацииПоЗаказам", 0);
	
	Если ИспользоватьАвтообновление И ИнтервалОбновления > 0 Тогда
		ИнтервалОбновленияИнформацииПоЗаказам = ИнтервалОбновления * 60;
	Иначе
		ИнтервалОбновленияИнформацииПоЗаказам = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнформацииПоЗаказам() Экспорт
	
	ПолучитьЗаказыНаДоставку( , "ОбновлениеИнформацииПоЗаказам");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнформацииПоТребуемымДействиямСЗаказамиНаДоставку()
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		Результат = ОбновлениеИнформацииПоТребуемымДействиямСЗаказамиНаДоставкуНаСервере();
		
		Если Результат.КоличествоНовыхЗаказовКПовторнойОтправке > 0 Тогда
				
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Заказы требуют отправки'"),,
					СтрШаблон(
						НСтр("ru = 'Появились заказы (%1), требующие повторной отправки'"),
						Формат(Результат.КоличествоНовыхЗаказовКПовторнойОтправке, НСтр("ru = 'ЧГ='"))),
						БиблиотекаКартинок.ПредупреждениеБЭД,
						СтатусОповещенияПользователя.Информация);
					
		КонецЕсли;
		
		Если Результат.КоличествоНовыхЗаказовТребующихОбработкиЧастичнойДоставки > 0 Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Заказы требуют обработки'"),,
					СтрШаблон(
						НСтр("ru = 'Появились заказы с частичной доставкой (%1), требующие обработки'"),
						Формат(Результат.КоличествоНовыхЗаказовТребующихОбработкиЧастичнойДоставки, НСтр("ru = 'ЧГ='"))),
						БиблиотекаКартинок.ПредупреждениеБЭД,
						СтатусОповещенияПользователя.Информация);
					
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеИнформацииПоТребуемымДействиямСЗаказамиНаДоставкуНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоНовыхЗаказовКПовторнойОтправке", НайтиЗаказыТребующиеПовторнойОтправки());
	Результат.Вставить("КоличествоНовыхЗаказовТребующихОбработкиЧастичнойДоставки", НайтиЗаказыТребующиеОбработкиЧастичнойДоставки());
	
	КоличествоЗаказовКПовторнойОтправке = СписокЗаказовТребуетсяПовторнаяОтправка.Количество();
	КоличествоЗаказовТребующихОбработкиЧастичнойДоставки = СписокЗаказовТребуетсяОбработкаЧастичнойДоставки.Количество();
		
	Элементы.ГруппаТребуютсяДействияПользователя.Видимость = КоличествоЗаказовКПовторнойОтправке > 0
		Или КоличествоЗаказовТребующихОбработкиЧастичнойДоставки > 0;
		
	Элементы.ДекорацияКартинкаТребуютсяДействияПользователя.Видимость = Элементы.ГруппаТребуютсяДействияПользователя.Видимость;
	
	//ТребуетсяПовторнаяОтправка
	Элементы.ДекорацияТребуетсяПовторнаяОтправка.Видимость = КоличествоЗаказовКПовторнойОтправке > 0;
		
	Элементы.ДекорацияТребуетсяПовторнаяОтправка.Заголовок = СтрШаблон(
		НСтр("ru = 'повторная отправка (%1)'"), Формат(
			КоличествоЗаказовКПовторнойОтправке, "ЧН=; ЧГ="));

	//ТребуетсяОбработкаЧастичнойДоставки
	Элементы.ДекорацияТребуетсяОбработкаЧастичнойДоставки.Видимость = КоличествоЗаказовТребующихОбработкиЧастичнойДоставки > 0;

	Элементы.ДекорацияТребуетсяОбработкаЧастичнойДоставки.Заголовок = СтрШаблон(
		НСтр("ru = 'обработка частичной доставки (%1)'"), Формат(
			КоличествоЗаказовТребующихОбработкиЧастичнойДоставки, "ЧН=; ЧГ="));

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеРедактированияНастроек(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОбновлениеИнформацииПоЗаказам");
	
	ЗаполнитьНастройкиПодсистемы();
	
	Если ЗначениеЗаполнено(ИнтервалОбновленияИнформацииПоЗаказам) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеИнформацииПоЗаказам", ИнтервалОбновленияИнформацииПоЗаказам);
	КонецЕсли;
	
	НоваяОрганизацияБизнесСети = Значение.ОрганизацияБизнесСети;
	Если ЗначениеЗаполнено(НоваяОрганизацияБизнесСети) И НоваяОрганизацияБизнесСети <> ОрганизацияБизнесСетиСсылка Тогда
		ОрганизацияБизнесСетиСсылка = НоваяОрганизацияБизнесСети;
		ПолучитьЗаказыНаДоставку( , "ОрганизацияБизнесСети");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНомераСтраницы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Страницы.Страница = Результат;
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда // Отменить
		ОтменитьЗаказНаДоставку();
	ИначеЕсли Результат = КодВозвратаДиалога.Повторить Тогда // Отменить платно
		ОтменитьЗаказНаДоставку(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура(); 
	
	ИмяРеквизита = Элемент.Имя;
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);

	ИначеЕсли ВыбранноеЗначение = 2 Тогда
			
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 3 Тогда
			
		АдресНачалоВыбора(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределяемыйТипСодержитТипЗначения(ИмяОпределяемогоТипа, Значение)
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа].Тип.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	ЭтоЯндекс = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер();
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();
	ЭтоСДЭК = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК();
	
	ПредставлениеТипаГрузоперевозки = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки);
	Заголовок = СтрШаблон(НСтр("ru = '%1: Заказы на доставку'"),
		ПредставлениеТипаГрузоперевозки);
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/command/" + СтрЗаменить(ИмяФормы, "Форма", "Команда");
	Если ЭтоЯндекс Тогда
		НавигационнаяСсылка = НавигационнаяСсылка + "1СКурьер";
	ИначеЕсли ЭтоКурьерика Тогда
		НавигационнаяСсылка = НавигационнаяСсылка + "1СКурьерика";
	ИначеЕсли ЭтоСДЭК Тогда
		НавигационнаяСсылка = НавигационнаяСсылка + "1ССДЭК";
	КонецЕсли;
	
	Элементы.ВыбратьСтрокуИзСписка.Видимость = РежимВыбора;
	Элементы.ВыбратьСтрокуИзСписка.КнопкаПоУмолчанию = РежимВыбора;
	Элементы.ГруппаОтборыНаложенныйПлатеж.Видимость = ЭтоЯндекс Или ЭтоСДЭК;
	Элементы.ГруппаПериодДатаОтгрузки.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаПодпискаНаСервис.Видимость = ЭтоКурьерика;
	Элементы.ГруппаДействияСНаложеннымиПлатежами.Видимость = (ЭтоЯндекс
		И ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1СКурьер")) Или (ЭтоСДЭК
		И ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1ССДЭК"));
	Элементы.ДоступныеПеревозчики.Видимость = Не РежимВыбора;
	Элементы.ОбработкаСервисДоставкиОтслеживаниеЗаказа.Видимость = Не РежимВыбора И Не ЭтоКурьерика;
	Элементы.ОбщиеНастройки.Видимость = Не РежимВыбора;
	Элементы.ОтборКурьер.Видимость = ЭтоКурьерика;
	Элементы.ОтборОтправитель.Видимость = Не ЭтоКурьерика;
	Элементы.ОтборОтправительАдрес.Видимость = Не ЭтоКурьерика;
	Элементы.ОтборПунктВыдачи.Видимость = ЭтоКурьерика;
	Элементы.ОтборСостояние.Доступность = Не РежимВыбора;
	Элементы.ОтборСтатусОплаты.Видимость = ЭтоДеловыеЛинии Или ЭтоКурьерика;
	Элементы.ОтборРольОрганизации.Видимость = Не ЭтоКурьерика;
	Элементы.ОткрытьЖурналЗаказов.Видимость = ЭтоДеловыеЛинии;
	Элементы.ОткрытьОтчетРеестрЗаказовПоКурьеру.Видимость = ЭтоКурьерика;
	Элементы.Отправить.Видимость = Не РежимВыбора И ДоступнаОтправкаЗаказовНаДоставку И Не (ЭтоКурьерика Или ЭтоСДЭК);
	Элементы.ПоказыватьЗаказыИзМультизаказов.Видимость = ЭтоДеловыеЛинии Или ЭтоЯндекс;
	Элементы.СписокГруппаНаложенныйПлатеж.Видимость = ЭтоЯндекс Или ЭтоСДЭК;
	Элементы.СписокДатаОтгрузки.Видимость = Не ЭтоКурьерика;
	Элементы.СписокКурьерНаименование.Видимость = ЭтоКурьерика Или ЭтоЯндекс;
	Элементы.СписокМультизаказДата.Видимость = Не (ЭтоКурьерика Или ЭтоСДЭК);
	Элементы.СписокМультизаказНомер.Видимость = Не (ЭтоКурьерика Или ЭтоСДЭК);
	Элементы.СписокМультизаказПредставление.Видимость = Не (ЭтоКурьерика Или ЭтоСДЭК);
	Элементы.СписокОплатаЗаказаКурьерика.Видимость = ЭтоКурьерика;
	Элементы.СписокОтправитель.Видимость = Не ЭтоКурьерика;
	Элементы.СписокОтправительАдресПолный.Видимость = Не ЭтоКурьерика;
	Элементы.СписокСоздать.Видимость = Не РежимВыбора;
	Элементы.СписокТрекНомер.Видимость = Не ЭтоКурьерика;
	Элементы.СписокПечать.Видимость = Не ЭтоКурьерика;
	Элементы.СписокПунктВыдачи.Видимость = ЭтоКурьерика;
	Элементы.Шаблоны.Видимость = ЭтоСДЭК;
	
	УстановитьВидимостьДоступностьЭлементовМультизаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКомандуСТекущимРазмеромСтраницы()
	
	Элементы.ИзменитьРазмерСтраницы20.Видимость = Истина;
	Элементы.ИзменитьРазмерСтраницы40.Видимость = Истина;
	Элементы.ИзменитьРазмерСтраницы60.Видимость = Истина;
	Элементы.ИзменитьРазмерСтраницы100.Видимость = Истина;
	
	Элементы["ИзменитьРазмерСтраницы" + РазмерСтраницы].Видимость = Ложь;
	Элементы.ГруппаРазмерСтраницы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 строк'"),
		РазмерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокРолейОрганизации = Элементы.ОтборРольОрганизации.СписокВыбора;
	СписокРолейОрганизации.Очистить();
	СписокРолейОрганизации.Добавить(1, НСтр("ru='Отправитель'"));
	СписокРолейОрганизации.Добавить(2, НСтр("ru='Получатель'"));
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
		СписокРолейОрганизации.Добавить(4, НСтр("ru='Третья сторона'"));
	Иначе
		СписокРолейОрганизации.Добавить(3, НСтр("ru='Плательщик'"));
	КонецЕсли;
	
	СписокСтатусовОплаты = Элементы.ОтборСтатусОплаты.СписокВыбора;
	СписокСтатусовОплаты.Очистить();
	СписокСтатусовОплаты.Добавить(1, НСтр("ru='Оплачен'"));
	СписокСтатусовОплаты.Добавить(2, НСтр("ru='Требует оплаты'"));
	
	СписокСтатусовОплаты = Элементы.ОтборНаложенныйПлатеж.СписокВыбора;
	СписокСтатусовОплаты.Очистить();
	СписокСтатусовОплаты.Добавить(1, НСтр("ru='С наложенным платежом'"));
	СписокСтатусовОплаты.Добавить(2, НСтр("ru='Без наложенного платежа'"));
	
	СписокСтатусовОплаты = Элементы.ОтборНаложенныйПлатежПолучен.СписокВыбора;
	СписокСтатусовОплаты.Очистить();
	СписокСтатусовОплаты.Добавить(1, НСтр("ru='Оплачен'"));
	СписокСтатусовОплаты.Добавить(2, НСтр("ru='Требует оплаты'"));
	
	СписокСтатусовВсе = Элементы.ОтборСостояние.СписокВыбора;
	СписокСтатусовВсе.Очистить();
	СписокСтатусовВсе.Добавить(101, НСтр("ru='Все черновики'"));
	СписокСтатусовВсе.Добавить(102, НСтр("ru='Все к отгрузке'"));
	СписокСтатусовВсе.Добавить(103, НСтр("ru='Все отгруженные'"));
	СписокСтатусовВсе.Добавить(104, НСтр("ru='Все готовые к выдаче'"));
	СписокСтатусовВсе.Добавить(105, НСтр("ru='Все возвращаемые'"));
	СписокСтатусовВсе.Добавить(106, НСтр("ru='Все отмененные'"));
	СписокСтатусовВсе.Добавить(107, НСтр("ru='Настроить...'"),,БиблиотекаКартинок.НастройкаСписка);
	
	СписокВыбора = Элементы.ОрганизацияСсылка.СписокВыбора;
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл //Структура
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	КлючНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	Если Настройки = Неопределено Тогда
		Настройки = Новый Соответствие;
	КонецЕсли;
	
	Если Настройки.Получить("ОрганизацияБизнесСетиСсылка") <> Неопределено 
		И ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
		Настройки.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекФормы,,Настройки);
	КонецЕсли;
	
	КлючОбщихНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов";
	ОтборРольОрганизации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбщихНастроекФормы, "ОтборРольОрганизации",
		?(Настройки.Получить("ОтборРольОрганизации") = Неопределено, 0, Настройки.Получить("ОтборРольОрганизации")));
	ОтборРольОрганизацииПоискЗначение = Элементы.ОтборРольОрганизации.СписокВыбора.НайтиПоЗначению(ОтборРольОрганизации);
	Если ОтборРольОрганизацииПоискЗначение = Неопределено Тогда
		ОтборРольОрганизации = 0;
	Иначе
		ОтборРольОрганизацииПредставление = ОтборРольОрганизацииПоискЗначение.Представление;
	КонецЕсли;
	
	Если ОтборСостояние.Количество() = 0 Тогда
		ОтборСостояние = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбщихНастроекФормы, "ОтборСостояние", 
							Настройки.Получить("ОтборСостояние"));
	КонецЕсли;

	ПериодДатаСоздания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбщихНастроекФормы, "ПериодДатаСоздания",
							?(Настройки.Получить("ПериодДатаСоздания") = Неопределено, ВариантСтандартногоПериода.Месяц, Настройки.Получить("ПериодДатаСоздания")));
	РазмерСтраницы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбщихНастроекФормы, "РазмерСтраницы",
							?(Настройки.Получить("РазмерСтраницы") = Неопределено, 20, Настройки.Получить("РазмерСтраницы")));
	
	Страницы = СервисДоставки.НовыйПараметрыСтраницСервиса(РазмерСтраницы);

	СформироватьПредставленияПоНаложеннымПлатежам(Элементы.ЗагрузитьНаложенныеПлатежи);

	КлючОбщихНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов." + ТипГрузоперевозки;
	ПоказыватьТолькоМультизаказы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбщихНастроекФормы, "ПоказыватьТолькоМультизаказы",
							ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКэшированныеЗначения()
	
	Кэш = СервисДоставки.ПолучитьКэшированныеЗначения(ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки);
	
	Кэш.Вставить("СписокНаселенныхПунктовОтгрузка", Новый СписокЗначений);
	Кэш.Вставить("СписокНаселенныхПунктовПриемка", Новый СписокЗначений);
	
	ЗагрузитьРезультатПолученияСпискаСостояний(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш,
		СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния()));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставленияПоНаложеннымПлатежам(ЭлементЗагрузитьНаложенныеПлатежи, ИдетПроцессЗагрузки = Ложь)
	
	ЭлементЗагрузитьНаложенныеПлатежи.Доступность = Не ИдетПроцессЗагрузки;
	Если ИдетПроцессЗагрузки Тогда
		ЭлементЗагрузитьНаложенныеПлатежи.Заголовок = НСтр("ru = 'Идет процесс загрузки'");
	Иначе
		ЭлементЗагрузитьНаложенныеПлатежи.Заголовок = НСтр("ru = 'Загрузить'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДокументОснованиеПредставление.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЕстьДокументыОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйТекстСервисДоставки);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЭтоМультизаказ");
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ШрифтВыделенныйСервисДоставки);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМультизаказПредставление.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЭтоМультизаказ");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.МультизаказПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйТекстСервисДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыОтбораДляРолиОрганизации()
	
	Если ОтборРольОрганизации = 1 Тогда
		
		Если ОпределяемыйТипСодержитТипЗначения("КонтрагентСервисДоставки", ОтборОтправитель) Тогда
			ОтборОтправитель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборРольОрганизации = 2 Тогда
		
		Если ОпределяемыйТипСодержитТипЗначения("КонтрагентСервисДоставки", ОтборПолучатель) Тогда
			ОтборПолучатель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОтправитель();
	ЗаполнитьСписокВыбораПолучатель();
	ЗаполнитьСписокВыбораОтборОткуда();
	ЗаполнитьСписокВыбораОтборКуда();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНавигационноеМеню()
	
	Элементы.ГруппаНавигация.Доступность = (Страницы.КоличествоСтраниц > 1);
	
	КоличествоСтраницНадпись = ?(Страницы.КоличествоСтраниц=1,1,Страницы.КоличествоСтраниц);
	Элементы.НавигацияСтраницаТекущаяСтраница.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Страница %1 из %2'"),
			Страницы.Страница, КоличествоСтраницНадпись);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовМультизаказов()
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка()
		Или ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		
		Элементы.ПоказыватьЗаказыИзМультизаказов.Пометка = Не ПоказыватьТолькоМультизаказы;
		Элементы.СписокМультизаказНомер.Видимость = Не ПоказыватьТолькоМультизаказы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаДоставку()
	
	ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыОткрытияФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки, Неопределено);
	ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;

	ПараметрыОткрытияФормы.Уникальность =  СтрШаблон("ЭтоНовый_%1", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.РежимМастера = 0;
	ПараметрыОткрытияФормы.ИдентификаторЗаказа = "";
	
	ДополнитьПараметрыОткрытияФормы(ПараметрыОткрытияФормы, "СоздатьЗаказНаДоставку");
	ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаказа(ДанныеПоЗаказу, ЭтоЗаполнениеКопированием = Ложь)
	
	ПараметрыОткрытияФормы = СервисДоставкиКлиент.НовыйПараметрыОткрытьФормуСервисаДоставки();
	ПараметрыОткрытияФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки, Неопределено);
	ПараметрыОткрытияФормы.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыОткрытияФормы.ОрганизацияБизнесСети = ОрганизацияБизнесСетиСсылка;
	
	Если ЭтоЗаполнениеКопированием Тогда
		ПараметрыОткрытияФормы.Вставить("РежимМастера", 0);
		ПараметрыОткрытияФормы.Вставить("Уникальность", СтрШаблон("ЭтоНовый_%1", ТипГрузоперевозки));
	Иначе
		ПараметрыОткрытияФормы.Вставить("РежимМастера", ?(ДанныеПоЗаказу.СостояниеИдентификатор = 0, 1, 2));
		ПараметрыОткрытияФормы.Вставить("ДокументОснованиеДляДобавления", ДокументОснование);
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ДанныеПоЗаказу.Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ЭтоЗаполнениеКопированием", ЭтоЗаполнениеКопированием);
	
	ДополнитьПараметрыОткрытияФормы(ПараметрыОткрытияФормы);
	ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы)
	
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиКлиент.ОткрытьФормуСервисаДоставки(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПараметрыОткрытияФормы(ПараметрыОткрытияФормы, КлючОперации = "")
	
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		
		Если ПустаяСтрока(КлючОперации) Или (КлючОперации = "СоздатьЗаказНаДоставку" И ОпцияДоступнаКурьерика) Тогда
			ПараметрыОткрытияФормы.Вставить("СоответствиеСкладов", СоответствиеСкладов);
			ПараметрыОткрытияФормы.Вставить("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
			ПараметрыОткрытияФормы.Вставить("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
			ПараметрыОткрытияФормы.Вставить("БалансОпцияКурьерика", БалансОпцияКурьерика);
			ПараметрыОткрытияФормы.Вставить("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
			ПараметрыОткрытияФормы.Вставить("ОтображатьУведомлениеПоОпцииКурьерика", ОтображатьУведомлениеПоОпцииКурьерика);
		КонецЕсли;
		
		Если КлючОперации = "СоздатьЗаказНаДоставку" И ЗначениеЗаполнено(ОтборПунктВыдачи) Тогда
			ПараметрыОткрытияФормы.Вставить("ПунктВыдачи", ОтборПунктВыдачи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСостояний()
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборСтатусовОтбораОкончание", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Выбор состояний'"));
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", ОтборДеревоСостояний);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ВыборЗначенийВИерархическомСписке", ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтатусовОтбораОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Результат.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ОтборСостояние.Очистить();
		
		ЭлементыДеревоСписка = ОтборДеревоСостояний.ПолучитьЭлементы();
		ЭлементыДеревоСписка.Очистить();
		
		ЭлементыДерева = Результат.ПолучитьЭлементы();
		
		Для Каждого ТекущийЭлементДерева Из ЭлементыДерева Цикл
			НовыйЭлементДерева = ЭлементыДеревоСписка.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементДерева, ТекущийЭлементДерева);
			
			ЭлементыВеткиДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
			Если ЭлементыВеткиДерева.Количество() Тогда
				ЭлементыНовойВеткиДерева = НовыйЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементВеткиДерева Из ЭлементыВеткиДерева Цикл
					ЭлементНовойВеткиДерева = ЭлементыНовойВеткиДерева.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементНовойВеткиДерева, ЭлементВеткиДерева);
					
					Если ЭлементВеткиДерева.Пометка Тогда
						ОтборСостояние.Добавить(ЭлементВеткиДерева.Идентификатор, ЭлементВеткиДерева.Наименование);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Если ТекущийЭлементДерева.Пометка Тогда
					ОтборСостояние.Добавить(ТекущийЭлементДерева.Идентификатор, ТекущийЭлементДерева.Наименование);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьПредставлениеОтбораСостояния();
		
		ПолучитьЗаказыНаДоставку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьУникальныйИдентификаторАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	ПараметрыАдреса = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	ПараметрыАдреса.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(ПараметрыАдреса);
	КонецЕсли;
	
	Возврат ПараметрыАдреса;
	
КонецФункции

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент)

	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации();
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВидаКонтактнойИнформации.Вид) = Тип("Структура") Тогда
		ПараметрыВидаКонтактнойИнформации.Вид.НастройкиПроверки.ПроверятьКорректность = Ложь;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	АдресПредставление = ЭтотОбъект[ИмяРеквизитаПредставление];
	АдресЗначенияПолей = ЭтотОбъект[ИмяРеквизитаЗначенияПолей];
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, АдресЗначенияПолей,
		АдресПредставление,, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ТекстЗаголовка = "Адрес";
	Если СтрНайти(Элемент.Имя, "Отправитель") Тогда
		ТекстЗаголовка = ТекстЗаголовка + " отправления";
	ИначеЕсли СтрНайти(Элемент.Имя, "Получатель") Тогда
		ТекстЗаголовка = ТекстЗаголовка + " получения";
	КонецЕсли;
		
	ПараметрыОткрытия.Вставить("Заголовок", ТекстЗаголовка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита",	ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока="")
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
		Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
		
		ОбработатьРеквизитыАдреса(ИмяРеквизита);
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();

КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыАдреса(ИмяРеквизита)
	
	СервисДоставкиСлужебный.УстановитьЗначенияАдреса(ЭтотОбъект, ИмяРеквизита);
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(ПериодИмя)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ЭтотОбъект[ПериодИмя];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ПериодИмя);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранноеЗначение;
	 
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСпискаПлатежныхДокументов(Знач Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("ДоговорыЭквайринга", Новый Массив);
	
	// Доступные договоры эквайринга по наложенным платежам через СБП
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЗагрузкиНаложенныхПлатежейСервисДоставки.ДоговорЭквайринга КАК ДоговорЭквайринга
	|ИЗ
	|	РегистрСведений.НастройкиЗагрузкиНаложенныхПлатежейСервисДоставки КАК НастройкиЗагрузкиНаложенныхПлатежейСервисДоставки
	|ГДЕ
	|	НастройкиЗагрузкиНаложенныхПлатежейСервисДоставки.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.ДоговорыЭквайринга.Добавить(Выборка.ДоговорЭквайринга);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьПараметрыОтбора()
	
	// Быстрые отборы.
	
	БыстрыеОтборы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборОтправитель) Тогда
		БыстрыеОтборы.Добавить("ОтборОтправитель", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправитель: %1'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОтправитель, "Наименование")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтправительАдресПредставление) Тогда
		БыстрыеОтборы.Добавить("ОтборОтправительАдрес",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Откуда: %1'"), 
				ОтборОтправительАдресПредставление));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучатель) Тогда
		БыстрыеОтборы.Добавить("ОтборПолучатель", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получатель: %1'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПолучатель, "Наименование")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучательАдресПредставление) Тогда
		БыстрыеОтборы.Добавить("ОтборПолучательАдрес", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Куда: %1'"),
			ОтборПолучательАдресПредставление));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСтатусОплаты) Тогда
		БыстрыеОтборы.Добавить("ОтборСтатусОплаты", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата: %1'"),
			ОтборСтатусОплатыНаименование));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаСоздания) Тогда
		БыстрыеОтборы.Добавить("ПериодДатаСоздания", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дата создания: %1'"),
			ПериодДатаСоздания));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаОтгрузки) Тогда
		БыстрыеОтборы.Добавить("ПериодДатаОтгрузки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дата отгрузки: %1'"),
			ПериодДатаОтгрузки));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодДатаДоставки) Тогда
		БыстрыеОтборы.Добавить("ПериодДатаДоставки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дата доставки: %1'"),
			ПериодДатаДоставки));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНомерЗаказа) Тогда
		БыстрыеОтборы.Добавить("ОтборНомерЗаказа", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Номер заказа: %1'"),
			ОтборНомерЗаказа));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборДокументОснование) Тогда
		БыстрыеОтборы.Добавить("ОтборДокументОснование", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ-основание: %1'"),
			ОтборДокументОснование));
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборНаложенныйПлатеж) Тогда
		БыстрыеОтборы.Добавить("ОтборНаложенныйПлатеж", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заказы: %1'"), 
			Элементы.ОтборНаложенныйПлатеж.СписокВыбора.НайтиПоЗначению(ОтборНаложенныйПлатеж)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаложенныйПлатежПолучен) Тогда
		БыстрыеОтборы.Добавить("ОтборНаложенныйПлатежПолучен", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Наложенный платеж: %1'"), 
			Элементы.ОтборНаложенныйПлатежПолучен.СписокВыбора.НайтиПоЗначению(ОтборНаложенныйПлатежПолучен)));
	КонецЕсли;
		
	// Удаление старых элементов быстрых отборов.
	КоличествоЭлементов = Элементы.ГруппаОтборыОтображение.ПодчиненныеЭлементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ЭлементОтбора = Элементы.ГруппаОтборыОтображение.ПодчиненныеЭлементы[КоличествоЭлементов - ОбратныйИндекс];
		Если ЭлементОтбора.Видимость Тогда
			Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых элементов быстрых отборов.
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"), 
			Элементы.ГруппаОтборыОтображение);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		
		НачалоПредставления = Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":"));
		КонецПредставления = Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1);
		
		НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='%1 <span style=""color: ЦветВажнойНадписиБИП"">%2</span>'"),
			НачалоПредставления,
			КонецПредставления);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.ПолеВводаОчистить;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
	КонецЦикла;
	
КонецПроцедуры

// Подключаемый нажатие.
// 
// Параметры:
//  Элемент - ПолеФормы
&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если СтрНайти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если ИмяРеквизита = "ОтборДокументОснование" Тогда
			ОтборДокументОснование = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборОтправитель" Тогда
			ОтборОтправитель = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборОтправительАдрес" Тогда
			ОтборОтправительАдресПредставление = "";
			ОтборОтправительАдресЗначение = "";
			ОтборОтправительАдресВладелец = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборПолучатель" Тогда
			ОтборПолучатель = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборПолучательАдрес" Тогда
			ОтборПолучательАдресПредставление = "";
			ОтборПолучательАдресЗначение = "";
			ОтборПолучательАдресВладелец = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборСтатусОплаты" Тогда
			ОтборСтатусОплатыНаименование = "";
			ОтборСтатусОплаты = 0;
		ИначеЕсли ИмяРеквизита = "ОтборНаложенныйПлатеж" Тогда
			ОтборНаложенныйПлатеж = 0;
			ОтборНаложенныйПлатежНаименование = "";
		ИначеЕсли ИмяРеквизита = "ОтборНаложенныйПлатежПолучен" Тогда
			ОтборНаложенныйПлатежПолучен = 0;
			ОтборНаложенныйПлатежПолученНаименование = "";
		Иначе
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				ЭтотОбъект[ИмяРеквизита] = Ложь;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
				ЭтотОбъект[ИмяРеквизита] = 0;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЭтотОбъект[ИмяРеквизита] = "";
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
					ЭлементСписка.Пометка = Ложь;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СтандартныйПериод") Тогда
				ЭтотОбъект[ИмяРеквизита] = Неопределено;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОтборыИзменение = Ложь;
		СформироватьНадписьОтбора();
		ПолучитьЗаказыНаДоставку();
		
	ИначеЕсли СтрНайти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если ИмяРеквизита = "ПериодДатаСоздания" Тогда
			ИмяРеквизита = "ПериодДатаСозданияДатаНачала";
		КонецЕсли;
		
		Если ИмяРеквизита = "ПериодДатаОтгрузки" Тогда
			ИмяРеквизита = "ПериодДатаОтгрузкиДатаНачала";
		КонецЕсли;
		
		Если ИмяРеквизита = "ПериодДатаДоставки" Тогда
			ИмяРеквизита = "ПериодДатаДоставкиДатаНачала";
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
	СформироватьПараметрыОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеОтборов(ОтборыБылиИзменены = Истина, Реквизит = "", СтандартнаяОбработка = Истина)
	
	Если Не ПустаяСтрока(Реквизит) И Не ЗначениеЗаполнено(ЭтотОбъект[Реквизит]) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ОтборыИзменение = ОтборыБылиИзменены;
	СформироватьПараметрыОтбора();
	СброситьСтраницы();
	ОбновитьНавигационноеМеню();
	СформироватьНадписьОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОтправитель()
	
	СписокВыбора = Элементы.ОтборОтправитель.СписокВыбора;
	СписокВыбора.Очистить();
	
	ЭтоОрганизация = ОтборРольОрганизации = 1;
	
	Элементы.ОтборОтправитель.КнопкаВыбора = ЭтоОрганизация;
	Элементы.ОтборОтправитель.КнопкаВыпадающегоСписка = Не ЭтоОрганизация;
	
	Если Элементы.ОтборОтправитель.КнопкаВыпадающегоСписка Тогда 
		СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
		СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПолучатель()
	
	СписокВыбора = Элементы.ОтборПолучатель.СписокВыбора;
	СписокВыбора.Очистить();
	
	ЭтоОрганизация = ОтборРольОрганизации = 2;
	
	Элементы.ОтборПолучатель.КнопкаВыбора = ЭтоОрганизация;
	Элементы.ОтборПолучатель.КнопкаВыпадающегоСписка = Не ЭтоОрганизация;
	
	Если Элементы.ОтборПолучатель.КнопкаВыпадающегоСписка Тогда 
		СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
		СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОтборОткуда()
	
	СписокВыбора = Элементы.ОтборОтправительАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(1, НСтр("ru='Наш склад...'"));
	
	Если ОтборРольОрганизации <> 1 Тогда 
		СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОтборКуда()
	
	СписокВыбора = Элементы.ОтборПолучательАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(1, НСтр("ru='Наш склад...'"));
	
	Если ОтборРольОрганизации <> 2 Тогда 
		СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
	
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		ОбработатьИзменениеЗначения(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеЗначения(ИмяРеквизита)
	
	ОчиститьСообщения();
	ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита);
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита)
	
	Если ИмяРеквизита = "ОтборОтправительАдресВладелец" 
		ИЛИ ИмяРеквизита = "ОтборПолучательАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ОбработатьРеквизитыАдреса(ИмяЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура; 
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтборы(Отказ)
	
	Если ОтборОтправительАдресПредставление <> "" Тогда
		ПроверитьРеквизитыАдреса("ОтборОтправительАдрес", Отказ, Истина);
	КонецЕсли;
	
	Если ОтборПолучательАдресПредставление <> "" Тогда
		ПроверитьРеквизитыАдреса("ОтборПолучательАдрес", Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьОтбора()
	
	ТекстЗаголовка = НСтр("ru='Настроить отбор'");
	Элементы.ГруппаОтборы.Заголовок = ?(ОтборыИзменение, ТекстЗаголовка + "*", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьСтраницы()
	
	Страницы.Вставить("Страница", 0);
	Страницы.Вставить("КоличествоСтраниц", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено, 
	ИмяПроцедурыОбработки="ОбработатьВыборЗначения")
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
														Новый Структура("ИмяРеквизита", ИмяРеквизита));
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтотОбъект,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникГрузоперевозкиНачалоВыбора(Элемент, НомерРоли, СтандартнаяОбработка)
	
	Если Не Элемент.КнопкаВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.Имя];
	
	Если ОтборРольОрганизации = НомерРоли Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя);
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ОпределяемыйТипСодержитТипЗначения("ОрганизацияСервисДоставки", ЗначениеРеквизита) Тогда
			ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя);
		Иначе
			ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоНомеруСтраницы(НомерСтраницы)
	
	Если НомерСтраницы < 0
		ИЛИ (НомерСтраницы > (Страницы.КоличествоСтраниц))
		ИЛИ (НомерСтраницы = (Страницы.Страница)) Тогда
		Возврат;
	КонецЕсли;
	
	Страницы.Страница = НомерСтраницы;
	
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеОтбораСостояния()
	
	ОтборСостояниеПредставление = "";
	
	Для Каждого ТекущийЭлементСписка Из ОтборСостояние Цикл
		ОтборСостояниеПредставление = ОтборСостояниеПредставление + ?(ОтборСостояниеПредставление = "","",", ")
										+ ТекущийЭлементСписка.Представление;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоллекцияСостоянийПоИдентификатору(Идентификатор)
	
	Коллекция = Новый Массив();
	
	МассивКоллекций = Новый Массив();
	МассивКоллекций.Добавить("0"); //Все черновики
	МассивКоллекций.Добавить("1,2,3,21"); //Все к отгрузке
	МассивКоллекций.Добавить("4,5,6,8,22"); //Все отгруженные
	МассивКоллекций.Добавить("7"); //Все готовые к выдаче
	МассивКоллекций.Добавить("9"); //Все возвращаемые
	МассивКоллекций.Добавить("18"); //Все отмененные
	
	Индекс = Идентификатор-101;
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Если Индекс >= 0 И Индекс < МассивКоллекций.Количество() Тогда
		КоллекцияСтрока = МассивКоллекций[Индекс];
		КоллекцияВСтроках = СтрРазделить(КоллекцияСтрока,",");
		Для Каждого ТекущийЭлементСписка Из КоллекцияВСтроках Цикл
			Коллекция.Добавить(ТипЧисло.ПривестиЗначение(ТекущийЭлементСписка));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

&НаКлиенте
Функция НомерЗаказаНекорректный(ТекстНомераЗаказа)
	
	Результат = Ложь;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстНомераЗаказа) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Если СтрДлина(ТекстНомераЗаказа) > 9 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыбораЗаказаНаДоставку(ВыбраннаяСтрока)
	
	Если ОбработкаВыбора = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку() Тогда
		ОткрытьФормуЗаказа(Список.НайтиПоИдентификатору(ВыбраннаяСтрока));
		Закрыть();
	Иначе
		СервисДоставкиКлиентПереопределяемый.ОбработатьРезультатВыбораЗаказаНаДоставку(ЭтотОбъект, 
			Список.НайтиПоИдентификатору(ВыбраннаяСтрока),
			ОбработкаВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСпискаПоУмолчанию()
	
	КлючОбщихНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов";
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбщихНастроекФормы, "ОтборРольОрганизации", ОтборРольОрганизации);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбщихНастроекФормы, "ОтборСостояние", ОтборСостояние);
	//@skip-warning
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбщихНастроекФормы, "ПериодДатаСоздания", ПериодДатаСоздания);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбщихНастроекФормы, "РазмерСтраницы", РазмерСтраницы);
	
	КлючОбщихНастроекФормы = "Обработка.СервисДоставки.Форма.СписокЗаказов." + ТипГрузоперевозки;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбщихНастроекФормы, "ПоказыватьТолькоМультизаказы", ПоказыватьТолькоМультизаказы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоЗначениюОпции()
	
	Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
	Элементы.ВыбратьСтрокуИзСписка.Доступность = ОпцияДоступнаКурьерика;
	Элементы.Отправить.Доступность = ОпцияДоступнаКурьерика;
	Элементы.ГруппаДействия.Доступность = ОпцияДоступнаКурьерика;
	Элементы.ГруппаСписокЗаказов.ТолькоПросмотр = Не ОпцияДоступнаКурьерика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииОкнаАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьГрузоперевозчиков();
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаказыТребующиеПовторнойОтправки()
	
	ПараметрыОтбораЗаказов = Новый Структура;
	ПараметрыОтбораЗаказов.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ТипГрузоперевозки));
	ПараметрыОтбораЗаказов.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	
	КоличествоЗаказовДоОбновления = СписокЗаказовТребуетсяПовторнаяОтправка.Количество();
	
	СписокЗаказовТребуетсяПовторнаяОтправка.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьСписок(
		СписокЗаказовТребуетсяПовторнаяОтправка,
		РегистрыСведений.ЖурналЗаказовСервисДоставки.ЗаказыКПовторнойОтправке(ПараметрыОтбораЗаказов));
		
	КоличествоЗаказовПослеОбновления = СписокЗаказовТребуетсяПовторнаяОтправка.Количество();
	
	Возврат КоличествоЗаказовПослеОбновления - КоличествоЗаказовДоОбновления;
	
КонецФункции

&НаСервере
Функция НайтиЗаказыТребующиеОбработкиЧастичнойДоставки()
	
	ПараметрыОтбораЗаказов = Новый Структура;
	ПараметрыОтбораЗаказов.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ТипГрузоперевозки));
	ПараметрыОтбораЗаказов.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	
	КоличествоЗаказовДоОбновления = СписокЗаказовТребуетсяОбработкаЧастичнойДоставки.Количество();
	
	СписокЗаказовТребуетсяОбработкаЧастичнойДоставки.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьСписок(
		СписокЗаказовТребуетсяОбработкаЧастичнойДоставки,
		РегистрыСведений.ЖурналЗаказовСервисДоставки.ЗаказыТребующиеОбработкиЧастичнойДоставки(ПараметрыОтбораЗаказов));
	
	КоличествоЗаказовПослеОбновления = СписокЗаказовТребуетсяОбработкаЧастичнойДоставки.Количество();
		
	Возврат КоличествоЗаказовПослеОбновления - КоличествоЗаказовДоОбновления;
	
КонецФункции

&НаКлиенте
Процедура ПослеПовторнойОтправкиЗаказов(Значение, ДополнительныеПараметры) Экспорт
	
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

#КонецОбласти
