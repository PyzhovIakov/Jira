#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// BSLLS:DataExchangeLoading-off
Процедура ПередЗаписью(Отказ)
	
	// Проверка значения свойства ОбменДанными.Загрузка отсутствует по причине того, что в расположенным ниже коде,
	// реализована логика, которая должна выполняться в том числе при установке этого свойства равным Истина
	// (на стороне кода, который выполняет попытку записи в данный план обмена).
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Или ЭтотУзел Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОграничиватьДоступНаУровнеЗаписей = Константы["ОграничиватьДоступНаУровнеЗаписей"].Получить();
		ИспользоватьГруппыДоступаПартнеров = Константы["ИспользоватьГруппыДоступаПартнеров"].Получить();
	КонецЕсли;
	
	МассивДоступныеПользователи = CRM_СинхронизацияСiCRMНовый.ПолучитьСписокДоступныхПользователейДляОбмена(Пользователь);
	ДоступныеПользователи.Очистить();
	Для Каждого ДоступныйПользователь Из МассивДоступныеПользователи Цикл
		Если НЕ ДоступныйПользователь.ПометкаУдаления Тогда
			Стр = ДоступныеПользователи.Добавить();
			Стр.Пользователь = ДоступныйПользователь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МассивДоступныеГруппыДоступаПартнеров =
			CRM_СинхронизацияСiCRMНовый.ПолучитьСписокДоступныхГруппДоступаПартнеров(Пользователь);
		ДоступныеГруппыДоступаПартнеров.Очистить();
		Для Каждого ДоступнаяГруппыДоступаПартнеров Из МассивДоступныеГруппыДоступаПартнеров Цикл
			Если НЕ ДоступнаяГруппыДоступаПартнеров.ПометкаУдаления Тогда
				Стр = ДоступныеГруппыДоступаПартнеров.Добавить();
				Стр.ГруппаДоступа = ДоступнаяГруппыДоступаПартнеров;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
// BSLLS:DataExchangeLoading-on

// BSLLS:DataExchangeLoading-off
Процедура ПриЗаписи(Отказ)
	
	// Проверка значения свойства ОбменДанными.Загрузка отсутствует по причине того, что в расположенным ниже коде,
	// реализована логика, которая должна выполняться в том числе при установке этого свойства равным Истина
	// (на стороне кода, который выполняет попытку записи в данный план обмена).
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИмяПланаОбмена",  "CRM_СинхронизацияСМобильнымПриложениемНовый");
	СтруктураЗаписи.Вставить("ВидПравил",       Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов);
	СтруктураЗаписи.Вставить("ИмяМакетаПравил", "ПравилаРегистрации");
	СтруктураЗаписи.Вставить("ИсточникПравил",  Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации);
	СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", Истина);
	
	// Получаем набор записей регистра.
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, "ПравилаДляОбменаДанными");
	
	// Добавляем только одну запись в новый набор записей.
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// Заполняем значения свойств записи из структуры.
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// Загружаем правила для обмена данными в ИБ.
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НаборЗаписей[0]);
	
	Если Не Отказ Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры
// BSLLS:DataExchangeLoading-on

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Создаем набор записей регистра.
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid call of object on client.'");
#КонецЕсли
