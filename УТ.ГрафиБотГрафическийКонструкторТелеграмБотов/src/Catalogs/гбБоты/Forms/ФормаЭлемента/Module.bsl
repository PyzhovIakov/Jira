

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеБлокСхемы = ТекущийОбъект.УдалитьБлокСхема.Получить();
	Если ДанныеБлокСхемы <> Неопределено тогда
		БлокСхемаОбъект = Справочники.гбБлокСхемы.СоздатьЭлемент();
		БлокСхемаОбъект.Наименование = ТекущийОбъект.Наименование;
		БлокСхемаОбъект.ГрафическаяСхема = Новый ХранилищеЗначения(ДанныеБлокСхемы);
		БлокСхемаОбъект.АлгоритмыЭлементовБлокСхемы.Загрузить(ТекущийОбъект.УдалитьАлгоритмыЭлементовБлокСхемы.Выгрузить());
		БлокСхемаОбъект.Записать();
		гбКлиентСервер.СообщитьПользователю("Создана блок-схема: " + БлокСхемаОбъект, ТекущийОбъект, "БлокСхема");
		ТекущийОбъект.БлокСхема = БлокСхемаОбъект.Ссылка;
		ТекущийОбъект.УдалитьБлокСхема = Неопределено;
		ТекущийОбъект.УдалитьАлгоритмыЭлементовБлокСхемы.Очистить();
		ТекущийОбъект.Записать();
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбАлгоритмы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.гбАлгоритмы КАК гбАлгоритмы
		|ГДЕ
		|	гбАлгоритмы.УдалитьЭтоСписокДействий
		|	И гбАлгоритмы.ТипЭлемента = Значение(Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений)";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий; 
		СправочникОбъект.Записать();
		гбКлиентСервер.СообщитьПользователю("Обновлены данные: " + СправочникОбъект);
	КонецЦикла;

	
	
	РежимПолученияДанныхБотаПрочитатьНаСервере(Объект.Ссылка);
	ПараметрыИнтеграцииСистемыВзаимодействияПрочитатьНаСервере(Объект.Ссылка);
	
	СохранитьРасположениеПодсказокРекурсивно(Элементы);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РежимПолученияДанныхБотаПриИзменении(Неопределено);
	
	УстановитьВидимостьДоступность(Элементы, ЭтаФорма, Объект);
	
	ОбновитьСостояниеЗадания(Неопределено);
	
	ОбновитьСсылкуБота();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьВидимостьДоступность(Элементы, ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимПолученияДанныхБотаПриИзменении(Элемент)
	Страницы = Элементы.ГруппаРежимыПолученияДанныхБота;
	Если РежимПолученияДанныхБота.Режим = ПредопределенноеЗначение("Перечисление.гбРежимыПолученияДанныхБота.long_polling") тогда
		Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы.ГруппаLongPolling;
	ИначеЕсли РежимПолученияДанныхБота.Режим = ПредопределенноеЗначение("Перечисление.гбРежимыПолученияДанныхБота.webhook") тогда
		Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы.ГруппаWebhook;
	Иначе
		Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы.ГруппаОтключено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНажатие(Элемент)
	// Раскомментировать строки ниже для обычного приложения
	//#Если ТолстыйКлиентОбычноеПриложение тогда
	//	ЗапуститьПриложение(Элемент.Заголовок);
	//#Иначе
		ПерейтиПоНавигационнойСсылке(Элемент.Заголовок);
	//#КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ИнтеграцияССистемойВзаимодействияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИнтеграцияССистемойВзаимодействияПослеИзменения", 0.1, Истина);
	ПараметрыИнтеграцииСистемыВзаимодействияУстановитьНаСервере(Объект.Ссылка,
		ПараметрыИнтеграцииСистемыВзаимодействия.Используется);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеАктивноПриИзменении(Элемент)
	Если РежимПолученияДанныхБота.Режим = ПредопределенноеЗначение("Перечисление.гбРежимыПолученияДанныхБота.long_polling") тогда
		Если ЗаданиеАктивно тогда
			гбСервер.ЗапуститьБесконечноеФоновоеЗадание();
		Иначе
			гбСервер.ЗавершитьБесконечноеФоновоеЗадание(РежимПолученияДанныхБота.Бот);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПодсказки(Команда)
	Элементы.ПоказатьПодсказки.Пометка = не Элементы.ПоказатьПодсказки.Пометка;
	Пометка = Элементы.ПоказатьПодсказки.Пометка;
	Для Каждого ЭлементСписка из РасположениеПодсказок Цикл
		Элементы[ЭлементСписка.Представление].ОтображениеПодсказки = ?(Пометка,
			ОтображениеПодсказки[ЭлементСписка.Значение], ОтображениеПодсказки.Авто);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформацию(Команда)
	Объект.Наименование = "";
	Объект.Код = "";
	ЗаданиеАктивно = -1;
	
	ПодключитьОбработчикОжидания("ПолучитьИнформациюОтложено", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПолученияДанныхБотаУстановить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПараметровWebhook", ЭтаФорма);
	
	Если РежимПолученияДанныхБота.Режим = ПредопределенноеЗначение("Перечисление.гбРежимыПолученияДанныхБота.webhook") тогда
		ОткрытьФорму("РегистрСведений.гбПараметрыWebhook.ФормаСписка",, 
			ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗадания(Команда)
	ЗаданиеАктивно = ?(ПолучитьСостояниеЗаданияНаСервере(Объект.Ссылка), 1, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеWebhook(Команда)
	Информация = ПолучитьИнформациюWebhookНаСервере();
	
	Если Информация <> Неопределено тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Информация);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКонструкторБлокСхемы(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.БлокСхема);
	ОткрытьФорму("Справочник.гбБлокСхемы.ФормаОбъекта", 
		ПараметрыФормы, ЭтаФорма, Объект.Ссылка,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСсылкуСозданияБотаВБуферОбмена(Команда)
	СкопироватьТекстВБуферОбмена(Элементы.СсылкаСозданияБота.Заголовок, Элементы.ПолеHTML.Документ);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСсылкуБотаВБуферОбмена(Команда)
	СкопироватьТекстВБуферОбмена(Элементы.СсылкаБота.Заголовок, Элементы.ПолеHTML.Документ);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура СохранитьРасположениеПодсказокРекурсивно(ЭлементыФормы)
	
	Для Каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ДекорацияФормы") 
			и Элемент.Родитель.РасширеннаяПодсказка = Элемент тогда
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура("ОтображениеПодсказки, ПодчиненныеЭлементы");
		ЗаполнитьЗначенияСвойств(Структура, Элемент);
		
		Если Структура.ПодчиненныеЭлементы <> Неопределено тогда
			СохранитьРасположениеПодсказокРекурсивно(Структура.ПодчиненныеЭлементы);
		КонецЕсли;
		
		ВремОтображениеПодсказки = Неопределено;
		Если Структура.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху тогда
			ВремОтображениеПодсказки = "ОтображатьСверху";
		ИначеЕсли Структура.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу тогда
			ВремОтображениеПодсказки = "ОтображатьСнизу";
		ИначеЕсли Структура.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа тогда
			ВремОтображениеПодсказки = "ОтображатьСправа";
		Иначе
			Продолжить;
		КонецЕсли;
		РасположениеПодсказок.Добавить(ВремОтображениеПодсказки, Элемент.Имя);
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюWebhookНаСервере(Сохранять = Истина)
	тБот = Новый Структура;
	тБот.Вставить("Токен", Объект.Токен);
	тБот.Вставить("Наименование", "<неопределено>");
	тБот.Вставить("Код", "<неопределено>");
	
	Попытка
	
		Информация = ПолучитьИнформациюОБоте(тБот);
		
	Исключение
		гбСервер.ОповеститьОбОшибке(Перечисления.гбСобытия.УстановкаWebhook,
			ИнформацияОбОшибке());
			
		ВызватьИсключение(гбСервер.ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Возврат Информация;

КонецФункции

// Получает информацию о боте
//
// Возвращаемое значение:
//   в случае ошибки Неопределено 
//
&НаСервереБезКонтекста
Функция ПолучитьИнформациюОБоте(Бот)

	Информация = гбСервер.ОтправитьКомандуТелеграм(Бот, "/getMe", Новый Структура);
	
	Результат = Новый Структура();
	Результат.Вставить("Код", Информация.username);
	Результат.Вставить("Наименование", Информация.first_name);
	Результат.Вставить("ИД", Информация.id);
	
	Информация = гбСервер.ОтправитьКомандуТелеграм(Бот, "/getWebhookInfo", Новый Структура);
	
	Результат.Вставить("ИспользоватьWebhook", не ПустаяСтрока(Информация.url));
	Результат.Вставить("АдресWebhook", Информация.url);
	Результат.Вставить("ИспользуетсяСамозаверенныйСертификат", Информация.has_custom_certificate);

	Если Информация.Свойство("last_error_date") тогда
		Результат.Вставить("ПоследняяОшибка", СтрШаблон("%1	%2",
			'19700101' + Информация.last_error_date + (ТекущаяДата() - ТекущаяУниверсальнаяДата()),
			Информация.last_error_message));
	Иначе
		Результат.Вставить("ПоследняяОшибка", Неопределено);
	КонецЕсли;	
		
	тПоз = Найти(Информация.url, "/hs/telegram/");
	Если тПоз > 0 Тогда
		Результат.Вставить("ВходящийТокен", Сред(Информация.url, тПоз+13));
	Иначе
		Результат.Вставить("ВходящийТокен", "");
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьИнформациюОБоте()

&НаКлиенте
Процедура ОбновитьСсылкуБота()
	Элементы.СсылкаБота.Заголовок = "";
	Если не ПустаяСтрока(Объект.Код) тогда
		Элементы.СсылкаБота.Заголовок = "http://t.me/" + СокрЛП(Объект.Код);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОтложено()
	Информация = ПолучитьИнформациюWebhookНаСервере();
	
	Если Информация <> Неопределено тогда
		ЗаполнитьЗначенияСвойств(Объект, Информация);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Информация);
	КонецЕсли;
	ОбновитьСсылкуБота();
	
	ЗаданиеАктивно = ПолучитьСостояниеЗаданияНаСервере(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Функция РежимПолученияДанныхБотаПрочитатьНаСервере(Бот)
	Перем РежимПолученияДанныхБота;
	
	РежимПолученияДанныхБота = РеквизитФормыВЗначение("РежимПолученияДанныхБота");
	РежимПолученияДанныхБота.Бот = Бот;
	РежимПолученияДанныхБота.Прочитать();
	ЗначениеВРеквизитФормы(РежимПолученияДанныхБота, "РежимПолученияДанныхБота");
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПараметровWebhook(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;

	ПараметрыWebhook = Новый Структура("АдресWebhook, Сертификат");
	ЗаполнитьЗначенияСвойств(ПараметрыWebhook, Результат);
	
	ПодключитьОбработчикОжидания("ПослеУстановкиРежимаПолученияДанныхБота", 0.1, Истина);
	
	РежимПолученияДанныхБотаУстановитьНаСервере(ПараметрыWebhook.АдресWebhook, ПараметрыWebhook.Сертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРежимаПолученияДанныхБота()
	ПолучитьИнформацию(Неопределено);
	ОбновитьСостояниеЗадания(Неопределено);
КонецПроцедуры

&НаСервере
Процедура РежимПолученияДанныхБотаУстановитьНаСервере(АдресWebhook, Сертификат)
	
	гбСервер.УстановитьРежимПолученияДанныхБота(Объект.Ссылка, 
		РежимПолученияДанныхБота.Режим, АдресWebhook, Сертификат);
	РежимПолученияДанныхБотаПрочитатьНаСервере(Объект.Ссылка);
	
КонецПроцедуры


&НаСервере
Функция ПараметрыИнтеграцииСистемыВзаимодействияПрочитатьНаСервере(Бот)
	Перем ПараметрыИнтеграцииСистемыВзаимодействия;
	
	ПараметрыИнтеграцииСистемыВзаимодействия = РеквизитФормыВЗначение("ПараметрыИнтеграцииСистемыВзаимодействия");
	ПараметрыИнтеграцииСистемыВзаимодействия.Бот = Бот;
	ПараметрыИнтеграцииСистемыВзаимодействия.Прочитать();
	
	ЗначениеВРеквизитФормы(ПараметрыИнтеграцииСистемыВзаимодействия, "ПараметрыИнтеграцииСистемыВзаимодействия");
КонецФункции


&НаСервере
Функция ПараметрыИнтеграцииСистемыВзаимодействияУстановитьНаСервере(Бот, Используется)
	Перем ПараметрыИнтеграцииСистемыВзаимодействия;
	
	ПараметрыИнтеграцииСистемыВзаимодействия = РеквизитФормыВЗначение("ПараметрыИнтеграцииСистемыВзаимодействия");
	ПараметрыИнтеграцииСистемыВзаимодействия.Бот = Бот;
	ПараметрыИнтеграцииСистемыВзаимодействия.Используется = Используется;

	Если ПравоДоступа("РегистрацияИнформационнойБазыСистемыВзаимодействия", Метаданные) тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииСистемыВзаимодействия.Используется тогда
		Если не СистемаВзаимодействия.ИспользованиеДоступно() тогда
			ВызватьИсключение("Система взаимодействия не зарегистрирована");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИнтеграцииСистемыВзаимодействия.Записать();
	ЗначениеВРеквизитФормы(ПараметрыИнтеграцииСистемыВзаимодействия, "ПараметрыИнтеграцииСистемыВзаимодействия");
КонецФункции


#Если Сервер И Не Сервер Тогда
	&НаСервере
#Иначе
	&НаКлиентеНаСервереБезКонтекста
#КонецЕсли
Процедура УстановитьВидимостьДоступность(Элементы, ЭтаФорма, Объект)
	Элементы.УстановитьРежимПолученияДанныхБота.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаданияНаСервере(Бот)
	Возврат гбСервер.ПолучитьСостояниеФоновогоЗадания(Бот);
КонецФункции
	

// Копирует текст в буфер обмена
//
// Параметры:
//  Текст		 - Строка	 - Текст для копирования
//  ДокументHTML - ВнешнийОбъект	 - Обработчик действия
//
&НаКлиенте
Процедура СкопироватьТекстВБуферОбмена(Текст, ДокументHTML)
	el = ДокументHTML.createElement("textarea");
	el.value = Текст;
	el.setAttribute("readonly", "");
	el.style.position = "absolute";
	el.style.left = "-9999px";
	ДокументHTML.body.appendChild(el);
	el.select();
	ДокументHTML.execCommand("copy");
	ДокументHTML.body.removeChild(el);
	
	ПодключитьОбработчикОжидания("ПоказатьОповещениеПользователяТекстСкопированВБуферОбмена", 0.1, Истина);
КонецПроцедуры

// Показывает оповещение пользователя "Текст скопирован в буфер обмена"
//
&НаКлиенте
Процедура ПоказатьОповещениеПользователяТекстСкопированВБуферОбмена()
	ПоказатьОповещениеПользователя("", , "Текст скопирован в буфер обмена", БиблиотекаКартинок.гбКопироватьВБуферОбмена);
КонецПроцедуры


&НаКлиенте
Процедура ИнтеграцияССистемойВзаимодействияПослеИзменения()
	ПараметрыИнтеграцииСистемыВзаимодействияПрочитатьНаСервере(Объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененыПараметрыСистемыВзаимодействия" тогда
		ПараметрыИнтеграцииСистемыВзаимодействияПрочитатьНаСервере(Объект.Ссылка);
		
	ИначеЕсли ИмяСобытия = "гбЗаписьБлокСхемы" тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр, , "Модифицированность");
		Если не ЭтаФорма.Открыта() тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

