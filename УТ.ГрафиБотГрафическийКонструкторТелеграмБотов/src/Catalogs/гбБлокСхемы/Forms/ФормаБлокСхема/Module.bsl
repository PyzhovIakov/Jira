#Область ОписаниеПеременных

&НаКлиенте
Перем АлгоритмыЭлементовБлокСхемыСтруктура;
&НаКлиенте
Перем ИменаЭлементовБлокСхемыСтруктура;

&НаКлиенте
Перем ЦветаБлоков Экспорт;

&НаКлиенте
Перем ИмяВыделенногоБлока;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ЗагрузитьБлокСхему(ТекущийОбъект);

	Если Параметры.ТолькоЗаписать тогда
		СохранитьБлокСхему(ТекущийОбъект);
		ТекущийОбъект.Записать();
		Отказ = Истина;
	КонецЕсли;
	
	Элементы.ФормаКоманднаяПанель.Видимость = Ложь;
	
	гбХранилище.ПриСозданииНаСервере_ФормаЭлемента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	СохранитьБлокСхему(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент тогда
		ПоказатьПредупреждение(, "В режиме web-клиента редактирование блок схемы не поддерживается.", 2);
		Элементы.СписокЭлементов.Доступность = Ложь;
		Элементы.ОшибкиБлокСхемы.Видимость = Ложь;
	#КонецЕсли
		
	ПоказатьРеквизиты(Неопределено);
	
	
	АлгоритмыЭлементовБлокСхемыСтруктура = Новый Структура;
	Для Каждого СтрокаТЧ из Объект.АлгоритмыЭлементовБлокСхемы Цикл
		АлгоритмыЭлементовБлокСхемыСтруктура.Вставить(СтрокаТЧ.ИмяЭлемента, СтрокаТЧ.Алгоритм);
	КонецЦикла;
	
	ЦветаБлоков = ПолучитьСтруктуруЦветовСтиля();
	
	Элементы.Расширение.Видимость = не Объект.ЭтоВложеннаяБлокСхема;
	ИменаЭлементовБлокСхемыСтруктура = Новый Структура;
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) тогда
		БлокСхемаПриИзменении(Элементы.БлокСхема);
		Модифицированность = Истина;
	Иначе
		БлокСхемаПриИзменении(Неопределено);
		ПроверитьБлокСхему();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ЭтоВложеннаяБлокСхема тогда
		Объект.Расширение = Неопределено;
	КонецЕсли;

	Объект.АлгоритмыЭлементовБлокСхемы.Очистить();
	Для Каждого КлючЗначение из АлгоритмыЭлементовБлокСхемыСтруктура Цикл
		СтрокаТЧ = Объект.АлгоритмыЭлементовБлокСхемы.Добавить();
		СтрокаТЧ.ИмяЭлемента = КлючЗначение.Ключ;
		СтрокаТЧ.Алгоритм = КлючЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбработкаОповещенияНаСервере(ИмяСобытия);
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия)
	гбХранилище.ОбработкаОповещения_ФормаЭлемента(ЭтаФорма, ИмяСобытия);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БлокСхемаПриИзменении(Элемент)
	
	
	МассивНовых = Новый Массив;
	Для Каждого ЭлементБлокСхемы из БлокСхема.ЭлементыГрафическойСхемы цикл
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
			или ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
			или ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыДекорация") тогда
			Продолжить;
		КонецЕсли;
			
		Если ИменаЭлементовБлокСхемыСтруктура.Свойство(ЭлементБлокСхемы.Имя) тогда
			Продолжить;
		КонецЕсли;
		
		Алгоритм = ПолучитьАлгоритмИзКартинки(ЭлементБлокСхемы.Картинка);
		
		Если Алгоритм <> Неопределено и Элемент <> Неопределено тогда
			ПослеВыбораАлгоритма(Алгоритм, 
				Новый Структура("ИмяЭлемента, ПропуститьПроверкуБлокСхемы, СохранитьНаименование", ЭлементБлокСхемы.Имя)); 
		КонецЕсли;
		Если Алгоритм = Неопределено и Элемент <> Неопределено тогда
			МассивНовых.Добавить(ЭлементБлокСхемы);
			
			Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСлияние") тогда
				ЭлементБлокСхемы.Наименование = "Ввод";

			ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") тогда
				ЭлементБлокСхемы.Наименование = "Стоп";

			ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыРазделение") тогда
				ЭлементБлокСхемы.Наименование = "Выберите действие";

			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СписокВыбора = Новый СписокЗначений;
	Если МассивНовых.Количество() = 1 тогда
		
		ЭлементБлокСхемы = МассивНовых[0];
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокСПометками"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ДеревоЗначений"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокДействий"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПриемОплаты"));
			
		ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ФоновоеЗадание"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложеннаяБлокСхема"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПодтверждениеСчета"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ОтменаСчета"));
			
		ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыУсловие") тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Цикл"));

		КонецЕсли;
		
		
	КонецЕсли;
	
	Если СписокВыбора.Количество() тогда 
		ДополнительныеПараметры = Новый Структура("ЭлементБлокСхемы, Элемент", ЭлементБлокСхемы, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораТипаЭлементаСписка", ЭтаФорма, ДополнительныеПараметры);
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, "Тип блока");
	Иначе
		ПроверитьБлокСхему();
		
		БлокСхемаПриАктивизации(Элемент);
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Процедура БлокСхемаПриАктивизации(Элемент)
	#Если ВебКлиент тогда
		Возврат;
	#КонецЕсли
	Если ТекущийЭлемент <> Элементы.БлокСхема тогда
		ТекущийЭлемент = Элементы.БлокСхема;
	КонецЕсли;
	
	ТекущийЭлементБлокСхемы = Элементы.БлокСхема.ТекущийЭлемент;
	
	Если ИмяВыделенногоБлока <> Неопределено тогда
		ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы.Найти(ИмяВыделенногоБлока);
		Если ЭлементБлокСхемы <> Неопределено
			и ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") тогда
			ЭлементБлокСхемы.ЦветЛинии = ?(ЭлементБлокСхемы.КонецЭлемент = Неопределено,
				ЦветаБлоков.Ошибка, ЦветаБлоков.ЦветЛинии);
				
			ЕстьИзменение = Истина;
	
		КонецЕсли;
		ИмяВыделенногоБлока = Неопределено;
	КонецЕсли;
	
	
	Если ТекущийЭлементБлокСхемы <> Неопределено тогда
		ИмяВыделенногоБлока = ТекущийЭлементБлокСхемы.Имя;
		ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы.Найти(ИмяВыделенногоБлока);
		Если ЭлементБлокСхемы <> Неопределено
			и ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") тогда
			ЭлементБлокСхемы.ЦветЛинии = ?(ЭлементБлокСхемы.КонецЭлемент = Неопределено,
				ЦветаБлоков.Ошибка, ЦветаБлоков.ЦветАктивнойЛинии);
			ЕстьИзменение = Истина;
		КонецЕсли;
		Если ЕстьИзменение = Истина тогда
			ПодключитьОбработчикОжидания("БлокСхемаПовторАктивизацииЭлементаБлокСхемы", 0.1, Истина);
		Иначе
			ИмяВыделенногоБлока = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БлокСхемаВыбор(Элемент)
	#Если ВебКлиент тогда
		Возврат;
	#КонецЕсли
	ЭлементБлокСхемы = Элемент.ТекущийЭлемент;
		
	//СоответствиеТипов = Новый Соответствие;
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыУсловие"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие"));
	////СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыВыборВарианта"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыОбработка"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Обработка"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыДействие"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПунктМеню"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыСтарт"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Старт"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыЗавершение"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Стоп"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыСлияние"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Данные"));
	////СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыРазделение"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Разделение"));
	//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложенныйПроцесс"));
	//
	//ТипЭлемента = СоответствиеТипов.Получить(ТипЗнч(ЭлементБлокСхемы));
	
	ТипЭлемента = ПолучитьТипЭлементаПоЭлементуБлокСхемы(ЭлементБлокСхемы, ЭтаФорма);
	
	Если ТипЭлемента <> Неопределено тогда
		ИмяЭлемента = ЭлементБлокСхемы.Имя;
		ДополнительныеПараметры = Новый Структура("ИмяЭлемента", ИмяЭлемента);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораАлгоритма", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПолучитьАлгоритмЭлементаБлокСхемы(ИмяЭлемента));
			
		Если ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПунктМеню") тогда
			ИмяФормыВыбора = "Перечисление.гбФункцииКнопки.ФормаВыбора";
		ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Старт") тогда
			ИмяФормыВыбора = "Перечисление.гбФункцииБлокаСтарт.ФормаВыбора";
		ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Стоп") тогда
			ИмяФормыВыбора = "Перечисление.гбФункцииБлокаСтоп.ФормаВыбора";
		ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Данные") тогда
			ИмяФормыВыбора = "Перечисление.гбТипыДанных.ФормаВыбора";
		ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложеннаяБлокСхема") тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ЭтоВложеннаяБлокСхема", Истина));
			ИмяФормыВыбора = "Справочник.гбБлокСхемы.ФормаВыбора";
		ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Разделение")
			или ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПодтверждениеСчета")
			или ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ОтменаСчета")
			или ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ФоновоеЗадание")
			тогда
			// ничего
		Иначе
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипЭлемента", ТипЭлемента));
			ИмяФормыВыбора = "Справочник.гбАлгоритмы.ФормаВыбора";
		КонецЕсли;
		
		Если не ПустаяСтрока(ИмяФормыВыбора) тогда
			ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЭтоВложеннаяБлокСхемаПриИзменении(Элемент)
	ПроверитьБлокСхему();
	Элементы.Расширение.Видимость = не Объект.ЭтоВложеннаяБлокСхема;
КонецПроцедуры

&НаКлиенте
Процедура БлокСхемаПередЗаписью(Элемент, Копирование, Отказ)
	ПроверитьБлокСхему();
	Отказ = Истина;
	Записать();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиБлокСхемы

&НаКлиенте
Процедура ОшибкиБлокСхемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИмяЭлемента = Элемент.ТекущиеДанные.Значение;
	Если ИмяЭлемента <> Неопределено тогда
		ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы.Найти(ИмяЭлемента);
		Если ЭлементБлокСхемы <> Неопределено тогда
			Элементы.БлокСхема.ТекущийЭлемент = ЭлементБлокСхемы;
		Иначе
			ПроверитьБлокСхему();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПодсказки(Команда)
	Элементы.ПоказатьПодсказки.Пометка = не Элементы.ПоказатьПодсказки.Пометка;
	Пометка = Элементы.ПоказатьПодсказки.Пометка;
	Для Каждого Группа из Элементы.ГруппаЛеваяКоманднаяПанель.ПодчиненныеЭлементы Цикл
		Для Каждого Элемент из Группа.ПодчиненныеЭлементы Цикл
			Если Пометка тогда
				Элемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
				Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Иначе
				Элемент.Отображение = ОтображениеКнопки.Картинка;
				Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СписокЭлементов(Команда)
	СписокЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементБлокСхемы из БлокСхема.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
			или ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") тогда
			Продолжить;
		КонецЕсли;
		СписокЭлементов.Добавить(ЭлементБлокСхемы.Имя);
	КонецЦикла;
	
	СписокЭлементов.СортироватьПоЗначению();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораЭлементаБлокСхемы", ЭтотОбъект);
	СписокЭлементов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите элемент");
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеАлгоритмы(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипЭлемента", 
		ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПустаяСсылка")));
	ОткрытьФорму("Справочник.гбАлгоритмы.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьРеквизиты(Команда)
	Если ПустаяСтрока(Объект.Наименование) или не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Элементы.ПоказатьРеквизиты.Пометка = Истина;
	Иначе
		Элементы.ПоказатьРеквизиты.Пометка = не Элементы.ПоказатьРеквизиты.Пометка;
	КонецЕсли;
	
	Элементы.ГруппаРеквизиты.Видимость = Элементы.ПоказатьРеквизиты.Пометка;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипЭлементаПоЭлементуБлокСхемы(ЭлементБлокСхемы, ЭтаФорма)
	Перем ЦветаБлоков, ТипЭлемента;
	
	Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") тогда
		#Если Клиент тогда
			ЦветаБлоков = ЭтаФорма.ЦветаБлоков;
		#Иначе
			ЦветаБлоков = ПолучитьСтруктуруЦветовСтиля();
		#КонецЕсли
		Если ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаСписокДействий тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокДействий");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаПриемОплаты тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПриемОплаты");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаДеревоЗначений тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ДеревоЗначений");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаАсинхронныйСписокЗначений тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаСписокСПометками тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокСПометками");
		Иначе
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
		#Если Клиент тогда
			ЦветаБлоков = ЭтаФорма.ЦветаБлоков;
		#Иначе
			ЦветаБлоков = ПолучитьСтруктуруЦветовСтиля();
		#КонецЕсли
		Если ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаВложеннаяБлокСхема тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложеннаяБлокСхема");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаПодтверждениеСчета тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПодтверждениеСчета");
		ИначеЕсли ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаОтменаСчета тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ОтменаСчета");
		Иначе
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ФоновоеЗадание");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыУсловие") тогда
		#Если Клиент тогда
			ЦветаБлоков = ЭтаФорма.ЦветаБлоков;
		#Иначе
			ЦветаБлоков = ПолучитьСтруктуруЦветовСтиля();
		#КонецЕсли
		Если ЭлементБлокСхемы.ЦветФона = ЦветаБлоков.ЦветБлокаЦикл тогда
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Цикл");
		Иначе
			ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие");
		КонецЕсли;
	Иначе
		
		СоответствиеТипов = Новый Соответствие;
		//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыУсловие"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыОбработка"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Обработка"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыДействие"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПунктМеню"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыСтарт"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Старт"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыЗавершение"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Стоп"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыСлияние"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Данные"));
		СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыРазделение"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Разделение"));
		//СоответствиеТипов.Вставить(Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"), ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложенныйПроцесс"));
		
		ТипЭлемента = СоответствиеТипов.Получить(ТипЗнч(ЭлементБлокСхемы));
	КонецЕсли;
	
	Возврат ТипЭлемента;
	
КонецФункции


&НаКлиенте
Процедура ПроверитьБлокСхему()
	
	#Если ВебКлиент тогда
		Возврат;
	#КонецЕсли
	
	ОшибкиБлокСхемы.Очистить();
	ТекущийЭлементБлокСхемы = Элементы.БлокСхема.ТекущийЭлемент;
	

	БлокиСтарт = Новый Структура;
	БлокиСтартКоманды = Новый Структура;
	БлокиДанные = Новый Структура;
	БлокиКонецЛиний = Новый Массив;
	
	Если ИменаЭлементовБлокСхемыСтруктура = Неопределено тогда
		ИменаЭлементовБлокСхемыСтруктура = Новый Структура;
	КонецЕсли;
	ТекущиеИменаЭлементовБлокСхемыСтруктура = ИменаЭлементовБлокСхемыСтруктура;
	ИменаЭлементовБлокСхемыСтруктура = Новый Структура;
	Для Каждого ЭлементБлокСхемы из БлокСхема.ЭлементыГрафическойСхемы Цикл
		КоличествоОшибок = ОшибкиБлокСхемы.Количество();
		//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.ЦветРамки;

		ИменаЭлементовБлокСхемыСтруктура.Вставить(ЭлементБлокСхемы.Имя);
		ТекущиеИменаЭлементовБлокСхемыСтруктура.Удалить(ЭлементБлокСхемы.Имя);
		
		Алгоритм = ПолучитьАлгоритмЭлементаБлокСхемы(ЭлементБлокСхемы.Имя);
		ТипЭлемента = ПолучитьТипЭлементаПоЭлементуБлокСхемы(ЭлементБлокСхемы, ЭтаФорма);
		
		ТребуетсяАлгоритм = Ложь;
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") 
			и не ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокДействий") тогда
			ТребуетсяАлгоритм = Истина;
		ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыУсловие") тогда
			ТребуетсяАлгоритм = Истина;
		КонецЕсли;
		Если ТребуетсяАлгоритм и не ЗначениеЗаполнено(Алгоритм) тогда
			//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.Ошибка;
			ОшибкиБлокСхемы.Добавить(ЭлементБлокСхемы.Имя, "Не указан алгоритм.");
		КонецЕсли;
		
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") тогда
			УстановитьЦветаВариантовБлокаВыборВарианта(ЭлементБлокСхемы, ТипЭлемента);
		КонецЕсли;
		
		Если ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений") тогда
			Если ЭлементБлокСхемы.Элементы.Количество() < 2 тогда
				ОшибкиБлокСхемы.Добавить(ЭлементБлокСхемы.Имя, "Необходимы как минимум два варианта.");
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСлияние") тогда
			БлокиДанные.Вставить(ЭлементБлокСхемы.Имя, ЭлементБлокСхемы);		
			//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.ЦветРамки;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСтарт") тогда
			//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.ЦветРамки;
			Если не ЗначениеЗаполнено(Алгоритм) тогда
				БлокиСтарт.Вставить(ЭлементБлокСхемы.Имя, ЭлементБлокСхемы);
			ИначеЕсли Алгоритм = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтарт.ОбработкаКоманды") тогда
				
				ИмяКоманды = ?(ПустаяСтрока(ЭлементБлокСхемы.Наименование), "__default__", ЭлементБлокСхемы.Наименование);
				Если не (гбКлиентСервер.ТолькоЛатиницаВСтроке(ИмяКоманды, "_0123456789")
					и гбКлиентСервер.ТолькоЛатиницаВСтроке(Лев(ИмяКоманды, 1), "_")) тогда
					ОшибкиБлокСхемы.Добавить(ЭлементБлокСхемы.Имя, "Недопустимое имя команды.");
					//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.Ошибка;
				Иначе
					Если БлокиСтартКоманды.Свойство(ИмяКоманды) тогда
						//ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.Ошибка;
						ОшибкиБлокСхемы.Добавить(ЭлементБлокСхемы.Имя, "Дублирование имени команды.");
						Если БлокиСтартКоманды[ИмяКоманды] <> Неопределено тогда
							БлокиСтартКоманды[ИмяКоманды].ЦветРамки = ЦветаБлоков.Ошибка;
							ОшибкиБлокСхемы.Добавить(БлокиСтартКоманды[ИмяКоманды].Имя, "Дублирование имени команды.");
							БлокиСтартКоманды.Вставить(ИмяКоманды);
						КонецЕсли;
					Иначе
						БлокиСтартКоманды.Вставить(ИмяКоманды, ЭлементБлокСхемы);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		
		
		Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") тогда
			Если ЭлементБлокСхемы.КонецЭлемент = Неопределено тогда
				ЭлементБлокСхемы.ЦветЛинии = ЦветаБлоков.Ошибка;
				ОшибкиБлокСхемы.Добавить(ЭлементБлокСхемы.Имя, "Стрелка не присоединена ни к какому блоку.");
			Иначе
				Если ЭлементБлокСхемы.ЦветЛинии = ЦветаБлоков.Ошибка тогда
					ЭлементБлокСхемы.ЦветЛинии = ЦветаБлоков.ЦветЛинии;
				ИначеЕсли ЭлементБлокСхемы.ЦветЛинии = ЦветаБлоков.ЦветАктивнойЛинии
					и (ТекущийЭлементБлокСхемы = Неопределено или ТекущийЭлементБлокСхемы.Имя <> ЭлементБлокСхемы.Имя) тогда
					ЭлементБлокСхемы.ЦветЛинии = ЦветаБлоков.ЦветЛинии;
				КонецЕсли;
				БлокиКонецЛиний.Добавить(ЭлементБлокСхемы.КонецЭлемент.Имя);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементБлокСхемы) <> Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") тогда
			ЦветРамки = ?(КоличествоОшибок <> ОшибкиБлокСхемы.Количество(), ЦветаБлоков.Ошибка, ЦветаБлоков.ЦветРамки);
			Если ЭлементБлокСхемы.ЦветРамки <> ЦветРамки тогда
				ЭлементБлокСхемы.ЦветРамки = ЦветРамки;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Если не БлокиСтарт.Количество() тогда
		ОшибкиБлокСхемы.Добавить(Неопределено, "Блок 'Старт' без функции не определен.");
	ИначеЕсли БлокиСтарт.Количество() > 1 тогда
		Для Каждого КлючЗначение из БлокиСтарт Цикл
			КлючЗначение.Значение.ЦветРамки = ЦветаБлоков.Ошибка;
			ОшибкиБлокСхемы.Добавить(КлючЗначение.Ключ, "Более чем один блок 'Старт' без функции.");
		КонецЦикла;	
	КонецЕсли;
	
	Если не Объект.ЭтоВложеннаяБлокСхема и не БлокиСтартКоманды.Свойство("__default__") тогда
		ОшибкиБлокСхемы.Добавить(Неопределено, СтрШаблон("Блок 'Старт' с функцией '%1' и пустым текстом не определен.",
			ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтарт.ОбработкаКоманды")));
	КонецЕсли;
	
	Для Каждого ИмяЭлемента из БлокиКонецЛиний Цикл
		ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы[ИмяЭлемента];
		БлокиДанные.Удалить(ИмяЭлемента);		
	КонецЦикла;
	
	Если не Объект.ЭтоВложеннаяБлокСхема и не БлокиДанные.Количество() тогда
		ОшибкиБлокСхемы.Добавить(Неопределено, "Не подчиненный блок 'Ожидание ввода' не определен.");
	ИначеЕсли БлокиДанные.Количество() > 1 тогда
		Для Каждого КлючЗначение из БлокиДанные Цикл
			КлючЗначение.Значение.ЦветРамки = ЦветаБлоков.Ошибка;
			ОшибкиБлокСхемы.Добавить(КлючЗначение.Ключ, "Более чем один неподчиненный блок 'Ожидание ввода'.");
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого КлючЗначение из ТекущиеИменаЭлементовБлокСхемыСтруктура Цикл
		// Элемент удален
		ОчиститьАлгоритмЭлементаБлокСхемы(КлючЗначение.Ключ);
		
	КонецЦикла;
	
	Если ТекущиеИменаЭлементовБлокСхемыСтруктура.Количество() тогда
		ПроверитьБлокСхему();
	Иначе
		Элементы.ОшибкиБлокСхемы.Видимость = (ОшибкиБлокСхемы.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАлгоритмИзКартинки(Картинка)
	Перем Алгоритм;
	Если Картинка <> Неопределено и Картинка.Вид = ВидКартинки.Абсолютная тогда
		СтрокаSVG = ПолучитьСтрокуИзДвоичныхДанных(Картинка.ПолучитьДвоичныеДанные());
		МассивСтрок = СтрРазделить(СтрокаSVG, Символы.ПС);
		Если МассивСтрок.Количество() = 3 тогда
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрЗаменить(МассивСтрок[1], ".кб", ".гб"));
			Алгоритм = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		КонецЕсли;	
	КонецЕсли;	
	Мета = Метаданные.НайтиПоТипу(ТипЗнч(Алгоритм));
	Если Мета <> Неопределено и Метаданные.Справочники.Содержит(Мета) тогда

		Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ Справочник.гбБлокСхемы ГДЕ Ссылка = &Ссылка");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "гбБлокСхемы", Мета.Имя);
		Запрос.УстановитьПараметр("Ссылка", Алгоритм);
		
		Если Запрос.Выполнить().Пустой() тогда
			гбКлиентСервер.СообщитьПользователю(
				СтрШаблон("Объект не найден: %1 (%2)", Мета.ПредставлениеОбъекта, Алгоритм));
			
			Алгоритм = ?(0, 0, Новый ОписаниеТипов(гбКлиентСервер.ЗначениеВМассиве(ТипЗнч(Алгоритм)))).ПривестиЗначение();
		КонецЕсли;

	КонецЕсли;
	//КонецЕсли;
		
	Возврат Алгоритм;

КонецФункции // ПолучитьАлгоритмИзКартинки()




&НаКлиенте
Процедура ЗаписатьАлгоритмВКартинкуБлока(ЭлементБлокСхемы, Алгоритм)
	#Если не ВебКлиент тогда
		Структура = Новый Структура("Картинка", NULL);
		ЗаполнитьЗначенияСвойств(Структура, ЭлементБлокСхемы);
		Если Структура.Картинка = NULL тогда
			Возврат;
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить("<svg version=""1"" xmlns=""http://www.w3.org/2000/svg"" width=""0"" height=""0"" viewBox=""0 0 0 0"">");
		МассивСтрок.Добавить("</svg>");
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Алгоритм, НазначениеТипаXML.Явное);
		СтрокаXML = ЗаписьXML.Закрыть();
		МассивСтрок.Вставить(1, СтрокаXML);
		СтрокаSVG = СтрСоединить(МассивСтрок, Символы.ПС);
			
		ЭлементБлокСхемы.Картинка = Новый Картинка(ПолучитьДвоичныеДанныеИзСтроки(СтрокаSVG));
		
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура БлокСхемаПовторАктивизацииЭлементаБлокСхемы()
	Если ИмяВыделенногоБлока <> Неопределено тогда
		ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы.Найти(ИмяВыделенногоБлока);
		Если ЭлементБлокСхемы <> Неопределено тогда
			Элементы.БлокСхема.ТекущийЭлемент = ЭлементБлокСхемы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры      



&НаКлиенте
Процедура УстановитьЦветФона(ЭлементБлокСхемы, ЦветФона)
	Если ЭлементБлокСхемы.ЦветФона <> ЦветФона тогда
		ЭлементБлокСхемы.ЦветФона = ЦветФона;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАлгоритма(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы[ДополнительныеПараметры.ИмяЭлемента];	
	
	Наименование = Строка(Результат);
	
	Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыДействие") тогда
		Если ЗначениеЗаполнено(Результат) тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаПунктМенюСАлгоритмом);
			Если Результат = ПредопределенноеЗначение("Перечисление.гбФункцииКнопки.WebApp") тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораАдресаВебПриложения", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводСтроки(ОписаниеОповещения, ЭлементБлокСхемы.Пояснение, "Адрес веб-приложения");
			КонецЕсли;
		Иначе
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаПунктМеню);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыОбработка") тогда
		Если ЗначениеЗаполнено(Результат) тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаОбработкаСАлгоритмом);
		Иначе
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаОбработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСлияние") тогда
		Если ЗначениеЗаполнено(Результат) тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаДанныеСАлгоритмом);
		Иначе
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаДанные);
		КонецЕсли;
		Наименование = ЭлементБлокСхемы.Наименование;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСтарт") тогда
		Если не ЗначениеЗаполнено(Результат) тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтарт);
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтарт.ОбработкаКоманды") тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтартОбработкаКомандыСАлгоритмом);
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтарт.ВнешнийВход") тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтартВнешнийВходСАлгоритмом);
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтарт.ДействиеОператора") тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтартДействиеОператораСАлгоритмом);
		Иначе
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтарт);
		КонецЕсли;
		Наименование = ЭлементБлокСхемы.Наименование;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") тогда
		Если не ЗначениеЗаполнено(Результат) тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтоп);
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтоп.ПродолжитьОбработкуКоманд") тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтопСАлгоритмом);
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбФункцииБлокаСтоп.ВыходИзВложенногоПроцесса") тогда
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтопВложенныйПроцессСАлгоритмом);
		Иначе
			УстановитьЦветФона(ЭлементБлокСхемы, ЦветаБлоков.ЦветБлокаСтоп);
		КонецЕсли;
		Наименование = ЭлементБлокСхемы.Наименование;
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") тогда
	КонецЕсли;
	
	
	Если не ПустаяСтрока(Наименование) и не ДополнительныеПараметры.Свойство("СохранитьНаименование") тогда
		ЭлементБлокСхемы.Наименование = Наименование;
	КонецЕсли;
	ЭлементБлокСхемы.ЦветРамки = ЦветаБлоков.ЦветРамки;
	
	ЗаписатьАлгоритмВКартинкуБлока(ЭлементБлокСхемы, Результат);
	
	ТекАлгоритм = ПолучитьАлгоритмЭлементаБлокСхемы(ЭлементБлокСхемы.Имя);
	УстановитьАлгоритмЭлементаБлокСхемы(ДополнительныеПараметры.ИмяЭлемента, Результат);
	Модифицированность = Истина;
	
	Если не ДополнительныеПараметры.Свойство("ПропуститьПроверкуБлокСхемы") тогда
		ПроверитьБлокСхему();
		Элементы.БлокСхема.ТекущийЭлемент = ЭлементБлокСхемы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАдресаВебПриложения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы[ДополнительныеПараметры.ИмяЭлемента];	
	ЭлементБлокСхемы.Пояснение = Результат;
	Модифицированность = Истина;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСвойстваАлгоритмаНаСервере(Алгоритм, Свойства)
	
	Запрос = Новый Запрос("ВЫБРАТЬ " + Свойства + " ИЗ Справочник.гбАлгоритмы ГДЕ Ссылка = &Алгоритм");
	
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Результат = Новый Структура(Свойства);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции


&НаКлиенте
Функция ПолучитьАлгоритмЭлементаБлокСхемы(ИмяЭлемента)
	Перем Результат;
	
	АлгоритмыЭлементовБлокСхемыСтруктура.Свойство(ИмяЭлемента, Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьАлгоритмЭлементаБлокСхемы(ИмяЭлемента, Алгоритм)
	Если ЗначениеЗаполнено(Алгоритм) тогда
		АлгоритмыЭлементовБлокСхемыСтруктура.Вставить(ИмяЭлемента, Алгоритм);
	Иначе
		ОчиститьАлгоритмЭлементаБлокСхемы(ИмяЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАлгоритмЭлементаБлокСхемы(ИмяЭлемента)
	АлгоритмыЭлементовБлокСхемыСтруктура.Удалить(ИмяЭлемента);	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьБлокСхему(ТекущийОбъект)
	Перем ДанныеБлокСхемы;

	Данные = ТекущийОбъект.ГрафическаяСхема.Получить();
	
	Если ТипЗнч(Данные) = Тип("ГрафическаяСхема") тогда
		БлокСхема = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") тогда
		Поток = Данные.ОткрытьПотокДляЧтения();
		БлокСхема.Прочитать(Поток);
	КонецЕсли;
	Если не БлокСхема.ЭлементыГрафическойСхемы.Количество() тогда
		Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) тогда
			БлокСхема = ЭтаФорма.Параметры.ЗначениеКопирования.ГрафическаяСхема.Получить();
		Иначе
			БлокСхема = ?(ТекущийОбъект.ЭтоВложеннаяБлокСхема,
				ПолучитьМакетОбъекта("БлокСхемаВложеннаяПоУмолчанию"), ПолучитьМакетОбъекта("БлокСхемаПоУмолчанию"));
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетОбъекта(ИмяМакета)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Процедура СохранитьБлокСхему(ТекущийОбъект)
	Перем ДанныеБлокСхемы;
	
	ТекущийОбъект.ГрафическаяСхема = Новый ХранилищеЗначения(БлокСхема);
	
	ДанныеБлокСхемы = РеквизитФормыВЗначение("ДанныеБлокСхемы");
	ДанныеБлокСхемы.Очистить();
	
	АлгоритмыЭлементовБлокСхемыСтруктура = Новый Структура;
	Для Каждого СтрокаТЧ из ТекущийОбъект.АлгоритмыЭлементовБлокСхемы Цикл
		АлгоритмыЭлементовБлокСхемыСтруктура.Вставить(СтрокаТЧ.ИмяЭлемента, СтрокаТЧ.Алгоритм);
	КонецЦикла;
	
	ТЗДействийОператора = Новый ТаблицаЗначений;
	ТЗДействийОператора.Колонки.Добавить("Верх");
	ТЗДействийОператора.Колонки.Добавить("Лево");
	ТЗДействийОператора.Колонки.Добавить("ИмяЭлемента");
	ТЗДействийОператора.Колонки.Добавить("Текст");
	
	МассивСтрелок = Новый Массив;
	Для Каждого ЭлементБлокСхемы из БлокСхема.ЭлементыГрафическойСхемы Цикл
		ТипЭлемента = ПолучитьТипЭлементаПоЭлементуБлокСхемы(ЭлементБлокСхемы, ЭтаФорма);
		
		Если ТипЭлемента <> Неопределено тогда
			НоваяСтрока = ДанныеБлокСхемы.Добавить();
			НоваяСтрока.ИмяЭлемента = ЭлементБлокСхемы.Имя;
			НоваяСтрока.ТипЭлемента = ТипЭлемента;
			НоваяСтрока.Текст = ЭлементБлокСхемы.Наименование;
			НоваяСтрока.Подсказка = ЭлементБлокСхемы.Подсказка;
			АлгоритмыЭлементовБлокСхемыСтруктура.Свойство(НоваяСтрока.ИмяЭлемента, НоваяСтрока.Алгоритм);
			НоваяСтрока.Верх = ЭлементБлокСхемы.Верх;
			НоваяСтрока.Лево = ЭлементБлокСхемы.Лево;
			Если НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Условие тогда
				НоваяСтрока.Подчиненные.Добавить();	
				НоваяСтрока.Подчиненные.Добавить();	
			ИначеЕсли НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений 
				или НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками 
				или НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений 
				или НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ДеревоЗначений 
				или НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий 
				или НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПриемОплаты тогда
				Для Каждого Вариант из ЭлементБлокСхемы.Элементы Цикл
					НоваяСтрока.Подчиненные.Добавить(Неопределено, Вариант.Наименование); 	
				КонецЦикла;
			ИначеЕсли НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Старт тогда 
				Если НоваяСтрока.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ДействиеОператора тогда
					ЗаполнитьЗначенияСвойств(ТЗДействийОператора.Добавить(), НоваяСтрока);
				ИначеЕсли НоваяСтрока.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды тогда
					НоваяСтрока.Текст = НРег(НоваяСтрока.Текст);
				КонецЕсли;
				
			ИначеЕсли НоваяСтрока.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПунктМеню тогда 
				Если НоваяСтрока.Алгоритм = Перечисления.гбФункцииКнопки.WebApp тогда
					НоваяСтрока.ДополнительныеПараметры = ЭлементБлокСхемы.Пояснение;
				КонецЕсли;
			КонецЕсли;				
		ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") тогда
			МассивСтрелок.Добавить(ЭлементБлокСхемы);
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ЭлементБлокСхемы из МассивСтрелок Цикл
		СтрокаНачало = ДанныеБлокСхемы.Найти(ЭлементБлокСхемы.НачалоЭлемент.Имя, "ИмяЭлемента");
		СтрокаКонец = ?(ЭлементБлокСхемы.КонецЭлемент <> Неопределено,
			ДанныеБлокСхемы.Найти(ЭлементБлокСхемы.КонецЭлемент.Имя, "ИмяЭлемента"), Неопределено);
		
		Если СтрокаНачало <> Неопределено и СтрокаКонец <> Неопределено тогда
			Если СтрокаНачало.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие") тогда
				СтрокаНачало.Подчиненные[?(ЭлементБлокСхемы.НачалоСторона = ТипСтороныЭлементаГрафическойСхемы.Лево, 0, 1)]
					.Значение = СтрокаКонец.ИмяЭлемента;
					
			ИначеЕсли ЭлементБлокСхемы.НачалоВариант <> Неопределено тогда
				Для н = 0 по ЭлементБлокСхемы.НачалоЭлемент.Элементы.Количество() - 1 Цикл
					Если ЭлементБлокСхемы.НачалоВариант.Значение = ЭлементБлокСхемы.НачалоЭлемент.Элементы[н].Значение тогда
						СтрокаНачало.Подчиненные[н].Значение = СтрокаКонец.ИмяЭлемента;
						Прервать;
					КонецЕсли;
				КонецЦикла;
		
			ИначеЕсли СтрокаНачало.Подчиненные.НайтиПоЗначению(СтрокаКонец.ИмяЭлемента) = Неопределено тогда
				СтрокаНачало.Подчиненные.Добавить(СтрокаКонец.ИмяЭлемента);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДанныеБлокСхемы, "ДанныеБлокСхемы");
	ТекущийОбъект.ДанныеБлокСхемы = Новый ХранилищеЗначения(ДанныеБлокСхемы);
	
	ТекущийОбъект.АлгоритмыЭлементовБлокСхемы.Очистить();
	Для Каждого СтрокаДанныеБлокСхемы из ДанныеБлокСхемы Цикл
		Если ЗначениеЗаполнено(СтрокаДанныеБлокСхемы.Алгоритм) тогда
			ЗаполнитьЗначенияСвойств(ТекущийОбъект.АлгоритмыЭлементовБлокСхемы.Добавить(), СтрокаДанныеБлокСхемы); 
		КонецЕсли;
	КонецЦикла;
	
	ТЗДействийОператора.Сортировать("Верх, Лево");
	ДействияОператора = Новый СписокЗначений;
	Для каждого СтрокаТЗ Из ТЗДействийОператора Цикл
		ДействияОператора.Добавить(СтрокаТЗ.ИмяЭлемента, СтрокаТЗ.Текст);	
	КонецЦикла;
	ТекущийОбъект.ДействияОператора = Новый ХранилищеЗначения(ДействияОператора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЦветовСтиля()
	Структура = Новый Структура();
	Структура.Вставить("ЦветРамки", ЦветаСтиля.ЦветРамки);
	Структура.Вставить("Ошибка", ЦветаСтиля.ЦветОсобогоТекста);
	Структура.Вставить("ЦветБлокаПунктМенюСАлгоритмом", WebЦвета.СветлоЗолотистый);
	Структура.Вставить("ЦветБлокаПунктМеню", Новый Цвет(254, 253, 214));
	Структура.Вставить("ВариантВыбор", WebЦвета.БледноЗеленый);
	Структура.Вставить("ВариантОтказ", WebЦвета.Желтый);
	Структура.Вставить("ВариантПрочее", WebЦвета.ТемноОранжевый);
	Структура.Вставить("ЦветЛинии", ЦветаСтиля.ЦветРамки);
	Структура.Вставить("ЦветАктивнойЛинии", WebЦвета.Синий);
	Структура.Вставить("ЦветБлокаОбработка", Новый Цвет(255, 213, 214));
	Структура.Вставить("ЦветБлокаОбработкаСАлгоритмом", WebЦвета.ТеплоРозовый);
	Структура.Вставить("ЦветБлокаДанные", Новый Цвет(219, 249, 226));
	Структура.Вставить("ЦветБлокаДанныеСАлгоритмом", WebЦвета.ЗеленоватоЖелтый);
	Структура.Вставить("ЦветБлокаСтарт", Новый Цвет(187, 238, 199));
	Структура.Вставить("ЦветБлокаСтартОбработкаКомандыСАлгоритмом", WebЦвета.ЛимонноЗеленый);
	Структура.Вставить("ЦветБлокаСтартВнешнийВходСАлгоритмом", WebЦвета.ЗеленоватоЖелтый);
	Структура.Вставить("ЦветБлокаСтартДействиеОператораСАлгоритмом", WebЦвета.БледноЗеленый);
	Структура.Вставить("ЦветБлокаСтоп", Новый Цвет(186, 239, 235));
	Структура.Вставить("ЦветБлокаСтопСАлгоритмом", WebЦвета.Циан);
	Структура.Вставить("ЦветБлокаСтопВложенныйПроцессСАлгоритмом", WebЦвета.Бирюзовый);
	Структура.Вставить("ЦветБлокаДеревоЗначений", WebЦвета.Древесный);
	Структура.Вставить("ЦветБлокаСписокЗначений", Новый Цвет(253, 169, 167));
	Структура.Вставить("ЦветБлокаСписокСПометками", WebЦвета.Розовый);
	Структура.Вставить("ЦветБлокаАсинхронныйСписокЗначений", WebЦвета.Коралловый);
	Структура.Вставить("ЦветБлокаСписокДействий", WebЦвета.Льняной);
	Структура.Вставить("ЦветБлокаПриемОплаты", WebЦвета.Золотой);
	Структура.Вставить("ЦветБлокаПодтверждениеСчета", WebЦвета.Золотой);
	Структура.Вставить("ЦветБлокаОтменаСчета", WebЦвета.ЦветМорскойВолны);
	Структура.Вставить("ЦветБлокаФоновоеЗадание", Новый Цвет(224, 224, 243));
	Структура.Вставить("ЦветБлокаВложеннаяБлокСхема", WebЦвета.ГолубойСоСтальнымОттенком);
	Структура.Вставить("ЦветБлокаУсловие", Новый Цвет(253, 169, 167));
	Структура.Вставить("ЦветБлокаЦикл", WebЦвета.СветлоГрифельноСиний);
	
	Возврат Новый ФиксированнаяСтруктура(Структура);
КонецФункции

&НаКлиенте
Процедура ПослеВыбораЭлементаБлокСхемы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЭлементБлокСхемы = БлокСхема.ЭлементыГрафическойСхемы.Найти(Результат.Значение);
	Если ЭлементБлокСхемы <> Неопределено тогда
		Элементы.БлокСхема.ТекущийЭлемент = ЭлементБлокСхемы;
	Иначе
		ПроверитьБлокСхему();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте                                                                  
Функция УстановитьЦветаВариантовБлокаВыборВарианта(ЭлементБлокСхемы, ТипЭлемента)
	Перем ЦветФона, ЦветаВариантов, ТекстВариантов;
	Если ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокДействий") тогда
		
		ЦветФона = ЦветаБлоков.ЦветБлокаСписокДействий;
		ЦветаВариантов = "ЦветБлокаСписокДействий,ВариантВыбор,ВариантВыбор";
		ТекстВариантов = "<далее>;Действие;Отмена";
		
	ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПриемОплаты") тогда
		
		ЦветФона = ЦветаБлоков.ЦветБлокаПриемОплаты;
		ЦветаВариантов = "ЦветБлокаПриемОплаты,ВариантВыбор,ВариантОтказ";
		ТекстВариантов = "<далее>;Оплатить;Отмена";
		
	ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ДеревоЗначений") тогда
			
		ЦветФона = ЦветаБлоков.ЦветБлокаДеревоЗначений;
		ЦветаВариантов = "ВариантВыбор,ВариантПрочее,ВариантОтказ";
		ТекстВариантов = "<выбран элемент>;<не выбрано>;Отмена";
		
	ИначеЕсли ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений") тогда
			
		ЦветФона = ЦветаБлоков.ЦветБлокаАсинхронныйСписокЗначений;
		ЦветаВариантов = "ЦветБлокаАсинхронныйСписокЗначений,ВариантВыбор,ВариантОтказ";
		ТекстВариантов = "<далее>;<выбран элемент>;Отмена";
		
	ИначеЕсли  ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокСПометками") тогда
			
		ЦветФона = ЦветаБлоков.ЦветБлокаСписокСПометками;
		ЦветаВариантов = "ВариантВыбор,ВариантПрочее,ВариантОтказ";
		ТекстВариантов = "<выбран элемент>;<не выбрано>;Отмена";
	Иначе // Если Результат = Неопределено
		// или Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений") тогда
			
		ЦветФона = ЦветаБлоков.ЦветБлокаСписокЗначений;
		ЦветаВариантов = "ВариантВыбор,ВариантПрочее,ВариантОтказ";
		ТекстВариантов = "<выбран элемент>;<не выбрано>;Отмена";
	КонецЕсли;
	
	МассивЦветов = СтрРазделить(ЦветаВариантов, ",");
	МассивВариантов = СтрРазделить(ТекстВариантов, ";");
	Для н = 0 по ЭлементБлокСхемы.Элементы.Количество() - 1 Цикл
		Если МассивВариантов.ВГраница() >= н тогда
			Если СтрНачинаетсяС(МассивВариантов[н], "<") 
				или СтрНачинаетсяС(ЭлементБлокСхемы.Элементы[н].Наименование, "Вариант")
				и ЭлементБлокСхемы.Элементы[н].Наименование <> МассивВариантов[н] тогда
				ЭлементБлокСхемы.Элементы[н].Наименование = МассивВариантов[н];
			КонецЕсли;
		КонецЕсли;
		
		ЦветВарианта = ЦветаБлоков[МассивЦветов[мин(н, МассивЦветов.ВГраница())]];
		Если ЭлементБлокСхемы.Элементы[н].ЦветФона <> ЦветВарианта тогда
			ЭлементБлокСхемы.Элементы[н].ЦветФона = ЦветВарианта;
		КонецЕсли;
	КонецЦикла;

	Возврат ЦветФона;
КонецФункции

&НаКлиенте                                                                  
Процедура ПослеВыбораТипаЭлементаСписка(Результат, ДополнительныеПараметры) Экспорт
	Перем ЦветФона, ЦветаВариантов, ТекстВариантов;
	
	ЭлементБлокСхемы = ДополнительныеПараметры.ЭлементБлокСхемы;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено тогда
		Результат = Результат.Значение;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") тогда
		ЦветФона = УстановитьЦветаВариантовБлокаВыборВарианта(ЭлементБлокСхемы, Результат);
				
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
		Если Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ВложеннаяБлокСхема") тогда
			
			ЦветФона = ЦветаБлоков.ЦветБлокаВложеннаяБлокСхема;

		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПодтверждениеСчета") тогда
			
			ЦветФона = ЦветаБлоков.ЦветБлокаПодтверждениеСчета;
			
		ИначеЕсли Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ОтменаСчета") тогда
			
			ЦветФона = ЦветаБлоков.ЦветБлокаОтменаСчета;
			
		Иначе // Если Результат = Неопределено
			// или Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ФоновоеЗадание") тогда
				
			ЦветФона = ЦветаБлоков.ЦветБлокаФоновоеЗадание;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементБлокСхемы) = Тип("ЭлементГрафическойСхемыУсловие") тогда
			
		Если Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Цикл") тогда
			
			ЦветФона = ЦветаБлоков.ЦветБлокаЦикл;
			
			Для Каждого ЭлементБлокСхемыЛиния из БлокСхема.ЭлементыГрафическойСхемы цикл
				Если ТипЗнч(ЭлементБлокСхемыЛиния) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") 
					и ЭлементБлокСхемыЛиния.НачалоЭлемент = ЭлементБлокСхемы тогда
					Если ЭлементБлокСхемыЛиния.НачалоСторона = ТипСтороныЭлементаГрафическойСхемы.Лево тогда
						ЭлементБлокСхемыЛиния.Наименование = "<цикл>";
					Иначе
						ЭлементБлокСхемыЛиния.Наименование = "<далее>";
					КонецЕсли;
						
				КонецЕсли;
			КонецЦикла;			

		Иначе // Если Результат = Неопределено
			// или Результат = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие") тогда
				
			ЦветФона = ЦветаБлоков.ЦветБлокаУсловие;
			
		КонецЕсли;
	КонецЕсли;

	
	ЭлементБлокСхемы.Наименование = Результат;
	УстановитьЦветФона(ЭлементБлокСхемы, ЦветФона);
	
	ПроверитьБлокСхему();
	
	БлокСхемаПриАктивизации(Элемент);
КонецПроцедуры


#КонецОбласти
