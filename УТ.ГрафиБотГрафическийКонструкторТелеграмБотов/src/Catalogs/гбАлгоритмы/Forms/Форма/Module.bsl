#Область ОписаниеПеременных

&НаКлиенте
Перем ПропуститьПроверкуЕстьОшибкиСинтаксиса;
&НаКлиенте
Перем ЗакрытьПослеЗаписи;
#КонецОбласти

#Если НЕ (ТонкийКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ Сервер) тогда
	
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПоказатьПредупреждение(, "В этом режиме эта функция не поддерживается.", 2);
	Отказ = Истина;
	Возврат;
КонецПроцедуры

#КонецОбласти

#Иначе
	
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ИзменяетКонтекст.Видимость = Объект.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Обработка;
	Элементы.МножественныйВыбор.Видимость = Объект.МножественныйВыбор;
	//Элементы.МножественныйВыбор.Видимость = Объект.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений;
	//	или Объект.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий;
		//или Объект.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПриемОплаты;
	
	Элементы.ФормаТипЭлемента.Заголовок = Объект.ТипЭлемента;
	Элементы.Код.Видимость = не ЗначениеЗаполнено(Объект.ТипЭлемента);
	Элементы.Наименование.Видимость = ЗначениеЗаполнено(Объект.ТипЭлемента);
	Элементы.ТипЭлемента.Видимость = не ЗначениеЗаполнено(Объект.ТипЭлемента);
	

	ВерсияОбработки = "20220126";
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакетОбъекта("src"), Новый УникальныйИдентификатор());
	
	гбХранилище.ПриСозданииНаСервере_ФормаЭлемента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзвлечьИсходники();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТекстАлгоритма()
	ВремМодифицированность = Модифицированность;
	
	Если ПустаяСтрока(Объект.Алгоритм) тогда
		Если Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Обработка") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюОбработка", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Условие") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюУсловие", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Цикл") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюЦикл", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокДействий") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюСписокДействий", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ДеревоЗначений") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюДеревоЗначений", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокЗначений") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюСписокЗначений", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.СписокСПометками") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюСписокСПометками", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюАсинхронныйСписокЗначений", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПриемОплаты") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюПриемОплаты", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.Разделение") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюРазделение", Ложь);
		ИначеЕсли Объект.ТипЭлемента = ПредопределенноеЗначение("Перечисление.гбТипыЭлементовБлокСхемы.ПустаяСсылка") тогда
			Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюПустой", Ложь);
		КонецЕсли;
		Объект.Алгоритм = ПолучитьТекстМакета("ТекстПоУмолчаниюОбщее", Ложь) + Объект.Алгоритм;
		
	КонецЕсли;
	
	УстановитьТекст(Объект.Алгоритм, Неопределено, Ложь);
	Модифицированность = ВремМодифицированность;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЕстьОшибкиСинтаксиса(Алгоритм, Наименование, Ошибка)
	ОбработкаКонтекст = Обработки.гбКонтекст.Создать();
	Попытка
		ОбработкаКонтекст.__Выполнить__("if 0 then " + Алгоритм + Символы.ПС + ";endif");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Ошибка = СтрЗаменить(ИнформацияОбОшибке.Причина.Описание, "<Неизвестный модуль>", Наименование);
		//Сообщить(Ошибка);
		Возврат Истина;
	КонецПопытки;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Алгоритм = ПолучитьТекст();
	Если не ЗначениеЗаполнено(Объект.ТипЭлемента) тогда
		Объект.Наименование = Объект.Код;
	КонецЕсли;
	
	Ошибка = "";
	ОшибкиСинтаксисКонтроля.Очистить();
	Если ПропуститьПроверкуЕстьОшибкиСинтаксиса <> Истина и ЕстьОшибкиСинтаксиса(Объект.Алгоритм, Объект.Наименование, Ошибка) тогда
		Отказ = Истина;
		Элементы.ОшибкиСинтаксисКонтроля.ТекущаяСтрока = 
			ОшибкиСинтаксисКонтроля.Добавить(Ошибка, , , БиблиотекаКартинок.ОформлениеДефисЖелтый).ПолучитьИдентификатор();
			
		ОбработатьРезультатВыполнения(Новый Структура("Успешно, ОписаниеОшибки", Ложь, Ошибка));

		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСОшибками", ЭтотОбъект, ЗакрытьПослеЗаписи);
		ПоказатьВопрос(ОписаниеОповещения, "При проверке алгоритма обнаружены ошибки!
			|Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Элементы.ОшибкиСинтаксисКонтроля.Видимость = ОшибкиСинтаксисКонтроля.Количество();
	ПропуститьПроверкуЕстьОшибкиСинтаксиса = Неопределено;
	ЗакрытьПослеЗаписи = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСОшибками(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		ПропуститьПроверкуЕстьОшибкиСинтаксиса = Истина;
		Записать();
		Если ДополнительныеПараметры = Истина тогда
			Закрыть()
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбработкаОповещенияНаСервере(ИмяСобытия);
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия)
	гбХранилище.ОбработкаОповещения_ФормаЭлемента(ЭтаФорма, ИмяСобытия);
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		
		#Если ВебКлиент Тогда
			Если ВебДокументДоступен() Тогда
				ИнициализацияРедактора();
			Иначе
				ПоказатьПредупреждение(, "К сожалению, в веб-клиенте недоступны практически все функции.
				|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
			КонецЕсли;
		#Иначе
			ИнициализацияРедактора();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие <> Неопределено Тогда
			
		Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(View().getQuery());
		КонецЕсли;
		
		Если Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Событие.params);
		КонецЕсли;
		
		Если Событие.event = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Событие);
		КонецЕсли;
		
		Если Событие.event = "EVENT_CONTENT_CHANGED" Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		Если Событие.event = "EVENT_ON_KEY_DOWN" Тогда
			Если Событие.params.keyCode = 9 
				и не Событие.params.altPressed и не Событие.params.ctrlPressed и не Событие.params.shiftPressed тогда
				
				Закрыть();
				
			ИначеЕсли Событие.params.keyCode = 3 
				и не Событие.params.altPressed и Событие.params.ctrlPressed и не Событие.params.shiftPressed тогда
				
				Записать();
				Закрыть();
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе		
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		HTML = "https://salexdv.github.io/bsl_console/src/index.html";
		ИсходникиЗагружены = Истина;
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().clearMetadata();
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	// Включение генерации события при нажатии любой клавиши
	View().setOption("generateOnKeyDownEvent", true);
	// Генерация события только при нажатии Esc и Enter
	View().setOption("onKeyDownFilter", "9,3");
	View().hideScrollX();
	View().hideScrollY();
//	View().enableModificationEvent(Истина);
	View().setOption("generateModificationEvent", Истина);
	View().minimap(false);
	
	ПодключитьОбработчикОжидания("ЗагрузитьПользовательскиеОбъекты", 0.1, Истина);
	ПодключитьОбработчикОжидания("ЗагрузитьТекстАлгоритма", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		Массив = Новый Массив;
		Попытка
			Массив = СтрРазделить(СтрРазделить(СтрРазделить(ОписаниеОшибки, "(")[1], ")")[0], ",");
		Исключение
		КонецПопытки;
		
		Если Массив.Количество() = 2 
			и гбКлиентСервер.ТолькоЦифрыВСтроке(Массив[0]) и гбКлиентСервер.ТолькоЦифрыВСтроке(Массив[1]) тогда
			
			Ошибка.НомерСтроки = Число(Массив[0]);
					
			Ошибка.НомерКолонки = Число(Массив[1]);
		
		КонецЕсли;
		//СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		//СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		//СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		//СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		//СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		//Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		//Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		//Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		//Если НомерСтроки = 0 Тогда
		//	НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		//КонецЕсли;
		
		//СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
			
			ТекущийЭлемент = Элементы.ПолеHTML;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст()
	
	Возврат View().getText();
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ЗагрузитьПользовательскиеОбъекты()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеОбъекты", Истина);
		
	Результат = View().updateMetadata(JSON);
	
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ВывестиОшибку("Не удалось загрузить пользовательские объекты: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;
	
	
	//Т = ПолучитьТекстМакета("Макет", Истина);
	//ЗагруженоФункций = View().parseMetadataModule(Т, "customObjects.к.methods"); 
	//document.defaultView.bslMetadata.customObjects.ч
	//View().bslMetadata.test
КонецПроцедуры

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		
		Если Не View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		
		УстановитьТекст(Текст, ДопПараметры, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	
    ПодключитьВнешнююОбработкуНаСервере();
	ПараметрыФормы = Новый Структура("QueryText", Текст);
	ОткрытьФорму("ВнешняяОбработка.QueryWizard.Форма",
		ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры


&НаСервере
Процедура ПодключитьВнешнююОбработкуНаСервере()
    ВнешниеОбработки.Подключить("v8res://mngbase/QueryWizard.epf", "QueryWizard", false);
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда	
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)
	
	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных


&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();	
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл		
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);		
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;	
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
				
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
	ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
				
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
					
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОписаниеРеквизитов = Новый Структура();
		ОписаниеРесурсов = Новый Структура();
		ОписаниеПредопределенных = Новый Структура();
		ОписаниеТабличныхЧастей = Новый Структура();
		ДополнительныеСвойства = Новый Структура();
		
		Связи = Новый Соответствие();
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
			ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
		Иначе
			ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
			ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
			ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
			ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
				ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
			ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
		КонецЕсли;
		
		СтруктураОбъекта = Новый Структура();
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
		
		Для Каждого Обход Из ДополнительныеСвойства Цикл
			СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
		КонецЦикла;
		
		Если 0 < ОписаниеРесурсов.Количество() Тогда
			СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
		КонецЕсли;
		
		Если 0 < ОписаниеПредопределенных.Количество() Тогда
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
		КонецЕсли;
		
		Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
			СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			View().triggerSuggestions();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
		
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			View().triggerSuggestions();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)
	
	ПараметрыЗапроса = НРег(Событие.params.metadata);
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			
		Иначе
			
			ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти




#Область Прочее 

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры


&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакетОбъекта(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакетОбъекта(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст =  СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		НачатьУдалениеФайлов(, ИндексныйФайл);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ЗакрытьПослеЗаписи = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиСинтаксисКонтроляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)                 
	ОбработатьРезультатВыполнения(Новый Структура("Успешно, ОписаниеОшибки", Ложь, ОшибкиСинтаксисКонтроля[0].Значение));
КонецПроцедуры



#КонецОбласти

#КонецЕсли