
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Действие = Параметры.Действие;
	Заголовок = Действие;
	
	Если ЗначениеЗаполнено(Параметры.МассивОбъектов) тогда
		Если ТипЗнч(Параметры.МассивОбъектов) <> Тип("Массив") тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Параметры.МассивОбъектов);
		Иначе
			МассивОбъектов = Параметры.МассивОбъектов;
		КонецЕсли;
			
		СписокОбъектовИсходный.ЗагрузитьЗначения(МассивОбъектов);
		
		СписокПодключений.ЗагрузитьЗначения(
			гбХранилище.ПолучитьПодключенияКХранилищуПоОбъектам(СписокОбъектовИсходный).ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Подключение)
		и СписокПодключений.НайтиПоЗначению(Параметры.Подключение) = Неопределено тогда
		СписокПодключений.Добавить(Параметры.Подключение, , Истина);
	КонецЕсли;
	
	СписокПодключений.ЗаполнитьПометки(Истина);
	Элементы.Подключение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Если СписокПодключений.Количество() < 2 тогда
		Элементы.Подключение.ТекущаяСтраница = Элементы.Подключение.ПодчиненныеЭлементы.Одно;
		Элементы.Подключение.ПодчиненныеЭлементы.Список.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокНаСервере();
	
	
	Если не Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ПоместитьВХранилище") тогда
		Элементы.ОставитьЗахваченными.Видимость = Ложь;
	КонецЕсли;
	Если Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьВсеИзХранилища") тогда
		Элементы.Рекурсивно.Доступность = Ложь;              
		Рекурсивно = Истина;
	КонецЕсли;
			
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокНаСервере()
	
	СписокОбъектов.Очистить();
	Если Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьВсеИзХранилища") тогда	
		Если СписокПодключений.Количество() тогда
			Хранилище = СписокПодключений[0].Значение;
			ОбъектыХранилища = гбХранилище.ВыполнитьУдаленно(
				Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);
				
			Для каждого КлючЗНачение из ОбъектыХранилища Цикл
				Ссылка = гбХранилище.ОбъектИзJSON(КлючЗНачение.Ключ);
				Если гбХранилище.ОбъектСуществует(Ссылка) тогда
					Если гбХранилище.Хеш(гбХранилище.ОбъектВJSON(Ссылка.ПолучитьОбъект())) <> КлючЗНачение.Значение тогда
						СписокОбъектов.Добавить(КлючЗНачение.Ключ, Ссылка, Истина);
					Иначе
						СписокОбъектов.Добавить(КлючЗНачение.Ключ, Ссылка);
					КонецЕсли;
				Иначе
					СписокОбъектов.Добавить(КлючЗНачение.Ключ, 
						СтрЗаменить(СтрЗаменить(КлючЗНачение.Ключ, Символы.ВК, ""), Символы.ПС, ""), Истина);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОтменитьЗахват") тогда
		
		СписокОбъектов = СписокОбъектовИсходный.Скопировать();
		Для каждого ЭлементСписка Из СписокОбъектовИсходный Цикл
			гбХранилище.ДобавитьПодчиненныеЭлементыБлокСхемыВСписок(ЭлементСписка.Значение, СписокОбъектов, Рекурсивно);	
		КонецЦикла;

		Хранилища = Новый Массив;
		Для каждого ЭлементСписка Из СписокПодключений Цикл
			Если ЭлементСписка.Пометка тогда
				Хранилища.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	гбЗахватОбъектов.Объект КАК Значение  , Истина как Пометка
			|ИЗ
			|	РегистрСведений.гбЗахватОбъектов КАК гбЗахватОбъектов
			|ГДЕ
			|	гбЗахватОбъектов.Объект в ( &Объект)
			|	И гбЗахватОбъектов.Хранилище в( &Хранилище)";
		
		Запрос.УстановитьПараметр("Объект", СписокОбъектов);
		Запрос.УстановитьПараметр("Хранилище", Хранилища);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СписокОбъектов.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СписокОбъектов.Добавить(), ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ЗахватитьВХранилище") тогда
		
		Для каждого ЭлементСписка Из СписокОбъектовИсходный Цикл
			гбХранилище.ДобавитьПодчиненныеЭлементыБлокСхемыВСписок(ЭлементСписка.Значение, СписокОбъектов, Рекурсивно);	
		КонецЦикла;

 		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.гбПодчиненныеОбъектыБлокСхем.Измерения.Объект.Тип);
		
		Для каждого ЭлементСписка Из СписокОбъектов Цикл
			ТЗ.Добавить().Ссылка = ЭлементСписка.Значение;
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗ.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ #ТЗ
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЗ.Ссылка КАК Значение,
			|	ИСТИНА КАК Пометка
			|ИЗ
			|	#ТЗ КАК ТЗ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гбЗахватОбъектов КАК гбЗахватОбъектов
			|		ПО ТЗ.Ссылка = гбЗахватОбъектов.Объект
			|			И (гбЗахватОбъектов.Хранилище В (&Хранилище))
			|ГДЕ
			|	гбЗахватОбъектов.Объект ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Объект", СписокОбъектов);
		Запрос.УстановитьПараметр("Хранилище", Хранилища);
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СписокОбъектов.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СписокОбъектов.Добавить(), ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ПоместитьВХранилище") тогда
		
		Для каждого ЭлементСписка Из СписокОбъектовИсходный Цикл
			гбХранилище.ДобавитьПодчиненныеЭлементыБлокСхемыВСписок(ЭлементСписка.Значение, СписокОбъектов, Рекурсивно);	
		КонецЦикла;
		
		Хранилище = СписокПодключений[0].Значение;
		ОбъектыХранилища = гбХранилище.ВыполнитьУдаленно(
			Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);

		Для каждого КлючЗНачение из ОбъектыХранилища Цикл
			Ссылка = гбХранилище.ОбъектИзJSON(КлючЗНачение.Ключ);
			ЭлементСписка = СписокОбъектов.НайтиПоЗначению(Ссылка);
			Если ЭлементСписка <> Неопределено и 
				гбХранилище.Хеш(гбХранилище.ОбъектВJSON(Ссылка.ПолучитьОбъект())) = КлючЗНачение.Значение тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;
			
			//
			//Если гбХранилище.ОбъектСуществует(Ссылка) тогда
			//	Если  тогда
			//		СписокОбъектов.Добавить(КлючЗНачение.Ключ, Ссылка, Истина);
			//	Иначе
			//		СписокОбъектов.Добавить(КлючЗНачение.Ключ, Ссылка);
			//	КонецЕсли;
			//Иначе
			//	СписокОбъектов.Добавить(КлючЗНачение.Ключ, 
			//		СтрЗаменить(СтрЗаменить(КлючЗНачение.Ключ, Символы.ВК, ""), Символы.ПС, ""), Истина);
			//КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Для каждого ЭлементСписка Из СписокОбъектовИсходный Цикл
			гбХранилище.ДобавитьПодчиненныеЭлементыБлокСхемыВСписок(ЭлементСписка.Значение, СписокОбъектов, Рекурсивно);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноПриИзменении(Элемент)
	ЗаполнитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействиеПослеПредупреждения", ЭтаФорма);
	
	Если Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОтменитьЗахват") тогда
		ПоказатьВопрос(ОписаниеОповещения, "Получить из хранилища измененные объекты?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьИзХранилища") тогда
		ПоказатьВопрос(ОписаниеОповещения, "Получить из хранилища измененные объекты?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьВсеИзХранилища") тогда
		ПоказатьВопрос(ОписаниеОповещения, "Получить из хранилища новые и измененные объекты?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеПредупреждения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.ОК тогда
		Возврат;
	КонецЕсли;
	
	СписокПомеченныхОбъектов = Новый СписокЗначений;
	Для Каждого ЭлементСписка из СписокОбъектов цикл
		Если ЭлементСписка.Пометка тогда
			ЗаполнитьЗначенияСвойств(СписокПомеченныхОбъектов.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка из СписокПодключений цикл
		
		Если ЭлементСписка.Пометка тогда
			Если Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ПоместитьВХранилище") тогда
				гбХранилище.ПоместитьВХранилище(ЭлементСписка.Значение, СписокПомеченныхОбъектов, ОставитьЗахваченными);
			ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОтменитьЗахват") тогда
				гбХранилище.ОтменитьЗахват(ЭлементСписка.Значение, СписокПомеченныхОбъектов);
			ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ЗахватитьВХранилище") тогда
				гбХранилище.ЗахватитьВХранилище(ЭлементСписка.Значение, СписокПомеченныхОбъектов);
			ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьВсеИзХранилища") тогда
				гбХранилище.ОбновитьИзХранилища(ЭлементСписка.Значение, СписокПомеченныхОбъектов);
			ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.гбДействияХранилища.ОбновитьИзХранилища") тогда
				гбХранилище.ПолучитьИзХранилища(ЭлементСписка.Значение, СписокПомеченныхОбъектов);
				Если не ОставитьЗахваченными тогда
					гбХранилище.ОтменитьЗахват(ЭлементСписка.Значение, СписокПомеченныхОбъектов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокНаСервере();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.гбБлокСхемы"));	
	ОповеститьОбИзменении(Тип("СправочникСсылка.гбАлгоритмы"));	
	ОповеститьОбИзменении(Тип("СправочникСсылка.гбРасширения"));	
	
	Оповестить("ГрафиБот:ИзменениеСостоянияХранилищаБлокСхем");
	
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если не СписокПодключений.Количество() тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Нет подходящих подключений к хранилищу");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ЗаполнитьСписокНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТолькоПомеченные(Команда)
	Для н = - (СписокОбъектов.Количество() - 1) по 0 цикл
		Если не СписокОбъектов[-н].Пометка тогда
			СписокОбъектов.Удалить(-н);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

