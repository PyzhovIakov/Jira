#Если ВебКлиент тогда

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьПредупреждение(, "В режиме web-клиента эта функция не поддерживается.", 2);
	Отказ = Истина;
	Возврат;
КонецПроцедуры

#КонецОбласти

#Иначе

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КаталогApache = "c:\Program Files (x86)\Apache Software Foundation\Apache2.2";
	КаталогПубликации = "c:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs";
	
	Для Каждого Поле из СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";") цикл
		Если СтрНачинаетсяС(Поле, "File=") тогда
			ИмяПубликации = ?(1, Новый Файл(Сред(Поле, 7, СтрДлина(Поле) - 7)), 0).Имя;
			Прервать;
		ИначеЕсли СтрНачинаетсяС(Поле, "Ref=") тогда 
			ИмяПубликации = Сред(Поле, 6, СтрДлина(Поле) - 6);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяПубликации = НРег(ИмяПубликации) + "-twh";
	
	Для Каждого Пользователь из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Пользователь.Роли.Содержит(Метаданные.Роли.гбИспользование) тогда
			Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя, Пользователь.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	Если Элементы.ИмяПользователя.СписокВыбора.Количество() = 1 тогда
		ИмяПользователя = Элементы.ИмяПользователя.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ВнешнийПорт = Элементы.ВнешнийПорт.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	КаталогApacheПриИзменении(Элементы.КаталогApache);
	                                      
	СтруктураURI = гбКлиентСервер.СтруктураURI("https://api.ipify.org/?format=txt"); //("https://api.my-ip.io/ip");
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт); 
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
		Если Результат.КодСостояния = 200 тогда
			ВнешнийАдрес = Результат.ПолучитьТелоКакСтроку();
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогApacheПриИзменении(Элемент)
	ВерсияApache = Прав(?(1, Новый Файл(КаталогApache), 0).Имя, 3);
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВФ.Каталог = ЭтаФорма[Элемент.Имя];
	ОО = Новый ОписаниеОповещения("ПослеВыбораКаталога", ЭтотОбъект, Элемент.Имя);
	ДВФ.Показать(ОО);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьНастройку(Команда)
	Если не ПроверитьЗаполнение() тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент из Элементы.ГруппаВсеШаги.ПодчиненныеЭлементы цикл
		Элемент.ЦветТекста = WebЦвета.Черный;
	КонецЦикла;
	
	ТекущийШаг = -1;
	
	ПодключитьОбработчикОжидания("ВыполнитьСледующийШаг", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиВнешнегоАдреса(Команда)
	СтруктураURI = гбКлиентСервер.СтруктураURI(ВнешнийАдрес);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , , ,  Новый ЗащищенноеСоединениеOpenSSL); 
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	HTTPСоединение.Получить(HTTPЗапрос);
КонецПроцедуры

&НаСервереБезКонтекста
Функция КаталогПрограммыНаСервере()
	Возврат КаталогПрограммы();	
КонецФункции


&НаКлиенте
Процедура ПроверкаМодуляРасширенияВебСервера(Команда)
	Текст = ПолучитьФайлКонфигурацииВебСервера();
	СтрШаблон("\wsap%1.dll", СтрЗаменить(ВерсияApache, ".", ""));
	ТребуемаяСтрока = СтрШаблон("LoadModule _1cws_module ""%1wsap%2.dll""", 
		КаталогПрограммыНаСервере(), СтрЗаменить(ВерсияApache, ".", ""));
	ТребуемаяСтрока = СтрЗаменить(ТребуемаяСтрока, "\", "/");
	
	Если СтрНайти(НРег(Текст), НРег(ТребуемаяСтрока)) тогда
		Возврат;
	КонецЕсли;
	
	Позиция = СтрНайти(Текст, "LoadModule _1cws_module");
	Если Позиция тогда
		ВызватьИсключение("В конфигурационном файле Apache указана другая версия расширения веб сервера:" + Символы.ПС
			+ Сред(Текст, Позиция, СтрНайти(Текст, Символы.ПС, , Позиция) - Позиция));
	КонецЕсли;

	Маркер = "LoadModule ssl_module modules/mod_ssl.so";
	Текст = ЗаменитьТекст(Текст, Маркер, ТребуемаяСтрока);
	СохранитьФайлКонфигурацииВебСервера(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиЛокальногоАдреса(Команда)
	СтруктураURI = гбКлиентСервер.СтруктураURI("http://127.0.0.1");
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт); 
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	HTTPСоединение.Получить(HTTPЗапрос);
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьТекст(Текст, Маркер, ТребуемаяСтрока, ПослеСтрокиМаркера = Истина)
	Если СтрНайти(Текст, ТребуемаяСтрока) тогда
		Возврат Текст;
	ИначеЕсли не СтрНайти(Текст, Маркер) тогда
		ВызватьИсключение("В конфигурационном файле Apache не найден текст: " + Маркер);
	КонецЕсли;
	
	Если ПослеСтрокиМаркера тогда
		Возврат СтрЗаменитьПоследнее(Текст, Маркер + Символы.ПС, Маркер + Символы.ПС + ТребуемаяСтрока + Символы.ПС);
	Иначе
		Возврат СтрЗаменитьПоследнее(Текст, Маркер, ТребуемаяСтрока);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Подключение_mod_ssl_so(Команда)
	Текст = ПолучитьФайлКонфигурацииВебСервера();
	
	Маркер = "LoadModule ssl_module modules/mod_ssl.so" + Символы.ПС;
	Текст = ЗаменитьТекст(Текст, Символы.ПС + "#" + Маркер, Символы.ПС + Маркер, Ложь);
		
	Текст = ЗаменитьТекст(Текст, "<IfModule ssl_module>", "SSLEngine On");
	Текст = ЗаменитьТекст(Текст, "Listen 80", "Listen 443");
	
	ТребуемаяСтрока = "SSLCertificateFile conf/ssl/" + ИмяФайлаСертификата + ".pem" + Символы.ПС
		+ "SSLCertificateKeyFile conf/ssl/" + ИмяФайлаСертификата + ".key";
	Текст = ЗаменитьТекст(Текст, "SSLEngine On", ТребуемаяСтрока);
	
	СохранитьФайлКонфигурацииВебСервера(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияСертификата(Команда)
	Перем СтрокаКоманды, ТекущийКаталог, КодВозврата;
	
	ИмяФайлаСертификата = СтрЗаменить(ВнешнийАдрес, ".", "_");
	СтрокаКоманды = СтрШаблон("bin\openssl req -newkey rsa:2048 -sha256 -nodes -keyout conf\ssl\%1.key -x509 -days 365 -out conf\ssl\%1.pem -subj ""/C=RU/O=org/CN=%2"" -config conf\openssl.cnf", 
		ИмяФайлаСертификата, ВнешнийАдрес);
		
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("pushd """ + КаталогApache + """");
	Текст.ДобавитьСтроку("mkdir conf\ssl");
	Текст.ДобавитьСтроку(СтрокаКоманды);
	Текст.ДобавитьСтроку("popd");
	Текст.ДобавитьСтроку("if ERRORLEVEL 1 pause");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("cmd");
	Текст.Записать(ИмяВременногоФайла, КодировкаТекста.OEM);
	
	
	ЗапуститьПриложение(ИмяВременногоФайла, , Истина, КодВозврата);
	
	ПолноеИмяФайлаСертификата = КаталогApache + "\conf\ssl\" + ИмяФайлаСертификата;
	Если не ФайлСуществует(ПолноеИмяФайлаСертификата + ".key") тогда
		ВызватьИсключение("Файл ключа сертификата не создан: " + ПолноеИмяФайлаСертификата + ".key");
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПубликацияHTTP_Сервиса(Команда)
	Файл = Новый Файл(КаталогПубликации + "\" + ИмяПубликации + "\default.vrd");
	ИтоговыйКаталогПубликации = КаталогПубликации + "\" + ИмяПубликации;

	Текст = ПолучитьФайлКонфигурацииВебСервера();
	
	ТребуемаяСтрока = СтрШаблон("
		|# kb publication %1 begin
		|Alias ""/%1"" ""%2/""
		|<Directory ""%2/"">
		|    AllowOverride All
		|    Options None
		|    SetHandler 1c-application
		|    ManagedApplicationDescriptor ""%2/default.vrd""
		|</Directory>", ИмяПубликации, СтрЗаменить(Файл.Путь, "\", "/"));
	ТребуемаяСтрока = СтрЗаменить(ТребуемаяСтрока, "//", "/");
	
	Позиция = СтрНайти(Текст, Символы.ПС + СтрПолучитьСтроку(ТребуемаяСтрока, 2));
	Если Позиция тогда
		Текст = Лев(Текст, Позиция - 1) + Сред(Текст, СтрНайти(Текст, "</Directory>", , Позиция) + СтрДлина("</Directory>") + 1);
	КонецЕсли;
	
	
	Текст = ЗаменитьТекст(Текст, "</Directory>", ТребуемаяСтрока);

	СохранитьФайлКонфигурацииВебСервера(Текст);
	
	СоздатьКаталог(Файл.Путь);
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы 
		+ СтрШаблон("Usr=""%1"";Pwd=""%2"";", ИмяПользователя, ПарольПользователя);
	СтрокаСоединенияИнформационнойБазы = СтрЗаменить(СтрокаСоединенияИнформационнойБазы, """", "&quot;");
	
	
	ТребуемаяСтрока = СтрШаблон("<?xml version=""1.0"" encoding=""UTF-8""?>
		|<point xmlns=""http://v8.1c.ru/8.2/virtual-resource-system""
		|		xmlns:xs=""http://www.w3.org/2001/XMLSchema""
		|		xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|		base=""/%1""
		|		ib=""%2""
		|		enable=""false"">
		|<debug enable=""true""
		|		protocol=""tcp""
		|		url=""127.0.0.1""/>
		|	<httpServices publishByDefault=""false"">
		|		<service name=""гбWebhook""
		|				rootUrl=""telegram""
		|				enable=""true""
		|				reuseSessions=""autouse""
		|				sessionMaxAge=""20""
		|				poolSize=""5""
		|				poolTimeout=""5""/>
		|	</httpServices>
		|</point>", ИмяПубликации, СтрокаСоединенияИнформационнойБазы);
	
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(ТребуемаяСтрока);
	Текст.Записать(Файл.ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиСервиса(Команда)
	Адрес = СтрШаблон("https://%1:%3/%2/hs/telegram", ВнешнийАдрес, ИмяПубликации, Формат(ВнешнийПорт, "ЧГ="));
	СтруктураURI = гбКлиентСервер.СтруктураURI(Адрес);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , , ,  Новый ЗащищенноеСоединениеOpenSSL); 
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	HTTPСоединение.Получить(HTTPЗапрос);
КонецПроцедуры

&НаКлиенте
Процедура ПерезапускСлужбыApache(Команда)
	Перем СтрокаКоманды, ТекущийКаталог, КодВозврата;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
		
		СтрокаКоманды = СтрШаблон("net stop ""Apache%1"" & net start ""Apache%1""", ВерсияApache);
			
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(СтрокаКоманды);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("cmd");
		Текст.Записать(ИмяВременногоФайла, КодировкаТекста.OEM);
		
		ЗапуститьПриложение(ИмяВременногоФайла, , Истина, КодВозврата);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	//ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	//	или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 тогда
	//	
	//	СтрокаКоманды = "service apache2 restart";
	//	ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
		
	Иначе
		
		ВызватьИсключение("Платформа не поддерживается: " + СистемнаяИнформация.ТипПлатформы);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранениеПараметровНаСервере(Сертификат)
	Запись = РегистрыСведений.гбПараметрыWebhook.СоздатьМенеджерЗаписи();
	Запись.КлючУникальности = Новый УникальныйИдентификатор;
	Запись.ДатаВремяСоздания = ТекущаяДата();
	Запись.АдресWebhook = СтрШаблон("https://%1:%3/%2", ВнешнийАдрес, ИмяПубликации, Формат(ВнешнийПорт, "ЧГ="));
	Запись.Сертификат = Сертификат;
	Запись.Записать();
	ЗначениеВРеквизитФормы(Запись, "ПараметрыWebhook");
КонецПроцедуры


&НаКлиенте
Процедура СохранениеПараметров(Команда)
	
	ПолноеИмяФайлаСертификата = КаталогApache + "\conf\ssl\" + ИмяФайлаСертификата + ".pem";
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПолноеИмяФайлаСертификата);
	СохранениеПараметровНаСервере(Текст.ПолучитьТекст());
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПараметры(Команда)
	Перем СписокБотов;
	
	СписокБотов = ПолучитьСписокБотовНаСервере();
	Если Ложь тогда
		СписокБотов = Новый СписокЗначений;
	КонецЕсли;
	
	СписокБотов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПослеОтметкиБотов", ЭтотОбъект), "Выберите ботов")
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьКопиюКонфигурационногоФайлаApache(Команда)
	ТекущийФайл = КаталогApache + "\conf\httpd.conf";
	БэкапФайл = ТекущийФайл + "." + Формат(ТекущаяДата(), "ДФ=ггггММддччммсс") + ".bak";
	КопироватьФайл(ТекущийФайл, БэкапФайл);
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаНаличияПравАдминистратораОС(Команда)
	ИмяФайла = КаталогПрограммы() + "\test.tmp";
	Текст = Новый ТекстовыйДокумент;
	Попытка
		Текст.Записать(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
	Исключение
		ВызватьИсключение("Нет прав администратора ОС");
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаРежимаИспользованияСинхронныхВызовов(Команда)
	ПроверкаРежимаИспользованияСинхронныхВызововНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СтрЗаменитьПоследнее(Текст, Что, Чем)
	Позиция = СтрНайти(Текст, Что, НаправлениеПоиска.СКонца);
	Возврат Лев(Текст, Позиция - 1) + Чем + Сред(Текст, Позиция + СтрДлина(Что));
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверкаРежимаИспользованияСинхронныхВызововНаСервере()
	Если не Метаданные.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент 
		= Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.Использовать тогда
		ВызватьИсключение("Для использования помощника свойство конфигурации
			|'Режим использования синхронных вызовов расширений платформы и внешних компонент'
			|должно иметь значение 'Использовать'");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораКаталога(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма[ДополнительныеПараметры] = Результат[0];
	
	ОбработчикПриИзменении = ПолучитьОбработчикПриИзменении(ДополнительныеПараметры);
	Если Не ПустаяСтрока(ОбработчикПриИзменении) тогда
		Выполнить(ОбработчикПриИзменении + "(ЭтаФорма.Элементы[ДополнительныеПараметры])")
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОбработчикПриИзменении(ИмяЭлемента)
	Возврат ЭтаФорма.Элементы[ИмяЭлемента].ПолучитьДействие("ПриИзменении");
КонецФункции


&НаКлиенте
Функция ПолучитьФайлКонфигурацииВебСервера()
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(КаталогApache + "\conf\httpd.conf", КодировкаТекста.ANSI);
	Возврат Текст.ПолучитьТекст();
КонецФункции

&НаКлиенте
Процедура СохранитьФайлКонфигурацииВебСервера(НовыйТекст)
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(НовыйТекст);
	Текст.Записать(КаталогApache + "\conf\httpd.conf", КодировкаТекста.ANSI);
КонецПроцедуры


&НаКлиенте
Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции


&НаКлиенте
Процедура ВыполнитьСледующийШаг()
	ТекущийШаг = ТекущийШаг + 1;

	Если ТекущийШаг < Элементы.ГруппаВсеШаги.ПодчиненныеЭлементы.Количество() тогда
		Элемент = Элементы.ГруппаВсеШаги.ПодчиненныеЭлементы[ТекущийШаг];
		Элемент.ЦветТекста = WebЦвета.Красный;
		Выполнить(Элемент.Имя + "(Неопределено)");
		Элемент.ЦветТекста = WebЦвета.Зеленый;
		ПодключитьОбработчикОжидания("ВыполнитьСледующийШаг", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПослеОтметкиБотов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СписокБотов.Очистить();
	Для Каждого ЭлементСписка из Результат цикл
		Если ЭлементСписка.Пометка тогда
			СписокБотов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ТекущийБот = -1;
	ПодключитьОбработчикОжидания("РежимПолученияДанныхБотаУстановить", 0.1, Истина);
	
КонецПроцедуры
		

&НаКлиенте
Процедура РежимПолученияДанныхБотаУстановить()
	ТекущийБот = ТекущийБот + 1;
	Если ТекущийБот < СписокБотов.Количество() тогда
		ПодключитьОбработчикОжидания("РежимПолученияДанныхБотаУстановить", 0.1, Истина);
	Иначе
		Возврат;
	КонецЕсли;
	
	Бот = СписокБотов[ТекущийБот].Значение;
	Попытка
		Сообщение = Новый СообщениеПользователю;
		Сообщение.УстановитьДанные(Бот);
		
		РежимПолученияДанныхБотаУстановитьНаСервере(Бот);
		
		Сообщение.Текст = "Параметры установлены: " + Бот;
		Сообщение.Сообщить();
	Исключение
		Сообщение.Текст = "Параметры не установлены: " + Бот + Символы.ПС + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ВызватьИсключение;
		
	КонецПопытки;
КонецПроцедуры
	
&НаСервере
Процедура РежимПолученияДанныхБотаУстановитьНаСервере(Бот)
	
	гбСервер.УстановитьРежимПолученияДанныхБота(Бот, Перечисления.гбРежимыПолученияДанныхБота.webhook, 
		ПараметрыWebhook.АдресWebhook, ПараметрыWebhook.Сертификат);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСписокБотовНаСервере()
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбБоты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.гбБоты КАК гбБоты
		|
		|УПОРЯДОЧИТЬ ПО
		|	гбБоты.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции


#КонецОбласти




#КонецЕсли
