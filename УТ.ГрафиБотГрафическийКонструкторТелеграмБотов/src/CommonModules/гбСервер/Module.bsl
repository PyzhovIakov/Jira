
#Область РаботаСОшибками

#Область ПрограммныйИнтерфейс


// Получает подробное описание ошибки из данных ошибки, см. ДанныеОшибки
//
// Параметры:
//	ИнформацияОбОшибке		 - ИнформацияОбОшибке	 -  Информация об ошибке
//	Событие					 - Перечисление.гбСобытия	 - возвращаемый
//	ПодробноеОписаниеОшибки	 - Строка	 - Возвращаемый
//	Данные					 - Произвольный	 - Возвращаемый
// 
// Возвращаемое значение:
//	Строка - Описание ошибки
//
Функция ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке, Событие = Неопределено, ПодробноеОписаниеОшибки = Неопределено,
		Данные = Неопределено) Экспорт

	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	Если СтрНачинаетсяС(ИнформацияОбОшибке.Описание, "{""#"",3ee983d7-ace7-40f9-bb7e-2e916fcddd56,") тогда
		ДанныеОшибки = ЗначениеИзСтрокиВнутр(ИнформацияОбОшибке.Описание);
		Событие = ДанныеОшибки.Событие;
		Данные = ДанныеОшибки.Данные;
		ОписаниеОшибки = ДанныеОшибки.ОписаниеОшибки;
	КонецЕсли;
	ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибкиРекурсивно(ИнформацияОбОшибке);
	
	Возврат ОписаниеОшибки;
КонецФункции
	
// Отправляет сообщение об ошибке в чат и в журнал регистрации
//
// Параметры:
//	ИнформацияОбОшибке		 - ИнформацияОбОшибке	 -  Информация об ошибке
//	Событие					 - Перечисление.гбСобытия	 - операция во время которой произошла ошибка
//	Данные					 - Произвольный	 - данные связанные с ошибкой
//
Процедура ОповеститьОбОшибке(Знач Событие, ИнформацияОбОшибке = Неопределено, Данные = Неопределено) Экспорт
	Кэш = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	Если Кэш.Свойство("ОбработкаОшибки") тогда
		Возврат;
	КонецЕсли;
	Кэш.Вставить("ОбработкаОшибки", Истина);
	
	Кэш.Вставить("Данные", Данные);
	
    Если Кэш.Свойство("Чат") и ЗначениеЗаполнено(Кэш.Чат) тогда
		Попытка
			Запись = РегистрыСведений.гбКонтекстЧата.СоздатьМенеджерЗаписи();
			Запись.Чат = Кэш.Чат;
			Запись.Прочитать();
			
			Кэш.Вставить("Контекст", Запись.ДанныеКонтекста.Получить());
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОписаниеОшибки = ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке, Событие, ПодробноеОписаниеОшибки, Данные);
	

	Бот = Неопределено;
	Кэш.Свойство("Бот", Бот);
	ЗаписьЖурналаРегистрации("ГрафиБот." + Событие, УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.гбБоты, Бот, ПодробноеОписаниеОшибки + 
			?(Данные = Неопределено, Символы.ПС + ПредставлениеЗначения(Данные), Неопределено)); 
	ЗаписьЖурналаРегистрации("ГрафиБот." + Событие + ".Подробно", УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.гбБоты, Бот, ПодробноеОписаниеОшибки + Символы.ПС + ПредставлениеЗначения(Кэш)); 
		
	Если ЗначениеЗаполнено(Бот) тогда
		СобытиеОтправка = Перечисления.гбСобытия.ОтправкаСлужебногоСообщения;
		
		Чат = Неопределено;
		Кэш.Свойство("Чат", Чат);
		
		ИДОшибки = Новый УникальныйИдентификатор;
		Запись = РегистрыСведений.гбОшибки.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторОшибки = ИДОшибки;
		Запись.Чат = Чат;
		Запись.ОписаниеОшибки = ОписаниеОшибки;
		Запись.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		Попытка
			Запись.Данные = Новый ХранилищеЗначения(Кэш);
		Исключение
			Запись.Данные = Новый ХранилищеЗначения(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Запись.ДатаВремя = ТекущаяДата();
		
		Если ЗначениеЗаполнено(Чат) и Чат <> Бот.ЧатУведомленияОбОшибках 
			и Событие <> Перечисления.гбСобытия.ФормированиеДанныхВыбораМеню тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Автоудаление", 3600);
			Параметры.Вставить("НеОтправлятьСистемеВзаимодействия");
			КлавиатураСообщения = Новый Массив;
			КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
						ДобавитьЭмодзи("U+1F53B+ Подробно"), "ShowError:" + Строка(ИДОшибки)));
			КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
						ДобавитьЭмодзи("U+1F5D1+ Удалить"), "Del_Error:" + Строка(ИДОшибки)));
			Параметры.Вставить("КлавиатураСообщения", гбКлиентСервер.ЗначениеВМассиве(КлавиатураСообщения));
			Попытка
				Результат = ОтправитьСообщение(Бот, Чат, "U+2757+ " + ОписаниеОшибки
					 + Символы.ПС + "Для перезапуска бота введите команду /start", Параметры);
				Запись.ИдентификаторСообщения = Результат.message_id;
			Исключение
				ВремПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке(), , ВремПодробноеОписаниеОшибки);

				ЗаписьЖурналаРегистрации("ГрафиБот." + СобытиеОтправка, УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.гбБоты, Бот, ВремПодробноеОписаниеОшибки); 
			КонецПопытки;
		КонецЕсли;
		
	
		Если ЗначениеЗаполнено(Бот.ЧатУведомленияОбОшибках) тогда
			
			ДанныеОшибки = "" + ОписаниеОшибки + Символы.ПС 
				+ "######################################################################" + Символы.ПС
				+ ПодробноеОписаниеОшибки + Символы.ПС 
				+ "######################################################################" + Символы.ПС
				+ ПредставлениеЗначения(Кэш);
				
			Поток = Новый ПотокВПамяти;
			ЗаписьТекста = Новый ЗаписьТекста(Поток, КодировкаТекста.UTF8, , , Истина) ;
			ЗаписьТекста.Записать(ДанныеОшибки);
			ЗаписьТекста.Закрыть();
			ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
			
			Параметры = Новый Структура;
			Параметры.Вставить("НеОтправлятьСистемеВзаимодействия");
			КлавиатураСообщения = Новый Массив;
			КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
						ДобавитьЭмодзи("U+1F53B+ Подробно"), "ShowError:" + Строка(ИДОшибки)));
			КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
						ДобавитьЭмодзи("U+1F5D1+ Удалить"), "Del_Error:" + Строка(ИДОшибки)));
			Параметры.Вставить("КлавиатураСообщения", гбКлиентСервер.ЗначениеВМассиве(КлавиатураСообщения));
			ОписаниеОшибкиДляОтправки = ОписаниеОшибки;
			
			Параметры.Вставить("Текст", "U+2757+ " + ОписаниеОшибкиДляОтправки);
			Параметры.Вставить("ИмяФайла", "E" + Формат(ТекущаяДата(), "ДФ='yyyyMMdd-hhmmss'") + ".txt");
			Попытка
				Результат = ОтправитьФайл(Бот, Бот.ЧатУведомленияОбОшибках, ДвоичныеДанные, Параметры);
				Запись.ИдентификаторСообщения = Результат.message_id;
			Исключение
				ВремПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке(), , ВремПодробноеОписаниеОшибки);

				ЗаписьЖурналаРегистрации("ГрафиБот." + СобытиеОтправка, УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.гбБоты, Бот, ВремПодробноеОписаниеОшибки); 
			КонецПопытки;
			
			Запись.Записать(Ложь);
					
		КонецЕсли; 
	КонецЕсли;

	Кэш.Удалить("ОбработкаОшибки");

КонецПроцедуры // СообщитьОбОшибке()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру ИнформацияОбОшибке
//
// Параметры:
//	ИнформацияОбОшибке		 - ИнформацияОбОшибке	 -  Информация об ошибке
// 
// Возвращаемое значение:
//	Структура - Информация об ошибке
//
Функция ИнформацияОбОшибкеВСтруктуру(ИнформацияОбОшибке)
	Если ИнформацияОбОшибке <> Неопределено тогда
		Результат = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание");
		ЗаполнитьЗначенияСвойств(Результат, ИнформацияОбОшибке);
		Результат.Вставить("Причина", ИнформацияОбОшибкеВСтруктуру(ИнформацияОбОшибке.Причина));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


// Возвращает данные ошибки
//
// Параметры:
//	Событие					 - Перечисление.гбСобытия	 - операция во время которой произошла ошибка
//	ОписаниеОшибки		 - Строка	 - Описание ошибки
//	ИнформацияОбОшибке		 - ИнформацияОбОшибке	 -  Информация об ошибке
//	Данные					 - Произвольный	 - данные связанные с ошибкой
// 
// Возвращаемое значение:
//	Строка - данные ошибки
//
Функция ДанныеОшибки(Событие, ОписаниеОшибки, ИнформацияОбОшибке = Неопределено, Данные = Неопределено)
	Результат = Новый ФиксированнаяСтруктура("Событие, ОписаниеОшибки, ИнформацияОбОшибке, Данные",
		Событие, ОписаниеОшибки, ИнформацияОбОшибкеВСтруктуру(ИнформацияОбОшибке), Данные);
	Результат = ЗначениеВСтрокуВнутр(Результат);
	
	Возврат Результат;
КонецФункции


// Устанавливает контекст для отладки
//
// Параметры:
//	Бот	 - Справочник.гбБоты	 - текущий бот
//	Чат	 - Справочник.гбЧаты	 - текущий чат
//
Процедура УстановитьКонтекстДляОтладки(Бот, Чат)
	
	Кэш = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	Кэш.Вставить("Бот", Бот);
	Кэш.Вставить("Чат", Чат);
	
КонецПроцедуры


// Возвращает подробное представление ошибки с учетом того что описание ошибки может содержать закодированную структуру 
// дополнительных данных об ошибке
//
// Параметры:
//	ИнформацияОбОшибке		 - ИнформацияОбОшибке	 -  Информация об ошибке
// 
// Возвращаемое значение:
//	Строка - подробное представление ошибки
//
Функция ПодробноеПредставлениеОшибкиРекурсивно(ИнформацияОбОшибке)
	Если ИнформацияОбОшибке = Неопределено тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	Причина = ИнформацияОбОшибке.Причина;
	Если СтрНачинаетсяС(ИнформацияОбОшибке.Описание, "{""#"",3ee983d7-ace7-40f9-bb7e-2e916fcddd56,") тогда
		ДанныеОшибки = ЗначениеИзСтрокиВнутр(ИнформацияОбОшибке.Описание);
		ОписаниеОшибки = ДанныеОшибки.ОписаниеОшибки;
		Причина = ДанныеОшибки.ИнформацияОбОшибке;
	КонецЕсли;
	Результат = "";
	Если не ПустаяСтрока(ИнформацияОбОшибке.ИмяМодуля + ИнформацияОбОшибке.НомерСтроки) тогда
		Результат = Результат
			+ СтрШаблон("{%1(%2)}:", ИнформацияОбОшибке.ИмяМодуля, ИнформацияОбОшибке.НомерСтроки) + Символы.ПС;
	КонецЕсли;
	Если не ПустаяСтрока(ИнформацияОбОшибке.ИсходнаяСтрока) тогда
		Результат = Результат + ИнформацияОбОшибке.ИсходнаяСтрока + Символы.ПС;
	КонецЕсли;
	Результат = Результат + ОписаниеОшибки + Символы.ПС;
	
	ОписаниеПричины = ПодробноеПредставлениеОшибкиРекурсивно(Причина);
	Если не ПустаяСтрока(ОписаниеПричины) тогда
		Результат = Результат + "по причине:" + Символы.ПС + ОписаниеПричины + Символы.ПС;
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ПреобразованиеЗначений

Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(п_ТЗ) Экспорт 

    МассивРезультат = Новый Массив;
    МассивКолонок    = Новый Массив;
    
    Для Каждого Колонка Из п_ТЗ.Колонки Цикл        
        МассивКолонок.Добавить(Колонка.Имя); 
    КонецЦикла;
    
    СтруктураСтрокой = СтрСоединить(МассивКолонок, ",");
        
    Для Каждого Строка Из п_ТЗ Цикл        
        НоваяСтрока = Новый Структура(СтруктураСтрокой);
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);        
        МассивРезультат.Добавить(НоваяСтрока);        
    КонецЦикла;
    
    Возврат МассивРезультат;

КонецФункции

#Область ПрограммныйИнтерфейс

// Возвращает представление значения. Структуры и массивы раскрывает по свойствам рекурсивно
// 
// Параметры:
//	Значение			 - 	Произвольный - значение для получения представления.
//
// Возвращаемое значение:
//	Строка - представление данных
//
Функция ПредставлениеЗначения(Значение, Префикс = "") Экспорт 
	Если ТипЗнч(Значение) = Тип("Структура") или ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура")
		или ТипЗнч(Значение) = Тип("Соответствие") или ТипЗнч(Значение) = Тип("ФиксированноеСоответствие") тогда
		Результат = "";
		Для каждого КлючЗначение Из Значение Цикл
			Результат = Результат + Префикс + КлючЗначение.Ключ + ": " 
				+ ПредставлениеЗначения(КлючЗначение.Значение, Префикс + Символы.Таб) + Символы.ПС;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") или ТипЗнч(Значение) = Тип("ФиксированныйМассив") тогда
		Результат = "";
		Для каждого Элемент Из Значение Цикл
			Результат = Результат + Префикс 
				+ ПредставлениеЗначения(Элемент, Префикс + Символы.Таб) + Символы.ПС;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") тогда
		Результат = ПредставлениеЗначения(ПреобразоватьТаблицуЗначенийВМассивСтруктур(Значение), Префикс);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") тогда
		Результат = "";
		Для каждого Элемент Из Значение Цикл
			Результат = Результат + Префикс 
				+ ПредставлениеЗначения(Элемент, Префикс + Символы.Таб) + Символы.ПС;
		КонецЦикла;

	ИначеЕсли ТипЗнч(Значение) = Тип("ЭлементСпискаЗначений") тогда
		Результат = ПредставлениеЗначения(Значение.Значение, Префикс + Символы.Таб) 
			+ "(" + Значение.Представление + ")" + Символы.ПС;
		
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Преобразует строку JSON в структуру данных
//
// Параметры:
//	СтрокаJSON			 - 	Строка - данные в формате JSON
//
// Возвращаемое значение:
//	Структура 
//
Функция ОбъектИз_JSON(СтрокаJSON) Экспорт
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Данные = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ЧтениеJSON, , ИнформацияОбОшибке(), СтрокаJSON));	
	КонецПопытки;
	
	Если ТипЗнч(Данные) = Тип("Структура") и Данные.Свойство("DataType") и Данные.Свойство("Data") тогда
		СписокЗначений = Новый СписокЗначений;
		Для каждого ЭлементСписка Из Данные.Data Цикл
			СписокЗначений.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		Данные = СписокЗначений;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции // ПрочитатьJSON()

// Преобразует данные в строку JSON
//
// Параметры:
//	Данные			 - 	Структура - данные для преобразования в формат JSON
//
// Возвращаемое значение:
//	Строка - данные в формате JSON
//
Функция ОбъектВ_JSON(Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("СписокЗначений") тогда
		Массив = Новый Массив;
		Для каждого ЭлементСписка Из Данные Цикл
			Массив.Добавить(Новый Структура("Значение, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;
		Возврат ОбъектВ_JSON(Новый Структура("DataType, Data", "СписокЗначений", Массив));
	КонецЕсли;
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные);
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ЗаписьJSON, , ИнформацияОбОшибке(), Данные));	
	КонецПопытки;
КонецФункции // ОбъектВ_JSON()

// Копирует структуру с разрывом объектных связей
//
// Параметры:
//	Структура	 - Структура	 - Копируемая структура
// 
// Возвращаемое значение:
//	Структура - новая структура
//
Функция СкопироватьСтруктуру(Структура) Экспорт
	Возврат ?(Структура = Неопределено, Новый Структура, ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структура)));
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ОтправкаИПолучениеСообщений

#Область ПрограммныйИнтерфейс


// Отправляет сообщение в чат
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата, куда будет отправлено сообщение
//	Текст		 - Строка - Отправляемый текст
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция ОтправитьСообщение(Бот, Чат, Знач Текст, Параметры = Неопределено) Экспорт
	Перем Команда;
	
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", Чат);
	
	Если Параметры.Свойство("Сообщение") и Параметры.Сообщение <> Неопределено тогда
		
		Если ТипЗнч(Текст) = Тип("Строка") и не ПустаяСтрока(Текст) тогда
			Текст = ДобавитьЭмодзи(Текст);
			Если (ТипЗнч(Параметры.Сообщение) = Тип("Структура") или ТипЗнч(Параметры.Сообщение) = Тип("ФиксированнаяСтруктура")) тогда
				Если Параметры.Сообщение.Свойство("message") и ТипЗнч(Параметры.Сообщение.message) = Тип("Структура") тогда
					message = Параметры.Сообщение.message;
				ИначеЕсли Параметры.Сообщение.Свойство("message_id") тогда
					message = Параметры.Сообщение;
				КонецЕсли;
				Если ТипЗнч(message) = Тип("Структура") тогда
					Если message.Свойство("text") тогда

						СлучайноеЧисло = ПолученноеСообщение().update_id;
						Пробелы = "######### ######### ######### ######### ######### 
							|######### ######### ######### ######### ######### ";
						Текст = Текст + Символы.ПС 
							+ Лев(СтрЗаменить(Пробелы, "#", " "), СлучайноеЧисло % СтрДлина(Пробелы));

						Команда = "/editMessageText";
						Параметры.Вставить("Текст", Текст);
					Иначе
						Если message.Свойство("caption") и message.caption = Текст тогда
							Если Параметры.Свойство("КлавиатураСообщения") тогда
								Команда = "/editMessageReplyMarkup";
							Иначе
								Возврат Параметры.Сообщение;
							КонецЕсли;
						Иначе
							Параметры.Вставить("Заголовок", Текст);
							Команда = "/editMessageCaption";
						КонецЕсли;
						
					КонецЕсли;
					Если message.Свойство("reply_markup") тогда
						Параметры.Вставить("reply_markup", message.reply_markup);
					КонецЕсли;
				Иначе
					Параметры.Вставить("Текст", Текст);
					Команда = "/editMessageText";
				КонецЕсли;
			КонецЕсли;
				
			
		ИначеЕсли Параметры.Свойство("КлавиатураСообщения") тогда
			Команда = "/editMessageReplyMarkup";
			
		КонецЕсли;
		
	ИначеЕсли СтрДлина(Текст) > 4096 тогда
		Поток = Новый ПотокВПамяти;
		ЗаписьТекста = Новый ЗаписьТекста(Поток, КодировкаТекста.UTF8, , , Истина) ;
		ЗаписьТекста.Записать(ДобавитьЭмодзи(Текст));
		ЗаписьТекста.Закрыть();
		ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();

		Параметры.Вставить("Текст", Лев(ДобавитьЭмодзи(Текст), 1023) + "…");
		Параметры.Вставить("ИмяФайла", "text" + Формат(ТекущаяДата(), "ДФ='yyyyMMdd-hhmmss'") + ".txt");
		Возврат ОтправитьФайл(Бот, Чат, ДвоичныеДанные, Параметры);
		
	Иначе
		Параметры.Вставить("Текст", ДобавитьЭмодзи(Текст));
		Команда = "/sendMessage";
	КонецЕсли;
	
	Возврат ОтправитьКомандуТелеграм(Бот, Команда, Параметры);
КонецФункции // ОтправитьСообщение()


// Отправляет состояние в чат (самоудаляющийся через 5 сек)
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата, куда будет отправлено сообщение
//	Текст		 - Строка - Отправляемый текст
//			typing for text messages
//			upload_photo for photos
//			upload_video for videos
//			record_video for video recording
//			upload_audio for audio files
//			record_audio for audio file recording
//			upload_document for general files
//			find_location for location data
//			upload_video_note for video notes
//			record_video_note for video note recording
//			
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция ОтправитьСостояние(Бот, Чат, Состояние) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Состояние", Состояние);
	
	Возврат ОтправитьКомандуТелеграм(Бот, "/sendChatAction", Параметры);
	
КонецФункции // ОтправитьСообщение()


// Редактирует сообщение в чате
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧат|Число -	 ссылка на справочник или ИД чата
//	Сообщение - Структура - данные отправленного сообщения
//	Текст		 - Строка - Отправляемый текст
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция РедактироватьСообщение(Бот, Чат, Сообщение, Текст, Параметры = Неопределено)
	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", Чат);
	
	Если Текст <> Неопределено тогда
		Параметры.Вставить("Текст", ДобавитьЭмодзи(Текст));
	КонецЕсли;
	Параметры.Вставить("Сообщение", Сообщение);
	
	Возврат ОтправитьКомандуТелеграм(Бот, "/editMessageText", Параметры);
	
КонецФункции // РедактироватьСообщение()


// Удаляет сообщение из чата
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧат|Число -	 ссылка на справочник или ИД чата
//	Сообщение - Структура - данные отправленного сообщения
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция УдалитьСообщениеИсполняющая(Бот, Чат, Сообщение)
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Параметры = СкопироватьСтруктуру(Неопределено);
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	
	Для Каждого МетаРегистр из гбСерверПовтИсп.ПолучитьМетаданныеРасширения("РегистрыСведений").РегистрыСведений Цикл
		Если МетаРегистр.Измерения.Найти("ИдентификаторСообщения") <> Неопределено тогда
			НаборЗаписей = РегистрыСведений[МетаРегистр.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Чат.Установить(Чат);
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ПолучитьСообщениеИД(Сообщение));
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		ИначеЕсли МетаРегистр.Ресурсы.Найти("ИдентификаторСообщения") <> Неопределено 
			или МетаРегистр.Реквизиты.Найти("ИдентификаторСообщения") <> Неопределено тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрЗаменить(
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|	РегистрСведений.гбСообщенияКУдалению
				|ГДЕ
				|	ИдентификаторСообщения = &ИдентификаторСообщения", "гбСообщенияКУдалению", МетаРегистр.Имя);
	
			Запрос.УстановитьПараметр("ИдентификаторСообщения", ПолучитьСообщениеИД(Сообщение));
	
			Выборка = Запрос.Выполнить().Выбрать();
	
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений[МетаРегистр.Имя].СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Удалить();
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ОтправитьКомандуТелеграм(Бот, "/deleteMessage", Параметры);
	
КонецФункции // УдалитьСообщение()


// Удаляет сообщение из чата, без генерации исключения при ошибке
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧат|Число -	 ссылка на справочник или ИД чата
//	Сообщение - Структура - данные отправленного сообщения
//
//
Процедура УдалитьСообщение(Бот, Чат, Знач Сообщение) Экспорт
	Если ТипЗнч(Сообщение) = Тип("Строка") тогда
		Сообщения = СтрРазделить(Сообщение, ",");
	ИначеЕсли ТипЗнч(Сообщение) <> Тип("Массив") тогда
		Сообщения = гбКлиентСервер.ЗначениеВМассиве(Сообщение);
	Иначе
		Сообщения = Сообщение;
	КонецЕсли;
	Для каждого Сообщение Из Сообщения Цикл
		Если не ЗначениеЗаполнено(Сообщение) и Сообщение <> "0" тогда
			Продолжить;
		КонецЕсли;
		УдалитьСообщениеИсполняющая(Бот, Чат, Сообщение);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСообщение()


// Пересылает сообщение в другой чат
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	ВЧат          - Справочник|Число -	 ссылка на справочник или ИД чата куда будет отправлено сообщение
//	Сообщение - Структура - данные отправленного сообщения
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Процедура ПереслатьСообщение(Бот, Чат, ВЧат, Сообщение, Параметры = Неопределено) Экспорт

	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", ВЧат);
	Параметры.Вставить("ИзЧата", Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	
	ОтправитьКомандуТелеграм(Бот, "/forwardMessage", Параметры);

КонецПроцедуры

// Копирует  сообщение в другой чат
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	ВЧат          - Справочник|Число -	 ссылка на справочник или ИД чата куда будет отправлено сообщение
//	Сообщение - Структура - данные отправленного сообщения
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Процедура СкопироватьСообщение(Бот, Чат, ВЧат, Сообщение, Параметры = Неопределено) Экспорт

	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", ВЧат);
	Параметры.Вставить("ИзЧата", Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	
	ОтправитьКомандуТелеграм(Бот, "/copyMessage", Параметры);

КонецПроцедуры


// Отправляет позицию в чат
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	Позиция		 - Структура -	(Широта			 - 	Число - Широта,  Долгота			 - 	Число - Долгота)
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция ОтправитьПозицию(Бот, Чат, Позиция, Параметры = Неопределено) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Параметры = СкопироватьСтруктуру(Параметры);
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Долгота", Позиция.Долгота);
	Параметры.Вставить("Широта", Позиция.Широта);
	
	Если Параметры.Свойство("Текст") тогда
		Параметры.Вставить("Название", Параметры.Текст);
		Параметры.Удалить("Текст");
	КонецЕсли;

	Возврат ОтправитьКомандуТелеграм(Бот, "/sendLocation", Параметры);
КонецФункции // ОтправитьПозицию()


// Отправляет контакт в чат
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	Контакт     -  Структура - Имя, Телефон
//	Параметры    - структура - дополнительные параметры
//
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция ОтправитьКонтакт(Бот, Чат, Контакт, Параметры = Неопределено) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Если Параметры = Неопределено тогда
		Параметры = Новый Структура();
	КонецЕсли;
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("НомерТелефона", Контакт.НомерТелефона);
	Параметры.Вставить("Имя", Контакт.Имя);

	Возврат ОтправитьКомандуТелеграм(Бот, "/sendContact", Параметры);
КонецФункции // ОтправитьСообщение()


// Отправляет файл в чат
//
// Параметры:
//  Бот			 - Справочник.гбБоты - обрабатываемый бот
//  Чат			 - Справочник|Число -	 ссылка на справочник или ИД чата
//  Файл		 - Файл|Строка|ДвоичныеДанные - Файл, имя файла или двоичные данные отправляемого файла.
//  Параметры	 - Структура		 - дополнительные параметры
//  ТипФайла	 - Перечисление.гбТипыФайлов - тип файла					 - 
// 
// Возвращаемое значение:
//  Структура - данные отправленного сообщения
//
Функция ОтправитьФайл(Бот, Чат, Файл, Параметры = Неопределено, ТипФайла = Неопределено) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Чат);
	Параметры = СкопироватьСтруктуру(Параметры);
	
	Если ТипФайла = Перечисления.гбТипыФайлов.Фото тогда
		ИмяПоля = "Фото";
		Расширение = "jpeg";
		Метод = "sendPhoto";
		ТипМедиа = "photo";
	ИначеЕсли ТипФайла = Перечисления.гбТипыФайлов.Видео тогда
		ИмяПоля = "Видео";
		Расширение = "mp4";
		Метод = "sendVideo";
		ТипМедиа = "video";
	ИначеЕсли ТипФайла = Перечисления.гбТипыФайлов.Аудио тогда
		ИмяПоля = "Аудио";
		Расширение = "mp3";
		Метод = "sendAudio";
		ТипМедиа = "audio";
	Иначе
		ИмяПоля = "Документ";
		Расширение = "dat";
		Метод = "sendDocument";
		ТипМедиа = "document";
	КонецЕсли;
	
	Если Параметры.Свойство("Сообщение") и ЗначениеЗаполнено(Параметры.Сообщение) тогда
		Метод = "editMessageMedia";
		ИмяПоля = "media";
		Параметры.Вставить("type", ТипМедиа);
	КонецЕсли;

	
	Параметры.Вставить("Чат", Чат);
	Если Параметры.Свойство("Текст") тогда
		Параметры.Вставить("Заголовок", Параметры.Текст);
		Параметры.Удалить("Текст");
	КонецЕсли;
	Если Параметры.Свойство("Заголовок") тогда
		Параметры.Вставить("Заголовок", ДобавитьЭмодзи(Параметры.Заголовок));
	КонецЕсли;
	Параметры.Удалить("Фото");
	Параметры.Удалить("Видео");
	Параметры.Удалить("Аудио");
	Параметры.Удалить("Документ");
	
	
	Если ТипЗнч(Файл) = Тип("СписокЗначений") тогда
		ДанныеФайла = Новый Массив;
		
		Для каждого ЭлементСписка из Файл цикл
			ВремДанныеФайла = ПолучитьДанныеФайла(ЭлементСписка.Значение, , Расширение);
			Если ТипЗнч(ВремДанныеФайла) = Тип("Строка") тогда
				ВремДанныеФайла = Новый Структура("media", ВремДанныеФайла);
			КонецЕсли;
			ВремДанныеФайла.Вставить("caption", ДобавитьЭмодзи(Строка(ЭлементСписка)));
			ВремДанныеФайла.Вставить("type", ТипМедиа);
			ДанныеФайла.Добавить(ВремДанныеФайла);
		КонецЦикла;
		Метод = "sendMediaGroup";
		ИмяПоля = "media";
	Иначе 
		ИмяФайла = Неопределено;
		Параметры.Свойство("ИмяФайла", ИмяФайла);
		ДанныеФайла = ПолучитьДанныеФайла(Файл, ИмяФайла, Расширение);
		Параметры.Вставить("type", ТипМедиа);
	КонецЕсли;
	
	Параметры.Вставить(ИмяПоля, ДанныеФайла);

	Возврат ОтправитьКомандуТелеграм(Бот, "/" + Метод, Параметры);
	
КонецФункции // ОтправитьФайл()

Функция ПолучитьДанныеФайла(Файл, ИмяФайла, Расширение)
	ДанныеФайла = Новый Структура("ИмяФайла, ДвоичныеДанные");

	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") тогда

		ДанныеФайла.ИмяФайла = ?(ИмяФайла = Неопределено, ПолучитьИмяВременногоФайла(Расширение), ИмяФайла);
		ДанныеФайла.ДвоичныеДанные = Файл;
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Картинка") тогда

		ДанныеФайла.ИмяФайла = ?(ИмяФайла = Неопределено, ПолучитьИмяВременногоФайла(Расширение), ИмяФайла);
		ДанныеФайла.ДвоичныеДанные = Файл.ПолучитьДвоичныеДанные();
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Строка") тогда
		Если СтрНачинаетсяС(Файл, "http") тогда

			ДанныеФайла = Файл;
		ИначеЕсли СтрНайти(Прав(Файл, 5), ".") тогда

			ВремФайл = Новый Файл(Файл);
			ДанныеФайла.ИмяФайла = ?(ИмяФайла = Неопределено, ВремФайл.Имя, ИмяФайла);
			ДанныеФайла.ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл.ПолноеИмя);
		Иначе
			ДанныеФайла = Файл;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Файл") тогда

		ДанныеФайла.ИмяФайла = ?(ИмяФайла = Неопределено, Файл.Имя, ИмяФайла);
		ДанныеФайла.ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		
	Иначе
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ОтправкаФайла, "Недопустимое значение параметра '1' (Файл)"));
		
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции


// Закрепляет сообщение
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	Сообщение	 - Структура|Число	 - закрепляемое сообщение
//
Процедура ЗакрепитьСообщение(Бот, Чат, Сообщение) Экспорт
	
	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = Новый Структура();
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	//Параметры.Вставить("ОтключитьУведомление", Истина);
	
	ОтправитьКомандуТелеграм(Бот, "/pinChatMessage", Параметры);
	
КонецПроцедуры


// Открепляет сообщение
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	Сообщение	 - Структура|Число	 - открепляемое сообщение
//
Процедура ОткрепитьСообщение(Бот, Чат, Сообщение) Экспорт
	
	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = Новый Структура();
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	
	ОтправитьКомандуТелеграм(Бот, "/unpinChatMessage", Параметры);
	
КонецПроцедуры


// Открепляет все сообщения
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//
Процедура ОткрепитьВсеСообщения(Бот, Чат) Экспорт
	
	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = Новый Структура();
	Параметры.Вставить("Чат", Чат);
	
	ОтправитьКомандуТелеграм(Бот, "/unpinAllChatMessages", Параметры);
	
КонецПроцедуры


// Получить файл по ид и сохраняет его на диск
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник|Число -	 ссылка на справочник или ИД чата
//	ИдФайла	 	- Число - 	Идентификатор файла
//	ИмяФайла - Строка	 - возвращаемый
// 
// Возвращаемое значение:
//	Строка - Имя временного файла
//
Функция ПолучитьФайлПоИд(Бот, Чат, ИдФайла, Знач ИмяФайла = Неопределено) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Чат);

	Параметры = Новый Структура("ИдентификаторФайла", ИдФайла);
	Результат = ОтправитьКомандуТелеграм(Бот, "/getFile", Параметры);

	ДанныеФайла = Результат;
	ПутьКФайлу = ДанныеФайла["file_path"];
	УрлФайла = СтрШаблон("https://api.telegram.org/file/bot%1/%2", Бот.Токен, ПутьКФайлу);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Если ИмяФайла = Неопределено тогда
		ЭлементыПутьКФайлу = СтрРазделить(ПутьКФайлу, "/");
		ИмяФайла = ЭлементыПутьКФайлу[ЭлементыПутьКФайлу.ВГраница()];
	КонецЕсли;
	СоздатьКаталог(ИмяВременногоФайла);
	ИмяВременногоФайла = ИмяВременногоФайла + "\" + ИмяФайла;
	
	КопироватьФайл(УрлФайла, ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
КонецФункции


// Получает последнее отправленное сообщение
// 
// Возвращаемое значение:
//	Структура - последнее отправленное сообщение 
//
Функция ОтправленноеСообщение() Экспорт
	Перем Сообщение;
	
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Свойство("ОтправленноеСообщение", Сообщение);
	
	Возврат Сообщение;
КонецФункции


// Получает последнее полученное сообщение
// 
// Возвращаемое значение:
//	Структура - последнее полученное сообщение 
//
Функция ПолученноеСообщение() Экспорт
	Перем Сообщение;

	гбСерверПовтИсп.ПолучитьКэшКонтекста().Свойство("ПолученноеСообщение", Сообщение);
	
	Возврат Сообщение;
КонецФункции


// Получает список команд бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//
// Возвращаемое значение:
//  СписокЗначений - команды бота, значение элементов - имя команды, представлеие - описание 
//
Функция ПолучитьКомандыБота(Бот) Экспорт
	УстановитьКонтекстДляОтладки(Бот, Неопределено);

	Команды = ОтправитьКомандуТелеграм(Бот, "/getMyCommands", Новый Структура());
	
	Результат = Новый СписокЗначений;
	Для Каждого Команда из Команды Цикл
		Результат.Добавить(Команда.command, Команда.description);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции


// Устанавливает список команд бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//  СписокКоманд - СписокЗначений - команды бота, значение элементов - имя команды, представлеие - описание 
//
Процедура УстановитьКомандыБота(Бот, СписокКоманд) Экспорт

	УстановитьКонтекстДляОтладки(Бот, Неопределено);

	Команды = Новый Массив;
	Для Каждого ЭлементСписка из СписокКоманд Цикл
		Структура = Новый Структура("command, description", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Команды.Добавить(Структура);
	КонецЦикла;
	
	Параметры = Новый Структура();
	Параметры.Вставить("commands", ОбъектВ_JSON(Команды));

	Результат = ОтправитьКомандуТелеграм(Бот, "/setMyCommands", Параметры);
	
КонецПроцедуры


// Очищает список команд бота
//
Процедура ОчиститьКомандыБота(Бот) Экспорт

	УстановитьКонтекстДляОтладки(Бот, Неопределено);

	Результат = ОтправитьКомандуТелеграм(Бот, "/deleteMyCommands", Новый Структура());
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет сообщение с клавиатурой ответа
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	ТекстСообщения		 - Строка	 -  заголовок меню
//	МассивСтрокЭлементов - Массив	 - данные меню
// 
// Возвращаемое значение:
//	 Структура - данные отправленного сообщения
//
Функция ПоказатьКлавиатуруОтвета(Бот, Чат, БлокСхема, Сообщение, ТекстСообщения, МассивСтрокЭлементов, Нагрузка)
	
	Если ТипЗнч(МассивСтрокЭлементов) = Тип("Массив") тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Верх");
		ТЗ.Колонки.Добавить("Лево");
		ТЗ.Колонки.Добавить("Элемент");
		
		Для каждого СтрокаЭлемента из МассивСтрокЭлементов цикл
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Верх = СтрокаЭлемента.Верх; 
			НоваяСтрока.Лево = СтрокаЭлемента.Лево; 
			НоваяСтрока.Элемент = СтрокаЭлемента; 
		КонецЦикла;
		
		ТЗ.Сортировать("Верх, Лево");
		
		СписокКнопок = Новый СписокЗначений;
		СтруктураКлавиатуры = Новый Массив;
		Верх = -1;
		Для каждого СтрокаТЗ из ТЗ цикл
			Если СтрокаТЗ.Верх <> Верх тогда
				РядКнопок = Новый Массив;
				СтруктураКлавиатуры.Добавить(РядКнопок);
				Верх = СтрокаТЗ.Верх;
			КонецЕсли;
			
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаТЗ.Элемент, СтрокаТЗ.Элемент.Текст, Нагрузка);
			ДанныеКнопки = ДобавитьЭмодзи(Текст);
			ПредставлениеКнопки = ДанныеКнопки;
			Если ЗначениеЗаполнено(СтрокаТЗ.Элемент.Алгоритм) тогда
				ДанныеКнопки = Новый Структура("text", ДанныеКнопки);	
				Если СтрокаТЗ.Элемент.Алгоритм = Перечисления.гбФункцииКнопки.ЗапросНомераТелефона тогда
					ДанныеКнопки.Вставить("request_contact", Истина);
					ПредставлениеКнопки = "##contact##";
				ИначеЕсли СтрокаТЗ.Элемент.Алгоритм = Перечисления.гбФункцииКнопки.ЗапросКоординат тогда
					ДанныеКнопки.Вставить("request_location", Истина);
					ПредставлениеКнопки = "##location##";
				ИначеЕсли СтрокаТЗ.Элемент.Алгоритм = Перечисления.гбФункцииКнопки.WebApp тогда
					ДанныеКнопки.Вставить("web_app", Новый Структура("url", СтрокаТЗ.Элемент.ДополнительныеПараметры));
					ПредставлениеКнопки = "##web_app##";
				КонецЕсли;
			КонецЕсли;
			РядКнопок.Добавить(ДанныеКнопки);
			
			СписокКнопок.Добавить(СтрокаТЗ.Элемент.Подчиненные[0].Значение, ПредставлениеКнопки);
		КонецЦикла;
		
		//БлокСхема = ПолучитьТекущуюБлокСхемуБота(Бот, Чат);
	Иначе
		
		СтруктураКлавиатуры = МассивСтрокЭлементов.СтруктураКлавиатуры;
		ТекстСообщения = МассивСтрокЭлементов.ТекстСообщения;
		СписокКнопок = МассивСтрокЭлементов.СписокКнопок;
		БлокСхема = МассивСтрокЭлементов.БлокСхема;
	КонецЕсли;
	
	
	Параметры = Новый Структура;
	Параметры.Вставить("КлавиатураОтвета", СтруктураКлавиатуры);
	
	Результат = ОтправитьСообщение(Бот, Чат, ТекстСообщения, Параметры);
	
	Запись = РегистрыСведений.гбОжидаемыеДанные.СоздатьМенеджерЗаписи();
	Запись.Чат = Чат;
	Запись.Подчиненные = ОбъектВ_JSON(СписокКнопок);
	Запись.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПунктМеню;
	Запись.ИдентификаторСообщения = XMLСтрока(ПолучитьСообщениеИД(Результат));
	Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
	Запись.ДанныеКлавиатурыОтвета = Новый ХранилищеЗначения(Результат.ДанныеКлавиатурыОтвета);
	//Запись.ДополнительныеПараметры =
	//	Новый ХранилищеЗначения(Новый Структура("ТекстСообщения, СтруктураКлавиатуры", ТекстСообщения, СтруктураКлавиатуры));
	Запись.Уровень = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запись.БлокСхема = БлокСхема;
	Запись.Записать(Ложь);
КонецФункции

// Удаляет клавиатуру ответа
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Принудительно - Булево - вызываетсся из кода алгоритма
//
Процедура УдалитьКлавиатуруОтвета(Бот, Чат, Принудительно = Ложь) Экспорт
	
	Запись = РегистрыСведений.гбСообщенияСМеню.СоздатьМенеджерЗаписи();
	Запись.Чат = Чат;
	Запись.Прочитать();
	Если ЗначениеЗаполнено(Запись.ИдентификаторСообщения) тогда
		
				
		НаборЗаписей = РегистрыСведений.гбОжидаемыеДанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Чат.Установить(Чат);
		НаборЗаписей.Прочитать();
		
		Для каждого ВремЗапись из НаборЗаписей Цикл
			ИдентификаторыСообщений = СтрРазделить(ВремЗапись.ИдентификаторСообщения, ",", Ложь);
			Индекс = ИдентификаторыСообщений.Найти(XMLСтрока(Запись.ИдентификаторСообщения));
			Если Индекс <> Неопределено тогда
				ИдентификаторыСообщений.Удалить(Индекс);
				ВремЗапись.ИдентификаторСообщения = СтрСоединить(ИдентификаторыСообщений, ",");
			КонецЕсли;

			Если НаборЗаписей.Модифицированность() тогда
				НаборЗаписей.Записать(Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ИдентификаторСообщения = Запись.ИдентификаторСообщения;
		
		Если Принудительно тогда
			Запись.ИдентификаторСообщения = "";
			Запись.Записать(Истина);
			УдалитьСообщение(Бот, Чат, ИдентификаторСообщения);
		Иначе
			Запись.Удалить();
			гбСерверПовтИсп.ПолучитьКэшКонтекста().УдаляемыеСообщения.Добавить(ИдентификаторСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// Восстанавливает клавиатуру ответа
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Принудительно - Булево - вызываетсся из кода алгоритма
//
Процедура ВосстановитьКлавиатуруОтвета(Бот, Чат, Принудительно = Ложь) Экспорт
	
	Если не Принудительно тогда
		Запись = РегистрыСведений.гбСообщенияСМеню.СоздатьМенеджерЗаписи();
		Запись.Чат = Чат;
		Запись.Прочитать();
		Если Запись.Выбран() тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.гбОжидаемыеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Чат.Установить(Чат);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() тогда
		ТЗНабораЗаписей = НаборЗаписей.Выгрузить();
		ТЗНабораЗаписей.Сортировать("Уровень убыв");
		ДанныеКлавиатурыОтвета = ТЗНабораЗаписей[0].ДанныеКлавиатурыОтвета.Получить();
		Если ДанныеКлавиатурыОтвета <> Неопределено тогда
			ОтправленноеСоообщение = ОтправитьСообщение(Бот, Чат, ДанныеКлавиатурыОтвета.text, ДанныеКлавиатурыОтвета);
			ИдентификаторСообщения = СтрРазделить(ТЗНабораЗаписей[0].ИдентификаторСообщения, ",", Ложь);
			ИдентификаторСообщения.Добавить(XMLСтрока(ОтправленноеСоообщение.message_id));
			ТЗНабораЗаписей[0].ИдентификаторСообщения = СтрСоединить(ИдентификаторСообщения, ",");
			НаборЗаписей.Загрузить(ТЗНабораЗаписей);
			НаборЗаписей.Записать(Истина);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// если нет клавиатуры - удаляем
	УдалитьКлавиатуруОтвета(Бот, Чат);
КонецПроцедуры


Функция ВводДанныхВДиалогеВозможен(Бот, Чат)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ первые 1
		|	гбОжидаемыеДанные.Чат КАК Чат
		|ИЗ
		|	РегистрСведений.гбОжидаемыеДанные КАК гбОжидаемыеДанные
		|ГДЕ
		|	НЕ(гбОжидаемыеДанные.ТипДанных = ЗНАЧЕНИЕ(Перечисление.гбТипыДанных.ПустаяСсылка)
		|				И гбОжидаемыеДанные.ТипЭлемента В (ЗНАЧЕНИЕ(Перечисление.гбТипыЭлементовБлокСхемы.ПунктМеню), ЗНАЧЕНИЕ(Перечисление.гбТипыЭлементовБлокСхемы.Данные)))
		|	И гбОжидаемыеДанные.Чат = &Чат";
	
	Запрос.УстановитьПараметр("Чат", Чат);
	
	Если не Запрос.Выполнить().Пустой() тогда
		ОтправитьСообщение(Бот, Чат, "<i>Сперва завершите текущий диалог</i>", Новый Структура("Автоудаление", 5));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции


// Формирует массив кнопок инлайн клавиатуры
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	СписокЭлементов		 - СписокЗначений	 -  список пунктов меню
//	ПрефиксТипЭлемента - Строка - идентифицирует тип списка
//	ИмяЭлемента - Строка - имя элемента, который формирует меню
//	Данные - Произвольный - данные, которым относится сообщение
//	МножественныйВыбор - Булево - режим выбора из списка
// 
// Возвращаемое значение:
//	 Массив - данные инлайн клавиатуры
//
Функция СформироватьКлавиатуруСообщения(Чат, БлокСхема, СписокЭлементов, ПрефиксТипЭлемента, Данные = Неопределено, 
		МножественныйВыбор = Ложь, ИдентификаторСписка = Неопределено, СоответствиеЭлементовСписка = Неопределено,
		МассивКнопок = Неопределено, Нагрузка, МаркерПометки = "U+1F538+")
		
	Если СоответствиеЭлементовСписка = Неопределено тогда
		СоответствиеЭлементовСписка = Новый Соответствие;
	КонецЕсли;

	Если МассивКнопок = Неопределено тогда
		МассивКнопок = Новый Массив;
	КонецЕсли;
	
	ИдентификаторСписка = ?(ИдентификаторСписка = Неопределено, Новый УникальныйИдентификатор, ИдентификаторСписка);
	
	Если ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий тогда
		Префикс = "MenuItem:";
	ИначеЕсли ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПриемОплаты тогда
		Префикс = "MenuItem:";
	ИначеЕсли ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений тогда
		Префикс = "ListItem:";
	ИначеЕсли ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками тогда
		Префикс = "ListItem:";
	Иначе
		Префикс = ПрефиксТипЭлемента;
		Если ПрефиксТипЭлемента = "DateItem:"
			или ПрефиксТипЭлемента = "PeriItem:"
			или ПрефиксТипЭлемента = "TimeItem:" тогда
			
			ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений и МножественныйВыбор)
		или ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками тогда
		ДопКнопки = Новый СписокЗначений();
		ДопКнопки.Добавить("4a0b8d60-dc8b-4942-b8bf-cfb27c09bde4", "U+2705+ ОК");
		ДопКнопки.Добавить("587014b7-7f9e-435f-a0ea-db1fd4e18467", "U+1F7E7+ Все");
		ДопКнопки.Добавить("c61947bd-c12c-46ac-abde-f8c7330ed55c", "U+2B1C+ Ничего");
		ДопКнопки.Добавить("02b32ec8-b601-40bc-8c33-e84b1a4bbf06", "U+1F6AB+ Отмена");
		СписокЭлементов.Вставить(0, ДопКнопки);
	КонецЕсли;
	//МаркерПометки = ?(ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений, "U+1F538+", "");
	Для Каждого ЭлементСписка из СписокЭлементов цикл 
		ВложенныйСписок = ?(ТипЗнч(ЭлементСписка.Значение) <> Тип("СписокЗначений"),
			гбКлиентСервер.ЗначениеВМассиве(ЭлементСписка), ЭлементСписка.Значение);
		РядКнопок = Новый Массив;
		МассивКнопок.Добавить(РядКнопок);
		Для Каждого ЭлементСписка из ВложенныйСписок цикл
			Если Префикс = "MenuItem:" и ЭлементСписка.Значение = Неопределено тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") и СтрНачинаетсяС(ЭлементСписка.Значение, "url:") тогда
				Кнопка = Новый Структура("text, url", ДобавитьЭмодзи(Строка(ЭлементСписка)), Сред(ЭлементСписка.Значение, 5));
			ИначеЕсли СтрНачинаетсяС(ЭлементСписка.Значение, "pay:") тогда
				ЭлементСписка.Значение = Сред(ЭлементСписка.Значение, 5);
				Кнопка = Новый Структура("text, pay", ЭлементСписка.Представление, Истина);
				СоответствиеЭлементовСписка.Вставить("pay", ЭлементСписка);
			Иначе
				//Ключ = ;//СоответствиеЭлементовСписка.Количество() + Пропущено;
				//Ключ = XMLСтрока(СоответствиеЭлементовСписка.Количество()) 
				//	+ "@" + 
					
				Ключ = XMLСтрока(МассивКнопок.ВГраница()) + ":" + XMLСтрока(РядКнопок.ВГраница() + 1);
				ИД = Префикс + ИдентификаторСписка + "#" + XMLСтрока(Ключ);
				СоответствиеЭлементовСписка.Вставить(Ключ, ЭлементСписка);
				Текст = ДобавитьЭмодзи(?(ЭлементСписка.Пометка, МаркерПометки, "") + Строка(ЭлементСписка));
				Кнопка = Новый Структура("text,callback_data", Текст, ИД);
			КонецЕсли;
			РядКнопок.Добавить(Кнопка);
		КонецЦикла;
	КонецЦикла;
	
	
	Если (ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений и МножественныйВыбор) 
		или ПрефиксТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками тогда
		СписокЭлементов.Удалить(0);
	КонецЕсли;
	
	Результат = Новый Структура("МассивКнопок", МассивКнопок);
	
	Если СоответствиеЭлементовСписка.Количество() тогда
		Запись = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
		Запись.Чат = Чат;
		Запись.ИдентификаторСписка = ИдентификаторСписка;
		Запись.ЭлементыСписка = Новый ХранилищеЗначения(СоответствиеЭлементовСписка);
		//Запись.СписокЗначений = Новый ХранилищеЗначения(СписокЭлементов);
		Запись.Данные = Новый ХранилищеЗначения(Данные);
		Запись.МножественныйВыбор = МножественныйВыбор;
		Запись.ТипЭлемента = ПрефиксТипЭлемента;
		Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
		Запись.БлокСхема = БлокСхема;
		гбОжидаемыеДанныеМеню = Новый Структура(
			"Чат, ИдентификаторСписка, ЭлементыСписка, Данные, ТипЭлемента, МножественныйВыбор, Подчиненные, Нагрузка, БлокСхема");
		ЗаполнитьЗначенияСвойств(гбОжидаемыеДанныеМеню, Запись);
		
		Результат.Вставить("гбОжидаемыеДанныеМеню", гбОжидаемыеДанныеМеню);
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Формирует массив кнопок инлайн клавиатуры выбора времени
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	ВыбранноеВремя		 - Дата	 -  выбранное время
//	ПомеченныйЭлемент - ЭлементСпискаЗначений - выбранный пользователем элемент
//	ЭлементыСписка - Массив - все элементы многоуровневого списка кнопок
// 
// Возвращаемое значение:
//	 Массив - данные инлайн клавиатуры
//
Функция СформироватьКлавиатуруСообщенияВыбораВремени(Чат, БлокСхема, Знач ВыбранноеВремя = Неопределено, 
		ПомеченныйЭлемент = Неопределено, ЭлементыСписка = Неопределено)
		
	Если ЭлементыСписка <> Неопределено тогда
		Для каждого ЭлементСписка Из ЭлементыСписка Цикл
			ЭлементСписка = ЭлементСписка.Значение.Значение;
			Если ТипЗнч(ЭлементСписка) = Тип("Дата") и ЗначениеЗаполнено(ЭлементСписка) тогда
				ВыбранноеВремя = ЭлементСписка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Если не ЗначениеЗаполнено(ВыбранноеВремя) тогда
		ВыбранноеВремя = ТекущаяДата();
	КонецЕсли;	
	
	Для Итерация = 1 по 2 цикл 
		Если Итерация = 1 и ПомеченныйЭлемент <> Неопределено и ПомеченныйЭлемент.Значение = "ТекущееВремя" тогда
			ТекущаяДата = ТекущаяДата();
			ВыбранноеВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
			Итерация = 2;
		КонецЕсли;	

		КлавиатураСообщения = Новый СписокЗначений();
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить(ВыбранноеВремя, "U+2705+ " + Формат(ВыбранноеВремя, "ДФ=HH:mm; ДП=00:00")); 
		Ряд.Добавить('00010101', "U+274C+ 00:00"); Ряд.Добавить(, "U+1F6AB+ Отмена");
		КлавиатураСообщения.Добавить(Ряд); 
		
		Час = Час(ВыбранноеВремя);
		Мин = Минута(ВыбранноеВремя);
		Часы = Новый Массив(12);
		Мин1015 = Новый Массив(8);
		
		Ряд = Новый СписокЗначений();
		АМПМАМ = Ряд.Добавить("am", "AM", Час < 12);
		Часы[11] = Ряд.Добавить(); 
		Часы[0] = Ряд.Добавить(); 
		Часы[1] = Ряд.Добавить();
		АМПМПМ = Ряд.Добавить("pm", "PM", Час >= 12);
		КлавиатураСообщения.Добавить(Ряд); 
		
		Ряд = Новый СписокЗначений();
		Часы[10] = Ряд.Добавить(); 
		Мин1015[7] = Ряд.Добавить(); 
		Мин1015[0] = Ряд.Добавить(); 
		Мин1015[1] = Ряд.Добавить();
		Часы[2] = Ряд.Добавить();
		КлавиатураСообщения.Добавить(Ряд); 

		Ряд = Новый СписокЗначений();
		Часы[9] = Ряд.Добавить();
		Мин1015[6] = Ряд.Добавить();
		Ряд.Добавить("ТекущееВремя", "⏰");
		Мин1015[2] = Ряд.Добавить();
		Часы[3] = Ряд.Добавить();
		КлавиатураСообщения.Добавить(Ряд);
		
		Ряд = Новый СписокЗначений();
		Часы[8] = Ряд.Добавить(); 
		Мин1015[5] = Ряд.Добавить(); 
		Мин1015[4] = Ряд.Добавить(); 
		Мин1015[3] = Ряд.Добавить();
		Часы[4] = Ряд.Добавить();
		КлавиатураСообщения.Добавить(Ряд); 
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить(" ", );//Ряд.Добавить("Сек +300", "+5");
		Часы[7] = Ряд.Добавить(); 
		Часы[6] = Ряд.Добавить(); 
		Часы[5] = Ряд.Добавить();
		Ряд.Добавить(" ");//Ряд.Добавить("Сек +600", "+10");
		КлавиатураСообщения.Добавить(Ряд);
		
		Для н = 0 по 11 Цикл
			Час2 = XMLСтрока(н + 12 * (Час >= 12));
			Часы[н].Значение = "Час " + Час2;
			Часы[н].Представление = Час2;
			Часы[н].Пометка = н = Час % 12;
		КонецЦикла;

		ДанныеМин1015 = СтрРазделить("00,10,15,20,30,40,45,50", ",");
		Для н = 0 по 7 Цикл
			Мин2 = ДанныеМин1015[н];
			Мин1015[н].Значение = "Мин " + Мин2;
			Мин1015[н].Представление = Мин2;
			Мин1015[н].Пометка = мин = число(мин2);
		КонецЦикла;
		Если Итерация = 1 тогда
			ОбработатьПометкуРяда(ПомеченныйЭлемент, гбКлиентСервер.ЗначениеВМассиве(Часы), ЭлементыСписка);
			ОбработатьПометкуРяда(ПомеченныйЭлемент, гбКлиентСервер.ЗначениеВМассиве(Мин1015), ЭлементыСписка);
			АМПМ = Новый Массив;
			АМПМ.Добавить(АМПМАМ);
			АМПМ.Добавить(АМПМПМ);
			ОбработатьПометкуРяда(ПомеченныйЭлемент, гбКлиентСервер.ЗначениеВМассиве(АМПМ), ЭлементыСписка);
		
			Для н = 0 по 11 Цикл
				Если Часы[н].Пометка тогда
					Час = 12 * АМПМПМ.Пометка + н;
				КонецЕсли;
			КонецЦикла;

			Для н = 0 по 7 Цикл
				Если Мин1015[н].Пометка тогда
					Мин = Число(ДанныеМин1015[н]);
				КонецЕсли;
			КонецЦикла;
			
			ВыбранноеВремя = '00010101' + Час * 60*60 + Мин * 60;
		КонецЕсли;
	КонецЦикла;
	//КлавиатураСообщения[0].Значение[0].Значение = ВыбранноеВремя;
	//КлавиатураСообщения[0].Значение[0].Представление = Формат(ВыбранноеВремя, "ДФ=HH:mm; ДП=00:00");
	Возврат СформироватьКлавиатуруСообщения(Чат, БлокСхема, КлавиатураСообщения, "TimeItem:", ВыбранноеВремя,,,,,);
КонецФункции

// Формирует массив кнопок инлайн клавиатуры выбора времени
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	ВыбраннаяДата		 - Дата	 -  выбранная дата
//	ПомеченныйЭлемент - ЭлементСпискаЗначений - выбранный пользователем элемент
//	ЭлементыСписка - Массив - все элементы многоуровневого списка кнопок
//	Заголовок - Строка - если указан, то выводится пользователю
// 
// Возвращаемое значение:
//	 Массив - данные инлайн клавиатуры
//
Функция СформироватьКлавиатуруСообщенияВыбораДаты(Чат, БлокСхема, ТипДанных, Знач ВыбраннаяДата = Неопределено, 
		ПомеченныйЭлемент = Неопределено, ЭлементыСписка = Неопределено, Заголовок = Неопределено)
		
	Если ЭлементыСписка <> Неопределено тогда
		Для каждого ЭлементСписка Из ЭлементыСписка Цикл
			ЭлементСписка = ЭлементСписка.Значение.Значение;
			Если ТипЗнч(ЭлементСписка) = Тип("Дата") и ЗначениеЗаполнено(ЭлементСписка) тогда
				ВыбраннаяДата = ЭлементСписка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Если не ЗначениеЗаполнено(ВыбраннаяДата) тогда
		ВыбраннаяДата = ТекущаяДата();
	КонецЕсли;	
		
	КлавиатураСообщения = Новый СписокЗначений();
	Заголовок = Неопределено;
	Если Не ПустаяСтрока(Заголовок) тогда
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("", Заголовок);
		КлавиатураСообщения.Добавить(Ряд);
	КонецЕсли;
	
	Ряд = Новый СписокЗначений();
	Ряд.Добавить(ВыбраннаяДата, "U+2705+ " + Формат(ВыбраннаяДата, "ДЛФ=D")); 
	Ряд.Добавить('00010101', "U+274C+ Пустая");
	Ряд.Добавить(, "U+1F6AB+ Отмена");
	КлавиатураСообщения.Добавить(Ряд); 
	
	Ряд = Новый СписокЗначений();

	СтандартнаяДата = Ложь;
	Если ТипДанных = Перечисления.гбТипыДанных.СтандартнаяДата или ТипДанных = Перечисления.гбТипыДанных.СтандартныйПериод тогда
		Если (ПомеченныйЭлемент <> Неопределено и ПомеченныйЭлемент.Значение = "Календарь") тогда
			Ряд.Добавить("СтандартнаяДата", "U+1F9E9+ Стандартная дата"); 
		ИначеЕсли  (ПомеченныйЭлемент <> Неопределено и ПомеченныйЭлемент.Значение = "СтандартнаяДата") тогда
			Ряд.Добавить("Календарь", "U+1F5D3+ Календарь");
			СтандартнаяДата = Истина;
		ИначеЕсли (ЭлементыСписка <> Неопределено и ЭлементыСписка["1:0"].Значение = "СтандартнаяДата") тогда
			Ряд.Добавить("СтандартнаяДата", "U+1F9E9+ Стандартная дата"); 
		Иначе
			Ряд.Добавить("Календарь", "U+1F5D3+ Календарь");
			СтандартнаяДата = Истина;
		КонецЕсли;
		КлавиатураСообщения.Добавить(Ряд); 
	КонецЕсли;
	//Если "СтандартнаяДата" = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряд, ЭлементыСписка) тогда
	Если СтандартнаяДата тогда
	
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("Начало", , Истина); Ряд.Добавить("Конец");
		КлавиатураСообщения.Добавить(Ряд); НачалоКонец = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряд, ЭлементыСписка);
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить(-1, "пред."); Ряд.Добавить(0, "тек.", Истина); Ряд.Добавить(1, "след."); 
		КлавиатураСообщения.Добавить(Ряд); Смещение = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряд, ЭлементыСписка);
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("Дня 24", "дня", НачалоДня(ВыбраннаяДата) = НачалоДня(ТекущаяДата()));
		Ряд.Добавить("Недели 168", "недели"); Ряд.Добавить("Месяца 1", "месяца"); 
		КлавиатураСообщения.Добавить(Ряд);
		Ряды = гбКлиентСервер.ЗначениеВМассиве(Ряд);
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("Квартала 3", "квартала"); Ряд.Добавить("Полугодия 6", "полугодия"); Ряд.Добавить("Года 12", "года");
		КлавиатураСообщения.Добавить(Ряд);
		Ряды.Добавить(Ряд);
		ВидПериода = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряды, ЭлементыСписка);
		
		Если Смещение <> Неопределено и НачалоКонец <> Неопределено и ВидПериода <> Неопределено тогда
			
			ДанныеПериода = СтрРазделить(ВидПериода, " ");
			ВыбраннаяДата = гбКлиентСервер.ГраницаПериода(НачалоКонец, ДанныеПериода[0], ТекущаяДата());
			Если Число(ДанныеПериода[1]) > 12 тогда
				ВыбраннаяДата = ВыбраннаяДата + Смещение * 60*60*ДанныеПериода[1];
			Иначе
				ВыбраннаяДата = ДобавитьМесяц(ВыбраннаяДата, Смещение * ДанныеПериода[1]);
			КонецЕсли;
			ВыбраннаяДата = гбКлиентСервер.ГраницаПериода(НачалоКонец, ДанныеПериода[0], ВыбраннаяДата);
			
		КонецЕсли;
		
	Иначе
		
		ДниНедели = СтрРазделить("пн,вт,ср,чт,пт,сб,вс", ",");
		Рядов = КлавиатураСообщения.Количество();
		
		Для Итерация = 1 по 2 Цикл

			НомерДня = 1;
			ЧислоДней = День(КонецМесяца(ВыбраннаяДата));
			ДеньНеделиНачалаМесяца = ДеньНедели(НачалоМесяца(ВыбраннаяДата));
			Ряды = Новый Массив;

			НомерРяда = 1;
			Пока (ЧислоДней - НомерДня) >= 0 цикл
				Ряд = Новый СписокЗначений();
				Ряды.Добавить(Ряд);
				Для НомерКолонки = 1 по 7 цикл
					Если НомерРяда = 1 и НомерКолонки < ДеньНеделиНачалаМесяца тогда
						Ряд.Добавить("День " + (НомерКолонки - ДеньНеделиНачалаМесяца), ДниНедели[НомерКолонки - 1]);
					ИначеЕсли НомерДня > ЧислоДней тогда
						Ряд.Добавить("День " + (НомерДня - 1), ДниНедели[НомерКолонки - 1]);
						НомерДня = НомерДня + 1;
					Иначе
						Ряд.Добавить("День " + (НомерДня - 1), НомерДня, День(ВыбраннаяДата) = НомерДня);
						НомерДня = НомерДня + 1;
					КонецЕсли;
				КонецЦикла;
				КлавиатураСообщения.Добавить(Ряд);
				НомерРяда = НомерРяда + 1;
			КонецЦикла;
			Если Итерация = 1 тогда
				Если ПомеченныйЭлемент <> Неопределено и ПомеченныйЭлемент.Значение <> "" тогда
					День = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряды, ЭлементыСписка);
					День = СтрРазделить(День, " ")[1];
				Иначе
					День = День(ВыбраннаяДата) - 1;
				КонецЕсли;
			КонецЕсли;			
			Ряды = Новый Массив;
			Для НомерРяда = 1 по 2 цикл
				Ряд = Новый СписокЗначений();
				Ряды.Добавить(Ряд);
				Для НомерКолонки = 1 по 6 цикл
					НомерМесяца = (НомерРяда - 1) * 6 + НомерКолонки;
					Ряд.Добавить("Месяц " + НомерМесяца, ТРег(Формат(ДобавитьМесяц('20200101', НомерМесяца - 1), "ДФ=MMM")), Месяц(ВыбраннаяДата) = НомерМесяца);
				КонецЦикла;
				КлавиатураСообщения.Добавить(Ряд);
			КонецЦикла;
			Если Итерация = 1 тогда
				Месяц = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряды, ЭлементыСписка);
				Месяц = СтрРазделить(Месяц, " ")[1];
			КонецЕсли;
			Ряд = Новый СписокЗначений();
			Для каждого СмещениеГода из СтрРазделить("-5,-2,-1,0,1,2,5", ",") цикл
				Ряд.Добавить("Год " + XMLСтрока(Год(ВыбраннаяДата) + СмещениеГода), 
					Формат(ДобавитьМесяц(ВыбраннаяДата, 12 * СмещениеГода), "ДФ=yy"), Число(СмещениеГода) = 0 );
			КонецЦикла;
			//Ряд.Добавить("ДобавитьМесяц -120", "<<");
			//Ряд.Добавить("ДобавитьМесяц -24", "<");
			//Для НомерКолонки = -1 по 1 цикл
			//	Ряд.Добавить("Год " + XMLСтрока(Год(ВыбраннаяДата) + НомерКолонки), 
			//		Формат(ДобавитьМесяц(ВыбраннаяДата, НомерКолонки * 12), "ДФ=yyyy"), НомерКолонки = 0 );
			//КонецЦикла;
			//Ряд.Добавить("ДобавитьМесяц 24", ">");
			//Ряд.Добавить("ДобавитьМесяц 120", ">>");
			КлавиатураСообщения.Добавить(Ряд);
			
			Если Итерация = 1 тогда

				Если ПомеченныйЭлемент <> Неопределено и СтрНачинаетсяС(ПомеченныйЭлемент.Значение, "Год ") тогда
					Год = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряд, ЭлементыСписка);
					Год = СтрРазделить(Год, " ")[1];
				Иначе
					Год = Год(ВыбраннаяДата);
				КонецЕсли;
			КонецЕсли;
			
			Если Итерация = 1 тогда
				ВыбраннаяДата = Дата(Год, Месяц, 1)  + Число(День) * 24*60*60;
				Если ПомеченныйЭлемент <> Неопределено и СтрНачинаетсяС(ПомеченныйЭлемент.Значение, "ДобавитьМесяц ") тогда
					ВыбраннаяДата = ДобавитьМесяц(ВыбраннаяДата, СтрРазделить(ПомеченныйЭлемент.Значение, " ")[1]);
				КонецЕсли;
				Пока КлавиатураСообщения.Количество() > Рядов цикл
					КлавиатураСообщения.Удалить(КлавиатураСообщения.Количество() - 1);
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЦикла;	
	КонецЕсли;	
	ПервыйРяд = ?(ПустаяСтрока(Заголовок), 0, 1);
	КлавиатураСообщения[ПервыйРяд].Значение[0].Значение = ВыбраннаяДата;
	//КлавиатураСообщения[ПервыйРяд].Значение[0].Представление = Формат(ВыбраннаяДата, "ДЛФ=D");
	КлавиатураСообщения[ПервыйРяд].Значение[0].Представление = "U+2705+ " + Формат(ВыбраннаяДата, "ДФ=dd.MM.yy");
	Возврат СформироватьКлавиатуруСообщения(Чат, БлокСхема, КлавиатураСообщения, "DateItem:", ВыбраннаяДата,,,,,);
КонецФункции

// Формирует массив кнопок инлайн клавиатуры выбора времени
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	пВыбранныйПериод	 - СтандартныйПериод	 -  выбранная дата
//	ПомеченныйЭлемент - ЭлементСпискаЗначений - выбранный пользователем элемент
//	ЭлементыСписка - Массив - все элементы многоуровневого списка кнопок
// 
// Возвращаемое значение:
//	 Массив - данные инлайн клавиатуры
//
Функция СформироватьКлавиатуруСообщенияВыбораПериода(Чат, БлокСхема, ТипДанных, Знач пВыбранныйПериод = Неопределено,
		ПомеченныйЭлемент = Неопределено, ЭлементыСписка = Неопределено)
		
	Если пВыбранныйПериод <> Неопределено тогда
		ВыбранныйПериод = пВыбранныйПериод;

	ИначеЕсли ЭлементыСписка <> Неопределено тогда
		Для каждого ЭлементСписка Из ЭлементыСписка Цикл
			ЭлементСписка = ЭлементСписка.Значение.Значение;
			Если ТипЗнч(ЭлементСписка) = Тип("СтандартныйПериод") и ЗначениеЗаполнено(ЭлементСписка) тогда
				ВыбранныйПериод = ЭлементСписка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Если Ложь тогда
		ВыбранныйПериод = Новый СтандартныйПериод;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ВыбранныйПериод) тогда
		ВыбранныйПериод = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	КонецЕсли;	
		
	КлавиатураСообщения = Новый СписокЗначений();
	
	Ряд = Новый СписокЗначений();
	//Ряд.Добавить(ВыбранныйПериод, Формат(ВыбранныйПериод.ДатаНачала, "ДФ=dd.MM.yy; ДП='  .  .    '")); 
	//Ряд.Добавить(ВыбранныйПериод, Формат(ВыбранныйПериод.ДатаОкончания, "ДФ=dd.MM.yy; ДП='  .  .    '")); 
	Ряд.Добавить(ВыбранныйПериод, "U+2705+ Выбрать"); 
	Ряд.Добавить(Новый СтандартныйПериод, "U+274C+ Пустой"); 
	Ряд.Добавить(, "U+1F6AB+ Отмена");
	КлавиатураСообщения.Добавить(Ряд); 
	
	Ряд = Новый СписокЗначений();
	//Ряд.Добавить("СтандартныйПериод", "Станд.", Истина);
	Ряд.Добавить("ДатаНачала", Формат(ВыбранныйПериод.ДатаНачала, "ДФ=dd.MM.yy; ДП='  .  .    '"));
	Ряд.Добавить("ДатаОкончания", Формат(ВыбранныйПериод.ДатаОкончания, "ДФ=dd.MM.yy; ДП='  .  .    '"));
	КлавиатураСообщения.Добавить(Ряд); 
	
	Если ТипДанных = Перечисления.гбТипыДанных.СтандартныйПериод тогда
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить(-1, "Пред."); Ряд.Добавить(0, "Тек.", Истина); Ряд.Добавить(1, "След."); 
		КлавиатураСообщения.Добавить(Ряд); Смещение = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряд, ЭлементыСписка);
		
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("Дня 24", "день", 
			НачалоДня(ВыбранныйПериод.ДатаНачала) = НачалоДня(ТекущаяДата())
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = КонецДня(ТекущаяДата()));
		Ряд.Добавить("Недели 168", "неделя",
			НачалоДня(ВыбранныйПериод.ДатаНачала) = НачалоНедели(ТекущаяДата())
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = КонецНедели(ТекущаяДата()));
		Ряд.Добавить("Месяца 1", "месяц",
			НачалоДня(ВыбранныйПериод.ДатаНачала) = НачалоМесяца(ТекущаяДата()) 
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = КонецМесяца(ТекущаяДата()));
		КлавиатураСообщения.Добавить(Ряд);
		
		Ряды = гбКлиентСервер.ЗначениеВМассиве(Ряд);
		Ряд = Новый СписокЗначений();
		Ряд.Добавить("Квартала 3", "квартал",
			НачалоДня(ВыбранныйПериод.ДатаНачала) = НачалоКвартала(ТекущаяДата()) 
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = КонецКвартала(ТекущаяДата()));
		Ряд.Добавить("Полугодия 6", "полугодие",
			НачалоДня(ВыбранныйПериод.ДатаНачала) = гбКлиентСервер.НачалоПолугодия(ТекущаяДата()) 
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = гбКлиентСервер.КонецПолугодия(ТекущаяДата()));
		Ряд.Добавить("Года 12", "год",
			НачалоДня(ВыбранныйПериод.ДатаНачала) = НачалоГода(ТекущаяДата()) 
				и КонецДня(ВыбранныйПериод.ДатаОкончания) = КонецГода(ТекущаяДата()));
		КлавиатураСообщения.Добавить(Ряд);
		Ряды.Добавить(Ряд);
		Если пВыбранныйПериод = Неопределено тогда
			ВидПериода = ОбработатьПометкуРяда(ПомеченныйЭлемент, Ряды, ЭлементыСписка);
			
			Если Смещение <> Неопределено и ВидПериода <> Неопределено тогда
				
				ДанныеПериода = СтрРазделить(ВидПериода, " ");
				ВыбраннаяДата = ТекущаяДата();
				Если Число(ДанныеПериода[1]) > 12 тогда
					ВыбраннаяДата = ВыбраннаяДата + Смещение * 60*60*ДанныеПериода[1];
				Иначе
					ВыбраннаяДата = ДобавитьМесяц(ВыбраннаяДата, Смещение * ДанныеПериода[1]);
				КонецЕсли;
				
				ДатаНачала = гбКлиентСервер.ГраницаПериода("Начало", ДанныеПериода[0], ВыбраннаяДата);
				ДатаОкончания = гбКлиентСервер.ГраницаПериода("Конец", ДанныеПериода[0], ВыбраннаяДата);
				
				ВыбранныйПериод = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;	
	КлавиатураСообщения[1].Значение[0].Значение = "ДатаНачала " + XMLСтрока(ВыбранныйПериод.ДатаНачала);
	КлавиатураСообщения[1].Значение[0].Представление = "U+1F5D3+ " + Формат(ВыбранныйПериод.ДатаНачала, "ДФ=dd.MM.yy; ДП='  .  .    '");
	КлавиатураСообщения[1].Значение[1].Значение = "ДатаОкончания " + XMLСтрока(ВыбранныйПериод.ДатаОкончания);;
	КлавиатураСообщения[1].Значение[1].Представление = "U+1F5D3+ " + Формат(ВыбранныйПериод.ДатаОкончания, "ДФ=dd.MM.yy; ДП='  .  .    '");
	КлавиатураСообщения[0].Значение[0].Значение = ВыбранныйПериод;
	//КлавиатураСообщения[0].Значение[0].Представление = Формат(ВыбранныйПериод.ДатаНачала, "ДФ=dd.MM.yy; ДП='  .  .    '");
	//КлавиатураСообщения[0].Значение[1].Значение = ВыбранныйПериод;
	//КлавиатураСообщения[0].Значение[1].Представление = Формат(ВыбранныйПериод.ДатаОкончания, "ДФ=dd.MM.yy; ДП='  .  .    '");
	Возврат СформироватьКлавиатуруСообщения(Чат, БлокСхема, КлавиатураСообщения, "PeriItem:", ВыбранныйПериод,,,,,);
КонецФункции


// Обработка пометки ряда кнопок
//
// Параметры:
//	ПомеченныйЭлемент - ЭлементСпискаЗначений - выбранный пользователем элемент
//	Ряды - Массив - кнопки				 - 	 - 
//	ЭлементыСписка - Массив - все элементы многоуровневого списка кнопок
// 
// Возвращаемое значение:
//	 - 
//
Функция ОбработатьПометкуРяда(ПомеченныйЭлемент, Знач Ряды, ЭлементыСписка)
	Результат = Неопределено;
	
	Если ТипЗнч(Ряды) <> Тип("Массив") тогда
		Ряды = гбКлиентСервер.ЗначениеВМассиве(Ряды);
	КонецЕсли;
	
	СоответствиеЭлементов = Новый Соответствие;
	Для каждого Ряд Из Ряды Цикл
		Для каждого ЭлементСписка Из Ряд Цикл
			СоответствиеЭлементов.Вставить(ЭлементСписка.Значение, ЭлементСписка);
			Если ЭлементСписка.Пометка тогда
				Результат = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЭлементыСписка <> Неопределено тогда
		Для Каждого ЭлементСписка из ЭлементыСписка Цикл
			ЭлементСписка = ЭлементСписка.Значение;
			Если ЭлементСписка.Пометка и СоответствиеЭлементов.Получить(ЭлементСписка.Значение) <> Неопределено тогда
				Для каждого КлючЗначение Из СоответствиеЭлементов Цикл
					КлючЗначение.Значение.Пометка = Ложь;
				КонецЦикла;
				СоответствиеЭлементов.Получить(ЭлементСписка.Значение).Пометка = Истина;
				Результат = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПомеченныйЭлемент <> Неопределено тогда
		Если СоответствиеЭлементов.Получить(ПомеченныйЭлемент.Значение) <> Неопределено тогда
			Для каждого КлючЗначение Из СоответствиеЭлементов Цикл
				КлючЗначение.Значение.Пометка = Ложь;
			КонецЦикла;
			СоответствиеЭлементов.Получить(ПомеченныйЭлемент.Значение).Пометка = Истина;
			Результат = ПомеченныйЭлемент.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ВыполнениеБлокСхемы

#Область ПрограммныйИнтерфейс

// Выполняет переход к элементу блок схемы
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	СтрокаЭлементаИмяЭлемента - СтрокаТаблицыЗначений | Число - Строка данных блок-схемы или имя элемента
//	Данные		 - 	Произвольный - входящие данные
//	БазовыйУровень - Булево - Если истина - блок ищется на базовом уровне блок-схемы
//
Процедура ПерейтиКЭлементуБлокСхемы(Бот, Чат, СтрокаЭлементаИмяЭлемента, Данные = Неопределено, БазовыйУровень = Ложь, Нагрузка = Неопределено) Экспорт
	
	Перем БлокСхема;
	
	БлокСхема = ПолучитьТекущуюБлокСхемуБота(Бот, Чат, БазовыйУровень);

	УстановитьТекущуюБлокСхемуБота(Бот, Чат, БлокСхема);
	ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Бот, Чат);
	
	СтрокаЭлемента = ?(ТипЗнч(СтрокаЭлементаИмяЭлемента) = Тип("Строка"),
		ДанныеБлокСхемы.ТаблицаЭлементов.Найти(СтрокаЭлементаИмяЭлемента), СтрокаЭлементаИмяЭлемента);
		
	Если СтрокаЭлемента = Неопределено тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВнешнийВход, 
			СтрШаблон("Элемент блок-схемы не найден по имени: %1[%2]", БлокСхема,СтрокаЭлементаИмяЭлемента)));
			
		
	ИначеЕсли не ( СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Старт и
		(СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ВнешнийВход
			или СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ДействиеОператора)) тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВнешнийВход, 
			СтрШаблон("Переход возможен только в блок типа 'Старт' с функцией: %1 или %2",
				Перечисления.гбФункцииБлокаСтарт.ВнешнийВход,
				Перечисления.гбФункцииБлокаСтарт.ДействиеОператора)));
	КонецЕсли;
	
	Сообщение = Новый Структура;
	Сообщение.Вставить("Команды", Новый Структура);
	Сообщение.Вставить("ДанныеВыбора", Данные);
	
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ПолученноеСообщение", Сообщение);
	
	ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, , Нагрузка);	

КонецПроцедуры


// Получает имя подчиненного элемента
//
// Параметры:
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
//	Индекс			 - Число	 - Индекс подчиненного
// 
// Возвращаемое значение:
//	Строка - имя элемента
//
Функция ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, Индекс = 0)
	ИмяЭлемента = СтрокаЭлемента.ИмяЭлемента;
	Если СтрокаЭлемента = Неопределено тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
			СтрШаблон("Строка элемента не найдена: %1.", ИмяЭлемента)));
	ИначеЕсли не СтрокаЭлемента.Подчиненные.Количество() тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
			СтрШаблон("Элемент не имеет подчиненных: %1.", ИмяЭлемента)));
	ИначеЕсли СтрокаЭлемента.Подчиненные.Количество() <= Индекс тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
			СтрШаблон("Элемент не имеет подчиненного с указанным индексом: %1 (%2).", ИмяЭлемента, Индекс)));
	ИначеЕсли ПустаяСтрока(СтрокаЭлемента.Подчиненные[Индекс].Значение) тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
			СтрШаблон("Подчиненный элемент с указанным индексом не выбран: %1 (%2).", ИмяЭлемента, Индекс)));
	КонецЕсли;
	
	Возврат СтрокаЭлемента.Подчиненные[Индекс].Значение;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	ИмяЭлемента	 - Строка	 - указатель на элемент блок-схемы
//
Процедура ВыполнитьЭлементБлокСхемыВПопытке(ДанныеБлокСхемы, Бот, Чат, Сообщение, ИмяЭлемента, Нагрузка) Экспорт
	Попытка
		ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, ИмяЭлемента, , Нагрузка);
	Исключение
		ОповеститьОбОшибке(Перечисления.гбСобытия.НеобработаннаяОшибка, ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует данные выбора из регистров сведений
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню, исходящий
// 
// Возвращаемое значение:
//	Структура - Данные выбора
//
Функция СформироватьДанныеВыбора(Сообщение, ЗаписьОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Перем ДанныеВыбора;

	Если Сообщение.Команды.Количество() тогда
		ДанныеВыбора = Новый Структура("Команды, Текст", Сообщение.Команды);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
	
	ИначеЕсли Сообщение.Свойство("document") тогда
		ДанныеВыбора = Новый Структура("Документ, Текст", Сообщение.document);
		ДанныеВыбора.Вставить("Файл", ДанныеВыбора.Документ);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
		
	ИначеЕсли Сообщение.Свойство("photo") тогда
		ДанныеВыбора = Новый Структура("Фото, Текст", Сообщение.photo[Сообщение.photo.ВГраница()]);
		ДанныеВыбора.Вставить("Файл", ДанныеВыбора.Фото);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
		
	ИначеЕсли Сообщение.Свойство("audio") тогда
		ДанныеВыбора = Новый Структура("Аудио, Текст", Сообщение.audio);
		ДанныеВыбора.Вставить("Файл", ДанныеВыбора.Аудио);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
		
	ИначеЕсли Сообщение.Свойство("video_note") тогда
		ДанныеВыбора = Новый Структура("Видео, Текст", Сообщение.video_note);
		ДанныеВыбора.Вставить("Файл", ДанныеВыбора.Видео);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
		
	ИначеЕсли Сообщение.Свойство("video") тогда
		ДанныеВыбора = Новый Структура("Видео, Текст", Сообщение.video);
		ДанныеВыбора.Вставить("Файл", ДанныеВыбора.Видео);
		Сообщение.Свойство("text", ДанныеВыбора.Текст);
		
	ИначеЕсли Сообщение.Свойство("contact") тогда
		ДанныеКонтакта = Сообщение.contact;
		ДанныеВыбора = Новый Структура("Имя, Фамилия, НомерТелефона");
		ДанныеКонтакта.Свойство("first_name", ДанныеВыбора.Имя);
		ДанныеКонтакта.Свойство("last_name", ДанныеВыбора.Фамилия);
		ДанныеКонтакта.Свойство("phone_number", ДанныеВыбора.НомерТелефона);

	ИначеЕсли Сообщение.Свойство("location") тогда
		ДанныеПозиции = Сообщение.location;
		ДанныеВыбора = Новый Структура("Широта, Долгота");
		ДанныеПозиции.Свойство("longitude", ДанныеВыбора.Долгота);
		ДанныеПозиции.Свойство("latitude", ДанныеВыбора.Широта);

	ИначеЕсли Сообщение.Свойство("web_app_data") тогда
		ДанныеВыбора = Сообщение.web_app_data;
		Если ДанныеВыбора.Свойство("button_text") тогда
			Сообщение.Свойство("text", ДанныеВыбора.button_text);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Свойство("successful_payment") тогда
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.гбОжидаемыеДанныеМеню ГДЕ ИдентификаторСписка = &ИдентификаторОплаты");
		Запрос.УстановитьПараметр("ИдентификаторОплаты", Новый УникальныйИдентификатор(Сообщение.successful_payment.invoice_payload));
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() тогда
			ОжидаемыеДанныеМеню = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОжидаемыеДанныеМеню, Выборка);
		Иначе
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ФормированиеДанныхВыбораПодтверждениеОплаты,
				"Ожидаемые данные меню подтверждения оплаты не найдены",, Сообщение.successful_payment.invoice_payload));
		КонецЕсли;
		СоответствиеЭлементовСписка = ОжидаемыеДанныеМеню.ЭлементыСписка.Получить();
		ДанныеВыбора = СоответствиеЭлементовСписка["successful_payment"];
		
	ИначеЕсли Сообщение.Свойство("pre_checkout_query") тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.гбОжидаемыеДанныеМеню ГДЕ ИдентификаторСписка = &ИдентификаторОплаты");
		Запрос.УстановитьПараметр("ИдентификаторОплаты", Новый УникальныйИдентификатор(Сообщение.invoice_payload));
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() тогда
			ОжидаемыеДанныеМеню = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОжидаемыеДанныеМеню, Выборка);
		Иначе
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ФормированиеДанныхВыбораПриемОплаты,
				"Ожидаемые данные меню приема оплаты не найдены",, Сообщение.invoice_payload));
		КонецЕсли;
		СоответствиеЭлементовСписка = ОжидаемыеДанныеМеню.ЭлементыСписка.Получить();
		ДанныеВыбора = СоответствиеЭлементовСписка["pay"];
		
	ИначеЕсли Сообщение.Свойство("data") и Сред(Сообщение.data, 5, 5) = "Error" тогда
		
	ИначеЕсли Сообщение.Свойство("data") тогда
			
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.гбОжидаемыеДанныеМеню ГДЕ ИдентификаторСписка = &ИдентификаторСписка");
		Запрос.УстановитьПараметр("ИдентификаторСписка", 
			Новый УникальныйИдентификатор(Сред(Сообщение.data, СтрНайти(Сообщение.data, ":") + 1, 36)));
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() тогда
			ОжидаемыеДанныеМеню = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОжидаемыеДанныеМеню, Выборка);
			Если ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений тогда
				Если СтрНачинаетсяС(Сообщение.data, "MenuItem") тогда
					ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Попытка
				//ВызватьИсключение("Ожидаемые данные меню не найдены");
			Исключение
				ОповеститьОбОшибке(Перечисления.гбСобытия.ФормированиеДанныхВыбораМеню, ИнформацияОбОшибке(), Сообщение.data);
			КонецПопытки;
			Возврат NULL;
		КонецЕсли;

		СоответствиеЭлементовСписка = ОжидаемыеДанныеМеню.ЭлементыСписка.Получить();
		
		ДанныеВыбора = СоответствиеЭлементовСписка[Сред(Сообщение.data, СтрНайти(Сообщение.data, ":") + 2 + 36)];

	Иначе
		Сообщение.Свойство("text", ДанныеВыбора);
	КонецЕсли;
	
	ДанныеВыбора = ?(ТипЗнч(ДанныеВыбора) = Тип("Структура"),
		Новый ФиксированнаяСтруктура(ДанныеВыбора), ДанныеВыбора);
		
	Возврат ДанныеВыбора;
КонецФункции


// Обработка меню выбора времени
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	Дата|NULL - результат выбрано время или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораВремени(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Если ТипЗнч(ДанныеВыбора) <> Тип("ЭлементСпискаЗначений") тогда
		Возврат NULL;
	КонецЕсли;	
	ЗначениеВыбора = ДанныеВыбора.Значение;
	Если ТипЗнч(ЗначениеВыбора) = Тип("Дата") или ЗначениеВыбора = Неопределено тогда
		//УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, ОжидаемыеДанные.ИдентификаторСообщения);
		Возврат ЗначениеВыбора;
	ИначеЕсли ДанныеВыбора.Пометка тогда
		Возврат NULL;
	ИначеЕсли ДанныеВыбора.Значение = "" тогда
		Возврат NULL;
	ИначеЕсли ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	КонецЕсли;

	Параметры = Новый Структура;
	Параметры.Вставить("Чат", Сообщение.Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	Параметры.Вставить("КлавиатураСообщения", 
		СформироватьКлавиатуруСообщенияВыбораВремени(Сообщение.Чат, ОжидаемыеДанные.БлокСхема, , 
			ДанныеВыбора, ОжидаемыеДанныеМеню.ЭлементыСписка.Получить()));
			
	Параметры.КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = ОжидаемыеДанныеМеню.Нагрузка;
	
	ОтправитьКомандуТелеграм(Сообщение.Бот, "/editMessageReplyMarkup", Параметры);

	Возврат NULL;
КонецФункции


// Обработка меню выбора даты
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	Дата|NULL - результат выбрана дата или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораДаты(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Если ТипЗнч(ДанныеВыбора) <> Тип("ЭлементСпискаЗначений") тогда
		Возврат NULL;
	КонецЕсли;	
	ЗначениеВыбора = ДанныеВыбора.Значение;
	Если ТипЗнч(ЗначениеВыбора) = Тип("Дата") или ЗначениеВыбора = Неопределено тогда
		//УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, ОжидаемыеДанные.ИдентификаторСообщения);
		Возврат ЗначениеВыбора;
	ИначеЕсли ДанныеВыбора.Пометка тогда
		Возврат NULL;
	ИначеЕсли ДанныеВыбора.Значение = "" тогда
		Возврат NULL;
	ИначеЕсли ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	КонецЕсли;

	Заголовок = Неопределено;
	ДополнительныеПараметры = ОжидаемыеДанные.ДополнительныеПараметры.Получить();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") тогда
		ДанныеМенюВыбораПериода = Неопределено;
		ДополнительныеПараметры.Свойство("ДанныеМенюВыбораПериода", ДанныеМенюВыбораПериода);
		Если ТипЗнч(ДанныеМенюВыбораПериода) = Тип("Структура") тогда
			ДанныеМенюВыбораПериода.Свойство("Заголовок", Заголовок);
		КонецЕсли;
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("Чат", Сообщение.Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	Параметры.Вставить("КлавиатураСообщения", 
		СформироватьКлавиатуруСообщенияВыбораДаты(Сообщение.Чат, ОжидаемыеДанные.БлокСхема, ОжидаемыеДанные.ТипДанных, , 
			ДанныеВыбора, ОжидаемыеДанныеМеню.ЭлементыСписка.Получить(), Заголовок));
		
	Параметры.КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = ОжидаемыеДанныеМеню.Нагрузка;
	
	ОтправитьКомандуТелеграм(Сообщение.Бот, "/editMessageReplyMarkup", Параметры);

	Возврат NULL;
КонецФункции


// Обработка меню выбора периода
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	СтандартныйПериод|NULL - результат выбран период или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораПериода(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Перем ВыбранныйПериод, ДанныеМенюВыбораПериода;
	
	Если ТипЗнч(ДанныеВыбора) <> Тип("ЭлементСпискаЗначений") тогда
		Возврат NULL;
	КонецЕсли;	
	
	ЗначениеВыбора = ДанныеВыбора.Значение;
	ДополнительныеПараметры = ОжидаемыеДанные.ДополнительныеПараметры.Получить();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") тогда
		ДополнительныеПараметры.Свойство("ДанныеМенюВыбораПериода", ДанныеМенюВыбораПериода);
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеМенюВыбораПериода) = Тип("Структура") тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("Дата") или ЗначениеВыбора = Неопределено тогда
			ДополнительныеПараметры.Удалить("ДанныеМенюВыбораПериода");
			ОжидаемыеДанные.ДополнительныеПараметры = Новый ХранилищеЗначения(ДополнительныеПараметры);
			//ОжидаемыеДанные.БлокСхема = ОжидаемыеДанныеМеню.БлокСхема;
			ОжидаемыеДанные.Записать();
			ВыбранныйПериод = ДанныеМенюВыбораПериода.ВыбранныйПериод;
			Если ЗначениеВыбора <> Неопределено тогда
				ВыбранныйПериод[ДанныеМенюВыбораПериода.Граница] = ЗначениеВыбора;
				Если ВыбранныйПериод.ДатаНачала > ВыбранныйПериод.ДатаОкончания тогда
					Если ДанныеМенюВыбораПериода.Граница = "ДатаНачала" тогда
						ВыбранныйПериод.ДатаОкончания = ВыбранныйПериод.ДатаНачала;
					Иначе
						ВыбранныйПериод.ДатаНачала = ВыбранныйПериод.ДатаОкончания;
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			ОжидаемыеДанныеМеню = ДанныеМенюВыбораПериода.ОжидаемыеДанныеМеню;
			
		Иначе
			Возврат ОбработатьМенюВыбораДаты(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СтандартныйПериод") или ЗначениеВыбора = Неопределено тогда
		//УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, ОжидаемыеДанные.ИдентификаторСообщения);
		
		Возврат ЗначениеВыбора;
		
	ИначеЕсли ДанныеВыбора.Пометка тогда
		Возврат NULL;
	ИначеЕсли ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	КонецЕсли;

	Параметры = Новый Структура;
	Параметры.Вставить("Чат", Сообщение.Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	
	
	Если ДанныеВыбора <> Неопределено
		и (СтрНачинаетсяС(ДанныеВыбора.Значение, "ДатаНачала") 
			или СтрНачинаетсяС(ДанныеВыбора.Значение, "ДатаОкончания")) тогда
			
		ВремДанныеВыбора = СтрРазделить(ДанныеВыбора.Значение, " ");
		ВыбраннаяДата = XMLЗначение(Тип("Дата"), ВремДанныеВыбора[1]);
		Заголовок = ?(СтрНачинаетсяС(ДанныеВыбора.Значение, "ДатаНачала"), "Начало периода:", "Конец периода:");	
		КлавиатураСообщения = СформироватьКлавиатуруСообщенияВыбораДаты(
			Сообщение.Чат, ОжидаемыеДанные.БлокСхема, ОжидаемыеДанные.ТипДанных, ВыбраннаяДата, , , );
		ВремОжидаемыеДанныеМеню = Новый Структура("ЭлементыСписка,Данные,ИмяЭлемента,СписокЗначений, Нагрузка");
		ЗаполнитьЗначенияСвойств(ВремОжидаемыеДанныеМеню, ОжидаемыеДанныеМеню);
		ДополнительныеПараметры.Вставить("ДанныеМенюВыбораПериода",
			Новый Структура("Граница, ВыбранныйПериод, ОжидаемыеДанныеМеню, Заголовок, Нагрузка", 
				ВремДанныеВыбора[0], ОжидаемыеДанныеМеню.Данные.Получить(),
				ВремОжидаемыеДанныеМеню, Заголовок, ОжидаемыеДанныеМеню.Нагрузка));
		ОжидаемыеДанные.ДополнительныеПараметры = Новый ХранилищеЗначения(ДополнительныеПараметры);
		//ОжидаемыеДанные.БлокСхема = ОжидаемыеДанныеМеню.БлокСхема;
		ОжидаемыеДанные.Записать();
	Иначе
		КлавиатураСообщения = СформироватьКлавиатуруСообщенияВыбораПериода(Сообщение.Чат, ОжидаемыеДанные.БлокСхема,
			ОжидаемыеДанные.ТипДанных, ВыбранныйПериод, ДанныеВыбора, ОжидаемыеДанныеМеню.ЭлементыСписка.Получить())
	КонецЕсли;

	Параметры.Вставить("КлавиатураСообщения", КлавиатураСообщения);
	
	Параметры.КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = ОжидаемыеДанныеМеню.Нагрузка;
		
	ОтправитьКомандуТелеграм(Сообщение.Бот, "/editMessageReplyMarkup", Параметры);

	Возврат NULL;
КонецФункции


Функция СформироватьКлавиатуруСообщенияДереваЗначений(ИдентификаторСписка, ДеревоЗначений, Знач ТекущаяСтрока)
	
	МассивКнопок = Новый Массив;
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаДереваЗначений") тогда
		// ничего
	ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("Число") и ТекущаяСтрока > 0 тогда
		ТекущаяСтрока = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяСтрока), Истина)[0];
	Иначе
		ТекущаяСтрока = ДеревоЗначений;
	КонецЕсли;
	
	Если ТекущаяСтрока <> ДеревоЗначений тогда
		
		Родитель = ТекущаяСтрока;
		
		Пока Истина Цикл
			
			Ключ = XMLСтрока(?(Родитель.Родитель <> Неопределено, Родитель.Родитель.Идентификатор, 0));
			
			ИД = "TreeItem:" + ИдентификаторСписка + "#" + Ключ;

			Кнопка = Новый Структура("text,callback_data", 
				//ДобавитьЭмодзи("U+2934+ U+1F538+ " + Родитель.Представление + " U+1F538+"), ИД);
				ДобавитьЭмодзи("U+1F4C2+ " + Родитель.Представление), ИД);
			РядКнопок = Новый Массив;
			РядКнопок.Добавить(Кнопка);
			МассивКнопок.Вставить(0, РядКнопок);
			
			Родитель = Родитель.Родитель;
			Если Родитель = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		 
	Для Каждого СтрокаДерева из ТекущаяСтрока.Строки цикл
		Ключ = XMLСтрока(СтрокаДерева.Идентификатор);
		ИД = "TreeItem:" + ИдентификаторСписка + "#" + Ключ;

		Кнопка = Новый Структура("text,callback_data", ДобавитьЭмодзи(
			?(СтрокаДерева.Строки.Количество(), "U+1F4C1+ ", "") 
			+ ?(СтрокаДерева.Пометка, "U+1F538+", "") 
			+ СтрокаДерева.Представление), ИД);
		РядКнопок = Новый Массив;
		РядКнопок.Добавить(Кнопка);
		МассивКнопок.Добавить(РядКнопок);
	КонецЦикла;
	
	Возврат МассивКнопок;
	
КонецФункции

// Обработка меню выбора списка значений
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	ЭлементСпискаЗначений|NULL - результат выбран элемент списка или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораДерева(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Если ТипЗнч(ДанныеВыбора) = Тип("ЭлементСпискаЗначений") тогда
		Возврат ДанныеВыбора;
	ИначеЕсли ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	ИначеЕсли ТипЗнч(ДанныеВыбора) <> Тип("Число") тогда
		Возврат NULL;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Чат", Сообщение.Чат);
	Параметры.Вставить("Сообщение", Сообщение);
	Параметры.Вставить("КлавиатураСообщения", 
		СформироватьКлавиатуруСообщенияДереваЗначений(ОжидаемыеДанныеМеню.ИдентификаторСписка,
			ОжидаемыеДанныеМеню.Данные.Получить(), ДанныеВыбора));
		
	//Параметры.КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = ОжидаемыеДанныеМеню.Нагрузка;
	
	ОтправитьКомандуТелеграм(Сообщение.Бот, "/editMessageReplyMarkup", Параметры);
	Возврат NULL;
КонецФункции


// Обработка меню выбора списка значений
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	ЭлементСпискаЗначений|NULL - результат выбран элемент списка или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораСписка(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Если ТипЗнч(ДанныеВыбора) <> Тип("ЭлементСпискаЗначений") тогда
		Возврат NULL;
	КонецЕсли;	
	ЗначениеВыбора = ДанныеВыбора.Значение;
	Если ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	ИначеЕсли ЗначениеВыбора = Неопределено или не ОжидаемыеДанныеМеню.МножественныйВыбор тогда
		Возврат ДанныеВыбора;
	ИначеЕсли ЗначениеВыбора = "02b32ec8-b601-40bc-8c33-e84b1a4bbf06" тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеВыбора = "4a0b8d60-dc8b-4942-b8bf-cfb27c09bde4" тогда
		Список = Новый СписокЗначений;
		Для каждого КлючЗначение Из ОжидаемыеДанныеМеню.ЭлементыСписка.Получить() Цикл
			Если СтрНачинаетсяС(КлючЗначение.Ключ, "0") тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Список.Добавить(), КлючЗначение.Значение);	
		КонецЦикла;
		Возврат Список;
	КонецЕсли;
	
	ЭлементыСписка = ОжидаемыеДанныеМеню.ЭлементыСписка.Получить();
	Клавиатура = Сообщение.message.reply_markup.inline_keyboard;
	
	Если ЗначениеВыбора = "587014b7-7f9e-435f-a0ea-db1fd4e18467" 
		или ЗначениеВыбора = "c61947bd-c12c-46ac-abde-f8c7330ed55c" тогда
		ВремЭлементыСписка = ЭлементыСписка;
		Пометка = ЗначениеВыбора = "587014b7-7f9e-435f-a0ea-db1fd4e18467";
	Иначе
		Ключ = СтрРазделить(Сообщение.data, "#")[1];
		ВремЭлементыСписка = гбКлиентСервер.ЗначениеВМассиве(Новый Структура("Ключ, Значение", Ключ, ЭлементыСписка[Ключ]));
		Пометка = не ЭлементыСписка[Ключ].Пометка;
	КонецЕсли;
	Для каждого КлючЗначение Из ВремЭлементыСписка Цикл
		Если СтрНачинаетсяС(КлючЗначение.Ключ, "0") тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка = КлючЗначение.Значение;
		Если не ЭлементСписка.Пометка = Пометка тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		ЭлементСписка.Пометка = Пометка;
		
		СтрокаРяд = СтрРазделить(КлючЗначение.Ключ, ":");
		Текст = ДобавитьЭмодзи(?(ЭлементСписка.Пометка, "U+1F538+", "") + Строка(ЭлементСписка));
		Клавиатура[Число(СтрокаРяд[0])][Число(СтрокаРяд[1])].text = Текст;

	КонецЦикла;
		
	Если ЕстьИзменения = Истина тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Чат", Сообщение.Чат);
		Параметры.Вставить("Сообщение", Сообщение);
		Параметры.Вставить("КлавиатураСообщения", Клавиатура);
			
		ОтправитьКомандуТелеграм(Сообщение.Бот, "/editMessageReplyMarkup", Параметры);
		ОжидаемыеДанныеМеню.ЭлементыСписка = Новый ХранилищеЗначения(ЭлементыСписка);
		ОжидаемыеДанныеМеню.Записать(Истина);
	КонецЕсли;
	Возврат NULL;
КонецФункции


// Обработка меню выбора списка значений для списка с картинками
//
// Параметры:
//	Сообщение				 - Структура	 - Полученное сообщение
//	ДанныеВыбора		 - 	Структура - см. СформироватьДанныеВыбора 
//	ЗаписьОжидаемыеДанные	 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанные	 - запись Ожидаемые данные
//	ОжидаемыеДанныеМеню		 - МенеджерЗаписиРегистраСведений.ОжидаемыеДанныеМеню	 - запись Ожидаемые данные меню
// 
// Возвращаемое значение:
//	ЭлементСпискаЗначений|NULL - результат выбран элемент списка или пользователь жмет на кнопки
//
Функция ОбработатьМенюВыбораСпискаСКартинками(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню)
	Если ТипЗнч(ДанныеВыбора) <> Тип("ЭлементСпискаЗначений") тогда
		Возврат NULL;
	КонецЕсли;	
	ЗначениеВыбора = ДанныеВыбора.Значение;
	Если ОжидаемыеДанныеМеню = Неопределено тогда
		Возврат NULL;
	ИначеЕсли ЗначениеВыбора = Неопределено или не ОжидаемыеДанныеМеню.МножественныйВыбор тогда
		УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, ОжидаемыеДанные.ИдентификаторСообщения);
		Возврат ДанныеВыбора;
	КонецЕсли;

	Возврат NULL;
КонецФункции


// Обработка входящего сообщения, основной менеджер анализа пользовательского ввода 
//
// Параметры:
//	Сообщение	 - Структура	 - полученное сообщение
// 
Процедура ОбработатьВходящееСообщение(Сообщение)
	УстановитьКонтекстДляОтладки(Сообщение.Бот, Сообщение.Чат);
	УстановитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат);

	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ПолученноеСообщение", Сообщение);
	УдаляемыеСообщения = Новый Массив;
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("УдаляемыеСообщения", УдаляемыеСообщения);

	Если Сообщение.Свойство("data") 
		и (СтрНачинаетсяС(Сообщение.data, "ShowError:") 
		или СтрНачинаетсяС(Сообщение.data, "DataError:") 
		или СтрНачинаетсяС(Сообщение.data, "Del_Error:") 
		или СтрНачинаетсяС(Сообщение.data, "HideError:")) тогда

		НаборЗаписей = РегистрыСведений.гбОшибки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторОшибки.Установить(Новый УникальныйИдентификатор(Прав(Сообщение.data, 36)));
		НаборЗаписей.Прочитать();
		
		Если СтрНачинаетсяС(Сообщение.data, "Del_Error:") тогда
			УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, Сообщение);
			
		ИначеЕсли НаборЗаписей.Количество() тогда
			ЗаписьОшибка = НаборЗаписей[0];
			ИДОшибки = ЗаписьОшибка.ИдентификаторОшибки;

			КлавиатураСообщения = Новый Массив;
			Если СтрНачинаетсяС(Сообщение.data, "ShowError:") тогда
				Текст = ?(ЗначениеЗаполнено(ЗаписьОшибка.Чат), "Чат: " + ЗаписьОшибка.Чат + Символы.ПС, "") 
					+ ЗаписьОшибка.ПодробноеОписаниеОшибки;
				КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
					ДобавитьЭмодзи("U+1F53A+ Скрыть подробности"), "HideError:" + Строка(ИДОшибки)));
			Иначе
				Текст = ЗаписьОшибка.ОписаниеОшибки
					+ Символы.ПС + "Для перезапуска бота введите команду /start";
				//Кнопка = Новый Структура("text, callback_data", ДобавитьЭмодзи("U+1F53B+ Подробно"), "ShowError:" + Строка(ЗаписьОшибка.ИдентификаторОшибки));
				//РядКнопок.Добавить(Кнопка);
				КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
							ДобавитьЭмодзи("U+1F53B+ Подробно"), "ShowError:" + Строка(ИДОшибки)));
				КлавиатураСообщения.Добавить(Новый Структура("text, callback_data",
							ДобавитьЭмодзи("U+1F5D1+ Удалить"), "Del_Error:" + Строка(ИДОшибки)));
			КонецЕсли;                                                  
			
			Параметры = Новый Структура;
			Параметры.Вставить("Форматирование");
			Параметры.Вставить("КлавиатураСообщения", гбКлиентСервер.ЗначениеВМассиве(КлавиатураСообщения));
			
			Параметры.Вставить("Сообщение", Сообщение);
			Параметры.Вставить("disable_content_type_detection", Истина);
			ОтправитьСообщение(Сообщение.Бот, Сообщение.Чат, Текст, Параметры);
			
		Иначе
			ОтправитьСообщение(Сообщение.Бот, Сообщение.Чат, "U+2757+ Данные ошибки не найдены");
		КонецЕсли;

	ИначеЕсли Сообщение.Команды.Свойство("start") тогда

		Сообщение.Вставить("ДанныеВыбора", Новый Структура("start", Сообщение.Команды.start));
		Сообщение.Команды.Удалить("start");
		УстановитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат, Сообщение.Бот.БлокСхема);
		ВыполнитьНеподчиненныйЭлементБлокСхемы(Сообщение.Бот, Сообщение.Чат, Сообщение, Перечисления.гбТипыЭлементовБлокСхемы.Старт, Неопределено);
		
	Иначе
		
		НаборЗаписей = РегистрыСведений.гбОжидаемыеДанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Чат.Установить(Сообщение.Чат);
		НаборЗаписей.Прочитать();
		
		ТЗНабораЗаписей = НаборЗаписей.Выгрузить();
		ТЗНабораЗаписей.Сортировать("Уровень убыв");
		
		Если ТЗНабораЗаписей.Количество() тогда
			ОжидаемыеДанные = РегистрыСведений.гбОжидаемыеДанные.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОжидаемыеДанные, ТЗНабораЗаписей[0]);
		КонецЕсли;
		
		
		ОжидаемыеДанныеМеню = Неопределено;
		ДанныеВыбора = СформироватьДанныеВыбора(Сообщение, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
		Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);

		
		Если ОжидаемыеДанныеМеню <> Неопределено тогда
			БлокСхема = ОжидаемыеДанныеМеню.БлокСхема;
			Нагрузка = ОжидаемыеДанныеМеню.Нагрузка.Получить();
			
		ИначеЕсли ОжидаемыеДанные <> Неопределено тогда
			БлокСхема = ОжидаемыеДанные.БлокСхема;
			Нагрузка = ОжидаемыеДанные.Нагрузка.Получить();
		Иначе
			Нагрузка = Неопределено;
		КонецЕсли;
		Если БлокСхема <> Неопределено тогда
			УстановитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат, БлокСхема);
		КонецЕсли;
		
		
		Если ДанныеВыбора = NULL тогда
			// нет данных, ничего не делаем
		ИначеЕсли ДанныеВыбора = Неопределено и не Сообщение.Свойство("data") тогда
			// нет данных, ничего не делаем
		ИначеЕсли Сообщение.Команды.Количество() и не Сообщение.Свойство("ПропуститьОбработкуКоманд") тогда
			Сообщение.Вставить("ПропуститьОбработкуКоманд");
			Если ОжидаемыеДанные <> Неопределено тогда
				Сообщение.Вставить("ОжидаемыеДанныеТипЭлемента", ОжидаемыеДанные.ТипЭлемента);
				//ОжидаемыеДанные = Неопределено;
			КонецЕсли;
			
			Команды = Новый Массив;
			Для каждого КлючЗначение Из Сообщение.Команды Цикл
				Команды.Добавить(КлючЗначение);
			КонецЦикла;
			
			ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Сообщение.Бот, Сообщение.Чат);
			Пока Команды.Количество() цикл
				Команда = Команды[0];
				Команды.Удалить(0);
				Сообщение.Команды.Очистить();
				Сообщение.Команды.Вставить(Команда.Ключ, Команда.Значение);
				Сообщение.Вставить("ДанныеВыбора", Сообщение.Команды);
				
				Ошибка = Неопределено;
				СтрокиТЗ = ДанныеБлокСхемы.ТаблицаЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента, Алгоритм, Текст",
					Перечисления.гбТипыЭлементовБлокСхемы.Старт, Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды, Команда.Ключ));
					
				Если СтрокиТЗ.Количество() = 0 
					и ПолучитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат) <> Сообщение.Бот.БлокСхема тогда
					УстановитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат, Сообщение.Бот.БлокСхема);
					ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Сообщение.Бот, Сообщение.Чат);
					СтрокиТЗ = ДанныеБлокСхемы.ТаблицаЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента, Алгоритм, Текст",
						Перечисления.гбТипыЭлементовБлокСхемы.Старт, Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды, Команда.Ключ));
				КонецЕсли;
				
				Если СтрокиТЗ.Количество() > 1 тогда
					Ошибка = СтрШаблон("Определен более чем один элемент типа 'Старт' с функцией '%1' и текстом '%2'.",
								Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды, Команда.Ключ)
				ИначеЕсли СтрокиТЗ.Количество() <> 1 тогда
						СтрокиТЗ = ДанныеБлокСхемы.ТаблицаЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента, Алгоритм, Текст",
							Перечисления.гбТипыЭлементовБлокСхемы.Старт, Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды, ""));
						Если СтрокиТЗ.Количество() > 1 тогда
							Ошибка = СтрШаблон("Определен более чем один элемент типа 'Старт' с функцией '%1' и с пустым текстом.",
										Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды);
						ИначеЕсли СтрокиТЗ.Количество() = 0 тогда
							Ошибка = СтрШаблон("Не определен элемент типа 'Старт' с функцией '%1' и с пустым текстом.",
										Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды);
						КонецЕсли;
				КонецЕсли;
				
				Если СтрокиТЗ.Количество() = 1 тогда
					ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Сообщение.Бот, Сообщение.Чат, Сообщение, СтрокиТЗ[0], , Нагрузка);
				Иначе
					Попытка
						ВызватьИсключение(Ошибка);
					Исключение
						ОповеститьОбОшибке(Перечисления.гбСобытия.АнализБлокСхемы, ИнформацияОбОшибке(), Команда.Ключ);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОжидаемыеДанныеМеню <> Неопределено
			и ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий 
			и ТипЗнч(ДанныеВыбора.Значение) = Тип("Строка") тогда	

			ИмяПодчиненногоЭлемента = ДанныеВыбора.Значение;
			ДанныеВыбора = ОжидаемыеДанныеМеню.Данные.Получить();

		ИначеЕсли ОжидаемыеДанныеМеню <> Неопределено и
			ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений тогда	
			ИмяПодчиненногоЭлемента = ОбъектИз_JSON(ОжидаемыеДанныеМеню.Подчиненные);

		ИначеЕсли ОжидаемыеДанныеМеню <> Неопределено
			и ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПриемОплаты тогда	

			ИмяПодчиненногоЭлемента = ДанныеВыбора.Значение;

			ДанныеВыбора = ОжидаемыеДанныеМеню.Данные.Получить();

			Сообщение.Вставить("ИдентификаторСообщения", ОжидаемыеДанныеМеню.ИдентификаторСообщения);
			
			Если Сообщение.Свойство("successful_payment") тогда
				
				Если ОжидаемыеДанныеМеню.ЭлементыСписка.Получить().Количество() > 2 тогда
					УдаляемыеСообщения.Добавить(ОжидаемыеДанныеМеню.ИдентификаторСообщения);
				КонецЕсли;
				ОжидаемыеДанныеМеню.Удалить();
				
			ИначеЕсли не Сообщение.Свойство("pre_checkout_query") тогда
				УдаляемыеСообщения.Добавить(ОжидаемыеДанныеМеню.ИдентификаторСообщения);
				ОжидаемыеДанныеМеню.Удалить();
			КонецЕсли;

		ИначеЕсли ОжидаемыеДанныеМеню <> Неопределено 
			и (ОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий
				или не ЗначениеЗаполнено(ОжидаемыеДанныеМеню.ТипЭлемента)) тогда
			// Динамическое меню сообщения	
			ОжидаемыеДанные = Неопределено;
			//ВыполнитьНеподчиненныйЭлементБлокСхемы(Сообщение.Бот, Сообщение.Чат, Сообщение, Перечисления.гбТипыЭлементовБлокСхемы.Данные, Нагрузка);
			
		ИначеЕсли ОжидаемыеДанные <> Неопределено и
			ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ДеревоЗначений тогда	
			
			Подчиненные = ОбъектИз_JSON(ОжидаемыеДанные.Подчиненные);
			Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
				УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
				ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 2, 1, 0)].Значение;
				Для н = 2 по Подчиненные.Количество() - 1 цикл
					Если Подчиненные[н].Представление = ДанныеВыбора тогда
						ИмяПодчиненногоЭлемента = Подчиненные[н].Значение;
						УдаляемыеСообщения.Добавить(Сообщение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
			Иначе
				ДанныеВыбора = ОбработатьМенюВыбораДерева(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
				Если ДанныеВыбора <> NULL тогда
					Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
					УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
					
					Если ТипЗнч(ДанныеВыбора) = Тип("СписокЗначений") или ТипЗнч(ДанныеВыбора) = Тип("ЭлементСпискаЗначений") тогда
						ИмяПодчиненногоЭлемента = Подчиненные[0].Значение;
					Иначе
						ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 3, 2, 0)].Значение;
					КонецЕсли;			
					ОжидаемыеДанные.Удалить();
					ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
				КонецЕсли;			
				
			КонецЕсли;		
			
		ИначеЕсли ОжидаемыеДанные <> Неопределено и
			(ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений	
			ИЛИ ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками) тогда	
			
			Подчиненные = ОбъектИз_JSON(ОжидаемыеДанные.Подчиненные);
			Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
				УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
				ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 2, 1, 0)].Значение;
				Для н = 2 по Подчиненные.Количество() - 1 цикл
					Если Подчиненные[н].Представление = ДанныеВыбора тогда
						ИмяПодчиненногоЭлемента = Подчиненные[н].Значение;
						УдаляемыеСообщения.Добавить(Сообщение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
			Иначе
				ДанныеВыбора = ОбработатьМенюВыбораСписка(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
				Если ДанныеВыбора <> NULL тогда
					Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
					УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
					
					Если ТипЗнч(ДанныеВыбора) = Тип("СписокЗначений") или ТипЗнч(ДанныеВыбора) = Тип("ЭлементСпискаЗначений") тогда
						ИмяПодчиненногоЭлемента = Подчиненные[0].Значение;
					Иначе
						ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 3, 2, 0)].Значение;
					КонецЕсли;			
					ОжидаемыеДанные.Удалить();
					ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
				КонецЕсли;			
				
			КонецЕсли;			
			
		ИначеЕсли ОжидаемыеДанные <> Неопределено и
			ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСКартинками тогда	
			
			Подчиненные = ОбъектИз_JSON(ОжидаемыеДанные.Подчиненные);
			Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
				УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
				ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 2, 1, 0)].Значение;
				Для н = 2 по Подчиненные.Количество() - 1 цикл
					Если Подчиненные[н].Представление = ДанныеВыбора тогда
						ИмяПодчиненногоЭлемента = Подчиненные[н].Значение;
						УдаляемыеСообщения.Добавить(Сообщение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
			Иначе
				ДанныеВыбора = ОбработатьМенюВыбораСпискаСКартинками(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
				Если ДанныеВыбора <> NULL тогда
					Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
					
					Если ТипЗнч(ДанныеВыбора) = Тип("СписокЗначений") или ТипЗнч(ДанныеВыбора) = Тип("ЭлементСпискаЗначений") тогда
						ИмяПодчиненногоЭлемента = Подчиненные[0].Значение;
					Иначе
						ИмяПодчиненногоЭлемента = Подчиненные[?(Подчиненные.Количество() >= 3, 2, 0)].Значение;
					КонецЕсли;			
					
					ОжидаемыеДанные.Удалить();
					ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
				КонецЕсли;			
			КонецЕсли;			

		ИначеЕсли ОжидаемыеДанные <> Неопределено
			и ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Данные тогда
			
			Если не ЗначениеЗаполнено(ОжидаемыеДанные.ТипДанных) тогда
				ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
			
			Иначе

				ВариантОтвета = NULL;
				Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
					ДополнительныеПараметры = ОжидаемыеДанные.ДополнительныеПараметры.Получить();
					Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") тогда
						КлавиатураОтвета = Неопределено;
						Если ДополнительныеПараметры.Свойство("КлавиатураОтвета", КлавиатураОтвета) тогда
							Для Каждого ЭлементСписка из КлавиатураОтвета Цикл
								Если Строка(ЭлементСписка) = ДанныеВыбора тогда
									ВариантОтвета = ЭлементСписка.Значение;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; 
				
				Если ВариантОтвета <> NULL тогда
					УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
					УдаляемыеСообщения.Добавить(Сообщение);
					ДанныеВыбора = ВариантОтвета;
					ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
					
				ИначеЕсли ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.Время тогда
					Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
						Дата = гбКлиентСервер.СтрокаВоВремя(ДанныеВыбора);
						Если Дата <> Неопределено тогда
							ДанныеВыбора = ?(0, 0, Новый СписокЗначений).Добавить(Дата);
						Иначе
							ОтправитьСообщение(Сообщение.Бот, Сообщение.Чат, "Время не распознано: " + ДанныеВыбора);
						КонецЕсли;
						УдаляемыеСообщения.Добавить(Сообщение);
					КонецЕсли;
					ДанныеВыбора = ОбработатьМенюВыбораВремени(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
					Если ДанныеВыбора <> NULL тогда
						//Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
						ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
					КонецЕсли;
					
				ИначеЕсли ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.Дата
					или ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.СтандартнаяДата тогда
					Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
						Дата = гбКлиентСервер.СтрокаВДату(ДанныеВыбора);
						Если Дата <> Неопределено тогда
							ДанныеВыбора = ?(0, 0, Новый СписокЗначений).Добавить(Дата);
						Иначе
							ОтправитьСообщение(Сообщение.Бот, Сообщение.Чат, "Дата не распознана: " + ДанныеВыбора);
						КонецЕсли;
						УдаляемыеСообщения.Добавить(Сообщение);
					КонецЕсли;
					ДанныеВыбора = ОбработатьМенюВыбораДаты(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
					Если ДанныеВыбора <> NULL тогда
						//Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
						ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
					КонецЕсли;
					
				ИначеЕсли ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.Период
					или ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.СтандартныйПериод тогда
					ДополнительныеПараметры = ОжидаемыеДанные.ДополнительныеПараметры.Получить();
					Если ТипЗнч(ДанныеВыбора) = Тип("Строка") 
						и ДополнительныеПараметры <> Неопределено тогда
						Дата = гбКлиентСервер.СтрокаВДату(ДанныеВыбора);
						Если Дата <> Неопределено тогда
							ДанныеВыбора = ?(0, 0, Новый СписокЗначений).Добавить(Дата);
						Иначе
							ОтправитьСообщение(Сообщение.Бот, Сообщение.Чат, "Дата не распознана: " + ДанныеВыбора);
						КонецЕсли;
						УдаляемыеСообщения.Добавить(Сообщение);
					КонецЕсли;
					
					ДанныеВыбора = ОбработатьМенюВыбораПериода(Сообщение, ДанныеВыбора, ОжидаемыеДанные, ОжидаемыеДанныеМеню);
					Если ДанныеВыбора <> NULL тогда
						//Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
						ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
					КонецЕсли;
					
				ИначеЕсли ОжидаемыеДанные.ТипДанных = Перечисления.гбТипыДанных.Штрихкод тогда
					УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
					Если ТипЗнч(ДанныеВыбора) = Тип("Строка") тогда
						
						ДанныеВыбора = гбКлиентСервер.ЗначениеВМассиве(Новый Структура("data, type", ДанныеВыбора, "manual"));

						УдаляемыеСообщения.Добавить(Сообщение);
						ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
						
					ИначеЕсли ТипЗнч(ДанныеВыбора) = Тип("ФиксированнаяСтруктура") и ДанныеВыбора.Свойство("Фото") тогда
						ИмяВременногоФайла = гбСервер.ПолучитьФайлПоИд(Сообщение.Бот, Сообщение.Чат, ДанныеВыбора.Файл.file_id);
						
						Соединение = Новый HTTPСоединение("prod.v8-pr.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
						Заголовки = Новый Соответствие;
						Заголовки.Вставить("content-type", "application/json");
						
						ИмяРасширения = гбСерверПовтИсп.ПолучитьМетаданныеРасширения("Имя").Имя;
						КлючЛицензирования = гбСервер.ПолучитьЗначениеИзХранилищаОбщихНастроек("НастройкиПрограммы/НастройкиЛицензирования",
								ИмяРасширения + "/КлючЛицензирования", "");
								
						Запрос = Новый HTTPЗапрос("code-reader?apikey=" + КлючЛицензирования);
						Запрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ИмяВременногоФайла));
						
						Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
						Если Ответ.КодСостояния <> 200 тогда
							ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ЧтениеШтрихкода, 
								"HTTP: " + Ответ.КодСостояния + " " + Ответ.ПолучитьТелоКакСтроку()));
						КонецЕсли;
						
						ДанныеВыбора = Ответ.ПолучитьТелоКакСтроку();
						
						ДанныеВыбора = ОбъектИз_JSON(ДанныеВыбора);
						
						УдаляемыеСообщения.Добавить(Сообщение);
						ИмяПодчиненногоЭлемента = ОжидаемыеДанные.Подчиненные;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если ДанныеВыбора <> NULL тогда
				УдаляемыеСообщения.Добавить(ОжидаемыеДанные.ИдентификаторСообщения);
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
			КонецЕсли;
				
		ИначеЕсли ОжидаемыеДанные <> Неопределено
			и ОжидаемыеДанные.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПунктМеню тогда
			
			Подчиненные = ОбъектИз_JSON(ОжидаемыеДанные.Подчиненные);
			
			ИмяПодчиненногоЭлемента = Неопределено;
			Для Каждого ЭлементСписка из Подчиненные Цикл
				Если (ЭлементСписка.Представление = "##contact##" и Сообщение.Свойство("contact")
						и Сообщение.contact.Свойство("user_id") и Сообщение.contact.user_id = Сообщение.from.id) 
					или (ЭлементСписка.Представление = "##location##" и Сообщение.Свойство("location"))
					или ЭлементСписка.Представление = Сообщение.text тогда
					ИмяПодчиненногоЭлемента = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИмяПодчиненногоЭлемента <> Неопределено тогда
				УдаляемыеСообщения.Добавить(Сообщение);
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
				
			ИначеЕсли Сообщение.Свойство("web_app_data") тогда
				ОжидаемыеДанные.Удалить();
				ВосстановитьКлавиатуруОтвета(Сообщение.Бот, Сообщение.Чат);
				
			КонецЕсли;
		КонецЕсли;
			
			
		Если ДанныеВыбора <> NULL тогда
			
			Сообщение.Вставить("ДанныеВыбора", ДанныеВыбора);
			
			Если ИмяПодчиненногоЭлемента <> Неопределено тогда
				ВыполнитьЭлементБлокСхемы(ПолучитьДанныеБлокСхемыБота(Сообщение.Бот, Сообщение.Чат),
					Сообщение.Бот, Сообщение.Чат, Сообщение, ИмяПодчиненногоЭлемента, , Нагрузка);	

			ИначеЕсли не (Сообщение.Команды.Количество() и Сообщение.Свойство("ПропуститьОбработкуКоманд")) тогда
				ВыполнитьНеподчиненныйЭлементБлокСхемы(Сообщение.Бот, Сообщение.Чат, Сообщение, Перечисления.гбТипыЭлементовБлокСхемы.Данные, Нагрузка);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ВремСообщение Из УдаляемыеСообщения Цикл
			УдалитьСообщение(Сообщение.Бот, Сообщение.Чат, ВремСообщение);
		КонецЦикла;
			
			
	КонецЕсли;
	
КонецПроцедуры


// Ищет неподчиненный элемент блок схемы по типу и переходит к нему
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	ТипЭлемента	 - Перечисление.гбТипыЭлементовБлокСхемы	 - тип нужного элемента
//
Процедура ВыполнитьНеподчиненныйЭлементБлокСхемы(Бот, Чат, Сообщение, ТипЭлемента, Нагрузка)
	ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Бот, Чат);
	
	Если ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Старт тогда
		Сообщение.Вставить("ПропуститьОбработкуКоманд");
		
		СтрокиЭлемента = ДанныеБлокСхемы.ТаблицаЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента, Алгоритм", ТипЭлемента));
		Если не СтрокиЭлемента.Количество() тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы,
				"Элемент типа 'Старт' без функции не определен."));
		ИначеЕсли СтрокиЭлемента.Количество() > 1 тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы,
				"Определен более чем один элемент типа 'Старт' без функции."));
		Иначе
			ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокиЭлемента[0], , Нагрузка);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Данные тогда
		Для Итерация = 1 по 2 Цикл
			СтрокиЭлемента = ДанныеБлокСхемы.ТаблицаЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента", ТипЭлемента));
			
			Для н = -(СтрокиЭлемента.Количество() - 1) по 0 Цикл
				ИмяЭлемента = СтрокиЭлемента[-н].ИмяЭлемента;
				
				Для Каждого СтрокаЭлемента из ДанныеБлокСхемы.ТаблицаЭлементов Цикл
					Если СтрокаЭлемента.Подчиненные.НайтиПоЗначению(ИмяЭлемента) <> Неопределено тогда
						СтрокиЭлемента.Удалить(-н);	
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если не СтрокиЭлемента.Количество() тогда
				УстановитьТекущуюБлокСхемуБота(Сообщение.Бот, Сообщение.Чат, Сообщение.Бот.БлокСхема);
				ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Бот, Чат);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если не СтрокиЭлемента.Количество() тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы,
				"Неподчиненный элемент типа 'Данные' не определен."));
		ИначеЕсли СтрокиЭлемента.Количество() > 1 тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы,
				"Определен более чем один неподчиненный элемент типа 'Данные'."));
		Иначе
			ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, ПолучитьИмяПодчиненногоЭлемента(СтрокиЭлемента[0]), , Нагрузка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Заменяет подстроки в квадратных скобках из строки на вычисленные выражения
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
//  Строка	 - Строка	 - Исходная строка
// 
// Возвращаемое значение:
//  Строка - результирующая строка
//
Функция ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, Строка, Нагрузка)
	Результат = Строка;
	Выражения = гбКлиентСервер.ПолучитьШаблоныПодстановкиИзСтроки(Строка);
	
	Если не Выражения.Количество() тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьКонтекстДляОтладки(Бот, Чат);
		
	ОбработкаКонтекст = Обработки.гбКонтекст.Создать();
	ОбработкаКонтекст.Бот = Бот;
	ОбработкаКонтекст.Чат = Чат;
	ОбработкаКонтекст.Нагрузка = Нагрузка;
	
	
	Элемент = Новый Структура;
	Для каждого Колонка Из СтрокаЭлемента.Владелец().Колонки Цикл
		Элемент.Вставить(Колонка.Имя, СтрокаЭлемента[Колонка.Имя]);
	КонецЦикла;
	ОбработкаКонтекст.Элемент = Новый ФиксированнаяСтруктура(Элемент);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ОбработкаКонтекст.Контекст = ПолучитьКонтекст(Чат, Ложь);
	ЗафиксироватьТранзакцию();
	
	ОбработкаКонтекст.Данные = ?(Сообщение.Свойство("ДанныеВыбора"), Сообщение.ДанныеВыбора, Неопределено);
	
	ОбработкаКонтекст.СообщениеПолученное = Новый ФиксированнаяСтруктура(Сообщение);
		
	КэшДанных = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	
	Попытка                                  
		Для Каждого Выражение из Выражения Цикл
			Значение = ОбработкаКонтекст.__Вычислить__(Выражение);
			Результат = СтрЗаменить(Результат, "[" + Выражение + "]", Значение);
		КонецЦикла;

		УстановитьКонтекстДляОтладки(Бот, Чат);

	Исключение
		
		УстановитьКонтекстДляОтладки(Бот, Чат);

		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Ошибка вычисления шаблона элемента: %1", СтрокаЭлемента.ИмяЭлемента),
			ИнформацияОбОшибке()));
	КонецПопытки;
	
	КэшДанных2 = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	Для Каждого КлючЗначение из КэшДанных цикл
		Если не КэшДанных2.Свойство(КлючЗначение.Ключ) тогда
			КэшДанных2.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

	
	
	Возврат Результат;
КонецФункции

// Функция - Получить контекст
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	ДляИзменения - Булево	 - режим блокировки данных
// 
// Возвращаемое значение:
//	Структура|ФиксированнаяСтруктура - данные чата
//
Функция ПолучитьКонтекст(Чат, ДляИзменения)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.гбКонтекстЧата");
	ЭлементБлокировки.УстановитьЗначение("Чат", Чат);
	ЭлементБлокировки.Режим = ?(ДляИзменения, 
		РежимБлокировкиДанных.Исключительный, РежимБлокировкиДанных.Разделяемый);
	БлокировкаДанных.Заблокировать();
	
	Запись = РегистрыСведений.гбКонтекстЧата.СоздатьМенеджерЗаписи();
	Запись.Чат = Чат;
	Запись.Прочитать();
	Если не Запись.Выбран() тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ОшибкаЛогики, 
			СтрШаблон("Контекст чата не определен: %1.", Чат)));
	КонецЕсли;
	
	Контекст = Запись.ДанныеКонтекста.Получить();
	Если не ДляИзменения тогда
		Контекст = Новый ФиксированнаяСтруктура(Контекст);
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции 


// Выполняет алгоритм в контексте чата
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
//	РезультатПоУмолчанию - Произвольный	 - начальное значение возвращаемого значения
// 
// Возвращаемое значение:
//	Произвольный - результат выполнения алгоритма
//
Функция ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, РезультатПоУмолчанию = Неопределено, Нагрузка, Параметры)
	УстановитьКонтекстДляОтладки(Бот, Чат);
	
	Если не ЗначениеЗаполнено(СтрокаЭлемента.Алгоритм) тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
			СтрШаблон("Алгоритм элемента не определен: %1.", СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	ИзменяетКонтекст = СтрокаЭлемента.Алгоритм.ИзменяетКонтекст;
	
	ОбработкаКонтекст = Обработки.гбКонтекст.Создать();
	ОбработкаКонтекст.Бот = Бот;
	ОбработкаКонтекст.Чат = Чат;
	ОбработкаКонтекст.Нагрузка = Нагрузка;
	ОбработкаКонтекст.Параметры = ?(ТипЗнч(Параметры) = Тип("Структура"), Параметры, Новый Структура);
	
	Элемент = Новый Структура;
	Для каждого Колонка Из СтрокаЭлемента.Владелец().Колонки Цикл
		Элемент.Вставить(Колонка.Имя, СтрокаЭлемента[Колонка.Имя]);
	КонецЦикла;
	ОбработкаКонтекст.Элемент = Новый ФиксированнаяСтруктура(Элемент);
	
	ОбработкаКонтекст.Результат = РезультатПоУмолчанию;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Контекст = ПолучитьКонтекст(Чат, ИзменяетКонтекст);
	Если не ИзменяетКонтекст тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ОбработкаКонтекст.Контекст = Контекст;
	
	Сообщение.Свойство("ДанныеВыбора", ОбработкаКонтекст.Данные);
	Сообщение.Свойство("СообщениеИзменяемое", Неопределено);
	
	ОбработкаКонтекст.СообщениеПолученное = Новый ФиксированнаяСтруктура(Сообщение);
	
	КэшДанных = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	СохраняемыйКэш = Новый Структура("Бот, Чат, БлокСхема");
	ЗаполнитьЗначенияСвойств(СохраняемыйКэш, КэшДанных);
	
	Попытка                                    
		ОбработкаКонтекст.__Выполнить__(СтрокаЭлемента.Алгоритм.Алгоритм);
		
		УстановитьКонтекстДляОтладки(Бот, Чат);

		Если ОбработкаКонтекст.СообщениеИзменяемое <> Неопределено и ОбработкаКонтекст.Параметры.Свойство("Сообщение") тогда
			ВызватьИсключение("Параметр 'Сообщение' уже установлен.");
		КонецЕсли;
		
		Если ИзменяетКонтекст тогда
			Если ОбработкаКонтекст.Контекст <> Контекст тогда
				ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
					СтрШаблон("Попытка подмены контекста: %1.", СтрокаЭлемента.ИмяЭлемента)));
			КонецЕсли;

			Запись = РегистрыСведений.гбКонтекстЧата.СоздатьМенеджерЗаписи();
			Запись.Чат = Чат;
			Запись.ДанныеКонтекста = Новый ХранилищеЗначения(ОбработкаКонтекст.Контекст);
			Запись.Записать();

			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если ИзменяетКонтекст и ТранзакцияАктивна() тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		УстановитьКонтекстДляОтладки(Бот, Чат);

		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Ошибка выполнения алгоритма элемента: %1", СтрокаЭлемента.ИмяЭлемента),
			ИнформацияОбОшибке()));
	КонецПопытки;
	
	КэшДанных2 = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	Для Каждого КлючЗначение из КэшДанных цикл
		Если не КэшДанных2.Свойство(КлючЗначение.Ключ) тогда
			КэшДанных2.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(КэшДанных, СохраняемыйКэш);


	Сообщение.Вставить("ДанныеВыбора", ОбработкаКонтекст.Данные);

	Сообщение.Вставить("СообщениеИзменяемое", ОбработкаКонтекст.СообщениеИзменяемое);
	Если Сообщение.СообщениеИзменяемое <> Неопределено тогда
		ОбработкаКонтекст.Параметры.Вставить("Сообщение", ОбработкаКонтекст.СообщениеИзменяемое);
	КонецЕсли;
	
	Нагрузка = ОбработкаКонтекст.Нагрузка;
	Параметры = ОбработкаКонтекст.Параметры;

	Возврат ОбработкаКонтекст.Результат;
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Старт(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Если не ЗначениеЗаполнено(СтрокаЭлемента.Алгоритм)
		и ПолучитьТекущуюБлокСхемуБота(Бот, Чат) = Бот.БлокСхема тогда
		
		ОтправитьСостояние(Бот, Чат, "typing");
		ВремСообщение = ОтправитьСообщение(Бот, Чат, "<i>Инициализация...</i>");
		
		Попытка                                                  
		
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.гбКонтекстЧата");
			ЭлементБлокировки.УстановитьЗначение("Чат", Чат);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			Для Каждого МетаРегистр из гбСерверПовтИсп.ПолучитьМетаданныеРасширения("РегистрыСведений").РегистрыСведений Цикл
				Если МетаРегистр.Измерения.Найти("Чат") <> Неопределено тогда
					НаборЗаписей = РегистрыСведений[МетаРегистр.Имя].СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Чат.Установить(Сообщение.Чат);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() тогда
						Для Каждого Запись из НаборЗаписей Цикл
							СтруктураЗаписи = Новый Структура("ИдентификаторСообщения");
							ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Запись);
							Если ЗначениеЗаполнено(СтруктураЗаписи.ИдентификаторСообщения) тогда 
								УдалитьСообщение(Бот, Чат, СтруктураЗаписи.ИдентификаторСообщения);
							КонецЕсли;
						КонецЦикла;
						НаборЗаписей.Очистить();
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Запись = РегистрыСведений.гбКонтекстЧата.СоздатьМенеджерЗаписи();
			Запись.Чат = Чат;
			Запись.ДанныеКонтекста = Новый ХранилищеЗначения(Новый Структура);
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ИнициализацияДанныхЧата, , ИнформацияОбОшибке()));
		КонецПопытки;
		
		УдалитьСообщение(Бот, Чат, ВремСообщение);
		
		Если не ПустаяСтрока(СтрокаЭлемента.Текст) тогда
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Неопределено);
			Результат = ОтправитьСообщение(Бот, Чат, Текст);
		КонецЕсли;			

	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ОбработкаКоманды тогда
	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ДействиеОператора тогда
	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтарт.ВнешнийВход тогда
		// Возврат 0;	
	КонецЕсли;
	
	Возврат 0;
КонецФункции	


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Стоп(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	// если мы в меню - не нужно обрабатывать команды, только если ждем ввод данных
	Если Сообщение.Команды.Количество() и СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтоп.ПродолжитьОбработкуКоманд
		и Сообщение.Свойство("ОжидаемыеДанныеТипЭлемента")
		и Сообщение.ОжидаемыеДанныеТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Данные тогда
		
		ОбработатьВходящееСообщение(Сообщение);
		
	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбФункцииБлокаСтоп.ВыходИзВложенногоПроцесса тогда
		
		НаборЗаписей = РегистрыСведений.гбТекущиеБлокСхемыЧатов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Чат.Установить(Чат);
		НаборЗаписей.Прочитать();
		
		ТЗНабораЗаписей = НаборЗаписей.Выгрузить();
		ТЗНабораЗаписей.Сортировать("Уровень убыв");
		ПоследняяСтрока = ТЗНабораЗаписей[0]; 
		ИмяПодчиненногоЭлемента = ПоследняяСтрока.Подчиненные;
		БлокСхема = ПоследняяСтрока.БлокСхемаСтек;
		Нагрузка = ПоследняяСтрока.Нагрузка.Получить();
		
		ТЗНабораЗаписей.Удалить(ПоследняяСтрока);
		НаборЗаписей.Загрузить(ТЗНабораЗаписей);
		НаборЗаписей.Записать(Истина);
		
		УстановитьТекущуюБлокСхемуБота(Бот, Чат, БлокСхема);
		ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Бот, Чат);

		Возврат ИмяПодчиненногоЭлемента;

	КонецЕсли;
	
	
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Данные(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	
	Если не ВводДанныхВДиалогеВозможен(Бот, Чат) тогда
		Возврат Неопределено;	
	КонецЕсли;
		
	Запись = РегистрыСведений.гбОжидаемыеДанные.СоздатьМенеджерЗаписи();
	Запись.Чат = Чат;

	Запись.ТипЭлемента = СтрокаЭлемента.ТипЭлемента;
	Запись.Подчиненные = ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента);
	Запись.ТипДанных = СтрокаЭлемента.Алгоритм;
	Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
	
	Параметры = Новый Структура;
	Если СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.Дата 
		или СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.СтандартнаяДата тогда
		Параметры.Вставить("КлавиатураСообщения", 
			СформироватьКлавиатуруСообщенияВыбораДаты(Чат, ДанныеБлокСхемы.БлокСхема, СтрокаЭлемента.Алгоритм,
				?(ТипЗнч(Сообщение.ДанныеВыбора) = Тип("Дата"), Сообщение.ДанныеВыбора, Неопределено), 
				Новый Структура("Значение", 
					?(СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.СтандартнаяДата, "СтандартнаяДата", ""))));
				
	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.Период
		или СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.СтандартныйПериод тогда
		Параметры.Вставить("КлавиатураСообщения", 
			СформироватьКлавиатуруСообщенияВыбораПериода(Чат, ДанныеБлокСхемы.БлокСхема, СтрокаЭлемента.Алгоритм,  
				?(ТипЗнч(Сообщение.ДанныеВыбора) = Тип("СтандартныйПериод"), Сообщение.ДанныеВыбора, Неопределено),
				Новый Структура("Значение", 
					?(СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.СтандартныйПериод, "СтандартныйПериод", ""))));
				
	ИначеЕсли СтрокаЭлемента.Алгоритм = Перечисления.гбТипыДанных.Время тогда
		Параметры.Вставить("КлавиатураСообщения", 
			СформироватьКлавиатуруСообщенияВыбораВремени(Чат, ДанныеБлокСхемы.БлокСхема,
				?(ТипЗнч(Сообщение.ДанныеВыбора) = Тип("Дата"), Сообщение.ДанныеВыбора, Неопределено)));
	Иначе
	//	Параметры.Вставить("reply_markup", 
	//		ОбъектВ_JSON(Новый Структура("force_reply, input_field_placeholder", Истина, СтрокаЭлемента.Текст))); 
		
		//Параметры.Вставить("reply_markup", 
		//	ОбъектВ_JSON(Новый Структура("remove_keyboard,", Истина))); 
		
	КонецЕсли;
	
	Если Параметры.Свойство("КлавиатураСообщения") тогда
		Параметры.КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
	КонецЕсли;

	ИдентификаторСообщения = Новый Массив;
	ОтправленноеСообщение = ОтправленноеСообщение();
	Если ТипЗнч(ОтправленноеСообщение) = Тип("Структура")
		и ОтправленноеСообщение.Свойство("ДанныеКлавиатурыОтвета") тогда

		Запись.ДанныеКлавиатурыОтвета = Новый ХранилищеЗначения(ОтправленноеСообщение.ДанныеКлавиатурыОтвета);
		ИдентификаторСообщения.Добавить(XMLСтрока(ОтправленноеСообщение.message_id));
	Иначе
		УдалитьКлавиатуруОтвета(Бот, Чат);
	КонецЕсли;
	Если не ПустаяСтрока(СтрокаЭлемента.Текст) тогда
		Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
		ОтправленноеСообщение = ОтправитьСообщение(Бот, Чат, Текст, Параметры);
		ИдентификаторСообщения.Добавить(XMLСтрока(ОтправленноеСообщение.message_id));
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаЭлемента.Алгоритм) тогда
		Параметры.Вставить("Сообщение", ОтправленноеСообщение());
		ОтправленноеСообщение = ОтправитьСообщение(Бот, Чат, , Параметры);
		ИдентификаторСообщения.Добавить(XMLСтрока(ОтправленноеСообщение.message_id));
	КонецЕсли;
	Запись.ИдентификаторСообщения = СтрСоединить(ИдентификаторСообщения, ",");

	Запись.Уровень = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запись.БлокСхема = ДанныеБлокСхемы.БлокСхема;
	Запись.Записать(Ложь);
	
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_СписокДействий(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Результат = Новый СписокЗначений;
	
	Для н = 1 по СтрокаЭлемента.Подчиненные.Количество() - 1 цикл
		Результат.Добавить(ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, н), Строка(СтрокаЭлемента.Подчиненные[н]));		
	КонецЦикла;
	
	Параметры = Новый Структура;
	Если ЗначениеЗаполнено(СтрокаЭлемента.Алгоритм) тогда
		Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Результат, Нагрузка, Параметры);
	КонецЕсли;
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки списка не корректен, ожидается тип 'Список значений': %1.", 
				СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СтрокаКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(СтрокаКнопок);
	
	Для Каждого ЭлементСписка из Результат цикл
		Если ЭлементСписка.Значение <> Неопределено тогда
			Представление = ДобавитьЭмодзи(Строка(ЭлементСписка));
			Если СтрНачинаетсяС(Представление, "|") тогда
				СтрокаКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(СтрокаКнопок);
				Представление = Сред(Представление, 2);
			КонецЕсли;
			СтрокаКнопок.Добавить(ЭлементСписка.Значение, Представление);	
		КонецЕсли;
	КонецЦикла;
	
	КлавиатураСообщения = СформироватьКлавиатуруСообщения(Чат, ДанныеБлокСхемы.БлокСхема, СписокКнопок, СтрокаЭлемента.ТипЭлемента,
		Сообщение.ДанныеВыбора, Истина, , , , Нагрузка);
		
	Параметры.Вставить("КлавиатураСообщения", КлавиатураСообщения);
		
	//Если Сообщение.Свойство("СообщениеИзменяемое") и Сообщение.СообщениеИзменяемое <> Неопределено тогда
	//	Параметры.Вставить("Сообщение", Сообщение.СообщениеИзменяемое);
	//КонецЕсли;
	
	Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);

	ОтправитьСообщение(Бот, Чат, Текст, Параметры);
	Возврат 0;
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
//	ДанныеРекурсии				 - Произвольный	 - хранилище данных рекурсивного вызова
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Разделение_ПунктМеню(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, ДанныеРекурсии, Нагрузка)
	ЭтоКореньГруппы = Ложь;
	Если СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Разделение и НЕ ПустаяСтрока(СтрокаЭлемента.Текст) тогда
		ЭтоКореньГруппы = Истина;
	ИначеЕсли ДанныеРекурсии = Неопределено и СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПунктМеню тогда
		ЭтоКореньГруппы = Истина;
	КонецЕсли;
	Если ДанныеРекурсии = Неопределено тогда
		ДанныеРекурсии = Новый Массив;
	КонецЕсли;
	
	Если СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Разделение тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Верх");
		ТЗ.Колонки.Добавить("Лево");
		ТЗ.Колонки.Добавить("ИндексПодчиненного");
		
		Для н = 0 по СтрокаЭлемента.Подчиненные.Количество() - 1 Цикл
			СтрокаПодчиненного = ДанныеБлокСхемы.ТаблицаЭлементов.Найти(СтрокаЭлемента.Подчиненные[н].Значение);
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Верх = СтрокаПодчиненного.Верх; 
			НоваяСтрока.Лево = СтрокаПодчиненного.Лево; 
			НоваяСтрока.ИндексПодчиненного = н; 
		КонецЦикла;
		
		ТЗ.Сортировать("Верх, Лево");
		
		ВремНагрузка = Нагрузка;
		Для Каждого СтрокаТЗ из ТЗ Цикл
			ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, 
				ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, СтрокаТЗ.ИндексПодчиненного), ДанныеРекурсии, Нагрузка);
			Нагрузка = ВремНагрузка;
		КонецЦикла;
	Иначе
		ДанныеРекурсии.Добавить(СтрокаЭлемента);
	КонецЕсли;
	
	Если ЭтоКореньГруппы и ДанныеРекурсии.Количество() тогда
		// создать меню из множества пунктов
		Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
		
		ПоказатьКлавиатуруОтвета(Бот, Чат, ДанныеБлокСхемы.БлокСхема, Сообщение, Текст, ДанныеРекурсии, Нагрузка);
	КонецЕсли;
	
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ФоновоеЗадание(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)

	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(ДанныеБлокСхемы);
	ПараметрыФЗ.Добавить(Бот);
	ПараметрыФЗ.Добавить(Чат);
	ПараметрыФЗ.Добавить(Сообщение);
	ПараметрыФЗ.Добавить(ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента));
	ПараметрыФЗ.Добавить(Нагрузка);
	
	ФоновыеЗадания.Выполнить("гбСервер.ВыполнитьЭлементБлокСхемыВПопытке", ПараметрыФЗ, , СтрокаЭлемента.Текст);
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ВложеннаяБлокСхема(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	НаборЗаписей = РегистрыСведений.гбТекущиеБлокСхемыЧатов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Чат.Установить(Чат);
	НаборЗаписей.Прочитать();
		
	Запись = РегистрыСведений.гбТекущиеБлокСхемыЧатов.СоздатьМенеджерЗаписи();
	Запись.Чат = Чат;
	Запись.БлокСхема = СтрокаЭлемента.Алгоритм;
	Запись.БлокСхемаСтек = ДанныеБлокСхемы.БлокСхема;
	Запись.Подчиненные = СтрокаЭлемента.Подчиненные[0].Значение;
	Запись.Уровень = НаборЗаписей.Количество();
	Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
	Запись.Записать(Ложь);
	
	УстановитьТекущуюБлокСхемуБота(Бот, Чат, СтрокаЭлемента.Алгоритм);
	
	ВыполнитьНеподчиненныйЭлементБлокСхемы(Бот, Чат, Сообщение, Перечисления.гбТипыЭлементовБлокСхемы.Старт, Нагрузка);
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ПодтверждениеСчета(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	
	Если Сообщение.Свойство("pre_checkout_query") тогда
		Параметры = Новый Структура("pre_checkout_query_id, ok", Сообщение.id, Истина);
		Результат = ОтправитьКомандуТелеграм(Бот, "/answerPreCheckoutQuery", Параметры);
		
		Запись = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
		Запись.Чат = Чат;
		Запись.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
		Запись.Прочитать();
		СоответствиеЭлементовСписка = Запись.ЭлементыСписка.Получить();
		СоответствиеЭлементовСписка.Вставить("successful_payment", СтрокаЭлемента.Подчиненные[0]);
		Запись.ЭлементыСписка = Новый ХранилищеЗначения(СоответствиеЭлементовСписка);
		Запись.Записать(Истина);
	КонецЕсли;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ОтменаСчета(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	
	Параметры = Новый Структура("pre_checkout_query_id, ok, error_message", Сообщение.id, Ложь, Строка(Сообщение.ДанныеВыбора));
	ОтправитьКомандуТелеграм(Бот, "/answerPreCheckoutQuery", Параметры);
	
	УдалитьСообщение(Бот, Чат, Сообщение.ИдентификаторСообщения);
	
	Возврат 0;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Обработка(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	
	Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
	Параметры = Новый Структура;
	Если ЗначениеЗаполнено(СтрокаЭлемента.Алгоритм) тогда
		Текст = Строка(ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Текст, Нагрузка, Параметры));
	КонецЕсли;
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);

	Если не ПустаяСтрока(Текст) тогда
		//Если Сообщение.Свойство("СообщениеИзменяемое") и Сообщение.СообщениеИзменяемое <> Неопределено тогда
		//	Параметры.Вставить("Сообщение", Сообщение.СообщениеИзменяемое);
		//КонецЕсли;
		ОтправитьСообщение(Бот, Чат, Текст, Параметры);
	КонецЕсли;
	
	Возврат 0;
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Условие(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Перем Параметры;
	
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, , Нагрузка, Параметры);
	Если ТипЗнч(Результат) <> Тип("Булево") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки условия не корректен, ожидается тип 'Булево': %1.", СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	Возврат ?(Результат, 1, 0);
КонецФункции


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_Цикл(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Перем Параметры;
	
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, , Нагрузка, Параметры);
	ИмяПодчиненногоЭлемента = ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, 0);
	
	КэшКонтекста = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	КэшКонтекста.Вставить("гбОжидаемыеДанные_ОписаниеОшибки", "Синхронные операции в цикле запрещены");
	
	МассивОтправленных = Новый Массив;
	КэшКонтекста.Вставить("ОтправленныеСообщения", МассивОтправленных);
	//ДопустимыеТипы = Новый ОписаниеТипов("СписокЗначений, ТаблицаЗначений, Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие");
	
	Если ТипЗнч(Результат) = Тип("Число") тогда
		
		Для Данные = 0 по Результат Цикл
			ВремСообщение = СкопироватьСтруктуру(Сообщение);
			ВремСообщение.ДанныеВыбора = Данные;
			ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, ВремСообщение, ИмяПодчиненногоЭлемента, , Нагрузка);
		КонецЦикла;
		
	Иначе
		Попытка
			Для Каждого Данные из Результат Цикл
				Прервать;	
			КонецЦикла;
		Исключение
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
				СтрШаблон("Результат обработки алгоритма не корректен, ожидается тип 'Число' или Коллекция: %1.", СтрокаЭлемента.ИмяЭлемента)));
		КонецПопытки;
		
		Для Каждого Данные из Результат Цикл
			ВремСообщение = СкопироватьСтруктуру(Сообщение);
			ВремСообщение.ДанныеВыбора = Данные;
			ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, ВремСообщение, ИмяПодчиненногоЭлемента, , Нагрузка);
		КонецЦикла;
	КонецЕсли;

	КэшКонтекста.Удалить("гбОжидаемыеДанные_ОписаниеОшибки");
	КэшКонтекста.Вставить("ОтправленноеСообщение", МассивОтправленных);
	
	Возврат 1;
КонецФункции

Процедура ЗаполнитьСоответствиеЭлементовДереваЗначений(Соответствие, СтрокиДерева)
	СписокСтрок = Новый СписокЗначений;
	Для Каждого СтрокаДерева из СтрокиДерева цикл
		
		Ключ = XMLСтрока(Соответствие.Количество() + 1);
		СтрокаДерева.Идентификатор = Ключ;
		СтрокаСписка = СписокСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаДерева);
		СтрокаДерева.Представление = Строка(СтрокаСписка);
		Если СтрокаДерева.Строки.Количество() тогда
			Соответствие.Вставить(Ключ, Число(Ключ));
			ЗаполнитьСоответствиеЭлементовДереваЗначений(Соответствие, СтрокаДерева.Строки);
		Иначе
			Соответствие.Вставить(Ключ, СтрокаСписка);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ДеревоЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Если не ВводДанныхВДиалогеВозможен(Бот, Чат) тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));

	Параметры = Новый Структура;
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Результат, Нагрузка, Параметры);
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);
	
	Если ТипЗнч(Результат) <> Тип("ДеревоЗначений") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки элемента не корректен, ожидается тип 'Дерево значений': %1.", 
				СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	Если Ложь тогда 
		Результат = Новый ДеревоЗначений;
	КонецЕсли;

	Если Результат.Строки.Количество() тогда
		ИдентификаторыСообщений = Новый Массив();
		СообщениеЗаголовка = Неопределено;
		Если СтрокаЭлемента.Подчиненные.Количество() > 2 тогда
		
			СтруктураКлавиатуры = Новый Массив;
			
			РядКнопок = Новый Массив;
			Для н = 2 по СтрокаЭлемента.Подчиненные.Количество() - 1 Цикл
				СтрокаЭлемента.Подчиненные[н].Представление = ДобавитьЭмодзи(Строка(СтрокаЭлемента.Подчиненные[н]));
				РядКнопок.Добавить(Строка(СтрокаЭлемента.Подчиненные[н]));
			КонецЦикла;
			СтруктураКлавиатуры.Добавить(РядКнопок);

			ВремПараметры = СкопироватьСтруктуру(Параметры);
			ВремПараметры.Вставить("КлавиатураОтвета", СтруктураКлавиатуры);
					
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
			РезультатОтправки = ОтправитьСообщение(Бот, Чат, Текст, ВремПараметры);
			ИдентификаторыСообщений.Добавить(XMLСтрока(РезультатОтправки.message_id)); 
			СообщениеЗаголовка = РезультатОтправки.message_id;
			
			Структура = Новый Структура("Подсказка");
			ЗаполнитьЗначенияСвойств(Структура, СтрокаЭлемента);
			Если ПустаяСтрока(Структура.Подсказка) тогда
				ЗаголовокСписка = "<i>Выберите или нажмите кнопку меню</i>";
			Иначе
				ЗаголовокСписка = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Подсказка, Нагрузка);
			КонецЕсли;
		Иначе
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
			ЗаголовокСписка = Текст;
		КонецЕсли;
		
		
		
		ВремПараметры = СкопироватьСтруктуру(Параметры);

		СоответствиеЭлементовСписка = Новый Соответствие;
		СоответствиеЭлементовСписка.Вставить("0", 0);
		ИдентификаторСписка = Новый УникальныйИдентификатор;
		Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
		ЗаполнитьСоответствиеЭлементовДереваЗначений(СоответствиеЭлементовСписка, Результат.Строки);
		
		МассивКнопок = СформироватьКлавиатуруСообщенияДереваЗначений(ИдентификаторСписка, Результат, Сообщение.ДанныеВыбора);

		ВремПараметры.Вставить("КлавиатураСообщения", МассивКнопок);
		РезультатОтправки = ОтправитьСообщение(Бот, Чат, ЗаголовокСписка, ВремПараметры);
		ИдентификаторыСообщений.Добавить(XMLСтрока(РезультатОтправки.message_id)); 
		
		Запись = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
		Запись.Чат = Чат;
		Запись.ИдентификаторСписка = ИдентификаторСписка;
		Запись.ЭлементыСписка = Новый ХранилищеЗначения(СоответствиеЭлементовСписка);
		Запись.Данные = Новый ХранилищеЗначения(Результат);
		Запись.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСКартинками;
		Запись.ИдентификаторСообщения = РезультатОтправки.message_id;
		Запись.БлокСхема = ДанныеБлокСхемы.БлокСхема;
		Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
		Запись.Записать(Ложь);
		
		
		Если Результат.Строки.Количество() тогда
			Запись = РегистрыСведений.гбОжидаемыеДанные.СоздатьМенеджерЗаписи();
			Запись.Чат = Чат;
			Запись.ТипЭлемента = СтрокаЭлемента.ТипЭлемента;
			Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
			Запись.Подчиненные = ОбъектВ_JSON(СтрокаЭлемента.Подчиненные);
			Запись.ИдентификаторСообщения = СтрСоединить(ИдентификаторыСообщений, ",");
			//НаборЗаписей = РегистрыСведений.гбОжидаемыеДанные.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Чат.Установить(Чат);
			//НаборЗаписей.Прочитать();
			//Запись.Уровень = НаборЗаписей.Количество();
			Запись.Уровень = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись.БлокСхема = ДанныеБлокСхемы.БлокСхема;
			Запись.Записать(Ложь);
		КонецЕсли;

	КонецЕсли;
	
	Если не Результат.Строки.Количество() тогда
		
		Сообщение.ДанныеВыбора = NULL;
		
		Возврат ?(СтрокаЭлемента.Подчиненные.Количество() >= 3, 2, 0);
			
	КонецЕсли;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_СписокЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Если не ВводДанныхВДиалогеВозможен(Бот, Чат) тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Параметры = Новый Структура;
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Результат, Нагрузка, Параметры);
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки списка не корректен, ожидается тип 'Список значений': %1.", 
				СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	Если Ложь тогда 
		Результат = Новый СписокЗначений;
	КонецЕсли;

	Если Результат.Количество() тогда
		СообщениеЗаголовка = Неопределено;
		ИдентификаторыСообщений = Новый Массив();
		Если СтрокаЭлемента.Подчиненные.Количество() > 2 тогда
		
			СтруктураКлавиатуры = Новый Массив;
			РядКнопок = Новый Массив;
			Для н = 2 по СтрокаЭлемента.Подчиненные.Количество() - 1 Цикл
				СтрокаЭлемента.Подчиненные[н].Представление = ДобавитьЭмодзи(Строка(СтрокаЭлемента.Подчиненные[н]));
				РядКнопок.Добавить(Строка(СтрокаЭлемента.Подчиненные[н]));
			КонецЦикла;
			СтруктураКлавиатуры.Добавить(РядКнопок);

			Параметры = Новый Структура;
			Параметры.Вставить("КлавиатураОтвета", СтруктураКлавиатуры);
					
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
			РезультатОтправки = ОтправитьСообщение(Бот, Чат, Текст, Параметры);
			ИдентификаторыСообщений.Добавить(XMLСтрока(РезультатОтправки.message_id)); 
			СообщениеЗаголовка = РезультатОтправки.message_id;
			
			Структура = Новый Структура("Подсказка");
			ЗаполнитьЗначенияСвойств(Структура, СтрокаЭлемента);
			Если ПустаяСтрока(Структура.Подсказка) тогда
				ЗаголовокСписка = "<i>Выберите или нажмите кнопку меню</i>";
			Иначе
				ЗаголовокСписка = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Подсказка, Нагрузка);
			КонецЕсли;
		Иначе
			Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
			ЗаголовокСписка = Текст;
		КонецЕсли;
		
		
		ЕстьКартинки = Истина;
		Для Каждого ЭлементСписка из Результат цикл
			ЕстьКартинки = ЕстьКартинки и ЭлементСписка.Картинка.Вид = ВидКартинки.Абсолютная;
		КонецЦикла;
		
		Если не ЕстьКартинки тогда
			Параметры = Новый Структура;
			Если СообщениеЗаголовка <> Неопределено тогда
				//Параметры.Вставить("ОтветНа", СообщениеЗаголовка);
			КонецЕсли;                                             
			МножественныйВыбор = СтрокаЭлемента.Алгоритм.МножественныйВыбор
				или СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками;
			Параметры.Вставить("КлавиатураСообщения", 
				СформироватьКлавиатуруСообщения(Чат, ДанныеБлокСхемы.БлокСхема, Результат,
					СтрокаЭлемента.ТипЭлемента, , МножественныйВыбор,,,, Нагрузка));
				
			РезультатОтправки = ОтправитьСообщение(Бот, Чат, ЗаголовокСписка, Параметры);
			ИдентификаторыСообщений.Добавить(XMLСтрока(РезультатОтправки.message_id)); 
		Иначе
			СоответствиеЭлементовСписка = Новый Соответствие;
			ИдентификаторСписка = Новый УникальныйИдентификатор;
			Для Каждого ЭлементСписка из Результат цикл 
				Параметры = Новый Структура;
				Если СообщениеЗаголовка <> Неопределено тогда
					//Параметры.Вставить("ОтветНа", СообщениеЗаголовка);
				КонецЕсли;
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") и СтрНачинаетсяС(ЭлементСписка.Значение, "url:") тогда
					Кнопка = Новый Структура("text,url", ДобавитьЭмодзи(Строка(ЭлементСписка)), Сред(ЭлементСписка.Значение, 5));
				Иначе
					Ключ = СоответствиеЭлементовСписка.Количество();
					ИД = "PictItem:" + ИдентификаторСписка + "#" + XMLСтрока(Ключ);
					СоответствиеЭлементовСписка.Вставить(XMLСтрока(Ключ), ЭлементСписка);
					Кнопка = Новый Структура("text,callback_data", ДобавитьЭмодзи(Строка(ЭлементСписка)), ИД);
				КонецЕсли;
				РядКнопок = Новый Массив;
				РядКнопок.Добавить(Кнопка);
				МассивКнопок = Новый Массив;
				МассивКнопок.Добавить(РядКнопок);
				
				Параметры.Вставить("КлавиатураСообщения", МассивКнопок);
				РезультатОтправки = ОтправитьФайл(Бот, Чат, ЭлементСписка.Картинка, Параметры, Перечисления.гбТипыФайлов.Фото);
				ИдентификаторыСообщений.Добавить(XMLСтрока(РезультатОтправки.message_id)); 
			КонецЦикла;
			
			Запись = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
			Запись.Чат = Чат;
			Запись.ИдентификаторСписка = ИдентификаторСписка;
			Запись.ЭлементыСписка = Новый ХранилищеЗначения(СоответствиеЭлементовСписка);
			Запись.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСКартинками;
			Запись.ИдентификаторСообщения = РезультатОтправки.message_id;
			Запись.БлокСхема = ДанныеБлокСхемы.БлокСхема;
			Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
			Запись.Записать(Ложь);
			
		КонецЕсли;
		
		Если Результат.Количество() тогда
			Запись = РегистрыСведений.гбОжидаемыеДанные.СоздатьМенеджерЗаписи();
			Запись.Чат = Чат;
			Запись.ТипЭлемента = ?(ЕстьКартинки, 
				Перечисления.гбТипыЭлементовБлокСхемы.СписокСКартинками, СтрокаЭлемента.ТипЭлемента);
			Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
			Запись.Подчиненные = ОбъектВ_JSON(СтрокаЭлемента.Подчиненные);
			Запись.ИдентификаторСообщения = СтрСоединить(ИдентификаторыСообщений, ",");
			//НаборЗаписей = РегистрыСведений.гбОжидаемыеДанные.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Чат.Установить(Чат);
			//НаборЗаписей.Прочитать();
			//Запись.Уровень = НаборЗаписей.Количество();
			Запись.Уровень = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запись.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
			Запись.БлокСхема = ДанныеБлокСхемы.БлокСхема;
			Запись.Записать(Ложь);
		КонецЕсли;

	КонецЕсли;
	Если не Результат.Количество() тогда
		
		Сообщение.ДанныеВыбора = NULL;
		
		Возврат ?(СтрокаЭлемента.Подчиненные.Количество() >= 3, 2, 0);
			
	КонецЕсли;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_АсинхронныйСписокЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)
	Результат = Новый СписокЗначений;
	Параметры = Новый Структура;
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Результат, Нагрузка, Параметры);
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);

	Если ТипЗнч(Результат) <> Тип("СписокЗначений") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки списка не корректен, ожидается тип 'Список значений': %1.", 
				СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	Если Ложь тогда 
		Результат = Новый СписокЗначений;
	КонецЕсли;
	
	Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);

	ИдентификаторСписка = Новый УникальныйИдентификатор;
	СоответствиеЭлементовСписка = Новый Соответствие;
	МассивКнопок = Новый Массив;
	
	Если СтрокаЭлемента.Подчиненные.Количество() > 2 тогда
	
		СписокКнопок = Новый СписокЗначений;
		СтрокаКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(СтрокаКнопок);

		Для н = 2 по СтрокаЭлемента.Подчиненные.Количество() - 1 Цикл
			Представление = ДобавитьЭмодзи(Строка(СтрокаЭлемента.Подчиненные[н]));
			Если СтрНачинаетсяС(Представление, "|") тогда
				СтрокаКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(СтрокаКнопок);
				Представление = Сред(Представление, 2);
			КонецЕсли;
			СтрокаКнопок.Добавить(СтрокаЭлемента.Подчиненные[н].Значение, Представление);
		КонецЦикла;
		
		КлавиатураСообщенияДействия = СформироватьКлавиатуруСообщения(Чат, ДанныеБлокСхемы.БлокСхема, СписокКнопок,
				Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий, , Истина, ИдентификаторСписка,
				СоответствиеЭлементовСписка, МассивКнопок, Нагрузка);
		
	КонецЕсли;	
	
	КлавиатураСообщения = СформироватьКлавиатуруСообщения(Чат, ДанныеБлокСхемы.БлокСхема, Результат,
				Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений, Сообщение.ДанныеВыбора, Ложь, ИдентификаторСписка,
				СоответствиеЭлементовСписка, МассивКнопок, Нагрузка, "");
				
	Если КлавиатураСообщения.Свойство("гбОжидаемыеДанныеМеню") тогда
		КлавиатураСообщения.гбОжидаемыеДанныеМеню.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений;
		КлавиатураСообщения.гбОжидаемыеДанныеМеню.МножественныйВыбор = Истина;
		КлавиатураСообщения.гбОжидаемыеДанныеМеню.Подчиненные = ОбъектВ_JSON(СтрокаЭлемента.Подчиненные[1].Значение);
		КлавиатураСообщения.гбОжидаемыеДанныеМеню.Нагрузка = Новый ХранилищеЗначения(Нагрузка);
	КонецЕсли;				
				
	Параметры.Вставить("КлавиатураСообщения", КлавиатураСообщения);
	
	РезультатОтправки = ОтправитьСообщение(Бот, Чат, Текст, Параметры);
		
	Возврат 0;
КонецФункции

// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлемента	 - СтрокаТаблицыЗначений - Строка данных блок-схемы
// 
// Возвращаемое значение:
//	Число|Неопределено - индекс следующего выполняемого подчиненного блока
//
Функция ВыполнитьЭлементБлокСхемы_ПриемОплаты(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка)

	СписокКнопок = Новый СписокЗначений;
	Для н = 1 по СтрокаЭлемента.Подчиненные.Количество() - 1 цикл
		СписокКнопок.Добавить(?(н = 1, "pay:", "") + 
			ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, н), Строка(СтрокаЭлемента.Подчиненные[н]));		
	КонецЦикла;
	
	Результат = Новый Структура("Описание, ПозицииСчета, СписокКнопок, Параметры", "", Новый СписокЗначений, СписокКнопок, Новый Структура);
	
	Параметры = Новый Структура;
	Результат = ВыполнитьАлгоритм(Бот, Чат, Сообщение, СтрокаЭлемента, Результат, Нагрузка, Параметры);
	Параметры.Вставить("БлокСхема", ДанныеБлокСхемы.БлокСхема);
	Если ТипЗнч(Результат) <> Тип("Структура") тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеАлгоритма, 
			СтрШаблон("Результат обработки не корректен, ожидается тип 'Структура': %1.", 
				СтрокаЭлемента.ИмяЭлемента)));
	КонецЕсли;
	
	Текст = ПодставитьПараметрыВСтрокуШаблона(Бот, Чат, Сообщение, СтрокаЭлемента, СтрокаЭлемента.Текст, Нагрузка);
	
	ИдентификаторОплаты = Неопределено;
	
	РядКнопок = Новый СписокЗначений;
	РядКнопок.Добавить(СписокКнопок);
	МассивКнопок = СформироватьКлавиатуруСообщения(
		Чат, ДанныеБлокСхемы.БлокСхема, РядКнопок, СтрокаЭлемента.ТипЭлемента, Сообщение.ДанныеВыбора,, ИдентификаторОплаты,,, Нагрузка);
	Параметры.Вставить("КлавиатураСообщения", МассивКнопок);
	
	Параметры.Вставить("Чат", Чат);
	Параметры.Вставить("Название", Текст);
	Параметры.Вставить("Описание", Результат.Описание);
	Параметры.Вставить("payload", Строка(ИдентификаторОплаты));
	Параметры.Вставить("start_parameter", Строка(ИдентификаторОплаты));
	Параметры.Вставить("ПозицииСчета", Результат.ПозицииСчета);
	Параметры.Вставить("ТокенПровайдераОплаты", Бот.ПровайдерОплаты.Токен);
	Параметры.Вставить("Валюта", Бот.ПровайдерОплаты.КодВалюты);
	
	ОтправитьКомандуТелеграм(Бот, "/sendInvoice", Параметры);
	Возврат 0;
КонецФункции


// Получает строку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	СтрокаЭлементаИмяЭлемента	 - СтрокаТаблицыЗначений|Строка	 - искомое имя элемента если не строка таблицы
// 
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - найденная строка элемента
//
Функция ПолучитьСтрокуЭлементаБлокСхемы(ДанныеБлокСхемы, Бот, Чат, СтрокаЭлементаИмяЭлемента)

	Если ДанныеБлокСхемы = Неопределено тогда
		ДанныеБлокСхемы = ПолучитьДанныеБлокСхемыБота(Бот, Чат);
	КонецЕсли;
	
	Если ТипЗнч(СтрокаЭлементаИмяЭлемента) = Тип("Строка") тогда
		
		Если ПустаяСтрока(СтрокаЭлементаИмяЭлемента) тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
				"Имя элемента не определено."));
		КонецЕсли;
		
		СтрокаЭлемента = ДанныеБлокСхемы.ТаблицаЭлементов.Найти(СтрокаЭлементаИмяЭлемента, "ИмяЭлемента");
			
		Если СтрокаЭлемента = Неопределено тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.АнализБлокСхемы, 
				СтрШаблон("Строка элемента не найдена: %1.", СтрокаЭлементаИмяЭлемента)));
			
		КонецЕсли;
	Иначе
		СтрокаЭлемента = СтрокаЭлементаИмяЭлемента;
		
	КонецЕсли;

	Возврат СтрокаЭлемента;
КонецФункции // ПолучитьСтрокуЭлементаБлокСхемы()


// Выполняет обработку элемента блок схемы
//
// Параметры:
//	ДанныеБлокСхемы	 - ТаблицаЗначений	 - данные блок-схемы
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	Сообщение	 - Структура	 - полученное сообщение
//	СтрокаЭлементаИмяЭлемента	 - СтрокаТаблицыЗначений|Строка	 - указатель на элемент блок-схемы
//	ДанныеРекурсии				 - Произвольный	 - хранилище данных рекурсивного вызова
//
Процедура ВыполнитьЭлементБлокСхемы(Знач ДанныеБлокСхемы, Бот, Чат, Сообщение,
		СтрокаЭлементаИмяЭлемента, ДанныеРекурсии = Неопределено, Нагрузка)
		
	СтрокаЭлемента = ПолучитьСтрокуЭлементаБлокСхемы(ДанныеБлокСхемы, Бот, Чат, СтрокаЭлементаИмяЭлемента);
	
	Если СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Старт тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Старт(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Стоп тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Стоп(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Данные тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Данные(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Разделение 
		или СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПунктМеню тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Разделение_ПунктМеню(
			ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, ДанныеРекурсии, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ФоновоеЗадание тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ФоновоеЗадание(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ВложеннаяБлокСхема тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ВложеннаяБлокСхема(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПодтверждениеСчета тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ПодтверждениеСчета(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ОтменаСчета тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ОтменаСчета(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Обработка тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Обработка(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);

	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Условие тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Условие(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.Цикл тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_Цикл(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ДеревоЗначений тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ДеревоЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокЗначений
		или СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокСПометками тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_СписокЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.АсинхронныйСписокЗначений тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_АсинхронныйСписокЗначений(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.СписокДействий тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_СписокДействий(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	ИначеЕсли СтрокаЭлемента.ТипЭлемента = Перечисления.гбТипыЭлементовБлокСхемы.ПриемОплаты тогда
		ИндексПодчиненного = ВыполнитьЭлементБлокСхемы_ПриемОплаты(ДанныеБлокСхемы, Бот, Чат, Сообщение, СтрокаЭлемента, Нагрузка);
		
	КонецЕсли;	
	
	Если ИндексПодчиненного <> Неопределено тогда
		ИмяПодчиненногоЭлемента = ?(ТипЗнч(ИндексПодчиненного) = Тип("Строка"),
				ИндексПодчиненного, ПолучитьИмяПодчиненногоЭлемента(СтрокаЭлемента, ИндексПодчиненного));
		ВыполнитьЭлементБлокСхемы(ДанныеБлокСхемы, Бот, Чат, Сообщение, ИмяПодчиненногоЭлемента, ДанныеРекурсии, Нагрузка);
	КонецЕсли;
	
КонецПроцедуры


// Получает данные блок схемы бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//	БазовыйУровень - Булево - Если истина - возвращает данные базового уровня блок-схемы
// 
// Возвращаемое значение:
//	ТаблицаЗначений	 - данные блок-схемы 
//
Функция ПолучитьДанныеБлокСхемыБота(Бот, Чат)
	
	БлокСхема = ПолучитьТекущуюБлокСхемуБота(Бот, Чат);
		
	ДанныеБлокСхемы = БлокСхема.ДанныеБлокСхемы.Получить();	
	
	Если ДанныеБлокСхемы = Неопределено тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ПолучениеБлокСхемыБота,
			"Блок-схема бота не определена."));
	КонецЕсли;
	
	Возврат Новый Структура("БлокСхема, ТаблицаЭлементов", БлокСхема, ДанныеБлокСхемы);
КонецФункции // ПолучитьДанныеБлокСхемыБота()


// Получает текущую блок схему бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
// 
// Возвращаемое значение:
//  СправочникСсылка.гбБлокСхемы - текущая блок-схема
//
Функция ПолучитьТекущуюБлокСхемуБота(Бот, Чат, БазовыйУровень = NULL) Экспорт
	Перем Результат;

	Если БазовыйУровень = NULL тогда
		гбСерверПовтИсп.ПолучитьКэшКонтекста().Свойство("БлокСхема", Результат);
		
	ИначеЕсли БазовыйУровень = Ложь тогда
		НаборЗаписей = РегистрыСведений.гбТекущиеБлокСхемыЧатов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Чат.Установить(Чат);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() тогда
			ТЗНабораЗаписей = НаборЗаписей.Выгрузить();
			ТЗНабораЗаписей.Сортировать("Уровень убыв");
			Результат = ТЗНабораЗаписей[0].БлокСхема;
		Иначе
			Результат = Бот.БлокСхема;
		КонецЕсли;
		
	ИначеЕсли БазовыйУровень = Истина тогда
		Результат = Бот.БлокСхема;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Устанавливает текущую блок схему бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  БлокСхема	 - Справочник.гбБлокСхемы - текущая блок-схема
//
Процедура УстановитьТекущуюБлокСхемуБота(Бот, Чат, БлокСхема = Неопределено) Экспорт

	Если БлокСхема = Неопределено тогда
		БлокСхема = ПолучитьТекущуюБлокСхемуБота(Бот, Чат, Ложь);
	КонецЕсли;
	
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("БлокСхема", БлокСхема);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти


#Область ОбработкаВходящихОбновлений

#Область ПрограммныйИнтерфейс

// Получает обновления из очереди сообщений
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//
Процедура ПолучитьОбновленияИзОчереди(Бот)
	Попытка
		ПолучитьОбновленияИзОчередиИсполняющая(Бот);
	Исключение
		ОповеститьОбОшибке(Перечисления.гбСобытия.НеобработаннаяОшибка, ИнформацияОбОшибке());
		Если СтрНайти(ОписаниеОшибки(), "HTTP: 409. Conflict: terminated by other getUpdates request; make sure that only one bot instance is running") тогда
			гбСервер.ЗавершитьБесконечноеФоновоеЗадание(Бот);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры // ПолучитьОбновленияИзОчереди
	
// Точка входа обработки входящих данных
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//  Обновление	 - Структура	 - входящие данные
//
Процедура ОбработатьВходящееОбновление(Бот, Обновление) Экспорт
	
	Попытка
		ОбработатьВходящееОбновлениеИсполняющая(Бот, Обновление);
	Исключение
		ОповеститьОбОшибке(Перечисления.гбСобытия.НеобработаннаяОшибка, ИнформацияОбОшибке(), Обновление);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // ОбработатьВходящееОбновление
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает обновления из очереди сообщений
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//
Процедура ПолучитьОбновленияИзОчередиИсполняющая(Бот)

	УстановитьКонтекстДляОтладки(Бот, Неопределено);
	
	Запись = РегистрыСведений.гбРежимПолученияДанныхБота.СоздатьМенеджерЗаписи();
	Запись.Бот = Бот;
	Запись.Прочитать();
	
	Если Запись.Режим <> Перечисления.гбРежимыПолученияДанныхБота.long_polling тогда
		Возврат;
	КонецЕсли;

	НомерОбновления = РегистрыСведений.гбНомераОбновлений.ПолучитьНомерПолученного(Бот);
	Параметры = Новый Структура();
	Если НомерОбновления <> Неопределено Тогда
		Параметры.Вставить("offset", НомерОбновления + 1);
	КонецЕсли; 
	Параметры.Вставить("timeout", 60);
	
	Обновления = ВыполнитьЗапросТелеграм(Бот, "/getUpdates", Параметры);
	Если Обновления = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	

	Для каждого Обновление Из Обновления Цикл
		ОбработатьВходящееОбновление(Бот, Обновление);
	КонецЦикла; 
	

КонецПроцедуры // ПолучитьОбновленияИзОчереди


// Точка входа обработки входящих данных
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//  Обновление	 - Структура	 - входящие данные
//
Процедура ОбработатьВходящееОбновлениеИсполняющая(Бот, Обновление)
	Кэш = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	Кэш.Очистить();
	Кэш.Вставить("ВходящееОбновление", Обновление);
	
	УстановитьКонтекстДляОтладки(Бот, Неопределено);

	РегистрыСведений.гбНомераОбновлений.ЗаписатьНомерПолученного(Бот, Обновление.update_id);
	                                                                 	
	Если Обновление.Свойство("message") Тогда
		Сообщение = Обновление.message;
	ИначеЕсли Обновление.Свойство("callback_query") Тогда
		Сообщение = Обновление.callback_query;
		Сообщение.Вставить("chat", Обновление.callback_query.message.chat);
		Сообщение.Вставить("message_id", Обновление.callback_query.message.message_id);
		Сообщение.Вставить("callback_query");
		
	ИначеЕсли Обновление.Свойство("pre_checkout_query") Тогда
		Сообщение = Обновление.pre_checkout_query;
		Сообщение.Вставить("chat", Обновление.pre_checkout_query.from.id);
		Сообщение.Вставить("pre_checkout_query");
	Иначе
		Возврат;
	КонецЕсли; 
	
	Сообщение.Вставить("update_id", Обновление.update_id);
	
	Если не Сообщение.Свойство("text") Тогда
		Если Сообщение.Свойство("caption") Тогда
			Сообщение.Вставить("text", Сообщение.caption);
		ИначеЕсли Сообщение.Свойство("title") Тогда
			Сообщение.Вставить("text", Сообщение.title);
		Иначе
			Сообщение.Вставить("TEXT", Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
	Сообщение.Вставить("Бот", Бот);
	РазобратьКомандыСообщения(Бот, Сообщение);
	
	Попытка
	
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ВыполнитьРегистрациюЧата(Сообщение);
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		Если ТранзакцияАктивна() тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Сообщение.Чат = Неопределено Тогда
		Возврат;	
	//ИначеЕсли Сообщение.Чат.ТипЧата <> Перечисления.гбТипыЧатов.Приватный тогда
	//	Если Сообщение.Команды.Свойство("start") тогда
	//		ОтправитьСообщение(Бот, Сообщение.Чат, СтрШаблон("Привет, я бот %1
	//		|работать в чате типа %2 я пока не обучен", Бот, Сообщение.Чат.ТипЧата));
	//	КонецЕсли;
	//	Возврат;
	КонецЕсли;

	ОтправитьДанныеСистемеВзаимодействия(Бот, Сообщение.Чат, Обновление);
	
	ОбработатьВходящееСообщение(Сообщение);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбСообщенияКУдалению.ИдентификаторСообщения КАК ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.гбСообщенияКУдалению КАК гбСообщенияКУдалению
		|ГДЕ
		|	гбСообщенияКУдалению.УдалитьПосле < &ТекущаяДата
		|	И гбСообщенияКУдалению.Чат = &Чат";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Чат", Сообщение.Чат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдалитьСообщение(Бот, Сообщение.Чат, Выборка.ИдентификаторСообщения);
		Запись = РегистрыСведений.гбСообщенияКУдалению.СоздатьМенеджерЗаписи();
		Запись.Чат = Сообщение.Чат;
		Запись.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры // ОбработатьСообщение


// На основании данных сообщения формирует структуру команд сообщения
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Сообщение	 - Структура	 - полученное сообщение
//
Процедура РазобратьКомандыСообщения(Бот, Сообщение)
	Перем Текст;
	Команды = Новый Структура;
	Сообщение.Вставить("Команды", Команды);
	
	Если не Сообщение.Свойство("text", Текст) или не Сообщение.Свойство("entities") Тогда
		Возврат;
	КонецЕсли; 
	
	Для н = -Сообщение.entities.ВГраница() по 0 Цикл
		тЧастьСообщения = Сообщение.entities[-н];
		Если тЧастьСообщения.type = "bot_command" тогда 
			Подстрока = Сред(Текст, тЧастьСообщения.offset + 1);
			Текст = Лев(Текст, тЧастьСообщения.offset - 1);
			тКомандаАдресат = СтрРазделить(Сред(Подстрока, 2, тЧастьСообщения.length - 1), "@");
			Если тКомандаАдресат.Количество() = 1 
				или (тКомандаАдресат.Количество() = 2 и тКомандаАдресат[1] = Бот.Код) тогда
				тКоманда = тКомандаАдресат[0]; 
				тПараметр = Сред(Подстрока, тЧастьСообщения.length + 2);
				Попытка
					Команды.Вставить(тКоманда, СокрЛП(тПараметр));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // РазобратьКомандыСообщения


// Выполнить регистрацию чата - создает при необходимости элемент справочника гбЧаты 
//
// Параметры:
//	Сообщение	 - Структура	 - полученное сообщение
//
Процедура ВыполнитьРегистрациюЧата(Сообщение)

	Сообщение.Вставить("Чат", Неопределено);
	
	Если не Сообщение.Свойство("chat")Тогда
		Возврат;
	КонецЕсли; 
	
	ЧатИД = ПолучитьЧатИД(Сообщение.chat);
	УстановитьКонтекстДляОтладки(Сообщение.Бот, ЧатИД);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.гбЧаты");
	ЭлементБлокировки.УстановитьЗначение("Владелец", Сообщение.Бот);
	ЭлементБлокировки.УстановитьЗначение("ИД", ЧатИД);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
	
	Чат = Справочники.гбЧаты.НайтиПоРеквизиту("ИД", ЧатИД, , Сообщение.Бот);
	Если ЗначениеЗаполнено(Чат) Тогда
		Сообщение.Вставить("Чат", Чат);
	КонецЕсли; 

	Если Сообщение.Чат <> Неопределено тогда
		оЧат = Сообщение.Чат.ПолучитьОбъект(); 
	Иначе
		//Регистрация пользователя по номеру телефона
		оЧат = Справочники.гбЧаты.СоздатьЭлемент();
		оЧат.Владелец = Сообщение.Бот;
		оЧат.ИД = ЧатИД;
		//оЧат.Пользователь = 
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Если Сообщение.chat.type = "private" тогда
		Если оЧат.ЭтоНовый() и не Сообщение.Команды.Свойство("start") Тогда
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ИнициализацияДанныхЧата, 
				"Данные чата не найдены. Введите команду /start", , Сообщение.chat.id));
		КонецЕсли; 
		Реквизиты.Вставить("ТипЧата", Перечисления.гбТипыЧатов.Приватный);
		chat = Новый Структура("first_name, username");
		ЗаполнитьЗначенияСвойств(chat, Сообщение.chat);
		Реквизиты.Вставить("Наименование", chat.first_name);
		Реквизиты.Вставить("Код", chat.username);
	ИначеЕсли Сообщение.chat.type = "group" Тогда
		Реквизиты.Вставить("ТипЧата", Перечисления.гбТипыЧатов.Группа);
		chat = Новый Структура("title");
		ЗаполнитьЗначенияСвойств(chat, Сообщение.chat);
		оЧат.Наименование = chat.title;
		Реквизиты.Вставить("Наименование", chat.title);
	ИначеЕсли Сообщение.chat.type = "supergroup" Тогда
		Реквизиты.Вставить("ТипЧата", Перечисления.гбТипыЧатов.Супергруппа);
		chat = Новый Структура("title");
		ЗаполнитьЗначенияСвойств(chat, Сообщение.chat);
		Реквизиты.Вставить("Наименование", chat.title);
	Иначе
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.РегистрацияЧата, 
			"Тип чата не поддерживается: " + Сообщение.chat.type, , Сообщение.chat.id));
	КонецЕсли; 
	
	Для каждого КлючЗначение из Реквизиты цикл
		Если оЧат[КлючЗначение.Ключ] <> КлючЗначение.Значение тогда
			оЧат[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
		Если оЧат.Модифицированность() тогда
			оЧат.Записать();

			Сообщение.Чат = оЧат.Ссылка;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВыполнитьРегистрациюЧата

#КонецОбласти

#КонецОбласти


#Область РаботаССистемойВзаимодействия

#Область ПрограммныйИнтерфейс

// Отправляет сообщение оператору - пользователю ИБ через систему взаимодействия
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  ИмяПользователя	 - Строка	 - Имя пользователя ИБ
//  ТекстСообщения	 - Строка	 -  отправляемый текст
//
Процедура ОтправитьСообщениеОператору(Бот, Чат, ИмяПользователя, ТекстСообщения) Экспорт
	
	Если не гбСерверПовтИсп.ПолучитьПараметрыИнтеграцииСистемыВзаимодействия(Бот).Используется тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ПодключениеОператора, 
			"Интеграция с системой взаимодействия не включена", , Бот));
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователяСВ 
		= гбСерверПовтИсп.ПолучитьИдентификаторПользователяСистемыВзаимодействия(ИмяПользователя);
	Обсуждение = ПолучитьОбсуждениеСистемыВзаимодействия(Бот, Чат, ИдентификаторПользователяСВ);
	Обсуждение.Участники.Добавить(ИдентификаторПользователяСВ);
	Обсуждение.Записать();
	
	Если не ПустаяСтрока(ТекстСообщения) тогда
		ДанныеСообщения = Новый Структура("from, chat, date", 
			Новый Структура("first_name, id, last_name", Чат.Код, Чат.ИД, Чат.Наименование, "private"),
			Новый Структура("first_name, id, is_bot, username", Бот.Наименование, Бот.ИД, Истина, Бот.Код),
			Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000) - ('19700101' - '00010101'));

		ДанныеСообщения.Вставить("text", ТекстСообщения);
			
		ОтправитьДанныеСистемеВзаимодействия(Бот, Чат, ДанныеСообщения);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет сообщение в систему взаимодействия
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  Данные	 - Структура	 - данные сообщения
// 
Процедура ОтправитьДанныеСистемеВзаимодействия(Бот, Чат, Данные)
	Попытка
	
		ОтправитьДанныеСистемеВзаимодействия_Исполняющая(Бот, Чат, Данные);	
	
	Исключение
		ОповеститьОбОшибке(Перечисления.гбСобытия.ОтправкаДанныхСистемеВзаимодействия, ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры	


// Отправляет сообщение в систему взаимодействия
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  Данные	 - Структура	 - данные сообщения
// 
// Возвращаемое значение:
//	СообщениеСистемыВзаимодействия	 - отправленное сообщение
//
Функция ОтправитьДанныеСистемеВзаимодействия_Исполняющая(Бот, Чат, Данные)
	Перем Сообщение, Текст;
	
	Если ТипЗнч(Бот) <> Тип("СправочникСсылка.гбБоты") тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Данные) <> Тип("Структура") тогда
		Возврат Неопределено;
	ИначеЕсли не гбСерверПовтИсп.ПолучитьПараметрыИнтеграцииСистемыВзаимодействия(Бот).Используется тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.Свойство("message") тогда
		Сообщение = Данные.message;
	Иначе
		Сообщение = Данные;
	КонецЕсли;
		
	Если Сообщение = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Сообщение.Свойство("text") и Сообщение.text <> Неопределено тогда
		Текст = Сообщение.text;
		
	ИначеЕсли Сообщение.Свойство("invoice") тогда
		Текст = Сообщение.invoice.title;
		
	ИначеЕсли Сообщение.Свойство("photo") тогда
		ВремДанные = ("caption, photo");
		
	ИначеЕсли Сообщение.Свойство("file") тогда
		ВремДанные = ("caption, file");
		
	ИначеЕсли Сообщение.Свойство("contact") тогда
		ВремДанные = ("contact");

	ИначеЕсли Сообщение.Свойство("location") тогда
		ВремДанные = ("location");
		
	ИначеЕсли Сообщение.Свойство("data_key") тогда
		ВремДанные = ("data_key");

	КонецЕсли;
	
	Если ТипЗнч(ВремДанные) = Тип("Строка") тогда
		ВремДанные = Новый Структура(ВремДанные);
		ЗаполнитьЗначенияСвойств(ВремДанные, Сообщение); 
	КонецЕсли;
	Если ТипЗнч(ВремДанные) = Тип("Структура") тогда
		Текст = ПредставлениеЗначения(ВремДанные);
	КонецЕсли;
	
	Если Данные.Свойство("reply_markup") и Данные.reply_markup.Свойство("inline_keyboard") тогда
		МассивСтрок = Новый Массив;
		Для Каждого стр из Данные.reply_markup.inline_keyboard цикл
			МассивКолонок = Новый Массив;
			Для Каждого кол из стр цикл
				МассивКолонок.Добавить(кол.text);
			КонецЦикла;
			МассивСтрок.Добавить(СтрСоединить(МассивКолонок, " | "));
		КонецЦикла;
		Текст = Текст + Символы.ПС + СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСообщения = Новый Структура("from, chat, date");
	ЗаполнитьЗначенияСвойств(ДанныеСообщения, Сообщение);
	ДанныеСообщения.Вставить("text", Текст);
	
	Обсуждение = ПолучитьОбсуждениеСистемыВзаимодействия(Бот, Чат,
		?(ДанныеСообщения.from.Свойство("is_bot") и ДанныеСообщения.from.is_bot, Неопределено, 
			гбСерверПовтИсп.ПолучитьИдентификаторПользователяСистемыВзаимодействия(ДанныеСообщения.from)));
			
	ЕстьПользовательИБ = Ложь;		
	Для Каждого ИдентификаторПользователяСВ из Обсуждение.Участники Цикл
		ПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторПользователяСВ);
		Если ЗначениеЗаполнено(ПользовательСВ.ИдентификаторПользователяИнформационнойБазы) тогда
			ЕстьПользовательИБ = Истина;
		КонецЕсли;
		
	КонецЦикла;		
	
	УстановитьПривилегированныйРежим(Истина);
	Сообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
	Сообщение.Автор = гбСерверПовтИсп.ПолучитьИдентификаторПользователяСистемыВзаимодействия(ДанныеСообщения.from);
	Сообщение.Текст = ДанныеСообщения.text;
	Сообщение.Записать();
	
	Если ЕстьПользовательИБ тогда
		СоздатьМенюСообщенияСистемыВзаимодействия(Сообщение.Идентификатор, Новый Структура("Бот, Чат", Бот, Чат));
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции


// Ищет и создает при необходимости обсуждение системы взаимодействия
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  ПользовательСВ	 - ПользовательСистемыВзаимодействия	 - участник обсуждения
// 
// Возвращаемое значение:
//  ОбсуждениеСистемыВзаимодействия - найденное или созданное обсуждение
//
Функция ПолучитьОбсуждениеСистемыВзаимодействия(Бот, Знач Чат, ПользовательСВ = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Чат) = Тип("Число") тогда
		Чат = Справочники.гбЧаты.НайтиПоРеквизиту("ИД", Чат, , Бот);
	КонецЕсли; 
	Если не ЗначениеЗаполнено(Чат) Тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ОпределениеИдентификатораОбсуждения,
			"Чат не найден по идентификатору"));	
	КонецЕсли; 
	
	КлючОбсуждения = Строка(Чат.УникальныйИдентификатор());
	
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
	
	Если Обсуждение = Неопределено тогда
		Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		Обсуждение.Заголовок = Строка(Чат);
		Обсуждение.Ключ = КлючОбсуждения;
		Обсуждение.Отображаемое = Истина;
		Обсуждение.Записать();
	КонецЕсли;
	
	ОбсуждениеИзменено = Ложь;
	Если не Обсуждение.Отображаемое тогда
		Обсуждение.Отображаемое = Истина;
		ОбсуждениеИзменено = Истина;
	КонецЕсли;
	Если ПользовательСВ <> Неопределено и не Обсуждение.Участники.Содержит(ПользовательСВ) тогда
		Обсуждение.Участники.Добавить(ПользовательСВ);
		ОбсуждениеИзменено = Истина;
	КонецЕсли;
	Если ОбсуждениеИзменено тогда
		Обсуждение.Записать();
	КонецЕсли;
	
	Возврат Обсуждение;
КонецФункции


// Создает меню сообщения системы взаимодействия на основании данных чата
//
// Параметры:
//  ИдентификаторСообщения	 - УникальныйИдентификатор	 - Идентификатор сообщения системы взаимодействия
//  ДанныеЧата				 - Структура	 - данные чата телеграм
//
Процедура СоздатьМенюСообщенияСистемыВзаимодействия(ИдентификаторСообщения, ДанныеЧата) 
	Перем ДействияОператора;
	УстановитьПривилегированныйРежим(Истина);

	
	БлокСхема = ПолучитьТекущуюБлокСхемуБота(ДанныеЧата.Бот, ДанныеЧата.Чат, Ложь);
	ДействияОператора = БлокСхема.ДействияОператора.Получить();	
	
	//
	//НаборЗаписей = РегистрыСведений.гбТекущиеБлокСхемыЧатов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Чат.Установить(ДанныеЧата.Чат);
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() тогда
	//	Для каждого Запись Из НаборЗаписей Цикл
	//	
	//		Если Запись.Уровень = (НаборЗаписей.Количество() - 1) тогда
	//			ДействияОператора = Запись.БлокСхема.ДействияОператора.Получить();
	//			Прервать;
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//Иначе
	//	ДействияОператора = ДанныеЧата.Бот.БлокСхема.ДействияОператора.Получить();	
	//КонецЕсли;
		
	
	Если ДействияОператора = Неопределено или не ДействияОператора.Количество() тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = СистемаВзаимодействия.ПолучитьСообщение(ИдентификаторСообщения);
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Сообщение.Обсуждение);
	ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
	ОтборСообщений.Количество = 5;
	ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Убыв;
	ОтборСообщений.Обсуждение = Обсуждение.Идентификатор;
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
	ТекстПустогоДействия = "_";
	Для н = 1 по Сообщения.ВГраница() Цикл
		Если Сообщения[н].Действия.Количество() тогда
			Если Сообщения[н].Действия[0].Представление = ТекстПустогоДействия тогда
				Прервать;
			Иначе
				Сообщения[н].Действия.Очистить();
				Сообщения[н].Действия.Добавить(Неопределено, ТекстПустогоДействия);
				Сообщения[н].Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Сообщения.Количество() и не Сообщения[0].Действия.Количество() тогда
		Сообщение = Сообщения[0];
		Для каждого ЭлементСписка Из ДействияОператора Цикл
			
			Значение = Новый Структура("Бот, Чат, ИмяЭлемента", ДанныеЧата.Бот, ДанныеЧата.Чат, ЭлементСписка.Значение);
			
			Сообщение.Действия.Добавить(Значение, ЭлементСписка.Представление);
		
		КонецЦикла;
		
		Сообщение.Записать();
	КонецЕсли;
	
КонецПроцедуры // СоздатьМенюСообщения()



// Отправляет сообщение системы взаимодействия в чат телеграм
//
// Параметры:
//  ИдентификаторСообщения	 - УникальныйИдентификатор	 - Идентификатор сообщения системы взаимодействия
//  ТекстСообщения			 - Строка	 - отправляемый текст
//  КлючОбсуждения			 - Строка	 -  Ключ обсуждения системы взаимодействия
//
Процедура ОтправитьСообщениеСистемыВзаимодействияВЧатТелеграм(ИдентификаторСообщения, ТекстСообщения, КлючОбсуждения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбЧаты.Ссылка КАК Чат,
		|	гбЧаты.Владелец КАК Бот
		|ИЗ
		|	Справочник.гбЧаты КАК гбЧаты
		|ГДЕ
		|	гбЧаты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.гбЧаты.ПолучитьСсылку(Новый УникальныйИдентификатор(КлючОбсуждения)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		
		гбСервер.ОтправитьСообщение(Выборка.Бот, Выборка.Чат, ТекстСообщения,
			Новый Структура("НеОтправлятьСистемеВзаимодействия", Истина));
			
		СоздатьМенюСообщенияСистемыВзаимодействия(ИдентификаторСообщения,
			Новый Структура("Бот, Чат", Выборка.Бот, Выборка.Чат));

	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СвязьСТелеграм

#Область ПрограммныйИнтерфейс

// Получает бота по переданному входящему токену
//
// Параметры:
//  ВходящийТокен	 - 	Строка - токен
// 
// Возвращаемое значение:
//  Справочник.гбБоты - найденный бот
//
Функция ПолучитьБотаПоТокену(ВходящийТокен) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гбРежимПолученияДанныхБота.Бот КАК Бот
	|ИЗ
	|	РегистрСведений.гбРежимПолученияДанныхБота КАК гбРежимПолученияДанныхБота
	|ГДЕ
	|	гбРежимПолученияДанныхБота.ВходящийТокен = &ВходящийТокен";
	Запрос.УстановитьПараметр("ВходящийТокен", ВходящийТокен);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Бот;
	КонецЕсли; 
	
	
	Если Результат = Неопределено тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ПоискБотаПоТокену, "Бот не найден", , ВходящийТокен));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьБота()

// Отправляет команду в API телеграм
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//  Команда			 - Строка	 - передаваемая команда
//  ПараметрыЗапроса - Структура	 - параметры команды
// 
// Возвращаемое значение:
//  Структура - ответ телеграм
//
Функция ОтправитьКомандуТелеграм(Бот, Команда, ПараметрыЗапроса) Экспорт
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ОтправитьКомандуТелеграм_Команда", Команда);
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ОтправитьКомандуТелеграм_ПараметрыЗапроса", ПараметрыЗапроса);

	ПоляПараметров = Новый Структура;	
	ПоляПараметров.Вставить("Чат", "chat_id");
	ПоляПараметров.Вставить("ИзЧата", "from_chat_id");
	ПоляПараметров.Вставить("Текст", "text");
	ПоляПараметров.Вставить("Состояние", "action");
	ПоляПараметров.Вставить("Заголовок", "caption");
	ПоляПараметров.Вставить("Описание", "description");
	ПоляПараметров.Вставить("Название", "title");
	ПоляПараметров.Вставить("Форматирование", "parse_mode");
	ПоляПараметров.Вставить("ОтветНа", "reply_to_message_id");
	ПоляПараметров.Вставить("Долгота", "longitude");
	ПоляПараметров.Вставить("Широта", "latitude");
	ПоляПараметров.Вставить("Сообщение", "message_id");
	ПоляПараметров.Вставить("НомерТелефона", "phone_number");
	ПоляПараметров.Вставить("Имя", "first_name");
	ПоляПараметров.Вставить("ИдентификаторФайла", "file_id");
	ПоляПараметров.Вставить("Фото", "photo");
	ПоляПараметров.Вставить("Видео", "video");
	ПоляПараметров.Вставить("Аудио", "audio");
	ПоляПараметров.Вставить("Документ", "document");
	ПоляПараметров.Вставить("Сертификат", "certificate");
	ПоляПараметров.Вставить("Адрес", "url");
	ПоляПараметров.Вставить("ОтключитьУведомление", "disable_notification");
	//ПоляПараметров.Вставить("Наг-рузка", "payload"); 
	ПоляПараметров.Вставить("ТокенПровайдераОплаты", "provider_token");
	ПоляПараметров.Вставить("Валюта", "currency");
	ПоляПараметров.Вставить("ПозицииСчета", "prices");
	
	Параметры = Новый Структура;
	Для Каждого КлючЗначение из ПоляПараметров Цикл
		Если ПараметрыЗапроса.Свойство(КлючЗначение.Ключ) тогда
			Параметры.Вставить(КлючЗначение.Значение, ПараметрыЗапроса[КлючЗначение.Ключ]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючЗначение из ПараметрыЗапроса Цикл
		Если гбКлиентСервер.ТолькоЛатиницаВСтроке(КлючЗначение.Ключ, "_") тогда
			Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
		
	Если Параметры.Свойство("chat_id") Тогда
		Параметры.chat_id = ПолучитьЧатИД(Параметры.chat_id);
	КонецЕсли;
	Если Параметры.Свойство("from_chat_id") Тогда
		Параметры.from_chat_id = ПолучитьЧатИД(Параметры.from_chat_id);
	КонецЕсли;
	Если Параметры.Свойство("message_id") Тогда
		Параметры.message_id = ПолучитьСообщениеИД(Параметры.message_id);
	КонецЕсли;
	Если Параметры.Свойство("reply_to_message_id") Тогда
		Если Параметры.reply_to_message_id = Неопределено тогда
			Параметры.Удалить("reply_to_message_id");
		Иначе
			Параметры.reply_to_message_id = ПолучитьСообщениеИД(Параметры.reply_to_message_id);
		КонецЕсли;
	КонецЕсли;
	Если (Параметры.Свойство("text") или Параметры.Свойство("caption") или  Параметры.Свойство("title")) 
		и не Параметры.Свойство("parse_mode") Тогда
		Параметры.Вставить("parse_mode", "html");
	КонецЕсли;
	Если Параметры.Свойство("parse_mode") и ПустаяСтрока(Параметры.parse_mode) тогда
		Параметры.Удалить("parse_mode");
	КонецЕсли;
	
	Если СтрНачинаетсяС(Команда, "/send") и не Параметры.Свойство("disable_notification") тогда
		Параметры.Вставить("disable_notification", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("prices") тогда
		prices = Новый Массив;
		Для каждого ЭлементСписка Из Параметры.prices Цикл
			prices.Добавить(Новый Структура("label, amount", ЭлементСписка.Представление, ЭлементСписка.Значение));
		КонецЦикла;
		Параметры.prices = prices;
	КонецЕсли;

	Если Параметры.Свойство("media") и ТипЗнч(Параметры.media) = Тип("Структура") тогда
		Если не Параметры.media.Свойство("caption") и Параметры.Свойство("caption") тогда
			Параметры.media.Вставить("caption", Параметры.caption);
		КонецЕсли;
		Если не Параметры.media.Свойство("parse_mode") и Параметры.Свойство("parse_mode") тогда
			Параметры.media.Вставить("parse_mode", Параметры.parse_mode);
		КонецЕсли;                      
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("КлавиатураОтвета") тогда
		Клавиатура = Новый Структура("keyboard, resize_keyboard, one_time_keyboard, hide_keyboard, input_field_placeholder", 
			ПараметрыЗапроса.КлавиатураОтвета, Истина, Ложь, Истина, "");
			
		ЗаполнитьЗначенияСвойств(Клавиатура, ПараметрыЗапроса);
			
		Если ТипЗнч(ПараметрыЗапроса.КлавиатураОтвета) = Тип("СписокЗначений") тогда
			СписокКнопок = Новый СписокЗначений;
			МассивКнопок = Новый Массив;
			Для Каждого ЭлементСписка из ПараметрыЗапроса.КлавиатураОтвета цикл 
				ВложенныйСписок = ?(ТипЗнч(ЭлементСписка.Значение) <> Тип("СписокЗначений"),
				гбКлиентСервер.ЗначениеВМассиве(ЭлементСписка), ЭлементСписка.Значение);
				РядКнопок = Новый Массив;
				МассивКнопок.Добавить(РядКнопок);
				Для Каждого ЭлементСписка из ВложенныйСписок цикл
					Текст = ДобавитьЭмодзи(Строка(ЭлементСписка));
					РядКнопок.Добавить(Текст);
					СписокКнопок.Добавить(ЭлементСписка.Значение, Текст);
				КонецЦикла;
			КонецЦикла;

			Клавиатура.keyboard = МассивКнопок;
			
		ИначеЕсли ПараметрыЗапроса.КлавиатураОтвета = Неопределено тогда
			Клавиатура = Новый Структура("remove_keyboard", Истина);
				
		КонецЕсли;

		Параметры.Вставить("reply_markup", ОбъектВ_JSON(Клавиатура));
		
	ИначеЕсли ПараметрыЗапроса.Свойство("КлавиатураСообщения") и ПараметрыЗапроса.Свойство("Чат") тогда
		Если ТипЗнч(ПараметрыЗапроса.КлавиатураСообщения) = Тип("СписокЗначений") тогда
			БлокСхема = ?(ПараметрыЗапроса.Свойство("БлокСхема"),
				ПараметрыЗапроса.БлокСхема, ПолучитьТекущуюБлокСхемуБота(Бот, ПараметрыЗапроса.Чат));
			ПараметрыЗапроса.КлавиатураСообщения = 
				СформироватьКлавиатуруСообщения(ПараметрыЗапроса.Чат, БлокСхема, ПараметрыЗапроса.КлавиатураСообщения, "iKbdItem:",,,,,,);
		КонецЕсли;
		Если ТипЗнч(ПараметрыЗапроса.КлавиатураСообщения) = Тип("Структура") тогда
			Клавиатура = Новый Структура("inline_keyboard", ПараметрыЗапроса.КлавиатураСообщения.МассивКнопок);
		Иначе
			Клавиатура = Новый Структура("inline_keyboard", ПараметрыЗапроса.КлавиатураСообщения);
		КонецЕсли;
		Параметры.Вставить("reply_markup", ОбъектВ_JSON(Клавиатура)); 
		
	КонецЕсли;
	
	
	Результат = ВыполнитьЗапросТелеграм(Бот, Команда, Параметры);
	
	
	Если ТипЗнч(Результат) = Тип("Массив") и ПараметрыЗапроса.Свойство("Чат") тогда
		КэшКонтекста = гбСерверПовтИсп.ПолучитьКэшКонтекста();
		КэшКонтекста.Вставить("ОтправленноеСообщение", Результат);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") и ПараметрыЗапроса.Свойство("Чат") тогда
		ОбработкаОшибки = Неопределено;                                                      
		гбСерверПовтИсп.ПолучитьКэшКонтекста().Свойство("ОбработкаОшибки", ОбработкаОшибки);
		Если ОбработкаОшибки <> Истина тогда
			КэшКонтекста = гбСерверПовтИсп.ПолучитьКэшКонтекста();
			КэшКонтекста.Вставить("ОтправленноеСообщение", Результат);
			Если КэшКонтекста.Свойство("ОтправленныеСообщения") тогда
				КэшКонтекста.ОтправленныеСообщения.Добавить(Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("reply_markup")	и СтрНайти(Параметры.reply_markup, """keyboard"":") тогда
			УдалитьКлавиатуруОтвета(Бот, ПараметрыЗапроса.Чат);
			
			Запись = РегистрыСведений.гбСообщенияСМеню.СоздатьМенеджерЗаписи();
			Запись.Чат = ПараметрыЗапроса.Чат;
			Запись.ИдентификаторСообщения = Результат.message_id;
			Запись.Записать();

			ДанныеКлавиатурыОтвета = Новый Структура("text, reply_markup");
			ЗаполнитьЗначенияСвойств(ДанныеКлавиатурыОтвета, Параметры);
			
			Результат.Вставить("ДанныеКлавиатурыОтвета", ДанныеКлавиатурыОтвета);
			ПолученноеСообщение().Вставить("ЕстьКлавиатураОтвета", Истина);
			
		ИначеЕсли ПараметрыЗапроса.Свойство("КлавиатураСообщения") тогда

			Если ТипЗнч(ПараметрыЗапроса.КлавиатураСообщения) = Тип("Структура")
				и ПараметрыЗапроса.КлавиатураСообщения.Свойство("гбОжидаемыеДанныеМеню") тогда
				Запись = РегистрыСведений.гбОжидаемыеДанныеМеню.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗапроса.КлавиатураСообщения.гбОжидаемыеДанныеМеню);
				Запись.ИдентификаторСообщения = Результат.message_id;
				//Запись.БлокСхема = ПолучитьТекущуюБлокСхемуБота(Бот, Запись.Чат);
				Запись.Записать(Истина);
			КонецЕсли;

		КонецЕсли;
		
		Если ОбработкаОшибки <> Истина и не ПараметрыЗапроса.Свойство("НеОтправлятьСистемеВзаимодействия") тогда
			ОтправитьДанныеСистемеВзаимодействия(Бот, ПараметрыЗапроса.Чат, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("message_id") тогда
		Если ПараметрыЗапроса.Свойство("Автоудаление") тогда
			АвтоудалениеСообщения(ПараметрыЗапроса.Чат, Результат, ПараметрыЗапроса.Автоудаление);
			//Если ПараметрыЗапроса.Автоудаление <> Неопределено тогда
			//	Запись = РегистрыСведений.гбСообщенияКУдалению.СоздатьМенеджерЗаписи();
			//	Запись.Чат = ПараметрыЗапроса.Чат;
			//	Запись.ИдентификаторСообщения = Результат.message_id;
			//	Запись.УдалитьПосле = ?(ТипЗнч(ПараметрыЗапроса.Автоудаление) = Тип("Дата"), 
			//		ПараметрыЗапроса.Автоудаление, ТекущаяДата() + ПараметрыЗапроса.Автоудаление);
			//	Запись.Записать(Ложь);
			//КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЗапроса.Свойство("КлавиатураОтвета") и ТипЗнч(ПараметрыЗапроса.КлавиатураОтвета) = Тип("СписокЗначений") тогда
			Результат.Вставить("КлавиатураОтвета", СписокКнопок);
		КонецЕсли;
	КонецЕсли;
	
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Удалить("ОтправитьКомандуТелеграм_Команда");
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Удалить("ОтправитьКомандуТелеграм_ПараметрыЗапроса");

	Возврат Результат;
КонецФункции


// Планирование автоудаления сообщения
//
// Параметры:
//	Чат          - Справочник.гбЧаты -	 ссылка на справочник чата
//  Сообщение	 - Структура|Число	 - удаляемое сообщение
//  УдалитьПосле	 - Дата|Число	 - Когда или через сколько секунд удалить
//
Процедура АвтоудалениеСообщения(Чат, Сообщение, УдалитьПосле) Экспорт
	Если УдалитьПосле <> Неопределено тогда
		Запись = РегистрыСведений.гбСообщенияКУдалению.СоздатьМенеджерЗаписи();
		Запись.Чат = Чат;
		Запись.ИдентификаторСообщения = ПолучитьСообщениеИД(Сообщение);
		Запись.УдалитьПосле = ?(ТипЗнч(УдалитьПосле) = Тип("Дата"), УдалитьПосле, ТекущаяДата() + УдалитьПосле);
		Запись.Записать(Истина);
	КонецЕсли;		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает идентификатор чата
//
// Параметры:
//  Чат	 - Произвольный	 - данные чата
// 
// Возвращаемое значение:
//  Число - идентификатор чата
//
Функция ПолучитьЧатИД(Чат)
		
	Возврат Число(?(ТипЗнч(Чат) = Тип("Число") или ТипЗнч(Чат) = Тип("Строка"), Чат, 
		?(ТипЗнч(Чат) = Тип("Структура"), Чат.id, Чат.ИД)));

КонецФункции // ПолучитьЧатИД()


// Получает идентификатор сообщения
//
// Параметры:
//  Сообщение	 - Произвольный	 - данные сообщения 
// 
// Возвращаемое значение:
//  Число - идентификатор сообщения
//
Функция ПолучитьСообщениеИД(Сообщение)

	Если ТипЗнч(Сообщение) = Тип("Структура") или ТипЗнч(Сообщение) = Тип("ФиксированнаяСтруктура")Тогда
		Возврат Сообщение.message_id;
		
	ИначеЕсли не ЗначениеЗаполнено(Сообщение) тогда
		Возврат 0;
		
	КонецЕсли; 
	
	Возврат Число(Сообщение);

КонецФункции // ПолучитьСообщениеИД()

// Отправляет запрос телеграм-боту
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//  Команда			 - Строка	 - передаваемая команда
//  Параметры - Структура	 - параметры команды
// 
// Возвращаемое значение:
//  Структура - ответ телеграм
//
Функция ВыполнитьЗапросТелеграм(Бот, Команда, Параметры = Неопределено)
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ВыполнитьЗапросТелеграм_Команда", Команда);
	гбСерверПовтИсп.ПолучитьКэшКонтекста().Вставить("ВыполнитьЗапросТелеграм_ПараметрыЗапроса", Параметры);
		
	Соединение = Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	URL = "bot" + СокрЛП(Бот.Токен) + Команда;
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	
	ПоляФайлов = СтрРазделить("photo, document, video, audio, certificate, media", ", ", Ложь);
	
	Если Параметры <> Неопределено тогда
		Для Каждого Поле из ПоляФайлов Цикл
			Если Параметры.Свойство(Поле) тогда
				ДанныеФайла = Параметры[Поле];
				Параметры.Удалить(Поле);
				ИмяПараметраФайл = Поле;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Если ДанныеФайла <> Неопределено тогда
		ДанныеМедиаИсх = ?(ТипЗнч(ДанныеФайла) = Тип("Массив"),
			ДанныеФайла, гбКлиентСервер.ЗначениеВМассиве(ДанныеФайла));
	КонецЕсли;
	Если ТипЗнч(ДанныеМедиаИсх) = Тип("Массив") тогда
		
		ДанныеФайлов = Новый Массив;
		ДанныеМедиа = Новый Массив;
		
		Для Каждого МедиаФайл из ДанныеМедиаИсх цикл
			Если ТипЗнч(МедиаФайл) = Тип("Структура") тогда
				ВремДанныеФайла = Новый Структура;
				Если МедиаФайл.Свойство("type") тогда
					ВремДанныеФайла.Вставить("type", МедиаФайл.type);
				ИначеЕсли Параметры.Свойство("type") тогда
					ВремДанныеФайла.Вставить("type", Параметры.type);
				КонецЕсли;
				Если МедиаФайл.Свойство("ДвоичныеДанные") тогда
					ИД = Новый УникальныйИдентификатор;
					ДанныеФайлов.Добавить(Новый Структура("Ключ, Значение, ИмяФайла", ИД, МедиаФайл.ДвоичныеДанные, МедиаФайл.ИмяФайла));
					ВремДанныеФайла.Вставить(ИмяПараметраФайл, "attach://" + ИД);
				Иначе
					ВремДанныеФайла.Вставить(ИмяПараметраФайл, МедиаФайл[ИмяПараметраФайл]);				
				КонецЕсли;
				Если МедиаФайл.Свойство("caption") тогда
					ВремДанныеФайла.Вставить("caption", МедиаФайл.caption);         
				ИначеЕсли Параметры.Свойство("caption") тогда
					ВремДанныеФайла.Вставить("caption", Параметры.caption);					
				КонецЕсли;
				Если МедиаФайл.Свойство("parse_mode") тогда
					ВремДанныеФайла.Вставить("parse_mode", МедиаФайл.parse_mode);
				ИначеЕсли Параметры.Свойство("parse_mode") тогда
					ВремДанныеФайла.Вставить("parse_mode", Параметры.parse_mode);					
				КонецЕсли;
			Иначе
				ВремДанныеФайла = Новый Структура("type", Параметры.type);
				ВремДанныеФайла.Вставить(ИмяПараметраФайл, МедиаФайл);				
				Если Параметры.Свойство("caption") тогда
					ВремДанныеФайла.Вставить("caption", Параметры.caption);					
				КонецЕсли;
				Если Параметры.Свойство("parse_mode") тогда
					ВремДанныеФайла.Вставить("parse_mode", Параметры.parse_mode);					
				КонецЕсли;
			КонецЕсли;
			ДанныеМедиа.Добавить(ВремДанныеФайла);			
		КонецЦикла;
		
		Если ТипЗнч(ДанныеФайла) = Тип("Массив") тогда
			Параметры.Вставить(ИмяПараметраФайл, ДанныеМедиа);
		ИначеЕсли ИмяПараметраФайл = "media" тогда 
			Параметры.Вставить(ИмяПараметраФайл, ДанныеМедиа[0]);
		Иначе
			Для Каждого КлючЗначение из ДанныеМедиа[0] Цикл
				Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	//Если Параметры.Свойство("media") и Параметры.Свойство("type") тогда
	//	Если ТипЗнч(Параметры.media) = Тип("Структура") тогда
	//		ДанныеФайла = Параметры.media;		
	//		ИмяПараметраФайл = "media";
	//		Параметры.media = "attach://media";// + ДанныеФайла.ИмяФайла;;
	//	КонецЕсли;
	//	
	//	МассивПолейМедиа = СтрРазделить("media, type", ", ", Ложь);
	//	Если Параметры.Свойство("caption") тогда
	//		МассивПолейМедиа.Добавить("caption");
	//	КонецЕсли;
	//	ДанныеМедиа = Новый Структура(СтрСоединить(МассивПолейМедиа, ","));
	//	ЗаполнитьЗначенияСвойств(ДанныеМедиа, Параметры);
	//	Для Каждого Поле из МассивПолейМедиа Цикл
	//		Параметры.Удалить(Поле);	
	//	КонецЦикла;
	//	Параметры.Вставить("media", ДанныеМедиа);	
	//	
	//КонецЕсли;
	
	Если ДанныеФайлов <> Неопределено и ДанныеФайлов.Количество() тогда
		Поток = HTTPЗапрос.ПолучитьТелоКакПоток();
		ЗаписьДанных = Новый ЗаписьДанных(Поток, КодировкаТекста.UTF8, , , , Ложь);
		Разделитель = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);

		// Сборка сообщения - простые данные
		ЗаписьДанных.ЗаписатьСтроку("");
		Для Каждого КлючЗначение Из Параметры Цикл
			ТекстСообщения = СтрШаблон("--%1
					|Content-Disposition: form-data; name=""%2""
					|
					|%3",
				Разделитель, КлючЗначение.Ключ, 
				?(ТипЗнч(КлючЗначение.Значение) = Тип("Структура") или ТипЗнч(КлючЗначение.Значение) = Тип("Массив"),
					ОбъектВ_JSON(КлючЗначение.Значение), XMLСтрока(КлючЗначение.Значение)));
			ЗаписьДанных.ЗаписатьСтроку(ТекстСообщения);
		КонецЦикла;
		
		// Сборка сообщения — двоичные данные
		Для Каждого ДанныеФайла из ДанныеФайлов цикл
			ТекстСообщения = СтрШаблон("--%1
					|Content-Disposition: form-data; name=""%2""; filename=""%3"";",
				Разделитель, ДанныеФайла.Ключ, ДанныеФайла.ИмяФайла);

			ЗаписьДанных.ЗаписатьСтроку(ТекстСообщения);       
			
			ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/octet-stream" + Символы.ПС);
			
			ЗаписьДанных.Записать(ДанныеФайла.Значение);
			ЗаписьДанных.ЗаписатьСтроку("");

		КонецЦикла;
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
		ЗаписьДанных.Закрыть();
		
	Иначе
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(ОбъектВ_JSON(Параметры), , ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли; 
	
	Тело = Неопределено;
	Если Тело <> Неопределено тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	КонецЕсли;
	
	Попытка
		ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Кэш = гбСерверПовтИсп.ПолучитьКэшКонтекста();
		Кэш.Вставить("HTTPЗапрос", Новый Структура("Заголовки, Тело", HTTPЗапрос.Заголовки, HTTPЗапрос.ПолучитьТелоКакСтроку()));
		ЗаписьЖурналаРегистрации("ГрафиБот." + Перечисления.гбСобытия.ЗапросHTTP, УровеньЖурналаРегистрации.Примечание,,
			ПредставлениеЗначения(HTTPЗапрос.Заголовки),
			HTTPЗапрос.ПолучитьТелоКакСтроку());	
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ВыполнениеЗапроса, 
			ОписаниеОшибки(), ИнформацияОбОшибке(), Параметры));
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Попытка
			ОтветСервера = ОбъектИз_JSON(ОтветHTTP.ПолучитьТелоКакСтроку());
		Исключение
		КонецПопытки;
		
		ОписаниеОшибки = ?(ТипЗнч(ОтветСервера) = Тип("Структура") и ОтветСервера.Свойство("description"),
			ОтветСервера.description, "");
			
		Если СтрНачинаетсяС(Команда, "/editMessage")
			и ОписаниеОшибки = "Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message" тогда
			ОтветСервера.Вставить("result", Параметры);
			ОтветСервера.Вставить("ok", Истина);
			
		ИначеЕсли Команда = "/deleteMessage" 
			и (ОписаниеОшибки = "Bad Request: message to delete not found"
				или ОписаниеОшибки = "Bad Request: message can't be deleted for everyone") тогда

			ОтветСервера.Вставить("result", Неопределено);
			ОтветСервера.Вставить("ok", Истина);
		Иначе
			
			ЗаписьЖурналаРегистрации("ГрафиБот." + Перечисления.гбСобытия.ЗапросHTTP, УровеньЖурналаРегистрации.Примечание,,
				"HTTP " + ОтветHTTP.КодСостояния + Символы.ПС + ПредставлениеЗначения(HTTPЗапрос.Заголовки),
				HTTPЗапрос.ПолучитьТелоКакСтроку());	
			ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ОтветHTTP,
				"HTTP: " + ОтветHTTP.КодСостояния
					+ ?(не ПустаяСтрока(ОписаниеОшибки),". " + ОписаниеОшибки, ""), , 
				ОтветHTTP.ПолучитьТелоКакСтроку()));

		КонецЕсли;
	Иначе
		ОтветСервера = ОбъектИз_JSON(ОтветHTTP.ПолучитьТелоКакСтроку());
			
	КонецЕсли; 
	
	КэшКонтекста = гбСерверПовтИсп.ПолучитьКэшКонтекста();
	КэшКонтекста.Вставить("ВыполнитьЗапросТелеграм_ОтветСервера");
	КэшКонтекста.Удалить("ВыполнитьЗапросТелеграм_Команда");
	КэшКонтекста.Удалить("ВыполнитьЗапросТелеграм_ПараметрыЗапроса");
	
	ПроверитьОтвет(ОтветСервера);

	Возврат ОтветСервера.result;

КонецФункции


// Проверяет ответ на наличие флагов корректного ответа
//
// Параметры:
//  ОтветСервера - Структура - ответ телеграм
//
Процедура ПроверитьОтвет(ОтветСервера)

	Результат = Неопределено;
	Если не ОтветСервера.Свойство("ok", Результат) Тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ПроверкаОтвета, "Не найдено поле 'ok'.", , Результат));
	КонецЕсли; 

	Если Результат <> Истина Тогда
		ВызватьИсключение(ДанныеОшибки(Перечисления.гбСобытия.ПроверкаОтвета, 
			"[" + ОтветСервера.error_code + "] " + ОтветСервера.description, , Результат));
	КонецЕсли; 

КонецПроцедуры // ПроверитьОтвет()

#КонецОбласти

#КонецОбласти


#Область Эмодзи

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Разбирает текст, заменяет подстановки эмодзи на соответствующие коды символов
//
// Параметры:
//  Текст	 - Строка	 - обрабатываемый текст
// 
// Возвращаемое значение:
//  Строка - обработанный текст
//
Функция ДобавитьЭмодзи(Знач Текст)

	Результат = "";
	
	тПоз = Найти(Текст, "U+");
	Пока тПоз > 0 Цикл
		Результат = Результат + Лев(Текст, тПоз-1);
		Текст = Сред(Текст, тПоз+2);
		
		тПоз = Найти(Текст, "+");
		Если тПоз > 0 Тогда
			Символ = Лев(Текст, тПоз-1);
			Текст = Сред(Текст, тПоз+1);
			Результат = Результат + ЭмодзиПоКоду(Символ);
		КонецЕсли; 
		
		тПоз = Найти(Текст, "U+");
	КонецЦикла; 
	
	Результат = Результат + Текст;
	
	Результат = СтрЗаменить(Результат, "¶", Символы.ПС);
	Возврат Результат;

КонецФункции // ДобавитьЭмодзи()


// Возвращает строку с эмодзи по коду
//
// Параметры:
//  Код	 - Строка	 - Код эмодзи
// 
// Возвращаемое значение:
//  Строка - строка с эмодзи
//
Функция ЭмодзиПоКоду(Код)

	КодЭмодзи = ЧислоHexToDec(Код);
	КодВUTF8 = ПолучитьUTF8(КодЭмодзи);
	Возврат РаскодироватьСтроку(КодВUTF8, СпособКодированияСтроки.КодировкаURL);

КонецФункции // ЭмодзиПоКоду()


// Преобразует число в hex формат
//
// Параметры:
//  Исходное	 - Число	 - исходное значение
//  НужноЦифр	 - Число	 - требуемая разрядность
// 
// Возвращаемое значение:
//  Строка - hex представление числа
//
Функция ЧислоDecToHex(Знач Исходное, Знач НужноЦифр = 2)
	ЧислаБайтHex = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
	Если НужноЦифр = 2 Тогда
		Возврат Сред(ЧислаБайтHex, Исходное * 2 + 1, 2);
	КонецЕсли; 
	
	ЧислаHex = "0123456789ABCDEF";
	Результат = "";
	Для Цифр = 1 По НужноЦифр Цикл
		ТекЦифра = Исходное % 16;
		Исходное = Цел(Исходное / 16);
		Результат = Сред(ЧислаHex, ТекЦифра + 1, 1) + Результат;
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ЧислоDecToHex()

 
// Преобразует число из hex формат в dec
//
// Параметры:
//  Исходное	 - Число	 - исходное значение
// 
// Возвращаемое значение:
//  Число - значение числа
//
Функция ЧислоHexToDec(Знач Исходное)

	ЧислаHex = "0123456789ABCDEF";

	Результат = 0;
	Множитель = 1;
	Позиция = СтрДлина(Исходное);
	Пока Позиция > 0 Цикл
		тЦифра = СтрНайти(ЧислаHex, Сред(Исходное,Позиция,1));
		Если не тЦифра тогда
			ВызватьИсключение("Недопустимое значение параметра: (1)");
		КонецЕсли;
		Результат = Результат + (тЦифра - 1) * Множитель;
		Множитель = Множитель * 16;
		Позиция = Позиция - 1;
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ЧислоHexToDec()


// Преобразует код символа в последовательность байтов в соответствии с форматом UTF8
//
// Параметры:
//  Код	 - Число	 - код символа
// 
// Возвращаемое значение:
//  Строка - преобразованное значение
//
Функция ПолучитьUTF8(Знач Код)
	
	ИтогСтр = "";
	
	Если Код < 128 Тогда
		ИтогСтр = ИтогСтр + "%" + ЧислоDecToHex(Код);
	Иначе
		///////		Конвертация Unicode в UTF-8 в полном соответствии со спецификацией!  (http://ru.wikipedia.org/wiki/UTF-8)
		Делитель = 32;	Нашлёпка = 8;	Код16 = "";
		Пока Делитель > 4 Цикл
			//////	Установка следующих за первым байтов
			ТекБайт = Код % 64;
			Код16 = "%" + ЧислоDecToHex(128 + ТекБайт) + Код16;
			
			Код		= Цел(Код / 64);
			//////	Проверка на закрывающий байт
			Если Код < Делитель Тогда
				Код16 = "%" + ЧислоDecToHex((Нашлёпка-2) * Делитель + Код) + Код16;
				Прервать;
			КонецЕсли;
			//////	Переход к следующему уровню закрытия
			Делитель = Делитель / 2;
			Нашлёпка = Нашлёпка * 2;
		КонецЦикла; 
		ИтогСтр = ИтогСтр + Код16;
	КонецЕсли; 
	
	Возврат ИтогСтр;
	
КонецФункции // ПолучитьUTF8()

#КонецОбласти

#КонецОбласти


#Область ПолучениеОбновлений

#Область ПрограммныйИнтерфейс

// Устанавливает режим получения данных бота
//
// Параметры:
//	Бот						 - Справочник.гбБоты - бот, для которого устанавливаются параметры
//	РежимПолученияДанныхБота - Перечисление.гбРежимыПолученияДанныхБота - требуемый режим
//	Адрес					 - Строка	 - адрес webhook
//	Сертификат				 - Строка	 - сертификат, в случае использования самозаверенного сертификата
//
Процедура УстановитьРежимПолученияДанныхБота(Бот, Режим, АдресWebhook = Неопределено, Сертификат = Неопределено) Экспорт
	
	РежимПолученияДанныхБота = РегистрыСведений.гбРежимПолученияДанныхБота.СоздатьМенеджерЗаписи();
	РежимПолученияДанныхБота.Бот = Бот;
	РежимПолученияДанныхБота.Режим = Режим;
	
	// отключим webhook
	Попытка
	
		УстановитьWebhook(Бот, "");
		
	Исключение
		ОповеститьОбОшибке(Перечисления.гбСобытия.УстановкаWebhook, ИнформацияОбОшибке());
			
		ВызватьИсключение(гбСервер.ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если РежимПолученияДанныхБота.Режим = Перечисления.гбРежимыПолученияДанныхБота.webhook тогда
		РежимПолученияДанныхБота.ТребуемыйАдресWebhook = АдресWebhook;
		РежимПолученияДанныхБота.ТребуемыйСертификат = Сертификат;
		
		ВходящийТокен = СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		РезультатURL = АдресWebhook + "/hs/telegram/" + ВходящийТокен;
		РезультатKey = Сертификат;
		
		Попытка
		
			УстановитьWebhook(Бот, РезультатURL, РезультатKey);
			
			РежимПолученияДанныхБота.ВходящийТокен = ВходящийТокен;
			РежимПолученияДанныхБота.АдресWebhook = АдресWebhook;
			РежимПолученияДанныхБота.ИспользуетсяСамозаверенныйСертификат = НЕ ПустаяСтрока(Сертификат);
			
		Исключение
			ОповеститьОбОшибке(Перечисления.гбСобытия.УстановкаWebhook, ИнформацияОбОшибке());
				
			ВызватьИсключение(гбСервер.ПолучитьОписаниеОшибкиИзДанныхОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		РежимПолученияДанныхБота.ВходящийТокен = Неопределено;
		РежимПолученияДанныхБота.АдресWebhook = Неопределено;
		РежимПолученияДанныхБота.ИспользуетсяСамозаверенныйСертификат = Неопределено;
		РежимПолученияДанныхБота.ТребуемыйАдресWebhook = Неопределено;
		РежимПолученияДанныхБота.ТребуемыйСертификат = Неопределено;
	КонецЕсли;
	
	РежимПолученияДанныхБота.Записать();

	
	Если РежимПолученияДанныхБота.Режим = Перечисления.гбРежимыПолученияДанныхБота.long_polling тогда
		гбСервер.ЗапуститьБесконечноеФоновоеЗадание();
	Иначе
		гбСервер.ЗавершитьБесконечноеФоновоеЗадание(РежимПолученияДанныхБота.Бот);
	КонецЕсли;
		Если РежимПолученияДанныхБота.Режим = Перечисления.гбРежимыПолученияДанныхБота.ПустаяСсылка() тогда
			РегистрыСведений.гбНомераОбновлений.ОчиститьНомерПолученного(Бот);
		КонецЕсли;	

КонецПроцедуры


// Запускает бесконечное фоновое задание получения данных с сервера телеграм
//
Процедура ЗапуститьБесконечноеФоновоеЗадание() Экспорт
	ФЗ = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	Если ФЗ <> Неопределено и СтрНачинаетсяС(ФЗ.ИмяМетода, "гбСервер.") тогда
		Возврат;
	КонецЕсли;
	
	ПерезапуститьБесконечноеФоновоеЗадание();
КонецПроцедуры


// Ищет фоновое задание обрабатывающее бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
// 
// Возвращаемое значение:
//  ФоновоеЗадание - найденное фоновое задание
//
Функция ПолучитьФоновоеЗаданиеБота(Бот)
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", Строка(Бот.УникальныйИдентификатор()));
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", "гбСервер.БесконечноеФоновоеЗадание");
	
	Для Каждого ФЗ из ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор) цикл
		Возврат ФЗ;
	КонецЦикла;
	
КонецФункции


// Завершает бесконечное фоновое задание обрабатывающее бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
//
Процедура ЗавершитьБесконечноеФоновоеЗадание(Бот) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ФЗ = ПолучитьФоновоеЗаданиеБота(Бот);
	Если ФЗ <> Неопределено тогда
		ФЗ.Отменить();
	КонецЕсли;
КонецПроцедуры


// Получает состояние задания обрабатывающее бота
//
// Параметры:
//	Бот          - Справочник.гбБоты - обрабатываемый бот
// 
// Возвращаемое значение:
//  Булево - Истина если задание активно
//
Функция ПолучитьСостояниеФоновогоЗадания(Бот) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ФЗ = ПолучитьФоновоеЗаданиеБота(Бот);

	Возврат ФЗ <> Неопределено;
КонецФункции

// Исполняющая процедура бесконечного фонового задания
//
// Параметры:
//  ИдентификаторБота	 - УникальныйИдентификатор	 - идентификатор ссылки бота
//
Процедура БесконечноеФоновоеЗадание(ИдентификаторБота) Экспорт
	УстановитьПривилегированныйРежим(Истина);
		
	ВремяНачалаСеанса = ТекущаяДата();
	Бот = Справочники.гбБоты.ПолучитьСсылку(ИдентификаторБота);
	ЭтоФайловаяБаза = (Найти(СтрокаСоединенияИнформационнойБазы(), "File=") = 1);
	ТаймаутПерезапуска = ?(ЭтоФайловаяБаза, 60, 600);
	
	Пока (ТекущаяДата() - ВремяНачалаСеанса) < ТаймаутПерезапуска Цикл
		ПолучитьОбновленияИзОчереди(Бот);	
	КонецЦикла;
	
	ИдентификаторФЗ = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание().УникальныйИдентификатор;
	
	Параметры = Новый Массив;
	Параметры.Добавить(ИдентификаторФЗ);
	Параметры.Добавить(ИдентификаторБота);
	ФоновыеЗадания.Выполнить("гбСервер.ПерезапуститьБесконечноеФоновоеЗадание", Параметры, 
		Строка(ИдентификаторФЗ), "Перезапуск задания получения данных Телеграм-бота");
КонецПроцедуры

// Перезапускает бесконечное фоновое задание - дожидается завершения задания-родителя и запускает новое
//
// Параметры:
//  ИдентификаторРодителя	 - УникальныйИдентификатор	 -  Идентификатор родительского фонового задания
//  ИдентификаторБота	 - УникальныйИдентификатор	 - идентификатор ссылки бота
//
Процедура ПерезапуститьБесконечноеФоновоеЗадание(ИдентификаторРодителя = Неопределено, ИдентификаторБота = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторРодителя <> Неопределено тогда
		ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРодителя);
		ФЗ.ОжидатьЗавершения();
	КонецЕсли;
	
	ЭтоФайловаяБаза = (Найти(СтрокаСоединенияИнформационнойБазы(), "File=") = 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гбРежимПолученияДанныхБота.Бот КАК Бот
	               |ИЗ
	               |	РегистрСведений.гбРежимПолученияДанныхБота КАК гбРежимПолученияДанныхБота
	               |ГДЕ
	               |	НЕ гбРежимПолученияДанныхБота.Бот.ПометкаУдаления
	               |	И гбРежимПолученияДанныхБота.Режим = ЗНАЧЕНИЕ(Перечисление.гбРежимыПолученияДанныхБота.long_polling)
	               |	И (гбРежимПолученияДанныхБота.Бот = &Бот
	               |			ИЛИ &Бот = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Бот", ?(ИдентификаторБота = Неопределено, 
		Неопределено, Справочники.гбБоты.ПолучитьСсылку(ИдентификаторБота)));
		
	ИмяМетода = "гбСервер.БесконечноеФоновоеЗадание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФЗ = ПолучитьФоновоеЗаданиеБота(Выборка.Бот);
		Если ФЗ = Неопределено тогда
			Параметры = Новый Массив;
			Параметры.Добавить(Выборка.Бот.УникальныйИдентификатор());
			Попытка
				ФоновыеЗадания.Выполнить(ИмяМетода, Параметры,
					Строка(Выборка.Бот.УникальныйИдентификатор()), "Получение данных Телеграм-бота");
			Исключение
			КонецПопытки;
		КонецЕсли;
			
		Если ЭтоФайловаяБаза тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает Webhook
//
// Параметры:
//	Бот						 - Справочник.гбБоты - бот, для которого устанавливаются параметры
//	Адрес					 - Строка	 - адрес webhook
//	Сертификат				 - Строка	 - сертификат, в случае использования самозаверенного сертификата
//
Процедура УстановитьWebhook(Бот, Адрес, Сертификат = Неопределено) 
		
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", Адрес);
	Если не ПустаяСтрока(Сертификат) тогда
		//Файлы = Новый Соответствие;
		//Файлы.Вставить(Новый Файл("certificate.key"), ПолучитьДвоичныеДанныеИзСтроки(Сертификат)); 
		Параметры.Вставить("Сертификат", Новый Структура("ИмяФайла, ДвоичныеДанные",
			Новый Файл("certificate.key"), ПолучитьДвоичныеДанныеИзСтроки(Сертификат)));
	КонецЕсли;
	
	гбСервер.ОтправитьКомандуТелеграм(Бот, "/setWebhook", Параметры);	

КонецПроцедуры // УстановитьWebhook()


#КонецОбласти

#КонецОбласти

#Область СохранениеВосстановлениеНастроек

#Область ПрограммныйИнтерфейс

// Сохраняет значение в хранилище общих настроек для всех пользователей
//
// Параметры:
//  КлючОбъекта		 - Строка	 - ключ объекта хранилища
//  КлючНастроек	 - Строка	 - ключ настроек
//  Настройки		 - Произвольный	 - сохраняемая настройка
//  ОписаниеНастроек - Строка	 - описание настроек
//
Процедура СохранитьЗначениеВХранилищеОбщихНастроек(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек = "") Экспорт
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, "<Все пользователи>");
	
КонецПроцедуры

// Получает значение из хранилища общих настроек
//
// Параметры:
//  КлючОбъекта			 - Строка	 - ключ объекта хранилища
//  КлючНастроек		 - Строка	 - ключ настроек
//  ЗначениеПоУмолчанию	 - Произвольный	 - значение настройки по-умолчанию
//  ОписаниеНастроек	 - Строка	 - получает описание настройки
// 
// Возвращаемое значение:
//  Произвольный - полученное значение
//
Функция ПолучитьЗначениеИзХранилищаОбщихНастроек(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек = "") Экспорт
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, "<Все пользователи>");
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти



#Область ПроверкаОбновлений

#Область ПрограммныйИнтерфейс

// Точка входа фонового задания проверки наличие обновлений
//
// Параметры:
//  КлючЛицензирования	 - Строка	 - ключ лицензирования
//
Процедура ПроверитьОбновление(КлючЛицензирования) Экспорт
	
	HTTPЗапрос = Новый HTTPЗапрос("/update/gbc/.version");
	
	ПотокДанных = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(ПотокДанных, "UTF-8");
	ЗаписьТекста.Записать(КлючЛицензирования + ":" + КлючЛицензирования);
	ЗаписьТекста.Закрыть();
	ДД = ПотокДанных.ЗакрытьИПолучитьДвоичныеДанные();
	
	HTTPСоединение = Новый HTTPСоединение("prod.v8-pr.ru",,,,, 10, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Если HTTPОтвет.КодСостояния = 200 тогда
		Сообщить(HTTPОтвет.ПолучитьТелоКакСтроку());
	Иначе
		ВызватьИсключение("HTTP " + HTTPОтвет.КодСостояния + " " + HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
