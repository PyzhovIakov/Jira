#Область ПрограммныйИнтерфейс


// Возвращает структуру кэш данных
// 
// Возвращаемое значение:
//  Структура - данные кэша
//
Функция ПолучитьКэшКонтекста() Экспорт
	Возврат Новый Структура;
КонецФункции


// Возвращает свойства расширения
//
// Параметры:
//  Свойства - Строка	 - требуемые свойства 
// 
// Возвращаемое значение:
//  Структура - свойства расширения
//
Функция ПолучитьМетаданныеРасширения(Свойства) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Мета = Новый ОбъектМетаданныхКонфигурация(РасширенияКонфигурации.Получить(Новый Структура("Имя", "ГрафиБотГрафическийКонструкторТелеграмБотов"))[0].ПолучитьДанные());
	Результат = Новый Структура(Свойства);
	ЗаполнитьЗначенияСвойств(Результат, Мета);
	
	Возврат Результат;
	
КонецФункции


// Получает параметры интеграции системы взаимодействия
//
// Параметры:
//  Бот	 - Справочник.гбБоты	 - Бот
// 
// Возвращаемое значение:
//  РегистрыСведений.гбПараметрыИнтеграцииСистемыВзаимодействия.МенеджерЗаписи - параметры интеграции системы взаимодействия
//
Функция ПолучитьПараметрыИнтеграцииСистемыВзаимодействия(Бот) Экспорт
	
	Запись = РегистрыСведений.гбПараметрыИнтеграцииСистемыВзаимодействия.СоздатьМенеджерЗаписи();
	Запись.Бот = Бот;
	Запись.Прочитать();
	Возврат Запись;
		
КонецФункции


// Функция - Получить идентификатор пользователя системы взаимодействия
//
// Параметры:
//  Пользователь	 - Строка|Структура	 - Имя пользователя ИБ или данные пользователя Телеграм
// 
// Возвращаемое значение:
//  ИдентификаторПользователяСистемыВзаимодействия - идентификатор пользователя системы взаимодействия
//
Функция ПолучитьИдентификаторПользователяСистемыВзаимодействия(Пользователь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Пользователь) = Тип("Структура") тогда
		Запись = РегистрыСведений.гбПараметрыПользователейСистемыВзаимодействия.СоздатьМенеджерЗаписи();
		Запись.ИД = Пользователь.id;
		Запись.Прочитать();
		Если не ЗначениеЗаполнено(Запись.ИдентификаторПользователя) тогда
			ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя();
			ПользовательСВ.Имя = ?(Пользователь.Свойство("username"), Пользователь.username, Пользователь.first_name);
			ПользовательСВ.ПолноеИмя = СокрЛП(Пользователь.first_name + " " 
				+ ?(Пользователь.Свойство("last_name"), Пользователь.last_name, ""));
			ПользовательСВ.КлючСопоставления = XMLСтрока(Пользователь.id);
			ПользовательСВ.Записать();
			
			Запись.ИдентификаторПользователя = Новый УникальныйИдентификатор(Строка(ПользовательСВ.Идентификатор));
			Запись.ИД = Пользователь.id;
			Запись.Записать();
		КонецЕсли;
		ИдентификаторПользователяСВ = Новый ИдентификаторПользователяСистемыВзаимодействия(Запись.ИдентификаторПользователя);
	Иначе
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь);
		
		Попытка
			ИдентификаторПользователяСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.УникальныйИдентификатор);
		Исключение
			ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
			ПользовательСВ.Записать();
			ИдентификаторПользователяСВ = ПользовательСВ.Идентификатор;
		КонецПопытки;
	КонецЕсли;	
	Возврат ИдентификаторПользователяСВ;
КонецФункции

// Определяет доступность указанной роли текущему пользователю.
//
// Параметры:
//  ИмяРоли	 - Строка	 - Название роли как она задана в конфигураторе
// 
// Возвращаемое значение:
//  Булево - Истина - роль доступна текущему пользователю; Ложь - в противном случае.
//
Функция РольДоступнаПользователю(ИмяРоли) Экспорт
	Возврат РольДоступна(Метаданные.Роли[ИмяРоли]);
КонецФункции

// Определяет доступность указанного права текущему пользователю.
//
// Параметры:
//  ИмяРоли	 - Строка	 - Название права
//	ИмяМетаданных - Строка - Имя объекта метаданных
// 
// Возвращаемое значение:
//  Булево - Истина - Право доступно текущему пользователю; Ложь - в противном случае.
//
Функция ПравоДоступноПользователю(Право, ИмяМетаданных = "") Экспорт
	
	Мета = Метаданные;
	
	Для каждого ЧастьИмени из СтрРазделить(ИмяМетаданных, ".", Ложь) Цикл
		Мета = Мета[ЧастьИмени];
	КонецЦикла;
	
	Возврат ПравоДоступа(Право, Мета);
КонецФункции


#КонецОбласти
