
// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции


Функция ВыполнитьЗапросHTTP(ШаблонЗапроса, HTTPМетод = "POST", СтруктураПараметров = Неопределено, Знач ТелоЗапроса = Неопределено, НастройкаСоединения, ТипТелаОтвета = Неопределено)
	Перем Результат, СтрокаДанных;

	СтруктураURI = СтруктураURI(ШаблонЗапроса);
	
	Сервер        = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	Протокол      = ?(ПустаяСтрока(СтруктураURI.Схема), "http", СтруктураURI.Схема);
	
	Если Протокол = "https" тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
				//Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
				//Новый СертификатыУдостоверяющихЦентровWindows());  
	КонецЕсли;
	
	СтрокаЗапроса = ПутьНаСервере;	
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, 
		НастройкаСоединения.Пользователь, НастройкаСоединения.Пароль, , НастройкаСоединения.Таймаут, ЗащищенноеСоединение);
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
		ВремСтруктураПараметров = Новый Структура;
		СтрокаПараметров = "";
		Разделитель = "?";
		Для Каждого КлючЗначение из СтруктураПараметров Цикл
			Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") или ТипЗнч(КлючЗначение.Значение) = Тип("Структура") тогда
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, КлючЗначение.Значение);
				ПредставлениеЗначения = ЗаписьJSON.Закрыть();
			Иначе
				ПредставлениеЗначения = XMLСтрока(КлючЗначение.Значение);
			КонецЕсли;
			ВремСтруктураПараметров.Вставить(КлючЗначение.Ключ, ПредставлениеЗначения);
			СтрокаПараметров = СтрокаПараметров + Разделитель + КлючЗначение.Ключ + "=" + ПредставлениеЗначения;
			Разделитель = "&";
		КонецЦикла;
		
		СтрокаЗапроса = СтрокаЗапроса + СтрокаПараметров;
		//Если HTTPМетод = "GET" тогда
		////	
		////Иначе
		//ИначеЕсли HTTPМетод = "POST" тогда
		//	Если ТипЗнч(ДанныеТелаЗапроса) = Тип("Строка")
		//Иначе
		//	ВызватьИсключение("Не предусмотренный HTTP метод: " + HTTPМетод);
		//КонецЕсли;
		
	ИначеЕсли СтруктураПараметров <> Неопределено тогда
		ВызватьИсключение(НСтр("ru = 'Не допустимый тип значения параметра: 3'"));
		
		//ТелоЗапроса = СтруктураПараметров;
	КонецЕсли;
	
	Заголовки = ?(НастройкаСоединения.Свойство("Заголовки"), НастройкаСоединения.Заголовки, Новый Соответствие);
	Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") и Заголовки["Content-Type"] = Неопределено тогда
		Заголовки.Вставить("Content-Type", "application/octet-stream");
	КонецЕсли;
	
	
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	
	Если ТипЗнч(ТелоЗапроса) = Тип("Строка") тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		
	ИначеЕсли ТелоЗапроса <> Неопределено тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
		Запрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
		
	КонецЕсли;
	
	Ответ = Соединение.ВызватьHTTPМетод(HTTPМетод, Запрос);
		
	Если Ответ.КодСостояния = 200 или Ответ.КодСостояния = 202 тогда
		Если ТипТелаОтвета = Тип("ДвоичныеДанные") тогда
			Результат = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			Результат = Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли
	Иначе
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Найти(ТекстОтвета, "BriefErrorDescription") > 0 и Найти("[{", Лев(ТекстОтвета, 1)) тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			Данные = ПрочитатьJSON(ЧтениеJSON);
 			ВызватьИсключение("Ошибка HTTP: " + Ответ.КодСостояния + Символы.ПС 
				+ ЗаменитьКлючОбъектаНаПредставление(Данные.BriefErrorDescription));// + Символы.ПС + Символы.ПС + Данные.DetailErrorDescription);
		Иначе
			ВызватьИсключение("Ошибка HTTP: " + Ответ.КодСостояния + Символы.ПС + ТекстОтвета);
		конецЕсли;
	КонецЕсли;
	Возврат Результат
КонецФункции

Функция ЗаменитьКлючОбъектаНаПредставление(Строка)
	
//	Ошибка HTTP: 500
//Объект не захвачен в хранилище: '{
//"#type": "jcfg:CatalogRef.гбАлгоритмы",
//"#value": "97a28b65-3f1b-11ed-9604-8cec4bd46df4"
//}'

	Маркер = "{" + Символы.ВК + Символы.ПС + """#type"": ""jcfg:CatalogRef.гб";
	Позиция = 1;
	Позиция = СтрНайти(Строка, Маркер, , Позиция);
	Пока Позиция Цикл
        ПозицияКонец = СтрНайти(Строка, "}", , Позиция);  
		
		Ключ = Сред(Строка, Позиция, ПозицияКонец - Позиция + 1);
		
		Представление = Строка(ОбъектИзJSON(Ключ));  
		
		Строка = Лев(Строка, Позиция - 1) + Представление + Сред(Строка, ПозицияКонец + 1);

		Позиция = СтрНайти(Строка, Маркер, , Позиция + 1);
		
	КонецЦикла;
	
	Возврат Строка;	
КонецФункции
	
	
Функция ВыполнитьУдаленно(Хранилище, ИмяМетода,  Параметр0 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр1 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр2 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр3 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр4 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр5 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр6 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр7 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр8 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр9 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр10 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр11 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр12 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр13 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр14 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр15 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр16 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр17 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр18 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр19 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр20 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр21 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр22 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр23 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр24 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр25 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр26 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр27 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр28 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b",
		Параметр29 = "b02e30e3-b0e3-411c-8440-f41b90c20e6b"
	) Экспорт                  
	
	ВГраница = -1;	
	Для н = -29 по 0 цикл
		Если Вычислить("Параметр" + Формат(-н, "ЧН=0")) <> "b02e30e3-b0e3-411c-8440-f41b90c20e6b" тогда
			ВГраница = -н;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Параметры = Новый Массив();
	Для н = 0 по ВГраница цикл
		Параметр = Вычислить("Параметр" + Формат(н, "ЧН=0"));
		Параметры.Добавить(?(Параметр = "b02e30e3-b0e3-411c-8440-f41b90c20e6b", Неопределено, Параметр));
	КонецЦикла;
	
	АдресСервиса = СтрШаблон("%1/hs/storage/%2/%3", Хранилище.АдресПодключения, СокрЛП(Хранилище.Код), ИмяМетода);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	НастройкиСоединения = Новый Структура("Пользователь, Пароль");
	НастройкиСоединения.Вставить("Заголовки", Заголовки); 
	НастройкиСоединения.Вставить("Таймаут", 1800); 
	
	JSON = ОбъектВJSON(Параметры);
	
	ТелоОтвета = ВыполнитьЗапросHTTP(АдресСервиса, "POST", , JSON, НастройкиСоединения);
	
	Результат = ОбъектИзJSON(ТелоОтвета);

	//ааАлгоритмыТСДА.ЗаписьЖурналаРегистрацииТСДА("ГрафиХранилище.Ответ." + ИмяМетода,
	//	ПредопределенноеЗначение("Перечисление.УровеньЖурналаРегистрации.Примечание"), АдресСервиса,
	//	ТелоОтвета);

	Возврат Результат;
КонецФункции

Функция ОбъектВJSON(Объект) Экспорт
	ЗаписьJson = Новый ЗаписьJSON();
	ЗаписьJson.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJson, Объект, НазначениеТипаXML.Явное);
	Возврат ЗаписьJson.Закрыть();
КонецФункции
	
Функция ОбъектИзJSON(JSON) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(JSON);         
	Возврат СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
КонецФункции

Функция Хеш(Строка) Экспорт
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(Строка);
	Хеш = Хеш.ХешСумма;   
	Хеш = СтрЗаменить(Хеш, " ", "");
	// 00000000-0000-0000-0000-000000000000
	Хеш = СтрШаблон("%1-%2-%3-%4-%5", Лев(Хеш, 8), Сред(Хеш, 9, 4), Сред(Хеш, 13, 4), Сред(Хеш, 17, 4), Прав(Хеш, 12));
	Хеш = Новый УникальныйИдентификатор(Хеш);
	Возврат Хеш;			
КонецФункции

Функция ОбъектСуществует(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Истина
		|ИЗ
		|	Справочник.гбАлгоритмы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "гбАлгоритмы", Ссылка.Метаданные().Имя);
	
	Возврат не Запрос.Выполнить().Пустой();
КонецФункции


Процедура ЗаполнитьСписокПодчиненнымиОбъектами(ВедущиеОбъекты, СписокОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм КАК Объект
		|ИЗ
		|	Справочник.гбБлокСхемы.АлгоритмыЭлементовБлокСхемы КАК гбБлокСхемыАлгоритмыЭлементовБлокСхемы
		|ГДЕ
		|	гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Ссылка В(&БлокСхема)
		|	И НЕ гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм В (&БлокСхема)
		|	И (гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм ССЫЛКА Справочник.гбБлокСхемы
		|			ИЛИ гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм ССЫЛКА Справочник.гбАлгоритмы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм.Родитель
		|ИЗ
		|	Справочник.гбБлокСхемы.АлгоритмыЭлементовБлокСхемы КАК гбБлокСхемыАлгоритмыЭлементовБлокСхемы
		|ГДЕ
		|	гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Ссылка В(&БлокСхема)
		|	И НЕ гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм.Родитель В (&БлокСхема, ЗНАЧЕНИЕ(Справочник.гбБлокСхемы.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.гбАлгоритмы.ПустаяСсылка))
		|	И НЕ гбБлокСхемыАлгоритмыЭлементовБлокСхемы.Алгоритм.Родитель IS NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	гбБлокСхемы.Родитель
		|ИЗ
		|	Справочник.гбБлокСхемы КАК гбБлокСхемы
		|ГДЕ
		|	гбБлокСхемы.Ссылка В(&БлокСхема)
		|	И НЕ гбБлокСхемы.Родитель В (&БлокСхема, ЗНАЧЕНИЕ(Справочник.гбБлокСхемы.ПустаяСсылка))
		|	И НЕ гбБлокСхемы.Родитель IS NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	гбБлокСхемы.Расширение
		|ИЗ
		|	Справочник.гбБлокСхемы КАК гбБлокСхемы
		|ГДЕ
		|	гбБлокСхемы.Ссылка В(&БлокСхема)
		|	И НЕ гбБлокСхемы.Расширение В (&БлокСхема, ЗНАЧЕНИЕ(Справочник.гбРасширения.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("БлокСхема", ВедущиеОбъекты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДопустимыеТипы = Метаданные.РегистрыСведений.гбПодчиненныеОбъектыБлокСхем.Измерения.Объект.Тип;
	Пока не РезультатЗапроса.Пустой() цикл
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Объект)
				и ДопустимыеТипы.СодержитТип(ТипЗнч(ВыборкаДетальныеЗаписи.Объект)) тогда
				
				СписокОбъектов.Добавить(ВыборкаДетальныеЗаписи.Объект, , Истина);
				
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("БлокСхема", СписокОбъектов);
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
КонецПроцедуры

Процедура БлокСхемаПриЗаписи(Источник, Отказ) Экспорт
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	БлокСхема = Источник.Ссылка;
	
	НаборЗаписей = РегистрыСведений.гбПодчиненныеОбъектыБлокСхем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БлокСхема.Установить(БлокСхема);
	Если Источник.ЭтоГруппа тогда
		Возврат;
	ИначеЕсли Источник.ЭтоВложеннаяБлокСхема тогда
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.гбИспользуемыеХранилищаБлокСхем.СоздатьМенеджерЗаписи();
	Запись.БлокСхема = БлокСхема;
	Запись.Прочитать();
	Если не ЗначениеЗаполнено(Запись.Хранилище) тогда
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
		
	
	СписокОбъектов = Новый СписокЗначений;
	ЗаполнитьСписокПодчиненнымиОбъектами(БлокСхема, СписокОбъектов);
	
	Для Каждого ЭлементСписка из СписокОбъектов Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.БлокСхема = БлокСхема;
		Запись.Объект = ЭлементСписка.Значение;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура БлокСхемаИлиАлгоритмПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ЭтоГруппа тогда
		Возврат;
	ИначеЕсли (ТипЗнч(Источник) = Тип("СправочникОбъект.гбБлокСхемы") и Источник.ЭтоВложеннаяБлокСхема)
		или Источник.ДополнительныеСвойства.Свойство("РодительИзменен") тогда
		
		НаборЗаписей = РегистрыСведений.гбПодчиненныеОбъектыБлокСхем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		НаборЗаписей.Прочитать();
		Для каждого Запись из НаборЗаписей цикл
			БлокСхемаПриЗаписи(Запись.БлокСхема.ПолучитьОбъект(), Ложь);
		КонецЦикла;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") тогда
		
		Для каждого ЭлементСписка из ПолучитьПодключенияКХранилищуПоОбъектам(Источник.Ссылка) цикл
			Запись = РегистрыСведений.гбЗахватОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = Источник.Ссылка;
			Запись.Хранилище = ЭлементСписка.Значение;
			Запись.ДатаЗахвата = ТекущаяДатаСеанса();
			Запись.Записать(Ложь);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура БлокСхемаИлиАлгоритмПередЗаписью(Источник, Отказ) Экспорт
	Если ЗначениеЗаполнено(Источник.Ссылка) тогда
		Если Источник.Ссылка.Родитель <> Источник.Родитель тогда
			Источник.ДополнительныеСвойства.Вставить("РодительИзменен", Истина);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
КонецПроцедуры


Процедура ДобавитьПодчиненныеЭлементыБлокСхемыВСписок(Знач Объекты, СписокОбъектов, Рекурсивно) Экспорт
	Если ТипЗнч(Объекты) <> Тип("СписокЗначений") тогда
		ВремОбъект = Объекты;
		Объекты = Новый СписокЗначений;
		Объекты.Добавить(ВремОбъект);
	Иначе
		Объекты = Объекты.Скопировать();
	КонецЕсли;
	Для Каждого ЭлементСписка из Объекты Цикл
		СписокОбъектов.Добавить(ЭлементСписка.Значение, , Истина);
	КонецЦикла;
	Если Рекурсивно тогда
		 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Группа", Объекты);
		Для Каждого Тип из Метаданные.РегистрыСведений.гбПодчиненныеОбъектыБлокСхем.Измерения.Объект.Тип.Типы() Цикл
			МетаданныеСправочника = Метаданные.НайтиПоТипу(Тип);
			Если не МетаданныеСправочника.Иерархический тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = "Выбрать Ссылка из Справочник.гбБлокСхемы где Родитель в (&Группа) и не Ссылка в (&Группа)";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "гбБлокСхемы", МетаданныеСправочника.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Объекты.Добавить(Выборка.Ссылка);
				СписокОбъектов.Добавить(Выборка.Ссылка, , Истина);
			КонецЦикла;
		КонецЦикла;
		ЗаполнитьСписокПодчиненнымиОбъектами(Объекты, СписокОбъектов);
		
	КонецЕсли;
КонецПроцедуры


Функция ПолучитьПодключенияКХранилищуПоОбъектам(Объекты) Экспорт
	СписокПодключений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	гбИспользуемыеХранилищаБлокСхем.Хранилище КАК Хранилище
		|ИЗ
		|	РегистрСведений.гбПодчиненныеОбъектыБлокСхем КАК гбПодчиненныеОбъектыБлокСхем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гбИспользуемыеХранилищаБлокСхем КАК гбИспользуемыеХранилищаБлокСхем
		|		ПО гбПодчиненныеОбъектыБлокСхем.БлокСхема = гбИспользуемыеХранилищаБлокСхем.БлокСхема
		|ГДЕ
		|	гбПодчиненныеОбъектыБлокСхем.Объект В(&Объекты)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	гбИспользуемыеХранилищаБлокСхем.Хранилище
		|ИЗ
		|	РегистрСведений.гбИспользуемыеХранилищаБлокСхем КАК гбИспользуемыеХранилищаБлокСхем
		|ГДЕ
		|	гбИспользуемыеХранилищаБлокСхем.БлокСхема В(&Объекты)";
	
	Запрос.УстановитьПараметр("Объекты", Объекты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Объекты.Добавить(ВыборкаДетальныеЗаписи.Объект);
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Хранилище) тогда
			СписокПодключений.Добавить(ВыборкаДетальныеЗаписи.Хранилище, , Истина);
		//КонецЕсли;
	КонецЦикла;
	
	//Если Объекты.Количество() тогда
	//	ПолучитьПодключенияКХранилищуПоОбъектам(Объекты, СписокПодключений);
	//КонецЕсли;
	
	Возврат СписокПодключений;

КонецФункции



Процедура ПодключитьБлокСхемуКХранилищу(БлокСхема, Хранилище) Экспорт
	
	ОбъектыХранилища = ВыполнитьУдаленно(Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);
	
	СписокПолучить = Новый СписокЗначений;
	Для каждого КлючЗНачение из ОбъектыХранилища Цикл
		Ссылка = ОбъектИзJSON(КлючЗНачение.Ключ);
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено или гбХранилище.Хеш(ОбъектВJSON(Объект)) <> КлючЗНачение.Значение тогда
			СписокПолучить.Добавить(КлючЗНачение.Ключ, , Истина);
		КонецЕсли;
	КонецЦикла;
	ПолучитьИзХранилища(Хранилище, СписокПолучить);
		
	
	СписокОбъектов = Новый СписокЗначений;
	ЗаполнитьСписокПодчиненнымиОбъектами(БлокСхема, СписокОбъектов);
	СписокОбъектов.Добавить(БлокСхема);
	СписокПоместить = Новый СписокЗначений;
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
	
		Если ОбъектыХранилища[ОбъектВJSON(ЭлементСписка.Значение)] = Неопределено тогда
			СписокПоместить.Добавить(ЭлементСписка.Значение);	
		КонецЕсли;
	
	КонецЦикла;
	ПоместитьВХранилище(Хранилище, СписокПоместить, Истина);

	
	Запись = РегистрыСведений.гбИспользуемыеХранилищаБлокСхем.СоздатьМенеджерЗаписи();
	Запись.БлокСхема = БлокСхема;
	Запись.Хранилище = Хранилище;
	Запись.Записать(Истина);
	
	БлокСхемаПриЗаписи(БлокСхема.ПолучитьОбъект(), Ложь);
КонецПроцедуры


Функция ЗахватитьВХранилище(Хранилище, СписокОбъектов) Экспорт
	МассивСтрок = Новый Массив;
	
	ОбъектыХранилища = ВыполнитьУдаленно(Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);
	
	СписокПолучить = Новый СписокЗначений;
	Для каждого КлючЗНачение из ОбъектыХранилища Цикл
		Ссылка = ОбъектИзJSON(КлючЗНачение.Ключ);
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено или гбХранилище.Хеш(ОбъектВJSON(Объект)) <> КлючЗНачение.Значение тогда
			СписокПолучить.Добавить(КлючЗНачение.Ключ, , Истина);
		КонецЕсли;
	КонецЦикла;
	ПолучитьИзХранилища(Хранилище, СписокПолучить);
	
	
	СписокПоместить = Новый СписокЗначений;
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
		
		Если ОбъектыХранилища[ОбъектВJSON(ЭлементСписка.Значение)] = Неопределено тогда
			СписокПоместить.Добавить(ЭлементСписка.Значение);	
		КонецЕсли;
	
	КонецЦикла;
	ПоместитьВХранилище(Хранилище, СписокПоместить, Истина);
	
	
	
	МассивКлючей = Новый Массив;
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
		Ссылка = ЭлементСписка.Значение;
		МассивКлючей.Добавить(ОбъектВJSON(Ссылка));
		МассивСтрок.Добавить(СтрШаблон("Объект захвачен: %1", Ссылка));
	КонецЦикла;

	ВыполнитьУдаленно(
		Хранилище, "ЗахватитьОбъекты", Хранилище.ИмяПользователя, Хранилище.Пароль, МассивКлючей);
		
	Для Каждого ЭлементСписка из СписокОбъектов цикл
		Запись = РегистрыСведений.гбЗахватОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = ЭлементСписка.Значение;
		Запись.Хранилище = Хранилище;
		Запись.Прочитать();
		Если не Запись.Выбран() тогда
			Запись.Объект = ЭлементСписка.Значение;
			Запись.Хранилище = Хранилище;
			Запись.ДатаЗахвата = ТекущаяДатаСеанса();
			Запись.Записать(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции


Функция ПоместитьВХранилище(Хранилище, СписокОбъектов, Захват) Экспорт
	МассивСтрок = Новый Массив;
	
	Объекты = Новый Соответствие;
	Для Каждого ЭлементСписка из СписокОбъектов цикл
		Ссылка = ЭлементСписка.Значение;
		ОбъектОбъект = Ссылка.ПолучитьОбъект();
		
		Объекты.Вставить(ОбъектВJSON(Ссылка), ОбъектВJSON(ОбъектОбъект));
		МассивСтрок.Добавить(СтрШаблон("Объект помещен: %1", ОбъектОбъект));
	КонецЦикла;
	
	ВыполнитьУдаленно(Хранилище, "ПоместитьОбъекты", Хранилище.ИмяПользователя, Хранилище.Пароль, Объекты, Захват);
		
	Для Каждого ЭлементСписка из СписокОбъектов цикл
		Запись = РегистрыСведений.гбЗахватОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = ЭлементСписка.Значение;
		Запись.Хранилище = Хранилище;
		Запись.Прочитать();
		Если Захват и не Запись.Выбран() тогда
			Запись.Объект = ЭлементСписка.Значение;
			Запись.Хранилище = Хранилище;
			Запись.ДатаЗахвата = ТекущаяДатаСеанса();
			Запись.Записать(Ложь);
		ИначеЕсли Запись.Выбран() и не Захват тогда
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция ОтменитьЗахват(Хранилище, СписокОбъектов) Экспорт
	МассивСтрок = Новый Массив;
	
	ИдентификаторыВерсий = гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);
		
	ОбъектыКПолучению = Новый Массив;	
	Для каждого КлючЗНачение из ИдентификаторыВерсий Цикл
		Ссылка = ОбъектИзJSON(КлючЗНачение.Ключ);
		Если СписокОбъектов.НайтиПоЗначению(Ссылка) <> Неопределено 
			и Хеш(ОбъектВJSON(Ссылка.ПолучитьОбъект())) <> КлючЗНачение.Значение тогда
			ОбъектыКПолучению.Добавить(КлючЗНачение.Ключ);
		КонецЕсли;
	КонецЦикла;	
	
	ОбъектыХранилища = гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ПолучитьОбъекты", Хранилище.ИмяПользователя, Хранилище.Пароль, ОбъектыКПолучению);
	Для каждого КлючЗНачение из ОбъектыХранилища Цикл
		Объект = ОбъектИзJSON(КлючЗНачение.Значение);
		Объект.Записать();
		МассивСтрок.Добавить(СтрШаблон("Объект получен: %1", Объект));
	КонецЦикла;	
	
	МассивКлючей = Новый Массив;
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
		МассивКлючей.Добавить(ОбъектВJSON(ЭлементСписка.Значение));
	КонецЦикла;

	гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ОтменитьЗахват", Хранилище.ИмяПользователя, Хранилище.Пароль, МассивКлючей);
		
	Для Каждого ЭлементСписка из СписокОбъектов цикл
		Запись = РегистрыСведений.гбЗахватОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = ЭлементСписка.Значение;
		Запись.Хранилище = Хранилище;
		Запись.Удалить();
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция ПолучитьИзХранилища(Хранилище, СписокОбъектов) Экспорт
	МассивСтрок = Новый Массив;
	ИдентификаторыВерсий = гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ИдентификаторыВерсий", Хранилище.ИмяПользователя, Хранилище.Пароль);
		
	ОбъектыКПолучению = Новый Массив;	
	Для каждого КлючЗНачение из ИдентификаторыВерсий Цикл
		Ссылка = ОбъектИзJSON(КлючЗНачение.Ключ);
		Если СписокОбъектов.НайтиПоЗначению(Ссылка) <> Неопределено 
			и Хеш(ОбъектВJSON(Ссылка.ПолучитьОбъект())) <> КлючЗНачение.Значение тогда
			ОбъектыКПолучению.Добавить(КлючЗНачение.Ключ);
		КонецЕсли;
	КонецЦикла;	
	
	ОбъектыХранилища = гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ПолучитьОбъекты", Хранилище.ИмяПользователя, Хранилище.Пароль, ОбъектыКПолучению);
	Для каждого КлючЗНачение из ОбъектыХранилища Цикл
		Объект = ОбъектИзJSON(КлючЗНачение.Значение);
		Объект.Записать();
		МассивСтрок.Добавить(СтрШаблон("Объект получен: %1", Объект));
	КонецЦикла;	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции



Функция ОбновитьИзХранилища(Хранилище, СписокКлючей) Экспорт
	МассивСтрок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гбЗахватОбъектов.Хранилище КАК Хранилище
		|ИЗ
		|	РегистрСведений.гбЗахватОбъектов КАК гбЗахватОбъектов
		|ГДЕ
		|	гбЗахватОбъектов.Объект = &Объект";
	
	
	ОбъектыХранилища = гбХранилище.ВыполнитьУдаленно(
		Хранилище, "ПолучитьОбъекты", Хранилище.ИмяПользователя, Хранилище.Пароль, СписокКлючей.ВыгрузитьЗначения());
	Для каждого КлючЗНачение из ОбъектыХранилища Цикл
		Объект = ОбъектИзJSON(КлючЗНачение.Значение);
		
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		
		Если Запрос.Выполнить().Пустой() тогда		
			Объект.Записать();
			МассивСтрок.Добавить(СтрШаблон("Объект получен: %1", Объект));
		Иначе
			ВызватьИсключение(СтрШаблон("Объект заблокирован: %1", Объект));
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции


Функция ЕстьДоступныеПодключения()
	Возврат не ?(0, 0, 
		Новый Запрос("ВЫБРАТЬ 1 из Справочник.гбХранилищаБлокСхем //где НЕ ПометкаУдаления")).Выполнить().Пустой();
КонецФункции

Функция ТекстЗапросаПолученияСтатусаОбъектовВХранилище()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	гбПодчиненныеОбъектыБлокСхем.Объект КАК Объект,
	               |	ВЫБОР КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище)
	               |		КОГДА 0
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		КОГДА 1
	               |			ТОГДА МАКСИМУМ(гбИспользуемыеХранилищаБлокСхем.Хранилище)
	               |		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище)
	               |	КОНЕЦ КАК Хранилище,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище) КАК КоличествоХранилищ,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбЗахватОбъектов.Хранилище) КАК КоличествоЗахвачено,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище) = 0
	               |			ТОГДА 0
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбЗахватОбъектов.Хранилище) = 0
	               |			ТОГДА 2
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище) > КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбЗахватОбъектов.Хранилище)
	               |			ТОГДА 4
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище) = 0
	               |			ТОГДА ИСТИНА
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбЗахватОбъектов.Хранилище) = 0
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбИспользуемыеХранилищаБлокСхем.Хранилище) > КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гбЗахватОбъектов.Хранилище)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РедактированиеРазрешено,
	               |	МАКСИМУМ(гбЗахватОбъектов.ДатаЗахвата) КАК ДатаЗахвата
	               |ИЗ
	               |	РегистрСведений.гбИспользуемыеХранилищаБлокСхем КАК гбИспользуемыеХранилищаБлокСхем
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			гбПодчиненныеОбъектыБлокСхем.БлокСхема КАК БлокСхема,
	               |			гбПодчиненныеОбъектыБлокСхем.Объект КАК Объект
	               |		ИЗ
	               |			РегистрСведений.гбПодчиненныеОбъектыБлокСхем КАК гбПодчиненныеОбъектыБлокСхем
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			гбБлокСхемы.Ссылка,
	               |			гбБлокСхемы.Ссылка
	               |		ИЗ
	               |			Справочник.гбБлокСхемы КАК гбБлокСхемы) КАК гбПодчиненныеОбъектыБлокСхем
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гбЗахватОбъектов КАК гбЗахватОбъектов
	               |			ПО гбПодчиненныеОбъектыБлокСхем.Объект = гбЗахватОбъектов.Объект
	               |		ПО гбИспользуемыеХранилищаБлокСхем.БлокСхема = гбПодчиненныеОбъектыБлокСхем.БлокСхема
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	гбПодчиненныеОбъектыБлокСхем.Объект";
			
	Возврат ТекстЗапроса;

КонецФункции
	

Функция ВозможноРедактированиеОбъекта(Объект, ПодключеноКХранилищу = Неопределено) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаПолученияСтатусаОбъектовВХранилище());
	ОператорВыбрать = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорВыбрать.Отбор.Добавить("гбПодчиненныеОбъектыБлокСхем.Объект = &Объект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ПодключеноКХранилищу = Выборка.ИндексКартинки > 0;
		Возврат Выборка.РедактированиеРазрешено;
	КонецЕсли;

	ПодключеноКХранилищу = Ложь;
	Возврат Истина;

КонецФункции

Процедура ПриИзмененииСостоянияХранилищаБлокСхем_ФормаЭлемента(ЭтаФорма) Экспорт 
	Элементы = ЭтаФорма.Элементы;
	
	КомандыХранилища = Элементы.Найти("КомандыХранилища");
	Если КомандыХранилища = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	КомандыХранилища.Видимость = ЕстьДоступныеПодключения();
	
	Если не КомандыХранилища.Видимость тогда
		Возврат;
	КонецЕсли;
	
	ПодключеноКХранилищу = Неопределено;
	ЭтаФорма.ТолькоПросмотр = не ВозможноРедактированиеОбъекта(ЭтаФорма.Объект.Ссылка, ПодключеноКХранилищу);
	
	Для Каждого Кнопка из ЭтаФорма.Элементы.КомандыХранилища.ПодчиненныеЭлементы цикл
		Кнопка.Видимость = ПодключеноКХранилищу;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_ФормаЭлемента(ЭтаФорма) Экспорт
	
	ПереместитьКнопкиКомандХранилища(ЭтаФорма);
	
	ПриИзмененииСостоянияХранилищаБлокСхем_ФормаЭлемента(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаОповещения_ФормаЭлемента(ЭтаФорма, ИмяСобытия) Экспорт
	
	Если ИмяСобытия = "ГрафиБот:ИзменениеСостоянияХранилищаБлокСхем" тогда
		
		ПриИзмененииСостоянияХранилищаБлокСхем_ФормаЭлемента(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры


Процедура ПриИзмененииСостоянияХранилищаБлокСхем_ФормаСписка(ЭтаФорма) Экспорт 
	Список = ЭтаФорма.Список;
	Элементы = ЭтаФорма.Элементы;
	
	КомандыХранилища = Элементы.Найти("КомандыХранилища");
	Если КомандыХранилища = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	КомандыХранилища.Видимость = ЕстьДоступныеПодключения();
	
	Если не КомандыХранилища.Видимость тогда
		Возврат;
	КонецЕсли;
	
	Если Не Список.ПроизвольныйЗапрос тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаПолученияСтатусаОбъектовВХранилище());
		СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = "СтатусыОбъектовВХранилище";
		
		ЗапросСписка = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОператорВыбрать = ЗапросСписка.Операторы[0];
		ОсновнойИсточник = ОператорВыбрать.Источники.Добавить(Список.ОсновнаяТаблица, "Справочник");
		
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Список.ОсновнаяТаблица);
		
		Поля = "Ссылка, Код, Наименование, ПометкаУдаления"
			+ ?(МетаданныеИсточника.Иерархический, ", ЭтоГруппа, Родитель", "");
		Для Каждого Поле Из СтрРазделить(Поля, ", ", Ложь) Цикл
			ОператорВыбрать.ВыбираемыеПоля.Добавить(Поле);
		КонецЦикла;  		
		
		Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			ОператорВыбрать.ВыбираемыеПоля.Добавить(Реквизит.Имя);
		КонецЦикла; 
		
		Источник = ОператорВыбрать.Источники.Добавить(
			СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения, "СтатусыОбъектовВХранилище");
		Источник.Соединения.Очистить();
		ОсновнойИсточник.Соединения.Добавить(Источник, "Справочник.Ссылка = СтатусыОбъектовВХранилище.Объект");
		ОсновнойИсточник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		
		ОператорВыбрать.ВыбираемыеПоля.Добавить(СтрЗаменить(
			"	(Выбор ЭтоГруппа когда Истина тогда 0 иначе 1 конец) + (Выбор ПометкаУдаления когда Ложь тогда 0 иначе 2 конец)
			|	+ (ISNULL(СтатусыОбъектовВХранилище.ИндексКартинки, 0) * 4)",
				"ЭтоГруппа", ?(МетаданныеИсточника.Иерархический, "ЭтоГруппа", "Ложь")));
		
		ЗапросСписка.Колонки[ЗапросСписка.Колонки.Количество() - 1].Псевдоним = "ИндексКартинки";
		
		ОператорВыбрать.ВыбираемыеПоля.Добавить("СтатусыОбъектовВХранилище.Хранилище");
		
		Список.ПроизвольныйЗапрос = Истина;
		Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		Элементы.Список.КартинкаСтрок = БиблиотекаКартинок.гбКартинкиСписка;
		Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.ИндексКартинки";
		
		Элемент = Элементы.Добавить("Хранилище", Тип("ПолеФормы"), Элементы.Список);
		Элемент.ПутьКДанным = "Список.Хранилище";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_ФормаСписка(ЭтаФорма) Экспорт
	
	ПереместитьКнопкиКомандХранилища(ЭтаФорма);
	
	ПриИзмененииСостоянияХранилищаБлокСхем_ФормаСписка(ЭтаФорма);
	
КонецПроцедуры

Процедура ПереместитьКнопкиКомандХранилища(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	
	КомандыХранилища = Элементы.Найти("КомандыХранилища");
	Если КомандыХранилища = Неопределено тогда
		КомандыХранилища = Элементы.Добавить("КомандыХранилища", Тип("ГруппаФормы"), 
			?(Элементы.Найти("СписокКонтекстноеМеню") <> Неопределено, 
				Элементы.СписокКонтекстноеМеню, Элементы.ФормаКоманднаяПанель));
		КомандыХранилища.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
	
	Для Каждого Команда из Метаданные.Справочники.гбХранилищаБлокСхем.Команды цикл
		Кнопка = Элементы.Найти("ФормаСправочникгбХранилищаБлокСхем" + Команда.Имя);
		Если Кнопка <> Неопределено тогда
			Элементы.Переместить(Кнопка, Элементы.КомандыХранилища);
			Кнопка.Видимость = Ложь;
			Если Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка или Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели тогда
				Кнопка.Отображение = ОтображениеКнопки.Картинка;
				Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаОповещения_ФормаСписка(ЭтаФорма, ИмяСобытия) Экспорт
	
	Если ИмяСобытия = "ГрафиБот:ИзменениеСостоянияХранилищаБлокСхем" тогда
		
		ПриИзмененииСостоянияХранилищаБлокСхем_ФормаСписка(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

