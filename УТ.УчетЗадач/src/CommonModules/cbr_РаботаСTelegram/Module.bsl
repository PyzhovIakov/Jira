Процедура cbr_ОтправкаСообщенийПользователямЧерезИнтеграции() Экспорт
	ОтправкаНеОтправленныхСообщений();
КонецПроцедуры

Процедура ОтправитьСообщениеПользователюПоСсылке(Пользователь, ТекстСообщения, ПредметУведомления = "") Экспорт
	Попытка
		ИдПользователяТГ = РегистрыСведений.cbr_СоответствиеПользователейДляИнтеграций.ПолучитьИдПользователя(
			Пользователь);
		Если Не ЗначениеЗаполнено(ИдПользователяТГ) Тогда
			ТекстОшибки = "НетIDЧата";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		РезультатОтправки = OPI_Telegram.ОтправитьТекстовоеСообщение(Константы.cbr_Токен_БотТелеграм.Получить(),
			ИдПользователяТГ, ТекстСообщения);
//	Исключение
//		ТекстОшибки = ИнформацияОбОшибке();
//		//Дописать модуль записи при неудачной отправки сообщения
//	КонецПопытки;	
		РезультатОбработкиОтправки = ОшибкаРезультатаОтправки(РезультатОтправки);
		Если ЗначениеЗаполнено(РезультатОбработкиОтправки) Тогда
			ВызватьИсключение РезультатОбработкиОтправки;
		Иначе
			РегистрыСведений.cbr_ЗаданияКОтправкеСообщений.УдалитьЗаписьТелеграм(Пользователь, ПредметУведомления,
				ТекстСообщения, ТекстОшибки, Истина);
		КонецЕсли;

	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		// Сделать ограничение на чтени ошибки.
		// Если будет большая ошибка, писалось только определенное количество символов
		// Добавляем запись в регистр сведений для того, чтобы можно было отследить ошибки
		Если ТипЗнч(ТекстОшибки) = тип("ИнформацияОбОшибке") Тогда
			//Определение начала текста ошибки для отладки
			НачалоОписанияОшибки = СтрНайти(ТекстОшибки.Описание, "[ОшибкаВоВремяВыполненияВстроенногоЯзыка]");
			Если НачалоОписанияОшибки = 0 Тогда
				//От всего количества символов текста ошибки, в регистр пишется только 10%
				ТекстОшибки = Прав(ТекстОшибки.Описание, 1 + СтрДлина(ТекстОшибки.Описание) - СтрДлина(
					ТекстОшибки.Описание) * (0.90));
			Иначе
				ТекстОшибки = Прав(ТекстОшибки.Описание, 1 + СтрДлина(ТекстОшибки.Описание) - НачалоОписанияОшибки);
			КонецЕсли;
		КонецЕсли;
		РегистрыСведений.cbr_ЗаданияКОтправкеСообщений.ДобавитьОбновитьЗаписьТелеграм(Пользователь, ПредметУведомления,
			ТекстСообщения, ТекстОшибки, Истина);
	КонецПопытки;

КонецПроцедуры

Процедура ОтправитьСообщениеПользователюПоИдТелеграма(Пользователь, АйДиПользователя, ТекстСообщения,
	СсылкаНаДокументОтправки = "")
	Попытка
		Если Не ЗначениеЗаполнено(АйДиПользователя) Тогда
			ТекстОшибки = "НетIDЧата";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		РезультатОтправки = OPI_Telegram.ОтправитьТекстовоеСообщение(Константы.cbr_Токен_БотТелеграм.Получить(),
			АйДиПользователя, ТекстСообщения);
		РезультатОбработкиОтправки = ОшибкаРезультатаОтправки(РезультатОтправки);

		Если ЗначениеЗаполнено(РезультатОбработкиОтправки) Тогда
			ВызватьИсключение РезультатОбработкиОтправки;
		Иначе
			РегистрыСведений.cbr_ЗаданияКОтправкеСообщений.УдалитьЗаписьТелеграм(Пользователь, СсылкаНаДокументОтправки,
				ТекстСообщения, ТекстОшибки, Истина);
		КонецЕсли;

	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		// Сделать ограничение на чтени ошибки.
		// Если будет большая ошибка, писалось только определенное количество символов
		// Добавляем запись в регистр сведений для того, чтобы можно было отследить ошибки
		Если ТипЗнч(ТекстОшибки) = тип("ИнформацияОбОшибке") Тогда
			//Определение начала текста ошибки для отладки
			НачалоОписанияОшибки = СтрНайти(ТекстОшибки.Описание, "[ОшибкаВоВремяВыполненияВстроенногоЯзыка]");
			Если НачалоОписанияОшибки = 0 Тогда
				//От всего количества символов текста ошибки, в регистр пишется только 10%
				ТекстОшибки = Прав(ТекстОшибки.Описание, 1 + СтрДлина(ТекстОшибки.Описание) - СтрДлина(
					ТекстОшибки.Описание) * (0.90));
			Иначе
				ТекстОшибки = Прав(ТекстОшибки.Описание, 1 + СтрДлина(ТекстОшибки.Описание) - НачалоОписанияОшибки);
			КонецЕсли;
		КонецЕсли;
		РегистрыСведений.cbr_ЗаданияКОтправкеСообщений.ДобавитьОбновитьЗаписьТелеграм(Пользователь,
			СсылкаНаДокументОтправки, ТекстСообщения, ТекстОшибки, Истина);
	КонецПопытки;
КонецПроцедуры

//Возвращает "" или ОшибкуРезультатаОтправки 
Функция ОшибкаРезультатаОтправки(РезультатОтправки)
	Если ЗначениеЗаполнено(РезультатОтправки.Получить("error_code")) Тогда
		Если РезультатОтправки["error_code"] >= 400 И РезультатОтправки["error_code"] < 500 Тогда
			КодОшибки = РезультатОтправки["error_code"];
			ОписаниеОшибки = РезультатОтправки["description"];
			ТекстОшибки = КодОшибки + ": " + ОписаниеОшибки;
			Возврат ТекстОшибки;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура ОтправкаНеОтправленныхСообщений()
	ТаблицаСообщенийКОтправке = РегистрыСведений.cbr_ЗаданияКОтправкеСообщений.ПолучитьТаблицуКОтправкиСообщенийВсемПользователям(
		ПредопределенноеЗначение(
			"ПланВидовХарактеристик.cbr_ВидыПользовательскихНастроек.Телеграм"));
	Для Каждого ЭлементТЧ Из ТаблицаСообщенийКОтправке Цикл
		ОтправитьСообщениеПользователюПоИдТелеграма(ЭлементТЧ.Пользователь, ЭлементТЧ.АйДиПользователя,
			ЭлементТЧ.ТекстСообщения, ЭлементТЧ.СсылкаНаДокументОтправки);
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьПоследнееСообщениеТелеграм(НомерСообщения) Экспорт
	НомерСообщения =  СтрЗаменить(НомерСообщения, " ", "");
	Константы.cbr_ПоследнееСообщениеТелеграмИД.Установить(НомерСообщения);
КонецПроцедуры

Функция ПолучитьПоследнееСообщениеТелеграм() Экспорт
	Возврат Константы.cbr_ПоследнееСообщениеТелеграмИД.Получить();
КонецФункции

Процедура АктивацияЗапросовНаПодключениеТелеграм() Экспорт
	РезультатGet = OPI_Telegram.ПолучитьОбновления(Константы.cbr_Токен_БотТелеграм.Получить(), ,
		cbr_РаботаСTelegram.ПолучитьПоследнееСообщениеТелеграм());
	Для Индекс = 0 По РезультатGet["result"].Количество() - 1 Цикл
		Попытка
			ТипКоманды = РезультатGet["result"][Индекс]["message"]["entities"][0]["type"];

		Исключение
			Продолжить;
		КонецПопытки;

		Если ТипКоманды = "bot_command" Тогда
			ПолныйТекстКоманды = РезультатGet["result"][Индекс]["message"]["text"];
			РазделительКомандыИтекстаКоманды = СтрНайти(ПолныйТекстКоманды, " ");
			ИДЧата = СтрЗаменить(Строка(РезультатGet["result"][Индекс]["message"]["chat"]["id"]), " ", "");
			Если РазделительКомандыИтекстаКоманды = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяКоманды = Лев(ПолныйТекстКоманды, РазделительКомандыИтекстаКоманды - 1);

			Если ИмяКоманды = "/ConnectTo1C" Тогда
				ДлинаТекста = СтрДлина(ПолныйТекстКоманды);
				ТекстКоманды = Прав(ПолныйТекстКоманды, ДлинаТекста - РазделительКомандыИтекстаКоманды);
				СсылкаНаПользователяИБ = Справочники.Пользователи.НайтиПоНаименованию(ТекстКоманды, , , );

				Если Не ЗначениеЗаполнено(СсылкаНаПользователяИБ) Тогда
					Продолжить;
				КонецЕсли;

				СтуктураЗаполнения = РегистрыСведений.cbr_СоответствиеПользователейДляИнтеграций.ПолучитьСтруктуруПараметровЗаполнения();
				ТипИнтеграции = ПредопределенноеЗначение(
					"ПланВидовХарактеристик.cbr_ВидыПользовательскихНастроек.Телеграм");
				СтуктураЗаполнения.АйДиПользователя = ИДЧата;
				РегистрыСведений.cbr_СоответствиеПользователейДляИнтеграций.УстановитьПользователяИБ(
					СсылкаНаПользователяИБ, ТипИнтеграции, СтуктураЗаполнения);
				cbr_РаботаСTelegram.УстановитьПоследнееСообщениеТелеграм(Строка(Число(
					РезультатGet["result"][Индекс]["update_id"]) + 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры