#Область ПрограммныйИнтерфейс

// Отправить задачу в битрикс.
// 
// Параметры:
//  ЗадачаСсылка - ДокументСсылка.Центр_Задача - Задача ссылка
Процедура ОтправитьЗадачуВБитрикс(ЗадачаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	
	Если НЕ ДанныеАвторизации.Битрикс24ИнтеграцияВключена Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗадачи = ПолучитьДанныеЗадачи(ЗадачаСсылка, ДанныеАвторизации.ТипИнтеграции);
	ПереработатьДанныеСтруктуры(СтруктураЗадачи);
	
	АйДиЗадачиБитрикс = СтруктураЗадачи.АйДиЗадачиБитрикс;
	
	ОтправитьФайлыВБитрикс(СтруктураЗадачи, ДанныеАвторизации);	
	ОбновитьОписание(СтруктураЗадачи, ДанныеАвторизации);
	
	// Отправка данных задачи в Битрикс24
	СтруктураЗадачиДляБитрикса = СоздатьСтруктуруЗадачиДляБитрикса(СтруктураЗадачи);
	
	Если ЗначениеЗаполнено(АйДиЗадачиБитрикс) Тогда
		
		Ответ = OPI_Bitrix24.ИзменитьЗадачу(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, СтруктураЗадачиДляБитрикса, ДанныеАвторизации.Токен);
		ЭтоНоваяЗадача = Ложь;
		
	Иначе
		
		Ответ = OPI_Bitrix24.СоздатьЗадачу(ДанныеАвторизации.БитриксURL, СтруктураЗадачиДляБитрикса, ДанныеАвторизации.Токен);
		ЭтоНоваяЗадача = Истина;
		
	КонецЕсли;
	
	Если Ответ["error"] <> Неопределено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		Возврат;
			
	КонецЕсли;
	
	ДанныеЗадачи = Ответ["result"]["task"];
	
	Если ЭтоНоваяЗадача Тогда
		
		АйДиЗадачиБитрикс = ДанныеЗадачи["id"];
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Задача", СтруктураЗадачи.ЗадачаСсылка);
		СтруктураЗаписи.Вставить("АйДиЗадачиБитрикс", АйДиЗадачиБитрикс);
		
		Если ЗначениеЗаполнено(СтруктураЗадачи.АйДиПапкиФайлов) Тогда
			СтруктураЗаписи.Вставить("АйДиПапкиФайлов", СтруктураЗадачи.АйДиПапкиФайлов);
		КонецЕсли;
		
		ОбменДаннымиСлужебный.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "cbr_Б24_СоответствиеЗадач");
        
		ТекстПервогоКомментария = СтрШаблон("Задача создана на основании: %1", ПолучитьНавигационнуюСсылку(ЗадачаСсылка));
		
		Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, ТекстПервогоКомментария, ДанныеАвторизации.Токен);
	
	КонецЕсли;
		
		Ответ = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(ДанныеАвторизации.URL, СтруктураЗадачи.АйДиПапкиФайлов, , ДанныеАвторизации.Токен);
		
		Если Ответ["error"] <> Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
			
		Иначе
			ФайлыЗадачиБитрикс = Ответ["result"];
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗадачи.Свойство("Файл") Тогда
		
		АйДиОсновнойПапки = ДанныеАвторизации.АйДиКаталогФайлов;
		ПапкаФайлыЗадачи = ?(ЗначениеЗаполнено(СтруктураЗадачи.АйДиПапкиФайлов), СтруктураЗадачи.АйДиПапкиФайлов, ПолучитьАйДиПапкиФайлов(ЗадачаСсылка, АйДиЗадачиБитрикс, АйДиОсновнойПапки));
		
		Для Каждого Файл Из СтруктураЗадачи.Файл Цикл
			
			ФайлЕстьВПапке = Ложь;
			
			Если Файл.Значение["АйДиФайлаБитрикс"] = "0" Тогда
				
				АйДиФайла = ЗагрузитьФайлБитрикс(Файл.Ключ, ПапкаФайлыЗадачи);
				Ответ = OPI_Bitrix24.ДобавитьФайлВЗадачу(ДанныеАвторизации.URL, АйДиЗадачиБитрикс, АйДиФайла, ДанныеАвторизации.Токен);
				
				Если Ответ["error"] <> Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				Иначе
					
					МенеджерЗаписи = РегистрыСведений.cbr_Б24_СоответствиеФайлов.СоздатьМенеджерЗаписи();
			        МенеджерЗаписи.Файл = Файл.Ключ;
			        МенеджерЗаписи.АйДиФайлаБитрикс = АйДиФайла;
			        МенеджерЗаписи.Изменен = Ложь;
			        МенеджерЗаписи.Записать();
			        
			        ФайлЕстьВПапке = Истина;
			        
				КонецЕсли;
				
			ИначеЕсли Файл.Значение["Изменен"] Тогда	
				
				// ТУДУ если файл изменен, то удаляем с битрикса и загружаем по новой. Исправляем запись в регистре
			
			Иначе
				
				// Если есть айди файла, навсякий случай проверим есть ли этот файл в папке
				Индекс = 0;
				Для Каждого Элемент Из ФайлыЗадачиБитрикс Цикл
					
					Если Элемент["ID"] = Файл.Значение["АйДиФайлаБитрикс"] Тогда
						ФайлЕстьВПапке = Истина;
						ФайлыЗадачиБитрикс.Удалить(Индекс);
						Прервать;
					КонецЕсли;
					
					Индекс = Индекс + 1;
						
				КонецЦикла;
								
			КонецЕсли;
			
			Если НЕ ФайлЕстьВПапке Тогда
				АйДиФайла = ЗагрузитьФайлБитрикс(Файл.Ключ, ПапкаФайлыЗадачи);
				Ответ = OPI_Bitrix24.ДобавитьФайлВЗадачу(ДанныеАвторизации.URL, АйДиЗадачиБитрикс, АйДиФайла, ДанныеАвторизации.Токен);
				
				Если Ответ["error"] <> Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				Иначе
					
					МенеджерЗаписи = РегистрыСведений.cbr_Б24_СоответствиеФайлов.СоздатьМенеджерЗаписи();
			        МенеджерЗаписи.Файл = Файл.Ключ;
			        МенеджерЗаписи.АйДиФайлаБитрикс = АйДиФайла;
			        МенеджерЗаписи.Изменен = Ложь;
			        МенеджерЗаписи.Записать();
			        
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ФайлыЗадачиБитрикс) Тогда
		
		Для Каждого Элемент Из ФайлыЗадачиБитрикс Цикл
			Ответ = OPI_Bitrix24.ПоместитьФайлВКорзину(ДанныеАвторизации.URL, Элемент["ID"], ДанныеАвторизации.Токен);
			
			Если Ответ["error"] <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
			КонецЕсли;
			
		КонецЦикла;	
			
	КонецЕсли;	
		
КонецПроцедуры

// Удалить задачу в битриксе.
// 
// Параметры:
//  ЗадачаСсылка - ДокументСсылка.cbr_Задача - Ссылка на задачу для получения АйДи задачи в Битриксе
Процедура УдалитьЗадачуВБитриксе(ЗадачаСсылка) Экспорт
	// При удалении задачи должна удаляться папка под файлы
	// Удалять запись регистра соответствие задач
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	
	Если НЕ ДанныеАвторизации.Битрикс24ИнтеграцияВключена Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Б24_СоответствиеЗадач.АйДиЗадачиБитрикс КАК АйДиЗадачиБитрикс,
		|	cbr_Б24_СоответствиеЗадач.АйДиПапкиФайлов КАК АйДиПапкиФайлов
		|ИЗ
		|	РегистрСведений.cbr_Б24_СоответствиеЗадач КАК cbr_Б24_СоответствиеЗадач
		|ГДЕ
		|	cbr_Б24_СоответствиеЗадач.Задача = &ЗадачаСсылка";
	
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.АйДиЗадачиБитрикс) Тогда
			
			Ответ = OPI_Bitrix24.УдалитьЗадачу(ДанныеАвторизации.БитриксURL, Выборка.АйДиЗадачиБитрикс, ДанныеАвторизации.Токен);
		
			Если Ответ["error"] <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				Возврат;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.АйДиЗадачиБитрикс) Тогда	
			
			Ответ = OPI_Bitrix24.УдалитьКаталог(ДанныеАвторизации.БитриксURL, Выборка.АйДиПапкиФайлов, ДанныеАвторизации.Токен);
			
			Если Ответ["error"] <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("Задача", ЗадачаСсылка);
				СтруктураЗаписи.Вставить("АйДиПапкиФайлов", Выборка.АйДиПапкиФайлов);
				
				ОбменДаннымиСлужебный.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "cbr_Б24_СоответствиеФайлов");
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменДаннымиСлужебный.УдалитьНаборЗаписейВРегистреСведений(Новый Структура("Задача", ЗадачаСсылка), "cbr_Б24_СоответствиеЗадач");
	
КонецПроцедуры

Процедура СоздатьКомментарийКЗадачеИзВопроса(ЗадачаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	
	Если НЕ ДанныеАвторизации.Битрикс24ИнтеграцияВключена Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(cbr_СоответствиеПользователейДляИнтеграцийОтправитель.АйДиПользователя, """") КАК Отправитель,
		|	ЕСТЬNULL(cbr_СоответствиеПользователейДляИнтеграцийАдресат.АйДиПользователя, """") КАК Адресат,
		|	cbr_ВопросыПоЗадачам.ТекстВопроса КАК ТекстВопроса,
		|	cbr_Б24_СоответствиеЗадач.АйДиЗадачиБитрикс КАК АйДиЗадачиБитрикс,
		|	Пользователи.Наименование КАК ИмяАдресата
		|ИЗ
		|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|			cbr_СоответствиеПользователейДляИнтеграцийОтправитель
		|		ПО cbr_ВопросыПоЗадачам.Отправитель = cbr_СоответствиеПользователейДляИнтеграцийОтправитель.Пользователь
		|		И cbr_СоответствиеПользователейДляИнтеграцийОтправитель.ТипИнтеграции = &ТипИнтеграции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|			cbr_СоответствиеПользователейДляИнтеграцийАдресат
		|		ПО cbr_ВопросыПоЗадачам.Адресат = cbr_СоответствиеПользователейДляИнтеграцийАдресат.Пользователь
		|		И cbr_СоответствиеПользователейДляИнтеграцийАдресат.ТипИнтеграции = &ТипИнтеграции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_СоответствиеЗадач КАК cbr_Б24_СоответствиеЗадач
		|		ПО cbr_ВопросыПоЗадачам.Задача = cbr_Б24_СоответствиеЗадач.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО cbr_ВопросыПоЗадачам.Адресат = Пользователи.Ссылка
		|ГДЕ
		|	cbr_ВопросыПоЗадачам.Задача = &ЗадачаСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	cbr_ВопросыПоЗадачам.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ТипИнтеграции", ДанныеАвторизации.ТипИнтеграции);
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АйДиЗадачиБитрикс) Тогда
		
		Адресат = ?(ЗначениеЗаполнено(Выборка.Адресат), СтрШаблон("[USER=%1]%2[/USER] ", Выборка.Адресат, Выборка.ИмяАдресата), "");
		ТекстСообщения = Адресат + Выборка.ТекстВопроса;
		
		Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(ДанныеАвторизации.БитриксURL, Выборка.АйДиЗадачиБитрикс, 
										ТекстСообщения, Выборка.Отправитель, , ДанныеАвторизации.Токен);
										
	КонецЕсли;
	
	Если Ответ["error"] <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомментарийКЗадачеБитрикс(ЗадачаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	
	Если НЕ ДанныеАвторизации.Битрикс24ИнтеграцияВключена Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_СоответствиеПользователейДляИнтеграций.АйДиПользователя КАК АйДиПользователя,
		|	cbr_КомментарииЗадачСрезПоследних.Комментарий КАК ОписаниеЗадачи,
		|	cbr_Б24_СоответствиеЗадач.АйДиЗадачиБитрикс КАК АйДиЗадачиБитрикс,
		|	cbr_Б24_СоответствиеЗадач.АйДиПапкиФайлов КАК АйДиПапкиФайлов
		|ИЗ
		|	РегистрСведений.cbr_КомментарииЗадач.СрезПоследних(, Задача = &ЗадачаСсылка) КАК cbr_КомментарииЗадачСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|			cbr_СоответствиеПользователейДляИнтеграций
		|		ПО cbr_КомментарииЗадачСрезПоследних.Автор = cbr_СоответствиеПользователейДляИнтеграций.Пользователь
		|		И cbr_СоответствиеПользователейДляИнтеграций.ТипИнтеграции = &ТипИнтеграции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_СоответствиеЗадач КАК cbr_Б24_СоответствиеЗадач
		|		ПО cbr_КомментарииЗадачСрезПоследних.Задача = cbr_Б24_СоответствиеЗадач.Задача";
	
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("ТипИнтеграции", ДанныеАвторизации.ТипИнтеграции);
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураКомментария = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	
	// Для добавления файла к комментарию от другого пользователя нужно загрузить его в папку этого пользователя
	// Загружать будем в папку "Загруженные файлы". Если его нет, то создаем.
	
	АйДиКаталога = ПолучитьАйДиПапкиПользователя(СтруктураКомментария.АйДиПользователя, ДанныеАвторизации);
	
	Если АйДиКаталога = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКомментария.Вставить("АйДиПапкиФайлов", АйДиКаталога);
	СтруктураКомментария.Вставить("ЭтоКомментарий", Истина);
	
	ПереработатьОписание(СтруктураКомментария);
	ОтправитьФайлыВБитрикс(СтруктураКомментария, ДанныеАвторизации);
	ОбновитьОписание(СтруктураКомментария, ДанныеАвторизации);
	
	ФайлыКомментария = ?(СтруктураКомментария.Свойство("АйДиФайлов"), СтруктураКомментария.АйДиФайлов, "");
	Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(ДанныеАвторизации.БитриксURL, 
													СтруктураКомментария.АйДиЗадачиБитрикс, 
													СтруктураКомментария.ОписаниеЗадачи, 
													СтруктураКомментария.АйДиПользователя, 
													ФайлыКомментария, 
													ДанныеАвторизации.Токен);
	
	Если Ответ["error"] <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗадачуИзБитрикса(ЗадачаСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	
	Если НЕ ДанныеАвторизации.Битрикс24ИнтеграцияВключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Б24_СоответствиеЗадач.АйДиЗадачиБитрикс КАК АйДиЗадачиБитрикс
		|ИЗ
		|	РегистрСведений.cbr_Б24_СоответствиеЗадач КАК cbr_Б24_СоответствиеЗадач
		|ГДЕ
		|	cbr_Б24_СоответствиеЗадач.Задача = &ЗадачаСсылка";
	
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = OPI_Bitrix24.ПолучитьЗадачу(ДанныеАвторизации.БитриксURL, Выборка.АйДиЗадачиБитрикс, ДанныеАвторизации.Токен);
	Результат = Ответ["result"]["task"]["description"];
	Возврат Ответ;
		
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Получить список хранилищ.
// 
// Параметры:
//  СтруктураОтбора - Структура - Параметры для фильтрации по типу ("Поле хранилища" - "Значение отбора")
//  ДанныеАвторизации - Структура - Структура с данными для авторизации
// 
// Поля хранилища (получены из функции "ПолучитьСписокПолейХранилища"):
// 1. ROOT_OBJECT_ID: 		USE_IN_SHOW - Да 	/ USE_IN_FILTER - Нет 	/ TYPE - integer.
// 2. ENTITY_ID: 			USE_IN_SHOW - Да 	/ USE_IN_FILTER - Да 	/ TYPE - string.
// 3. ENTITY_TYPE: 			USE_IN_SHOW - Да 	/ USE_IN_FILTER - Да 	/ TYPE - string.
// 4. MODULE_ID: 			USE_IN_SHOW - Да 	/ USE_IN_FILTER - Нет 	/ TYPE - string.
// 5. CODE: 				USE_IN_SHOW - Да 	/ USE_IN_FILTER - Да 	/ TYPE - string.
// 6. NAME: 				USE_IN_SHOW - Да 	/ USE_IN_FILTER - Да 	/ TYPE - string.
// 7. ID: 					USE_IN_SHOW - Да 	/ USE_IN_FILTER - Да 	/ TYPE - integer.
// 
// Возвращаемое значение:
//  Строка - Получить список хранилищ.
Функция ПолучитьСписокХранилищ(Знач СтруктураОтбора = "", ДанныеАвторизации) Экспорт
	
	НомерЗаписи = 0;
	МаксимальноЗаписей = 1000;
	
	МассивХранилищ = Новый Массив();;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("filter", СтруктураОтбора);
	
	Пока НомерЗаписи < МаксимальноЗаписей Цикл
		
		ДопПараметры.Вставить("start", НомерЗаписи);
		
		Ответ = OPI_Bitrix24.ПолучитьСписокХранилищ(ДанныеАвторизации.БитриксURL, ДанныеАвторизации.Токен, ДопПараметры);
		
		Если Ответ["error"] <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивХранилищ, Ответ["result"]);
		
		Если Ответ["next"] = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НомерЗаписи = Ответ["next"];
		МаксимальноЗаписей = Ответ["total"];
		
		КомандаWindows = "Timeout /T " + Формат(1, "ЧГ=0") + " /NoBreak";
		
		WshShell = Новый COMОбъект("WScript.Shell"); 
		WshShell.Run(КомандаWindows, 0, -1);
		
	КонецЦикла;
	
	Возврат МассивХранилищ;
	
КонецФункции

// Перевести массив хранилищ в текст с их свойствами.
// 
// Параметры:
//  МассивХранилищ - Массив - Массив хранилищ
// 
// Возвращаемое значение:
//  Строка - Перевести массив хранилищ в текст
Функция ПеревестиМассивХранилищВТекст(Знач МассивХранилищ) Экспорт
	
	РезультатТекст = "";
	НомерЭлемента = 1;
	
	Для Каждого ЭлементМассива Из МассивХранилищ Цикл
			РезультатТекст = РезультатТекст + НомерЭлемента;
			
			Для Каждого Элемент Из ЭлементМассива Цикл
				
				РезультатТекст = РезультатТекст + ". " + Элемент.Ключ + " - " + Элемент.Значение + " / ";
				
			КонецЦикла;
			
			РезультатТекст = РезультатТекст + Символы.ПС;
			НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	
	Возврат РезультатТекст;
	
КонецФункции

Функция ПолучитьСписокПолейХранилища() Экспорт
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	Ответ = OPI_Bitrix24.ПолучитьПоляХранилища(ДанныеАвторизации.БитриксURL, ДанныеАвторизации.Токен);
	
	РезультатТекст = "";
	НомерПоля = 1;
	
	Если Ответ["error"] <> Неопределено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		Возврат Неопределено;
			
	КонецЕсли;
	
	Для Каждого ПолеХранилища Из Ответ["result"] Цикл
		
		РезультатТекст = РезультатТекст + НомерПоля + ". " + ПолеХранилища.Ключ + ": ";
		
		Для Каждого СвойствоПоля Из ПолеХранилища.Значение Цикл
			РезультатТекст = РезультатТекст + СвойствоПоля.Ключ + " - " + СвойствоПоля.Значение + " / ";
		КонецЦикла;
		
		РезультатТекст = РезультатТекст + Символы.ПС;
		НомерПоля = НомерПоля + 1;
		
	КонецЦикла;
	
	Возврат РезультатТекст;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьДанныеАвторизации()
	
	ТипНастройки = Перечисления.cbr_Б24_Настройки.ДанныеАвторизации;
	ДанныеАвторизации = РегистрыСведений.cbr_Б24_Настройки.ПолучитьНастройкиИзРегистра(ТипНастройки);
	
//	ВебХук = "https://c1c.bitrix24.ru/rest/3097/ztlcnlwwa060a57v/";
//	Токен = "";
//	ТипИнтеграции = ОбщегоНазначения.ПредопределенныйЭлемент("ПланВидовХарактеристик.cbr_ВидыПользовательскихНастроек.Битрикс");
//	
//	ДанныеАвторизации = Новый Структура;
//	
//	ДанныеАвторизации.Вставить("URL", ВебХук);
//	ДанныеАвторизации.Вставить("Токен", Токен);
//	ДанныеАвторизации.Вставить("АйДиАдмин", 3097);
//	ДанныеАвторизации.Вставить("АйДиХранилище", 3943);
//	ДанныеАвторизации.Вставить("АйДиКаталогФайлов", 668697);
//	ДанныеАвторизации.Вставить("ТипИнтеграции", ТипИнтеграции);
	
	Возврат ДанныеАвторизации;
	
КонецФункции

#Область ДанныеЗадачи

Функция ПолучитьДанныеЗадачи(ЗадачаСсылка, ТипИнтеграции)
	
	СтатусВБитриксеСтандартный = 2;
	ПриоритетВБитриксеСтандартный = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.Пользователи
		|			ТОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель
		|		КОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.cbr_ГруппыДоступаКЗадачам
		|			ТОГДА cbr_ГруппыДоступаКЗадачам.Руководитель
		|		ИНАЧЕ cbr_Задача.Автор
		|	КОНЕЦ КАК Исполнитель,
		|	cbr_Задача.Ссылка КАК Задача,
		|	cbr_Задача.Номер
		|ПОМЕСТИТЬ ВТ_ЗадачаИсполнитель
		|ИЗ
		|	Документ.cbr_Задача КАК cbr_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних КАК cbr_ИсполнителиЗадачСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_ГруппыДоступаКЗадачам КАК cbr_ГруппыДоступаКЗадачам
		|			ПО cbr_ИсполнителиЗадачСрезПоследних.Исполнитель = cbr_ГруппыДоступаКЗадачам.Ссылка
		|		ПО cbr_ИсполнителиЗадачСрезПоследних.Задача = cbr_Задача.Ссылка
		|ГДЕ
		|	cbr_Задача.Ссылка = &ЗадачаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_Задача.Наименование КАК Наименование,
		|	cbr_Задача.ОписаниеЗадачи КАК ОписаниеЗадачи,
		|	cbr_Задача.ВидЗадачи КАК ВидЗадачи,
		|	cbr_Задача.Постановщик КАК Постановщик,
		|	ЕСТЬNULL(cbr_Б24_НастройкиПриоритетЗадачи.Значение, &ПриоритетВБитриксеСтандартный) КАК Приоритет,
		|	cbr_Задача.УчетВремени КАК УчетВремени,
		|	cbr_Задача.КонтрольВремени КАК КонтрольВремени,
		|	cbr_Задача.Метка КАК Метка,
		|	Центр_Б24_СоответствиеПользователейАвтор.АйДиПользователя КАК Автор,
		|	Центр_Б24_СоответствиеПользователейМенеджер.АйДиПользователя КАК ГлавныйМенеджер,
		|	Центр_Б24_СоответствиеЗадачВыбранная.АйДиЗадачиБитрикс КАК АйДиЗадачиБитрикс,
		|	Центр_Б24_СоответствиеЗадачВыбранная.АйДиПапкиФайлов КАК АйДиПапкиФайлов,
		|	cbr_Б24_СоответствиеЗадачГлавная.АйДиЗадачиБитрикс КАК ГлавнаяЗадача,
		|	ЕСТЬNULL(cbr_Б24_НастройкиСтатусЗадачи.Значение, &СтатусВБитриксеСтандартный) КАК СтатусЗадачи,
		|	cbr_ДедлайнЗадачСрезПоследних.Дедлайн КАК ДедлайнЗадачи,
		|	cbr_СоответствиеПользователейДляИнтеграцийИсполнитель.АйДиПользователя КАК Исполнитель,
		|	ЕСТЬNULL(cbr_ОценкаЧасовСрезПоследних.До, 0) * 60 * 60 КАК ОценкаЧасов,
		|	ВТ_ЗадачаИсполнитель.Задача КАК ЗадачаСсылка,
		|	ВТ_ЗадачаИсполнитель.Номер КАК ЗадачаНомер
		|ИЗ
		|	ВТ_ЗадачаИсполнитель КАК ВТ_ЗадачаИсполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.cbr_Задача КАК cbr_Задача
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|				Центр_Б24_СоответствиеПользователейАвтор
		|			ПО cbr_Задача.Автор = Центр_Б24_СоответствиеПользователейАвтор.Пользователь
		|			И Центр_Б24_СоответствиеПользователейАвтор.ТипИнтеграции = &ТипИнтеграции
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|				Центр_Б24_СоответствиеПользователейМенеджер
		|			ПО cbr_Задача.ГлавныйМенеджер = Центр_Б24_СоответствиеПользователейМенеджер.Пользователь
		|			И Центр_Б24_СоответствиеПользователейМенеджер.ТипИнтеграции = &ТипИнтеграции
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_СоответствиеЗадач КАК Центр_Б24_СоответствиеЗадачВыбранная
		|			ПО cbr_Задача.Ссылка = Центр_Б24_СоответствиеЗадачВыбранная.Задача
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_СоответствиеЗадач КАК cbr_Б24_СоответствиеЗадачГлавная
		|			ПО cbr_Задача.ГлавнаяЗадача = cbr_Б24_СоответствиеЗадачГлавная.Задача
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СтатусыЗадач.СрезПоследних(, Задача = &ЗадачаСсылка) КАК
		|				cbr_СтатусыЗадачСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_Настройки КАК cbr_Б24_НастройкиСтатусЗадачи
		|				ПО cbr_СтатусыЗадачСрезПоследних.Статус = cbr_Б24_НастройкиСтатусЗадачи.Настройка
		|			ПО cbr_СтатусыЗадачСрезПоследних.Задача = cbr_Задача.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ДедлайнЗадач.СрезПоследних(, Задача = &ЗадачаСсылка) КАК
		|				cbr_ДедлайнЗадачСрезПоследних
		|			ПО cbr_ДедлайнЗадачСрезПоследних.Задача = cbr_Задача.Ссылка
		|			И cbr_ДедлайнЗадачСрезПоследних.Согласовано = ИСТИНА
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_Настройки КАК cbr_Б24_НастройкиПриоритетЗадачи
		|			ПО cbr_Задача.Приоритет = cbr_Б24_НастройкиПриоритетЗадачи.Настройка
		|		ПО ВТ_ЗадачаИсполнитель.Задача = cbr_Задача.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК
		|			cbr_СоответствиеПользователейДляИнтеграцийИсполнитель
		|		ПО ВТ_ЗадачаИсполнитель.Исполнитель = cbr_СоответствиеПользователейДляИнтеграцийИсполнитель.Пользователь
		|		И cbr_СоответствиеПользователейДляИнтеграцийИсполнитель.ТипИнтеграции = &ТипИнтеграции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &ЗадачаСсылка) КАК
		|			cbr_ОценкаЧасовСрезПоследних
		|		ПО ВТ_ЗадачаИсполнитель.Задача = cbr_ОценкаЧасовСрезПоследних.Задача
		|		И cbr_ОценкаЧасовСрезПоследних.Согласовано = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЗадачаИсполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	cbr_ЗадачаНаблюдатели.Ссылка,
		|	cbr_ЗадачаНаблюдатели.Пользователь КАК Наблюдатель,
		|	Центр_Б24_СоответствиеПользователей.АйДиПользователя
		|ПОМЕСТИТЬ ВТ_Наблюдатели
		|ИЗ
		|	Документ.cbr_Задача.Наблюдатели КАК cbr_ЗадачаНаблюдатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СоответствиеПользователейДляИнтеграций КАК Центр_Б24_СоответствиеПользователей
		|		ПО cbr_ЗадачаНаблюдатели.Пользователь = Центр_Б24_СоответствиеПользователей.Пользователь
		|ГДЕ
		|	cbr_ЗадачаНаблюдатели.Ссылка = &ЗадачаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	cbr_ЗадачаЧекЛист.Текст КАК ЧекЛист,
		|	cbr_ЗадачаЧекЛист.Выполнен КАК ЧекЛистСтатус,
		|	cbr_ЗадачаЧекЛист.НомерСтроки
		|ПОМЕСТИТЬ ВТ_ЧекЛист
		|ИЗ
		|	Документ.cbr_Задача.ЧекЛист КАК cbr_ЗадачаЧекЛист
		|ГДЕ
		|	cbr_ЗадачаЧекЛист.Ссылка = &ЗадачаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	cbr_ЗадачаПрисоединенныеФайлы.Ссылка,
		|	ЕСТЬNULL(cbr_Б24_СоответствиеФайлов.АйДиФайлаБитрикс, ""0"") КАК АйДиФайлаБитрикс,
		|	ЕСТЬNULL(cbr_Б24_СоответствиеФайлов.Изменен, ЛОЖЬ) КАК Изменен
		|ПОМЕСТИТЬ ВТ_ФайлыЗадачи
		|ИЗ
		|	Справочник.cbr_ЗадачаПрисоединенныеФайлы КАК cbr_ЗадачаПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_Б24_СоответствиеФайлов КАК cbr_Б24_СоответствиеФайлов
		|		ПО cbr_ЗадачаПрисоединенныеФайлы.Ссылка = cbr_Б24_СоответствиеФайлов.Файл
		|ГДЕ
		|	cbr_ЗадачаПрисоединенныеФайлы.ВладелецФайла = &ЗадачаСсылка
		|	И cbr_ЗадачаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Наблюдатели.АйДиПользователя КАК Наблюдатель,
		|	ВТ_ЧекЛист.ЧекЛист КАК ЧекЛист,
		|	ВТ_ЧекЛист.ЧекЛистСтатус КАК ЧекЛистСтатус,
		|	ВТ_ФайлыЗадачи.Ссылка КАК Файл,
		|	ВТ_ФайлыЗадачи.АйДиФайлаБитрикс КАК АйДиФайлаБитрикс,
		|	ВТ_ФайлыЗадачи.Изменен КАК ФайлИзменен
		|ИЗ
		|	ВТ_ЧекЛист КАК ВТ_ЧекЛист
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ФайлыЗадачи КАК ВТ_ФайлыЗадачи
		|		ПО ВТ_ЧекЛист.НомерЗаписи = ВТ_ФайлыЗадачи.НомерЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Наблюдатели КАК ВТ_Наблюдатели
		|		ПО ВТ_ЧекЛист.НомерЗаписи = ВТ_Наблюдатели.НомерЗаписи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ЧекЛист.НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗадачаСсылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("ТипИнтеграции", ТипИнтеграции);
	Запрос.УстановитьПараметр("СтатусВБитриксеСтандартный", СтатусВБитриксеСтандартный);
	Запрос.УстановитьПараметр("ПриоритетВБитриксеСтандартный", ПриоритетВБитриксеСтандартный);
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураИзЗапроса = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(МассивРезультатов[1]);
	
	ПоследнийЭлементМассива = МассивРезультатов[МассивРезультатов.ВГраница()];
	
	// Создать структуру для массивов данных с именами колонок из запроса
	СтруктураМассивов = Новый Структура();
	Для Каждого Колонка Из ПоследнийЭлементМассива.Колонки Цикл
		СтруктураМассивов.Вставить(Колонка.Имя, Новый Массив());	
	КонецЦикла;
	
	ВыборкаТабличныхЗначений = ПоследнийЭлементМассива.Выбрать();
	
	// Заполняем структуру данных из табличных частей 
	Пока ВыборкаТабличныхЗначений.Следующий() Цикл
		
		Для Каждого Элемент Из СтруктураМассивов Цикл
			
			Если ЗначениеЗаполнено(ВыборкаТабличныхЗначений[Элемент.Ключ]) Тогда
				
				СтруктураМассивов[Элемент.Ключ].Добавить(ВыборкаТабличныхЗначений[Элемент.Ключ]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавляем к структуре задачи данные из табличных частей
	Для Каждого Элемент Из СтруктураМассивов Цикл
		Если Элемент.Значение.Количество() Тогда
			СтруктураИзЗапроса.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СтруктураИзЗапроса;	
КонецФункции

// Получает на вход структуру с данными по задаче и переводит в нужный формат для дальнейшей обработки.
// 
// Параметры:
//  ДанныеЗадачи - Структура - Структура с данными по задаче
Процедура ПереработатьДанныеСтруктуры(ДанныеЗадачи)
	
	ПереработатьОписание(ДанныеЗадачи);
	
	ПереработатьСтруктуруЧеклиста(ДанныеЗадачи);
	
	ПереработатьСтруктуруФайлов(ДанныеЗадачи);
		
	Для Каждого Элемент Из ДанныеЗадачи Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			ДанныеЗадачи.Вставить(Элемент.Ключ, "");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создать структуру соответствий ключей для задачи в битриксе.
// 
// UF_AUTO_353965577273 		- type - boolean 		/ title - Согласовано / 
// UF_AUTO_799574953143 		- type - double 		/ title - Оценка / 
// UF_MAIL_MESSAGE 			- type - mail_message 	/ title -  / 
// UF_TASK_WEBDAV_FILES 		- type - disk_file 		/ title - Загрузить файлы / 
// IS_PINNED 				- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// CHECKLIST 				- type - array 			/ title -  / 
// VIEWED_DATE 				- type - datetime 		/ title - Дата последнего просмотра / 
// EXCHANGE_MODIFIED 		- default -  			/ type - datetime 									/ title - EXCHANGE_MODIFIED / 
// SITE_ID 					- type - string 		/ title - SITE_ID / 
// FORUM_ID 					- type - integer 		/ title - FORUM_ID / 
// FORUM_TOPIC_ID 			- type - integer 		/ title - FORUM_TOPIC_ID / 
// FORKED_BY_TEMPLATE_ID 	- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Создано из шаблона / 
// EXCHANGE_ID 				- default 	-  			/ type - integer 									/ title - EXCHANGE_ID / 
// MATCH_WORK_TIME 			- type 	- integer 		/ title - Пропустить выходные дни / 
// TASK_CONTROL 				- default 	- N 		/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Принять работу / 
// ALLOW_TIME_TRACKING 		- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// ALLOW_CHANGE_DEADLINE 	- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// FLOW_ID 					- default - 0 			/ type - integer 									/ title - Поток / 
// SERVICE_COMMENTS_COUNT 	- default - 0 			/ type - integer 									/ title -  / 
// COMMENTS_COUNT 			- default - 0 			/ type - integer 									/ title - Кол-во комментариев / 
// ADD_IN_REPORT 			- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Добавить в отчет / 
// END_DATE_PLAN 			- default -  			/ type - datetime 									/ title - Плановое завершение / 
// IS_MUTED 					- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// START_DATE_PLAN 			- default -  			/ type - datetime 									/ title - Плановое начало / 
// OUTLOOK_VERSION 			- default -  			/ type - integer 									/ title - OUTLOOK_VERSION / 
// SORTING 					- type - double 		/ title - Индекс сортировки / 
// GUID 						- default -  			/ type - string 									/ title - GUID / 
// ACTIVITY_DATE 			- default -  			/ type - datetime 									/ title -  / 
// DURATION_TYPE 			- default - days 		/ values - Массив 									/ type - enum / title - DURATION_TYPE / 
// UF_CRM_TASK 				- type - crm 			/ title - Элементы CRM / 
// CLOSED_BY 				- default -  			/ type - integer 									/ title - Закрыл задачу / 
// IS_PINNED_IN_GROUP 		- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// STATUS_CHANGED_DATE 		- type - datetime 		/ title - Дата изменения статуса / 
// STATUS_CHANGED_BY 		- type - integer 		/ title - Изменил статус / 
// DURATION_FACT 			- type - integer 		/ title - Затрачено (фактически) / 
// CHANGED_DATE 				- type - datetime 		/ title - Дата изменения / 
// CHANGED_BY 				- type - integer 		/ title - Изменил / 
// DATE_START 				- default -  			/ type - datetime / title - Дата начала / 
// TIME_ESTIMATE 			- type - integer 		/ title - Затраченое время / 
// AUDITORS 					- type - array 			/ title - Наблюдатели / 
// ACCOMPLICES 				- type - array 			/ title - Соучастники / 
// RESPONSIBLE_ID 			- required - Да 		/ type - integer 									/ title - Исполнитель / 
// CREATED_BY 				- required - Да 		/ type - integer 									/ title - Постановщик / 
// XML_ID 					- default -  			/ type - string 									/ title - XML_ID / 
// BACKLOG_ID 				- default - 0 			/ type - integer 									/ title - Бэклог / 
// FAVORITE 					- default -  			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// SPRINT_ID 				- default - 0 			/ type - integer 									/ title - Спринт / 
// NEW_COMMENTS_COUNT 		- default - 0 			/ type - integer 									/ title -  / 
// CREATED_DATE 				- type - datetime 		/ title -  / 
// SUBORDINATE 				- default -  			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Задача подчиненного / 
// NOT_VIEWED 				- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title -  / 
// CLOSED_DATE 				- default -  			/ type - datetime 									/ title - Дата закрытия / 
// MULTITASK 				- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Множественная задача / 
// TIME_SPENT_IN_LOGS 		- type - integer 		/ title - Затраченое время из истории изменений / 
// REPLICATE 				- default - N 			/ values - ( N-Нет/Y-Да/ ) 							/ type - enum / title - Повторяемая задача / 
// STATUS 					- default - 2 			/ values - ( 6-Отложена/5-Завершена/4-Ожидает контроля/3-Выполняется/2-Ждёт выполнения/ ) type - enum / title - Статус / 
// DURATION_PLAN 			- type - integer 		/ title - Затрачено (план) / 
// MARK 						- default -  			/ values - ( P-Положительная/N-Отрицательная/ ) 	/ type - enum / title - Оценка / 
// UF_AUTO_791871108683 		- type - string 		/ title - Клиент / 
// TITLE 					- required - Да 		/ type - string 									/ title - Название / 
// GROUP_ID 					- default - 0 			/ type - integer									/ title - Проект / 
// STAGE_ID 					- default - 0 			/ type - integer 									/ title - Стадия / 
// PRIORITY 					- default - 1 			/ values - ( 0-Низкий/1-Средний/2-Высокий/ ) 		/ type - enum / title - Приоритет / 
// PARENT_ID 				- default - 0 			/ type - integer 									/ title - ID базовой задачи / 
// DESCRIPTION 				- type - string 		/ title - Описание / 
// ID 						- type - integer 		/ primary - Да 										/ title - ID / 
// DEADLINE 					- default -  			/ type - datetime 									/ title - Крайний срок /. 
// 
// Возвращаемое значение:
// Структура Из КлючИЗначение - Структура полей  
Функция СоздатьСтруктуруСоответствийКлючей()
	
	СтруктураСоответствияКлючей = Новый Структура();
	
	СтруктураСоответствияКлючей.Вставить("Наименование", "TITLE");
	СтруктураСоответствияКлючей.Вставить("ОписаниеЗадачи", "DESCRIPTION");
	СтруктураСоответствияКлючей.Вставить("ВидЗадачи", "");
	СтруктураСоответствияКлючей.Вставить("СтатусЗадачи", "STATUS");
	СтруктураСоответствияКлючей.Вставить("ДедлайнЗадачи", "DEADLINE");
	СтруктураСоответствияКлючей.Вставить("Приоритет", "PRIORITY");
	СтруктураСоответствияКлючей.Вставить("Автор", "CREATED_BY");
	СтруктураСоответствияКлючей.Вставить("ГлавнаяЗадача", "PARENT_ID");
	СтруктураСоответствияКлючей.Вставить("УчетВремени", "");
	СтруктураСоответствияКлючей.Вставить("КонтрольВремени", "");
	СтруктураСоответствияКлючей.Вставить("ГлавныйМенеджер", "");
	СтруктураСоответствияКлючей.Вставить("Исполнитель", "RESPONSIBLE_ID");
	СтруктураСоответствияКлючей.Вставить("Наблюдатель", "AUDITORS");
	СтруктураСоответствияКлючей.Вставить("ДополнительныеИсполнители", "ACCOMPLICES");
	СтруктураСоответствияКлючей.Вставить("ЧекЛист", "CHECKLIST");
	СтруктураСоответствияКлючей.Вставить("ОценкаЧасов", "TIME_ESTIMATE");
	СтруктураСоответствияКлючей.Вставить("АйДиФайлов", "UF_TASK_WEBDAV_FILES");

	Возврат СтруктураСоответствияКлючей;
	
КонецФункции

// Заменить ключи в структуре задачи в соответствии со структурой из "СоздатьСтруктуруСоответствийКлючей".
// 
// Параметры:
//  ДанныеЗадачи - Структура - полученная из "ПолучитьДанныеЗадачи". Содержит поля и их значения из базы
// 
// Возвращаемое значение:
//  Структура - структура с измененными названиями ключей для Битрикс24
Функция СоздатьСтруктуруЗадачиДляБитрикса(ДанныеЗадачи)
	
	СоответствиеКлючей = СоздатьСтруктуруСоответствийКлючей();
	ДанныеЗадачиДляБитрикса = Новый Структура();
	
	Для Каждого ПараметрЗадачи Из ДанныеЗадачи Цикл
		Если СоответствиеКлючей.Свойство(ПараметрЗадачи.Ключ) = Истина 
				И ЗначениеЗаполнено(СоответствиеКлючей[ПараметрЗадачи.Ключ]) Тогда
					
			ДанныеЗадачиДляБитрикса.Вставить(СоответствиеКлючей[ПараметрЗадачи.Ключ], ПараметрЗадачи.Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗадачиДляБитрикса;
	
КонецФункции

Процедура ОбновитьОписание(СтруктураЗадачи, ДанныеАвторизации)
	
	Если СтруктураЗадачи.Свойство("КартинкиВОписании") И СтруктураЗадачи.Свойство("Файлы") Тогда
		
		СтруктураПараметров = ПолучитьСтруктуруДляЗаменыЗаглушек(СтруктураЗадачи["Файлы"]);
		ТекстОписания = ОбновитьОписаниеСКартинками(СтруктураЗадачи.ОписаниеЗадачи, СтруктураПараметров);
		
		СтруктураЗадачи.Вставить("ОписаниеЗадачи", ТекстОписания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧекЛисты

Процедура ОбновитьЧекЛистЗадачиБитрикс(АйДиЗадачиБитрикс, ЧекЛистЗадачиБитрикс, ЧекЛистЗадачи, ДанныеАвторизации)
	
	Если ЧекЛистЗадачиБитрикс.Количество() > 1 Тогда
		
		// Пройтись по всем элементам чеклиста что бы определить минимальный индекс строки
		// Иногда меняется с первого на нулевой
		// Заодно убираем сам чеклист из списка
		МинимальныйИндекс = 1;
		Для Каждого Элемент Из ЧекЛистЗадачиБитрикс Цикл
		
			Если Элемент.Значение["parentId"] = 0 Тогда
				ЧекЛистЗадачиБитрикс.Удалить(Элемент.Ключ);
				Продолжить;
			КонецЕсли;
			
			ИндексСтрокой = Элемент.Значение["sortIndex"];
			Индекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИндексСтрокой);
			
			Если МинимальныйИндекс > Индекс Тогда
				МинимальныйИндекс = Индекс;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ЧекЛистЗадачиБитрикс Цикл
			
			ИндексСтрокой = Элемент.Значение["sortIndex"];
			Индекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИндексСтрокой);
			АйДиЭлемента = Элемент.Значение["id"];
			
			Если МинимальныйИндекс = 0 Тогда
				Индекс = Индекс + 1;
				ИндексСтрокой = Строка(Индекс);
			КонецЕсли;
			
			Если Индекс <= ЧекЛистЗадачи.Количество() Тогда
				
				Таск = ЧекЛистЗадачи[ИндексСтрокой];
				
				Если Элемент.Значение["title"] <> Таск["Текст"] Тогда
					Ответ = OPI_Bitrix24.ИзменитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, АйДиЭлемента, Таск["Текст"], Таск["Статус"], ДанныеАвторизации.Токен);	
				ИначеЕсли Элемент.Значение["isComplete"] <> Таск["Статус"] Тогда
					
					Если Таск["Статус"] = "Y" Тогда
						Ответ = OPI_Bitrix24.ВыполнитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, АйДиЭлемента, ДанныеАвторизации.Токен);
					Иначе
						Ответ = OPI_Bitrix24.ВозобновитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, АйДиЭлемента, ДанныеАвторизации.Токен);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Ответ = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, АйДиЭлемента, ДанныеАвторизации.Токен);
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексДобавления = ?(ЧекЛистЗадачиБитрикс.Количество() < ЧекЛистЗадачи.Количество(), ЧекЛистЗадачиБитрикс.Количество(), ЧекЛистЗадачи.Количество()) + 1;
	Иначе
		ИндексДобавления = 1;
	КонецЕсли;	
		
	Пока ИндексДобавления <= ЧекЛистЗадачи.Количество() Цикл
		
		ИндексСтрокой = Строка(ИндексДобавления);
		Таск = ЧекЛистЗадачи[ИндексСтрокой];
		СтатусТаска = ?(Таск["Статус"] = "Y", Истина, Ложь);
		
		Ответ = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, Таск["Текст"], СтатусТаска, ДанныеАвторизации.Токен);
		ИндексДобавления = ИндексДобавления + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьЧекЛистЗадачиБитрикс(АйДиЗадачиБитрикс, ЧекЛистЗадачиБитрикс, ДанныеАвторизации)
	
	Для Каждого Элемент Из ЧекЛистЗадачиБитрикс Цикл
		
		Если Элемент.Значение["sortIndex"] = "0" И Элемент.Значение["parentId"] = 0 Тогда
			АйДиЭлемента = Элемент.Значение["id"];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АйДиЭлемента) Тогда
		Ответ = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, АйДиЭлемента, ДанныеАвторизации.Токен);
	КонецЕсли;
	
КонецПроцедуры

Функция ОчиститьЧекЛистЗадачи(АйДиЗадачиБитрикс)
	
	ДанныеАвторизации = ПолучитьДанныеАвторизации();
	Ответ = OPI_Bitrix24.ПолучитьЧеклистЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, ДанныеАвторизации.Токен);
	
	Если Ответ["error"] <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		Возврат Ложь;
	КонецЕсли;
	
	ЧекЛистЗадачи = Ответ["result"];
	Если ЧекЛистЗадачи.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из ЧекЛистЗадачи Цикл
		
		Ответ = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, Элемент["ID"], ДанныеАвторизации.Токен);
		
		Если Ответ["error"] <> Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПереработатьСтруктуруЧеклиста(ДанныеЗадачи)
	
	Если ДанныеЗадачи.Свойство("ЧекЛист") Тогда
		
		Индекс = 0;
		СтруктураЧекЛиста = Новый Соответствие();
		
		Для Каждого СтрокаЧекЛиста Из ДанныеЗадачи.ЧекЛист Цикл
			
			ДанныеСтрокиЧекЛиста = Новый Соответствие();
			ДанныеСтрокиЧекЛиста.Вставить("Текст", СтрокаЧекЛиста);
			ДанныеСтрокиЧекЛиста.Вставить("Статус", ?(ДанныеЗадачи.ЧекЛистСтатус[Индекс], "Y", "N"));
			
			СтруктураЧекЛиста.Вставить(Строка(Индекс + 1), ДанныеСтрокиЧекЛиста);
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		ДанныеЗадачи.Вставить("ЧекЛист", СтруктураЧекЛиста);
		ДанныеЗадачи.Удалить("ЧекЛистСтатус");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЧекЛистВБитрикс(СтруктураЗадачи, ДанныеЗадачи, ДанныеАвторизации)
	
	ЧекЛистЗадачиБитрикс = ДанныеЗадачи["checklist"];
	АйДиЗадачиБитрикс = СтруктураЗадачи.АйДиЗадачиБитрикс;
	
	Если ЧекЛистЗадачиБитрикс.Количество() Тогда
		
		Если СтруктураЗадачи.Свойство("ЧекЛист") Тогда
			ОбновитьЧекЛистЗадачиБитрикс(АйДиЗадачиБитрикс, ЧекЛистЗадачиБитрикс, СтруктураЗадачи.ЧекЛист, ДанныеАвторизации);
		Иначе
			УдалитьЧекЛистЗадачиБитрикс(АйДиЗадачиБитрикс, ЧекЛистЗадачиБитрикс, ДанныеАвторизации);
		КонецЕсли;	
	
	ИначеЕсли СтруктураЗадачи.Свойство("ЧекЛист") Тогда
		
		Индекс = 1;
		Пока Индекс <= СтруктураЗадачи.ЧекЛист.Количество() Цикл
			
			ИндексСтрокой = Строка(Индекс);
			Таск = СтруктураЗадачи.ЧекЛист[ИндексСтрокой];
			СтатусТаска = ?(Таск["Статус"] = "Y", Истина, Ложь);
			
			Ответ = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(ДанныеАвторизации.БитриксURL, АйДиЗадачиБитрикс, Таск["Текст"], СтатусТаска, ДанныеАвторизации.Токен);
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФайлыИПапки

Процедура ОтправитьФайлыВБитрикс(СтруктураЗадачи, ДанныеАвторизации)
	
	ЕстьФайлы = СтруктураЗадачи.Свойство("Файлы");
	ЗадачаНовая = НЕ ЗначениеЗаполнено(СтруктураЗадачи.АйДиЗадачиБитрикс);
	ПапкаДляФайловСуществует = ЗначениеЗаполнено(СтруктураЗадачи.АйДиПапкиФайлов);
	ЭтоКомментарий = СтруктураЗадачи.Свойство("ЭтоКомментарий");
	
	Если ЗадачаНовая И НЕ ЕстьФайлы Тогда
		Возврат;
	
	ИначеЕсли ЭтоКомментарий Тогда
		
		ЗагрузитьФайлыВБитрикс(СтруктураЗадачи["Файлы"], СтруктураЗадачи.АйДиПапкиФайлов, ДанныеАвторизации);	
			
	ИначеЕсли НЕ ЗадачаНовая И НЕ ЕстьФайлы Тогда
		
		Если ПапкаДляФайловСуществует Тогда
			Ответ = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(ДанныеАвторизации.БитриксURL, 
														СтруктураЗадачи.АйДиПапкиФайлов, , ДанныеАвторизации.Токен);
			
			Если Ответ["error"] <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				
			Иначе
				ФайлыЗадачиБитрикс = Ответ["result"];
				УдалитьФайлыИзБитрикса(ФайлыЗадачиБитрикс, ДанныеАвторизации);
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли НЕ ЗадачаНовая И ЕстьФайлы Тогда
		АйДиПапкиФайлов = ПолучитьАйДиПапкиФайлов(СтруктураЗадачи, ДанныеАвторизации);
		
		Если ПапкаДляФайловСуществует Тогда
			
			Ответ = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(ДанныеАвторизации.БитриксURL, 
														СтруктураЗадачи.АйДиПапкиФайлов, , ДанныеАвторизации.Токен);
				
			Если Ответ["error"] <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
				
			Иначе
				ФайлыЗадачиБитрикс = Ответ["result"];
				ПроверитьСовпадениеФайлов(ФайлыЗадачиБитрикс, СтруктураЗадачи["Файлы"]);
				УдалитьФайлыИзБитрикса(ФайлыЗадачиБитрикс, ДанныеАвторизации);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагрузитьФайлыВБитрикс(СтруктураЗадачи["Файлы"], АйДиПапкиФайлов, ДанныеАвторизации);
				
	ИначеЕсли ЗадачаНовая И ЕстьФайлы Тогда
		АйДиПапкиФайлов = ПолучитьАйДиПапкиФайлов(СтруктураЗадачи, ДанныеАвторизации);
		ЗагрузитьФайлыВБитрикс(СтруктураЗадачи["Файлы"], АйДиПапкиФайлов, ДанныеАвторизации);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьАйДиФайлов(СтруктураЗадачи);
	
КонецПроцедуры

Процедура ЗагрузитьФайлыВБитрикс(СписокФайлов, Знач АйДиПапкиФайлов, Знач ДанныеАвторизации)
	
	Для Каждого Файл Из СписокФайлов Цикл
		
		Если ЗначениеЗаполнено(Файл.Значение["АйДиФайлаБитрикс"]) И Файл.Значение["АйДиФайлаБитрикс"] <> "0" Тогда
			Продолжить;
		КонецЕсли;
		
		АйДиФайлаБитрикс = ЗагрузитьФайлВБитрикс(Файл.Значение, АйДиПапкиФайлов, ДанныеАвторизации);
		
		Если ЗначениеЗаполнено(АйДиФайлаБитрикс) Тогда
			
			Если Файл.Значение["ТипФайла"] = "ФайлЗадачи" Тогда
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("Файл", Файл.Значение["ФайлСсылка"]);
				СтруктураЗаписи.Вставить("АйДиФайлаБитрикс", АйДиФайлаБитрикс);
				
				ОбменДаннымиСлужебный.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "cbr_Б24_СоответствиеФайлов");
			КонецЕсли;	
			
			Файл.Значение.Вставить("АйДиФайлаБитрикс", АйДиФайлаБитрикс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьФайлВБитрикс(Знач Файл, Знач АйДиПапкиФайлов, Знач ДанныеАвторизации)
	
	Если НЕ ЗначениеЗаполнено(Файл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайла = Файл["ДвоичныйФайл"];
	ИмяФайла = Файл["ИмяФайла"] + "." + Файл["ФорматФайла"];
	MIMEТипФайла = Файл["MIMEФормат"];
	
	Ответ = OPI_Bitrix24.ЗагрузитьФайлВКаталог(ДанныеАвторизации.БитриксURL, ИмяФайла, ДанныеФайла, 
													АйДиПапкиФайлов, MIMEТипФайла, ДанныеАвторизации.Токен);
	
	Если Ответ["error"] <> Неопределено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		Возврат Неопределено;
			
	КонецЕсли;
	
	АйДиФайлаБитрикс = Ответ["result"]["ID"];
	АйДиФайлаБитрикс = Формат(АйДиФайлаБитрикс, "ЧГ=");
	
	Возврат АйДиФайлаБитрикс;
	
КонецФункции

Процедура ОбработатьАйДиФайлов(СтруктураЗадачи)
	
	Если НЕ СтруктураЗадачи.Свойство("Файлы") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеФайлы = Новый Массив();
	
	Для Каждого Файл Из СтруктураЗадачи["Файлы"] Цикл
		ДобавленныеФайлы.Добавить("n" + Файл.Значение["АйДиФайлаБитрикс"]);
	КонецЦикла;
	
	СтруктураЗадачи.Вставить("АйДиФайлов", ДобавленныеФайлы);
	
КонецПроцедуры

Функция ПолучитьАйДиПапкиФайлов(Знач СтруктураЗадачи, Знач ДанныеАвторизации)
	
	Если ЗначениеЗаполнено(СтруктураЗадачи.АйДиЗадачиБитрикс) И ЗначениеЗаполнено(СтруктураЗадачи.АйДиПапкиФайлов) Тогда
		Возврат СтруктураЗадачи.АйДиПапкиФайлов;
	Иначе
		Ответ = OPI_Bitrix24.СоздатьПодкаталог(ДанныеАвторизации.БитриксURL, ДанныеАвторизации.АйДиКаталогФайлов, 
													СтруктураЗадачи.ЗадачаНомер, ДанныеАвторизации.Токен);	
		
		Если Ответ["error"] <> Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
			Возврат Неопределено;
		КонецЕсли;
		
		АйДиПапкиФайлов = Ответ["result"]["ID"];
		АйДиПапкиФайловСтрокой = Строка(Формат(АйДиПапкиФайлов, "ЧГ="));
	
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Задача", СтруктураЗадачи.ЗадачаСсылка);
		СтруктураЗаписи.Вставить("АйДиПапкиФайлов", АйДиПапкиФайловСтрокой);
		
		Если ЗначениеЗаполнено(СтруктураЗадачи.АйДиЗадачиБитрикс) Тогда
			СтруктураЗаписи.Вставить("АйДиЗадачиБитрикс", СтруктураЗадачи.АйДиЗадачиБитрикс);
		КонецЕсли;
		
		ОбменДаннымиСлужебный.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "cbr_Б24_СоответствиеЗадач");
		
		СтруктураЗадачи.Вставить("АйДиПапкиФайлов", АйДиПапкиФайловСтрокой);
		
		Возврат АйДиПапкиФайловСтрокой;	
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАйДиПапкиПользователя(Знач АйДиПользователя, Знач ДанныеАвторизации)
	
	СтруктураОтбора = Новый Структура("ENTITY_ID", АйДиПользователя);
	Ответ = cbr_Битрикс24.ПолучитьСписокХранилищ(СтруктураОтбора, ДанныеАвторизации);
	
	Если Ответ.Количество() Тогда
		АйДиХранилища = Формат(Ответ[0]["ID"], "ЧГ=");
		
		ИмяПапкиВХранилище = "Загруженные файлы";
		ТипОбъектаВХранилище = "folder";
		
		СтруктураОтбора = Новый Структура("NAME, TYPE", ИмяПапкиВХранилище, ТипОбъектаВХранилище);
		ДопПараметры = Новый Структура("filter", СтруктураОтбора);

		Ответ = OPI_Bitrix24.ПолучитьСодержимоеХранилища(ДанныеАвторизации.БитриксURL, 
															АйДиХранилища, 
															ДопПараметры, 
															ДанныеАвторизации.Токен);
		
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ответ["error"] <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ответ.Количество() Тогда
		АйДиПапкиПользователя = Формат(Ответ["result"][0]["ID"], "ЧГ=");
	Иначе
		Ответ = OPI_Bitrix24.СоздатьКаталогВХранилище(ДанныеАвторизации.БитриксURL, 
														АйДиХранилища, 
														ИмяПапкиВХранилище, 
														ДанныеАвторизации.Токен);
		
		Если Ответ["error"] <> Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
			Возврат Неопределено;
		КонецЕсли;												
		
		АйДиПапкиПользователя = Формат(Ответ["result"]["ID"], "ЧГ=");
		
	КонецЕсли;
	
	Возврат АйДиПапкиПользователя;
	
КонецФункции

Процедура ПереработатьСтруктуруФайлов(ДанныеЗадачи)
	
	Если ДанныеЗадачи.Свойство("Файл") Тогда
		
		Индекс = 0;
		СтруктураФайлов = Новый Соответствие();
		
		Для Каждого ФайлСсылка Из ДанныеЗадачи.Файл Цикл
			
			ДанныеФайла = Новый Соответствие();
			
			АйДиФайлаБитрикс = ?(ДанныеЗадачи.Свойство("АйДиФайлаБитрикс"), ДанныеЗадачи.АйДиФайлаБитрикс[Индекс], "");
			Изменен = ?(ДанныеЗадачи.Свойство("ФайлИзменен"), ДанныеЗадачи.ФайлИзменен[Индекс], Ложь);
			
			ДвоичныйФайл = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка, Ложь);
			СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Наименование,Расширение");
			
			ИмяФайла = СвойстваФайла.Наименование + "." + СвойстваФайла.Расширение;
			MIMEФормат = ПолучитьТипФайлаMIME(СвойстваФайла.Расширение);
			
			ДанныеФайла.Вставить("ИмяФайла", 			ИмяФайла);
			ДанныеФайла.Вставить("ФайлСсылка", 			ФайлСсылка);
			ДанныеФайла.Вставить("MIMEФормат", 			MIMEФормат);
			ДанныеФайла.Вставить("ФорматФайла", 		СвойстваФайла.Расширение);
			ДанныеФайла.Вставить("ДвоичныйФайл", 		ДвоичныйФайл);	
			ДанныеФайла.Вставить("ТипФайла", 			"ФайлЗадачи");
			ДанныеФайла.Вставить("АйДиФайлаБитрикс", 	АйДиФайлаБитрикс);
			ДанныеФайла.Вставить("Изменен", 			Изменен);
			
			СтруктураФайлов.Вставить(ИмяФайла, ДанныеФайла);
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если ДанныеЗадачи.Свойство("Файлы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗадачи["Файлы"], СтруктураФайлов, Ложь);
		Иначе
			ДанныеЗадачи.Вставить("Файлы", СтруктураФайлов);
		КонецЕсли;
		
		ДанныеЗадачи.Удалить("АйДиФайлаБитрикс");
		ДанныеЗадачи.Удалить("ФайлИзменен");
		ДанныеЗадачи.Удалить("Файл");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСовпадениеФайлов(ФайлыЗадачиБитрикс, ФайлыЗадачи1С)
	
	НеТребуютЗагрузки = Новый Массив();
	
	Для Каждого ФайлЗадачи Из ФайлыЗадачи1С Цикл
		
		Если НЕ ЗначениеЗаполнено(ФайлЗадачи.Значение["АйДиФайлаБитрикс"]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексФайла = 0;
		ИндексФайлаУдалить = -1;
		
		Для Каждого ФайлБитрикс Из ФайлыЗадачиБитрикс Цикл
		
			Если ФайлЗадачи.Значение["АйДиФайлаБитрикс"] = ФайлБитрикс["ID"] И НЕ ФайлЗадачи.Значение["Изменен"]
				И НЕ СтрНачинаетсяС(ФайлБитрикс["NAME"], "сommentImg") Тогда
				
				НеТребуютЗагрузки.Добавить(ФайлЗадачи.Ключ);
				ИндексФайлаУдалить = ИндексФайла;
				Прервать;
				
			КонецЕсли;
			
			ИндексФайла = ИндексФайла + 1;
			
		КонецЦикла;
		
		Если ИндексФайлаУдалить > -1 Тогда
			ФайлыЗадачиБитрикс.Удалить(ИндексФайлаУдалить);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьФайлыИзБитрикса(Знач ФайлыДляУдаления, Знач ДанныеАвторизации)
	
	Если НЕ ЗначениеЗаполнено(ФайлыДляУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Файл Из ФайлыДляУдаления Цикл
		Ответ = OPI_Bitrix24.УдалитьФайл(ДанныеАвторизации.БитриксURL, Файл["ID"], ДанныеАвторизации.Токен);
		
		Если Ответ["error"] <> Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ["error_description"]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипФайлаMIME(Знач ФорматФайла)
	
	СоответствиеТипов = Новый Соответствие;
	
	// Текстовые
	СоответствиеТипов.Вставить("txt", 		"text/plain");
	СоответствиеТипов.Вставить("html", 		"text/html");
	СоответствиеТипов.Вставить("docx", 		"application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	СоответствиеТипов.Вставить("doc", 		"application/msword");
	СоответствиеТипов.Вставить("pdf", 		"application/pdf");
	СоответствиеТипов.Вставить("xml", 		"application/xml");
	
	// Презентации
	СоответствиеТипов.Вставить("pptx", 		"application/vnd.openxmlformats-officedocument.presentationml.presentation");
	СоответствиеТипов.Вставить("ppsx", 		"application/vnd.openxmlformats-officedocument.presentationml.slideshow");
	СоответствиеТипов.Вставить("potx", 		"application/vnd.openxmlformats-officedocument.presentationml.template");
	СоответствиеТипов.Вставить("odp", 		"application/vnd.oasis.opendocument.presentation");
	СоответствиеТипов.Вставить("otp", 		"application/vnd.oasis.opendocument.presentation-template");
	
	// Изображения
	СоответствиеТипов.Вставить("jpg", 		"image/jpeg");
	СоответствиеТипов.Вставить("jpeg", 		"image/jpeg");
	СоответствиеТипов.Вставить("png", 		"image/png");
	СоответствиеТипов.Вставить("ico", 		"image/vnd.microsoft.icon");
	СоответствиеТипов.Вставить("webp", 		"image/webp");
	СоответствиеТипов.Вставить("gif", 		"image/gif");
	СоответствиеТипов.Вставить("heic", 		"image/heic");
	
	// Табличные
	СоответствиеТипов.Вставить("xls", 		"application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlsx", 		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	
	// Архивы
	СоответствиеТипов.Вставить("zip", 		"application/zip");
	СоответствиеТипов.Вставить("rar", 		"application/vnd.rar");
	
	// Файлы 1с
	СоответствиеТипов.Вставить("epf", 		"application/octet-stream");
	СоответствиеТипов.Вставить("erf", 		"application/octet-stream");
	СоответствиеТипов.Вставить("cf", 		"application/octet-stream");
	СоответствиеТипов.Вставить("cfu", 		"application/octet-stream");
	СоответствиеТипов.Вставить("dt", 		"application/octet-stream");
	СоответствиеТипов.Вставить("mft", 		"application/octet-stream");
	СоответствиеТипов.Вставить("cd", 		"application/octet-stream");
	СоответствиеТипов.Вставить("st", 		"application/octet-stream");
	СоответствиеТипов.Вставить("mxl", 		"application/octet-stream");
	СоответствиеТипов.Вставить("elf", 		"application/octet-stream");
	СоответствиеТипов.Вставить("lgd", 		"application/octet-stream");
	СоответствиеТипов.Вставить("pff", 		"application/octet-stream");
	СоответствиеТипов.Вставить("v8i", 		"application/octet-stream");
	СоответствиеТипов.Вставить("pfl", 		"application/octet-stream");
	
	MIMEЗначение = СоответствиеТипов[НРег(ФорматФайла)];
	MIMEЗначение = ?(ЗначениеЗаполнено(MIMEЗначение), MIMEЗначение, "");
	
	Возврат MIMEЗначение;
	
КонецФункции

#КонецОбласти

#Область ОписаниеЗадачи

Процедура ПереработатьОписание(ДанныеЗадачи, Знач ЭтоКомментарий = Ложь)
	
	Если ДанныеЗадачи.Свойство("ОписаниеЗадачи") Тогда
		
		ФорматированныйДокумент = ДанныеЗадачи.ОписаниеЗадачи.Получить();
		
		ОписаниеЗадачи = "";
		ИндексСписка = 0;
		ИндексКартинки = 0;
		
		ДобавляемыеКартинки = Новый Соответствие();
		
		Для Каждого ПараграфДокумента Из ФорматированныйДокумент.Элементы Цикл
			
			ДобавитьПараграфКТексту(ПараграфДокумента, ОписаниеЗадачи, 
											ДобавляемыеКартинки, ИндексСписка, ИндексКартинки, ЭтоКомментарий);
			
		КонецЦикла;
		
		ДанныеЗадачи.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);
		
		Если ЗначениеЗаполнено(ДобавляемыеКартинки) Тогда
			ДанныеЗадачи.Вставить("Файлы", ДобавляемыеКартинки);
			ДанныеЗадачи.Вставить("КартинкиВОписании", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараграфКТексту(Знач ПараграфДокумента, ИтоговыйТекст, 
										ДобавляемыеКартинки, ИндексСписка, ИндексКартинки, ЭтоКомментарий)
	
	Если ПараграфДокумента.Элементы.Количество() = 0 Тогда
				
		ИтоговыйТекст = ИтоговыйТекст + Символы.ПС;
		ИндексСписка = 0;
		Возврат;
		
	КонецЕсли;
	
	Если ПараграфДокумента.ТипПараграфа = ТипПараграфа.МаркированныйСписок Тогда
			НачалоСтроки = " - ";
	ИначеЕсли ПараграфДокумента.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
		ИндексСписка = ИндексСписка + 1;
		НачалоСтроки = " " + ИндексСписка + ". ";
	Иначе
		НачалоСтроки = "";
	КонецЕсли;
	
	ИтоговыйТекст = ИтоговыйТекст + НачалоСтроки;
	
	Для Каждого ЭлементПараграфа Из ПараграфДокумента.Элементы Цикл
		
		ТелоНазванияКартинки = ?(ЭтоКомментарий, "сommentImg", "descImg");
		
		Если ТипЗнч(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
			ИтоговыйТекст = ИтоговыйТекст + ЭлементПараграфа.Текст;
				
		ИначеЕсли ТипЗнч(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
			
			ИмяКартинки = ТелоНазванияКартинки + ИндексКартинки;
			ДанныеКартинки = ОбработатьКартинку(ЭлементПараграфа, ИмяКартинки);
			
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				ДобавляемыеКартинки.Вставить(ИмяКартинки, ДанныеКартинки);
				ИндексКартинки = ИндексКартинки + 1;
				
				ИтоговыйТекст = ИтоговыйТекст + ДанныеКартинки["ЗаглушкаКартинки"];
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	ИтоговыйТекст = ИтоговыйТекст + Символы.ПС;		
КонецПроцедуры

Функция ОбработатьКартинку(Знач ЭлементПараграфа, Знач ИмяКартинки)
	
	ДанныеКартинки = Новый Соответствие();
	
	Если ТипЗнч(ЭлементПараграфа.Картинка) = Тип("Строка") Тогда
		ЧастиСтроки = СтрРазделить(ЭлементПараграфа.Картинка, ";");
		
		Если ЧастиСтроки.Количество() > 1 Тогда
			
			MIMEФормат = СтрРазделить(ЧастиСтроки[0], ":")[1];
			ФорматФайла = СтрРазделить(MIMEФормат, "/")[1];
			Base64Строка = СтрРазделить(ЧастиСтроки[1], ",")[1];
			ДвоичныеДанныеФайла = Base64Значение(Base64Строка);
		
		Иначе
			ПараметрыЗагрузки = Новый Структура();
			ПараметрыЗагрузки.Вставить("ФорматОтвета", 2);
			Результат = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(ЭлементПараграфа.Картинка, , , ПараметрыЗагрузки);
			
			Если ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
				Возврат ДанныеКартинки;
			Иначе
				
				MIMEФормат = Результат.Заголовки["Content-Type"];
				ФорматФайла = СтрРазделить(MIMEФормат, "/")[1];
				ДвоичныеДанныеФайла = Результат.Содержимое;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		Картинка = ЭлементПараграфа.Картинка;
		
		ФорматФайла = Нрег(Картинка.Формат());
		MIMEФормат = ПолучитьТипФайлаMIME(ФорматФайла);
		ДвоичныеДанныеФайла = Картинка.ПолучитьДвоичныеДанные();
		
	КонецЕсли;
	
	ЗаглушкаКартинки = "[" + ИмяКартинки + "]";
	
	ДанныеКартинки.Вставить("ИмяФайла", ИмяКартинки);
	ДанныеКартинки.Вставить("ЗаглушкаКартинки", ЗаглушкаКартинки);
	ДанныеКартинки.Вставить("MIMEФормат", MIMEФормат);
	ДанныеКартинки.Вставить("ФорматФайла", ФорматФайла);
	ДанныеКартинки.Вставить("ДвоичныйФайл", ДвоичныеДанныеФайла);	
	ДанныеКартинки.Вставить("ТипФайла", "КартинкаОписания");
	ДанныеКартинки.Вставить("АйДиФайлаБитрикс", "");
	
	Возврат ДанныеКартинки;
КонецФункции

Функция ПолучитьСтруктуруДляЗаменыЗаглушек(СписокФайловЗадачи)
	
	СтруктураЗамены = Новый Структура();
	
	Для Каждого Файл Из СписокФайловЗадачи Цикл
		
		Если Файл.Значение["ТипФайла"] = "КартинкаОписания" Тогда
			КартинкаТекстБитрикс = "[DISK FILE ID=n" + Файл.Значение["АйДиФайлаБитрикс"] + "]";
			СтруктураЗамены.Вставить(Файл.Значение["ИмяФайла"], КартинкаТекстБитрикс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураЗамены;
	
КонецФункции

Функция ОбновитьОписаниеСКартинками(Знач ОписаниеЗадачи, Знач СтруктураПараметров)
	
	Результат = ОписаниеЗадачи;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		НовыйТекст = СтрЗаменить(Результат, "[" + Элемент.Ключ + "]", Элемент.Значение);
		Результат = НовыйТекст;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

//Функция ПолучитьИменнаПараметровСтруктурыЗадачиВТексте()
//	URL      = "https://c1c.bitrix24.ru/rest/3089/hxjd2525sutx3574/"; 
//	СтруктураДляБитрикса = OPI_Bitrix24.ПолучитьСтруктуруЗадачи(URL);
//	
//	Текст = "";
//	
//	Для Каждого Элемент Из СтруктураДляБитрикса["result"]["fields"] Цикл
//		
//		Текст = Текст + Элемент.Ключ + " - ";
//		Для Каждого Эл Из Элемент.Значение Цикл
//			Если ТипЗнч(Эл.Значение) = Тип("Соответствие") Тогда
//				Текст = Текст + Эл.Ключ + " - ( ";
//				Для Каждого Э Из Эл.Значение Цикл
//					Текст = Текст + Э.Ключ + "-" + Э.Значение + "/";
//				КонецЦикла;
//				Текст = Текст + " ) ";
//			Иначе
//				Текст = Текст + Эл.Ключ + " - " + Эл.Значение + " / ";
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		Текст = Текст + Символы.ПС;
//		
//	КонецЦикла;
//	
//	Возврат Текст;
//	
//КонецФункции

#КонецОбласти

