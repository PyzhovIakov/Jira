
#Область ПрограммныйИнтерфейс
//////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
//////////////////////////////////////////


// Обрабатывает удаление элемента планировщика.
//
// Параметры:
//  Планировщик	 - Планировщик	 - Планировщик.
//  Отказ		 - Булево		 - Отказ.
//
Процедура ОбработкаПередУдалениемЭлемента(Планировщик, Отказ) Экспорт

	Отказ = Истина;

	ПометкаУдаления = Ложь;
	События = ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления, Ложь);
	Если События.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УстановитьПометкиУдаления(События, Не ПометкаУдаления);

КонецПроцедуры

// Обрабатывает окончание редактирования элемента планировщика.
//
// Параметры:
//  Планировщик              - Планировщик - объект планировщика, в котором выполняется редактирование.
//  НовыйЭлемент             - Булево - признак того, что редактируется новый элемент.
//  ОтменаРедактирования     - Булево - флаг, указывающий на отмену редактирования.
//  ДанныеФормыПланировщик   - Планировщик - данные формы планировщика.
//  НастройкиОтображения     - Структура - содержит настройки отображения планировщика.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор редактируемого элемента.
//  ФизЛицоКалендаря         - СправочникСсылка.ФизическиеЛица - физическое лицо, для календаря которого выполняется обработка.
//
// Выполняет обработку окончания редактирования элемента планировщика, включая создание нового элемента или обновление существующего,
// в зависимости от значения параметра "НовыйЭлемент". В случае возникновения ошибок при обработке, редактирование отменяется.
//
// В случае, если редактирование запрещено настройками отображения, редактирование немедленно отменяется.
//
Процедура ОбработкаОкончанияРедактированияЭлемента(Планировщик, НовыйЭлемент, ОтменаРедактирования,
	ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор, ФизЛицоКалендаря) Экспорт

	Если НастройкиОтображения.ЗапретИзменения Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;

	Попытка

		Если НовыйЭлемент Тогда
			
			// Запрет массового копирования
			Если Планировщик.ВыделенныеЭлементы.Количество() <> 1 Тогда
				ОтменаРедактирования = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ФизЛицоКалендаря) Тогда
				ОтменаРедактирования = Истина;
				Возврат;
			КонецЕсли;
			
			ПараметрыЗаписи = Новый	Структура;
			ПараметрыЗаписи.Вставить("ДатаНачала", Планировщик.ВыделенныеЭлементы[0].Начало);
			ПараметрыЗаписи.Вставить("ДатаОкончания", Планировщик.ВыделенныеЭлементы[0].Конец);
			ПараметрыЗаписи.Вставить("Описание", Планировщик.ВыделенныеЭлементы[0].Текст);
			ПараметрыЗаписи.Вставить("Сотрудник", ФизЛицоКалендаря);
			
			cbr_КалендарьСервер.СоздатьЗаписьКалендаря(ПараметрыЗаписи);

		Иначе
			ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения,
				УникальныйИдентификатор);
		КонецЕсли;

	Исключение
		ОтменаРедактирования = Истина;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Обрабатывает создание элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  СтандартнаяОбработка - Булево		 - Стандартная обработка.
//
Процедура ОбработкаПриАктивизации(Планировщик, СтандартнаяОбработка) Экспорт

	КонтекстноеМеню = Планировщик.КонтекстноеМеню.ПодчиненныеЭлементы["ПланировщикКонтекстноеМенюКомандыЭлемента"];
	Если Планировщик.ВыделенныеЭлементы = Неопределено Тогда
		ЕстьВыделенныеЭлементы = Ложь;
		ЕстьТекущаяЗапись = Ложь;
	Иначе
		ЕстьВыделенныеЭлементы = Планировщик.ВыделенныеЭлементы.Количество() <> 0;
		ЕстьТекущаяЗапись = Ложь;
		Для Каждого Элемент Из Планировщик.ВыделенныеЭлементы Цикл
			Если Элемент.Значение.ЭтоТекущаяЗапись Тогда
				ЕстьТекущаяЗапись = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДоступностьКонтекстногоМеню = ЕстьВыделенныеЭлементы И Не ЕстьТекущаяЗапись;

	УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, ДоступностьКонтекстногоМеню);

КонецПроцедуры

// Обрабатывает событие перед созданием нового элемента планировщика.
//
// Параметры:
//  Планировщик                         - Планировщик - объект планировщика, в котором выполняется создание элемента.
//  Начало                               - Дата - дата и время начала нового элемента.
//  Конец                                - Дата - дата и время окончания нового элемента.
//  Значения                             - Соответствие - значения измерений нового элемента.
//  Текст                                - Строка - текст, отображаемый для нового элемента.
//  СтандартнаяОбработка                 - Булево - флаг, определяющий, выполнять ли стандартную обработку создания элемента.
//  ИспользоватьБыстроеРедактирование    - Булево - признак использования быстрого редактирования элемента.
//  ФизЛицоКалендаря                     - СправочникСсылка.ФизическиеЛица - физическое лицо, для календаря которого выполняется обработка.
//  НастройкиОтображения                 - Структура - содержит настройки отображения планировщика.
//  УникальныйИдентификатор              - УникальныйИдентификатор - уникальный идентификатор элемента.
Процедура ОбработкаПередСозданием(Планировщик, Начало, Конец, Значения, Текст, СтандартнаяОбработка,
	ИспользоватьБыстроеРедактирование, ФизЛицоКалендаря, НастройкиОтображения, УникальныйИдентификатор, Задача = Неопределено) Экспорт

	Если ИспользоватьБыстроеРедактирование Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

	Если НастройкиОтображения.ЗапретСоздания Тогда
		// Если выделили время, отличное от одной ячейки времени.
		Если (Конец - Начало) <> (НастройкиОтображения.РазмерЯчейкиВремени * 60) Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ДляФизЛица = Значения.Получить("ФизическоеЛицо");
	Если ДляФизЛица = Неопределено Тогда
		ДляФизЛица = ФизЛицоКалендаря;
	КонецЕсли;

	ВесьДень = Ложь;
	Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение(
		"Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		Если Начало <> Конец Тогда
			Конец = Конец - 1;
		КонецЕсли;
		ВесьДень = Истина;
	КонецЕсли;

	СоздатьЗаписьКалендаря( Задача, Начало, Конец, ВесьДень, Текст, ФизЛицоКалендаря);
КонецПроцедуры

// Обрабатывает выбора элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  СтандартнаяОбработка - Булево		 - Стандартная обработка.
//
Процедура ОбработкаВыбораЭлемента(Планировщик, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ПоказатьЭлементПланировщика(Планировщик);

КонецПроцедуры

// Обрабатывает начало быстрого редактирования элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  СтандартнаяОбработка - Булево		 - Стандартная обработка.
//
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Планировщик, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Обновляет отображение планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - Планировщик.
//  НастройкиОтображения - Структура	 - Настройки отображения планировщика.
//  ИзмененнаяНастройка	 - Строка		 - Имя измененной настройки.
//
Процедура ОбновитьОтображениеПланировщика(Планировщик, НастройкиОтображения, ИзмененнаяНастройка = Неопределено) Экспорт

	Планировщик.ИнтервалыФона.Очистить();
	
	// Данные планировщика.
	ДанныеПланировщика = cbr_КалендарьСервер.ПолучитьДанныеПланировщика(
		НастройкиОтображения, ИзмененнаяНастройка);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика, Истина);
	
	// Настройки отображения.
	cbr_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);

КонецПроцедуры

// Обновляет элемент календаря в планировщике.
//
// Параметры:
//  Планировщик			 - Планировщик							 - Планировщик.
//  НастройкиОтображения - Структура							 - Настройки отображения планировщика.
//  Параметр			 - Массив, СправочникСсылка.ЗаписиРабочегоКалендаря	 - Записи календаря, которые необходимо обновить.
//
Процедура ОбновитьЗаписиКалендаряВПланировщике(Планировщик, НастройкиОтображения, Параметр) Экспорт

	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		ЗаписиКалендаря = Параметр;
	Иначе
		ЗаписиКалендаря = Новый Массив;
		ЗаписиКалендаря.Добавить(Параметр);
	КонецЕсли;
	
	// Данные планировщика.
	УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря);
	ДанныеПланировщика = cbr_КалендарьСервер.ОбновитьДанныеПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика);
	
	// Настройки отображения.
	cbr_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);

КонецПроцедуры

// Создает событие календаря с заполнением предмета, даты начала, даты окончания по необходимости.
//
// Параметры:
//  Предмет			 - СправочникСсылка			 - Предмет.
//  ДатаНачала		 - Дата						 - Дата начала.
//  ДатаОкончания	 - Дата						 - Дата окончания.
//  ВесьДень		 - Булево					 - Признак длительность на весь день.
//  Описание		 - Строка					 - Описание записи календаря.
//  Сотрудник	 - СправочникСсылка.Пользователи   - Сотрудник записи календаря.
//
Процедура СоздатьЗаписьКалендаря(Предмет = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено,
	ВесьДень = Неопределено, Описание = Неопределено, Сотрудник = Неопределено) Экспорт

	СтруктураОснование = Новый Структура;
	Если Предмет <> Неопределено Тогда
		СтруктураОснование.Вставить("Предмет", Предмет);
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	Если ВесьДень <> Неопределено Тогда
		СтруктураОснование.Вставить("ВесьДень", Предмет);
	КонецЕсли;
	Если Описание <> Неопределено Тогда
		СтруктураОснование.Вставить("Описание", Описание);
	КонецЕсли;
	Если Сотрудник <> Неопределено Тогда
		СтруктураОснование.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;

	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы);

КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
// Параметры:
//  Запись			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря, для которой устанавливается пометка..
//  ПометкаУдаления	 - Булево									 - Новая пометка удаления.
//
Процедура УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Запись", Запись);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);

	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтотОбъект,
		ПараметрыОбработчика);

	Если ПометкаУдаления Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), Запись);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), Запись);
	КонецЕсли;

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
//
// Параметры:
//  Записи				 - Массив	 - Записи рабочего календаря, для которых устанавливается пометка
//  ПовторяющиесяСобытия - Массив	 - Повторяющиеся записи рабочего календаря, для которых устанавливается пометка.
//  ПометкаУдаления		 - Булево	 - Новая пометка удаления.
//  ОбработанныеВопросы	 - Структура - Обработанные вопросы.
//
Процедура УстановитьПометкиУдаления(Записи, ПометкаУдаления, ОбработанныеВопросы = Неопределено) Экспорт

	Если ТипЗнч(Записи) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	Если Записи.Количество() = 1 Тогда
		УстановитьПометкуУдаления(Записи[0], ПометкаУдаления);
		Возврат;
	ИначеЕсли Записи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбработанныеВопросы.Свойство("ИзмененаПометкаУдаления") Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления",
			ЭтотОбъект);

		Если ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;

	КонецЕсли;

	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	Для Каждого Запись Из Записи Цикл
		СсылкиИзмененныхЗаписейКалендаря.Добавить(Запись);
	КонецЦикла;

	Оповестить("Запись_ЗаписьКалендаря", СсылкиИзмененныхЗаписейКалендаря);

КонецПроцедуры

// Обработчик результата вопроса об изменении пометки удаления.
//
// Параметры:
//  Результат       - Строка - результат ответа пользователя на вопрос.
//  Дополнительные  - Неопределено -  дополнительные данные, переданные при вызове вопроса.
//
Процедура УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления(Результат, Дополнительные) Экспорт
	// Заглушка
КонецПроцедуры

// Возвращает массив ссылок на записи календаря, выделенные в планировщике.
//
// Параметры:
//  Планировщик           - Планировщик - объект планировщика, из которого необходимо получить выделенные записи.
//  ПометкаУдаления       - Булево - флаг, указывающий, включать ли в обработку записи, помеченные на удаление.
//                          По умолчанию - Ложь.
//  ВключаяПовторяющиеся  - Булево - флаг, определяющий, включать ли в обработку повторяющиеся записи.
//                          По умолчанию - Истина.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.cbr_Календарь - массив ссылок на выделенные записи календаря.
//
Функция ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина) Экспорт

	ВыделенныеЭлементы = Новый Массив;

	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл

		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;

		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЗначениеВМассив(ЗначениеЭлемента.Ссылка, ВыделенныеЭлементы);
		ПометкаУдаления = ПометкаУдаления Или ЗначениеЭлемента.ПометкаУдаления;

	КонецЦикла;

	Возврат ВыделенныеЭлементы;

КонецФункции

// Обрабатывает изменение признака весь день у записи календаря.
// Если снимают признак - устанавливает длительность час с начала отображаемого времени в дне.
//
// Параметры:
//  Объект							 - ДанныеФормы	 - Запись календаря.
//  НачальноеЗначениеДатаНачала		 - Дата			 - Начальное значение даты начала.
//  НачальноеЗначениеДатаОкончания	 - Дата			 - Начальное значение даты окончания.
//  ОтображатьВремяС				 - Число		 - Настройка отображения времени в дне.
//  ОтображатьВремяПо				 - Число		 - Настройка отображения времени в дне.
//
Процедура ПриИзмененииВесьДень(Объект, НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, ОтображатьВремяС,
	ОтображатьВремяПо = Неопределено) Экспорт

	Если Объект.ВесьДень Тогда
		cbr_КаленарьКлиентСервер.СкорректироватьДатуНачалаИОкончания(
			Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень, НачальноеЗначениеДатаНачала,
			НачальноеЗначениеДатаОкончания, Ложь, Истина);
		Возврат;
	КонецЕсли;

	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ОтображатьВремяС * 3600;
	Объект.ДатаОкончания = Объект.ДатаНачала + 3600;

	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;

КонецПроцедуры

// Выполняет создание записи календаря из плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы					 - Элемент формы План дня.
//  НастройкиОтображения - Структура					 - Настройки отображения.
//  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
//
Процедура СоздатьЗаписьКалендаряПланДня(ЭлементПланДня, НастройкиОтображения, ФизЛицо = Неопределено) Экспорт
	СоздатьЗаписьКалендаря( , , , , , Неопределено);
КонецПроцедуры       
	
// Создает запись календаря на основе задачи.
//
// Параметры:
//  Предмет      - объект, на основе которого создается запись календаря.
//  Сотрудник    - СправочникСсылка.ФизическиеЛица - физическое лицо, для которого создается запись.
//  Описание     - строка, содержащая описание создаваемой записи календаря.
//
Процедура СоздатьЗаписьКалендаряЗадача(Предмет, Сотрудник, Описание) Экспорт
	СоздатьЗаписьКалендаря(Предмет, , , , Описание, Сотрудник);
КонецПроцедуры

// Отображает календарь для задачи.
//
// Параметры:
//  ЗадачаСсылка  - ссылка на задачу, для которой необходимо отобразить календарь.
//                  По умолчанию - Неопределено.
//  Исполнитель   - СправочникСсылка.ФизическиеЛица - физическое лицо, для которого необходимо отобразить календарь.
//                  По умолчанию - Неопределено.
//
Процедура ОтобразитьКалендарьЗадача(ЗадачаСсылка = Неопределено, Исполнитель = Неопределено) Экспорт
	СоздатьЗаписьКалендаря(ЗадачаСсылка, , , , , Исполнитель);
КонецПроцедуры

// Выполняет создание записи календаря из планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура					 - Настройки отображения.
//  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
//
Процедура СоздатьЗаписьКалендаряПланировщик(НастройкиОтображения, ФизЛицо) Экспорт

	СотрудникФизЛица = ОсновнойСотрудникФизЛица(ФизЛицо);

	Если НастройкиОтображения.ОтображаемаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СоздатьЗаписьКалендаря( , , , , , СотрудникФизЛица);
		Возврат;
	КонецЕсли;

	ДатаНачалаНовойЗаписи = НастройкиОтображения.ОтображаемаяДата + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	СоздатьЗаписьКалендаря( , ДатаНачалаНовойЗаписи, ДатаОкончанияНовойЗаписи, Ложь, , СотрудникФизЛица);

КонецПроцедуры

// Восстанавливает развернутые элементы плана дня.
//
// Параметры:
//  ЭлементПланДня		 - ТаблицаФормы													 - Элемент плана дня.
//  ПланДня				 - ДанныеФормыКоллекция											 - Данные плана дня.
//  СвернутыеЭлементы	 - Массив														 - Развернутые элементы плана дня.
//  ТекущийЭлемент		 - СправочникСсылка.cbr_Календарь	 - Текущий элемент.
//  ТекущаяДата			 - Дата																	 - Текущая дата элемента.
//
Процедура ВосстановитьСостояниеПланаДня(ЭлементПланДня, ПланДня, СвернутыеЭлементы, ТекущийЭлемент, ТекущаяДата) Экспорт

	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		Свернут = Ложь;
		Для Каждого СвернутыйЭлемент Из СвернутыеЭлементы Цикл
			Если ЭлементДерева.ДатаДень = СвернутыйЭлемент Тогда
				ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
				Свернут = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Свернут Тогда
			ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
		Иначе
			ЭлементПланДня.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;

	КонецЦикла;

	ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ПланДня.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);

КонецПроцедуры

// Возвращает свернутые элементы плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - Элемент плана дня.
//  ПланДня			 - ДанныеФормыКоллекция	 - Данные плана дня.
// 
// Возвращаемое значение:
//  Массив - Развернутые элементы плана дня.
//
Функция ПолучитьСвернутыеЭлементыПланаДня(ЭлементПланДня, ПланДня) Экспорт

	СвернутыеЭлементы = Новый Массив;

	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл

		Если Не ЭлементПланДня.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
			СвернутыеЭлементы.Добавить(ЭлементДерева.ДатаДень);
		КонецЕсли;

	КонецЦикла;

	Возврат СвернутыеЭлементы;

КонецФункции

// Показывает запись календаря в отдельной форме.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.cbr_Календарь - Запись календаря.
//  СотрудникЗаписиКалендаря - СправочникСсылка.Пользователи - Сотрудник записи календаря.
//
Процедура ПоказатьЗаписьКалендаря(ЗаписьКалендаря, СотрудникЗаписиКалендаря = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗаписьКалендаря);
	Уникальность = ЗаписьКалендаря.УникальныйИдентификатор();
	Если ЗначениеЗаполнено(СотрудникЗаписиКалендаря) Тогда
		ПараметрыФормы.Вставить("СотрудникЗаписиКалендаря", СотрудникЗаписиКалендаря);
	КонецЕсли;

	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);

КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции

// Восстанавливает текущий элемент в дереве.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	  - Элемент плана дня.
//  ЭлементыДерева	 - ДанныеФормыКоллекцияЭлементовДерева	  - Данные плана дня.
//  ТекущийЭлемент	 - СправочникСсылка.cbr_Календарь	 - Текущий элемент.
//  ТекущаяДата		 - Дата	  - Текущая дата элемента.
//
Процедура ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ЭлементыДерева, ТекущийЭлемент, ТекущаяДата)

	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл

		Если ЭлементДерева.Ссылка = ТекущийЭлемент И Не ЗначениеЗаполнено(ТекущаяДата) Тогда
			ТекущаяДата = ЭлементДерева.ДатаНачала;
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;

		Если ЭлементДерева.Ссылка = ТекущийЭлемент И НачалоДня(ЭлементДерева.ДатаНачала) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;

		Если ТекущийЭлемент = Неопределено И ЭлементДерева.ЭтоГруппа И НачалоДня(ЭлементДерева.ДатаДень) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;

		ВосстановитьТекущийЭлементДерева(
			ЭлементПланДня, ЭлементДерева.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);

	КонецЦикла;

КонецПроцедуры

// Обрабатывает окончание редактирования элементов планировщика.
//
// Параметры:
//  Планировщик              - Планировщик - объект планировщика.
//  ДанныеФормыПланировщик   - данные формы планировщика.
//  НастройкиОтображения     - Структура - содержит настройки отображения планировщика.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор.
//
Процедура ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения,
	УникальныйИдентификатор)

	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл

		ИзмененнаяЗаписьКалендаря = ВыделенныйЭлемент.Значение;

		Если ИзмененнаяЗаписьКалендаря.ЭтоТекущаяЗапись Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", ВыделенныйЭлемент.Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", ВыделенныйЭлемент.Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
			Продолжить;
		КонецЕсли;
		
		// Корректировка времени при перетаскивании в месяце.
		Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение(
			"Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.Месяц") Тогда

			СмещениеНачала = ИзмененнаяЗаписьКалендаря.ДатаНачала - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаНачала);
			Если СмещениеНачала <> 0 Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало) + СмещениеНачала;
			КонецЕсли;

			СмещениеКонца = ИзмененнаяЗаписьКалендаря.ДатаОкончания - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаОкончания);
			Если СмещениеКонца <> 0 Тогда
				ВыделенныйЭлемент.Конец = НачалоДня(ВыделенныйЭлемент.Конец - 1) + СмещениеКонца;
			КонецЕсли;

		ИначеЕсли ИзмененнаяЗаписьКалендаря.ВесьДень Тогда
			Длительность = ВыделенныйЭлемент.Конец - ВыделенныйЭлемент.Начало;
			СмещениеНачала = ВыделенныйЭлемент.Начало - НачалоДня(ВыделенныйЭлемент.Начало);
			СмещениеКонца = КонецДня(ВыделенныйЭлемент.Конец) - ВыделенныйЭлемент.Конец;
			Если СмещениеНачала <= СмещениеКонца Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало);
				ВыделенныйЭлемент.Конец = ВыделенныйЭлемент.Начало + Длительность;
			Иначе
				ВыделенныйЭлемент.Конец = КонецДня(ВыделенныйЭлемент.Конец);
				ВыделенныйЭлемент.Начало = ВыделенныйЭлемент.Конец - Длительность;
			КонецЕсли;
		КонецЕсли;
		ИзмененнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
		ИзмененнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);

		Если ИзмененныеЗаписиКалендаря.Количество() > 0 Тогда
			cbr_КалендарьСервер.СохранитьЗаписиКалендаря(ИзмененныеЗаписиКалендаря);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Удаляет записи календаря из планировщика.
//
// Параметры:
//  Планировщик		 - Планировщик	 - Планировщик.
//  ЗаписиКалендаря	 - Массив		 - Записи календаря.
//
Процедура УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря)

	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Инд = 1 По КоличествоЭлементов Цикл
		Планировщик.Элементы.Удалить(Планировщик.Элементы[КоличествоЭлементов - Инд]);

	КонецЦикла;

КонецПроцедуры

// Обновляет элемент календаря в планировщике.
//
// Параметры:
//  Планировщик						 - Планировщик	 - Планировщик.
//  СтруктураЭлемента				 - Структура	 - Структура элемента планировщика.
//  ОтображатьПомеченныеНаУдаление	 - Булево		 - Отображение помеченных на удаление элементов.
//
Процедура ДобавитьЗаписьКалендаряВПланировщик(Планировщик, СтруктураЭлемента, ОтображатьПомеченныеНаУдаление)

	Если Не ОтображатьПомеченныеНаУдаление И СтруктураЭлемента.Значение.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	ТекущийЭлементПланировщика = Планировщик.Элементы.Добавить(
		СтруктураЭлемента.Начало, СтруктураЭлемента.Конец);

	ТекущийЭлементПланировщика.Загрузить(СтруктураЭлемента);

КонецПроцедуры

// Обрабатывает результат диалога установки пометки удаления записи календаря.
//
// Параметры:
//  Результат             - результат ответа пользователя на диалог.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры, включая запись и пометку удаления.
//
Процедура УстановитьПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	УстановленаПометкаУдаления = cbr_КалендарьСервер.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Запись, ДополнительныеПараметры.ПометкаУдаления);

	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", ДополнительныеПараметры.Запись);
	КонецЕсли;

КонецПроцедуры

// Добавляет значение в массив, если данного значения нет в массиве.
//
// Параметры:
//  Значение - СправочникеСсылка - Значение.
//  Массив	 - Массив			 - Массив, в который будет добавлено значение.
//
Процедура ДобавитьЗначениеВМассив(Значение, Массив)

	Если ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("ЗаписьКалендаря") И Значение.Свойство(
		"ДатаИсключения") Тогда

		Для Каждого ЭлементМассива Из Массив Цикл

			Если ЭлементМассива.ЗаписьКалендаря = Значение.ЗаписьКалендаря И ЭлементМассива.ДатаИсключения
				= Значение.ДатаИсключения Тогда
				Возврат;
			КонецЕсли;

		КонецЦикла;

		Массив.Добавить(Значение);

	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("Ссылка") И Значение.Свойство("ДеньНачала") Тогда

		Для Каждого ЭлементМассива Из Массив Цикл

			Если ЭлементМассива.Ссылка = Значение.Ссылка И ЭлементМассива.ДеньНачала = Значение.ДеньНачала Тогда
				Возврат;
			КонецЕсли;

		КонецЦикла;

		Массив.Добавить(Значение);

	Иначе

		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Устанавливает доступность элементов контекстного меню.
//
// Параметры:
//  КонтекстноеМеню	 - ГруппаФормы	 - Контекстное меню.
//  Доступность		 - Булево		 - Новая доступность контекстного меню.
//
Процедура УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, Доступность)

	Для Каждого ЭлементМеню Из КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
			УстановитьДоступностьКонтекстногоМеню(ЭлементМеню, Доступность);
		ИначеЕсли
		ТипЗнч(ЭлементМеню) = Тип("КнопкаФормы") Тогда
			ЭлементМеню.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обновить данные в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//  ДанныеПланировщика - Структура - Данные планировщика.
//  ОчиститьЭлементы - Булево - Признак необходимости очистить элементы перед обновлением.
//
Процедура ОбновитьДанныеПланировщика(Планировщик, НастройкиОтображения, ДанныеПланировщика, ОчиститьЭлементы = Ложь)

	Если ОчиститьЭлементы Тогда
		Планировщик.Элементы.Очистить();
	КонецЕсли;

	Для Каждого СтруктураЭлемента Из ДанныеПланировщика.Элементы Цикл
		ДобавитьЗаписьКалендаряВПланировщик(
			Планировщик, СтруктураЭлемента, НастройкиОтображения.ОтображатьПомеченныеНаУдаление);
	КонецЦикла;

	Если НастройкиОтображения.ОтображатьСобытия Тогда
		Планировщик.ИнтервалыФона.Очистить();
	КонецЕсли;

КонецПроцедуры

// Открывает форму записи календаря.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры формы.
//  Уникальность - Произвольный	 - Уникальность формы.
//
Процедура ОткрытьФормуЗаписиКалендаря(Параметры, Уникальность = Неопределено)

	Если Уникальность = Неопределено Тогда
		Уникальность = Новый УникальныйИдентификатор;
	КонецЕсли;

	ОткрытьФорму("Справочник.cbr_Календарь.ФормаОбъекта", Параметры, , Уникальность);

КонецПроцедуры

// Обрабатывает показа элемента планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - Планировщик.
//
Процедура ПоказатьЭлементПланировщика(Планировщик)

	Если Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ЗначениеЭлемента = ВыделенныйЭлемент.Значение;

	Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
		Возврат;
	КонецЕсли;
	СсылкаДляПерехода = ЗначениеЭлемента.Ссылка;
	ПоказатьЗаписьКалендаря(СсылкаДляПерехода, ЗначениеЭлемента.Сотрудник);
КонецПроцедуры

//#КонецОбласти   


// Возвращает основного сотрудника для физ. лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//
// Возвращаемое значение:
//   СправочникССылка.Пользователи
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо)

	Возврат cbr_КалендарьСервер.ОсновнойСотрудникФизЛица(ФизическоеЛицо);

КонецФункции

// Обработка выбора сотрудников
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения, ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура - 
//      Если реквизит формы, то ФормаКлиентскогоПриложения 
//      Если реквизит объекта, то ДанныеФормыСтруктура
//      Если реквизит ТЧ, то ДанныеФормыЭлементКоллекции (ТекущиеДанные).
//  Реквизит - Строка - Имя реквизита. Новое начение устанавливается в Объект[Реквизит]
//  ВыбранноеЗначение - СправочникСсылка.Пользователи
//  СтандартнаяОбработка - Булево
//
Процедура СотрудникОбработкаВыбора(Объект, Реквизит, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти