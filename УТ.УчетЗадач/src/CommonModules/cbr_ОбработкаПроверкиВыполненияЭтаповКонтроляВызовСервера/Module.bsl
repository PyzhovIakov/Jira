
#Область  ПрограммныйИнтерфейс
// Процедура регламентного задания на проверку задач
Процедура ПроверкаВыполненияЭтаповКонтроля() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_КонтрольНадЭтапамиЗадач.Запрос КАК Запрос,
		|	cbr_КонтрольНадЭтапамиЗадач.Ссылка КАК Ссылка,
		|	cbr_КонтрольНадЭтапамиЗадачПараметры.Параметр,
		|	cbr_КонтрольНадЭтапамиЗадачПараметры.Значение,
		|	cbr_КонтрольНадЭтапамиЗадач.Длительность,
		|	cbr_КонтрольНадЭтапамиЗадач.Выполняется,
		|	cbr_КонтрольНадЭтапамиЗадач.Наименование
		|ИЗ
		|	Справочник.cbr_КонтрольНадЭтапамиЗадач КАК cbr_КонтрольНадЭтапамиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_КонтрольНадЭтапамиЗадач.Параметры КАК cbr_КонтрольНадЭтапамиЗадачПараметры
		|		ПО cbr_КонтрольНадЭтапамиЗадач.Ссылка = cbr_КонтрольНадЭтапамиЗадачПараметры.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(Запрос)
		|ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РегистрыСведений.cbr_ПросроченныеДействияПоЗадачам.ОчиститьЗаписиРегистра();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Выполняется Тогда
			Попытка
				 ВыполнениеЗапросаИзСправочника(Выборка, Неопределено);		
			Исключение
				ТекстОшибки = СтрШаблон("Ошибка выполнения контроля этапа %1", Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция для получения массива текущих этапов задачи
// Параметры:
//		Задача - ДокументСсылка.cbr_Задача - Задача, для которой тебуется выполнить запрос. При пустом значении запрос выполнится без отбора
// Возвращаемое значение:
//		Массив Из Строка - Сообщения о текущих этапах
Функция ПолучитьТекущиеЭтапыЗадачи(Задача = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_КонтрольНадЭтапамиЗадач.Запрос КАК Запрос,
		|	cbr_КонтрольНадЭтапамиЗадач.Ссылка КАК Ссылка,
		|	cbr_КонтрольНадЭтапамиЗадачПараметры.Параметр,
		|	cbr_КонтрольНадЭтапамиЗадачПараметры.Значение,
		|	cbr_КонтрольНадЭтапамиЗадач.Длительность,
		|	cbr_КонтрольНадЭтапамиЗадач.Выполняется,
		|	cbr_КонтрольНадЭтапамиЗадач.Наименование
		|ИЗ
		|	Справочник.cbr_КонтрольНадЭтапамиЗадач КАК cbr_КонтрольНадЭтапамиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_КонтрольНадЭтапамиЗадач.Параметры КАК cbr_КонтрольНадЭтапамиЗадачПараметры
		|		ПО cbr_КонтрольНадЭтапамиЗадач.Ссылка = cbr_КонтрольНадЭтапамиЗадачПараметры.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(Запрос)
		|ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивСообщений = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
 	Пока Выборка.Следующий() Цикл
 		Если Выборка.Выполняется Тогда
			Попытка
				 РезультатЗапросаЭлемента = ВыполнениеЗапросаИзСправочника(Выборка, Задача);	
				 
				 Если ЗначениеЗаполнено(РезультатЗапросаЭлемента) Тогда
				 	МассивСообщений.Добавить(РезультатЗапросаЭлемента);
				 КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон("Ошибка выполнения контроля этапа %1", Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСообщений;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Функция для выполнения запроса из справочника этапа контроля
// Параметры:
//		СправочникКонтроля - СправочникСсылка.cbr_КонтрольНадЭтапамиЗадач
//		Задача - ДокументСсылка.cbr_Задача - Задача, для которой тебуется выполнить запрос. При пустом значении запрос выполнится без отбора
// Возвращаемое значение:
//		Строка - Сообщения о текущих этапах
Функция ВыполнениеЗапросаИзСправочника(СправочникКонтроля, Задача = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = СправочникКонтроля.Запрос;
	ВыборкаПараметровКонтроля = СправочникКонтроля.Выбрать();
	Пока ВыборкаПараметровКонтроля.Следующий() Цикл
		Запрос.УстановитьПараметр(ВыборкаПараметровКонтроля.Параметр, ВыборкаПараметровКонтроля.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Задача) Тогда
		Запрос.УстановитьПараметр("Задача", Задача);
		Запрос.УстановитьПараметр("Длительность", 0);
		
		РезультатЗапросаСправочника = Запрос.Выполнить();
		ВыборкаЗапроса = РезультатЗапросаСправочника.Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			РезультатЗапроса = ОбработкаРезультатаЗапроса(ВыборкаЗапроса, СправочникКонтроля.Длительность * 3600, Задача,
				СправочникКонтроля.Ссылка);
			
			Возврат РезультатЗапроса;
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("Задача", Null);
		Запрос.УстановитьПараметр("Длительность", СправочникКонтроля.Длительность * 3600);
	
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.cbr_ПросроченныеДействияПоЗадачам.ЗаписатьПросроченноеДействие(Выборка.Ссылка,
				Выборка.Пользователь, СправочникКонтроля.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Функция для обработки результата запроса
// Параметры:
//		ВыборкаЗапроса - ВыборкаИзРезультатаЗапроса - Выборка, полученная из запроса справочника
//		Длительность - Число - Значение реквизита Длительность элемента справочника
//		Задача - ДокументСсылка.cbr_Задача - Задача, для которой тебуется выполнить запрос. При пустом значении запрос выполнится без отбора
// 		Этап - СправочникСсылка.cbr_КонтрольНадЭтапамиЗадач - Этап, данные которого обрабатывает функция
// Возвращаемое значение:
//		Строка - Форматированное сообщение о состоянии выполнения этапа
Функция ОбработкаРезультатаЗапроса(ВыборкаЗапроса, Длительность, Задача, Этап)
	ПрефиксСтроки = "Текущий этап";
	СуффиксСтроки = "осталось";
	
	ОсталосьМинут = (Длительность - ВыборкаЗапроса.ВремяСНачалаЭтапа) / 60;
	
	Если ОсталосьМинут < 0 Тогда
		ОсталосьМинут = - ОсталосьМинут;
		ПрефиксСтроки = "Просрочен этап";
		СуффиксСтроки = "на";
	КонецЕсли;
	
	ПолеЧасы = Формат(ОсталосьМинут / 60 - 0.5, "ЧДЦ=0;");
	ПолеМинуты = Формат(ОсталосьМинут % 60 - 0.5, "ЧДЦ=0;");
	
	СтрокаСрока = СтрШаблон("%1 ч. %2 мин.", ?(ПолеЧасы = "", "0", ПолеЧасы), ?(ПолеМинуты = "", "0", ПолеМинуты));
	НазваниеЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "Наименование");
	СтрокаСообщения = СтрШаблон("%1: %2, %3 %4", ПрефиксСтроки, НазваниеЭтапа, СуффиксСтроки, СтрокаСрока);
	
	Возврат СтрокаСообщения;
КонецФункции
#КонецОбласти