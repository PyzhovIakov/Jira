#Область ПрограммныйИнтерфейс
// Возвращает основного сотрудника для физ. лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//
// Возвращаемое значение:
//   СправочникССылка.Пользователи
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо) Экспорт
	Если ФизическоеЛицо = Справочники.Пользователи.ПустаяСсылка() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка()
	КонецЕсли
	;
	Возврат ФизическоеЛицо;

КонецФункции

////////////////////////////////////////
// Работа с часовыми поясами (сервер).
//
////////////////////////////////////////

// Возвращает часовой пояс пользователя.
// 
// Параметры:
//  ПользовательИлиСотрудник - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Строка - Часовой пояс пользователя в формате GMT{+/-}hh:mm.
//
Функция ЧасовойПоясПользователя(ПользовательИлиСотрудник) Экспорт

	Возврат ЧасовойПоясПоУмолчанию();

КонецФункции

// Возвращает часовой пояс по умолчанию.
//
// Возвращаемое значение:
//  Строка - Часовой пояс по умолчанию в формате GMT{+/-}hh:mm.
//
Функция ЧасовойПоясПоУмолчанию() Экспорт

	Возврат cbr_КаленарьКлиентСервер.ЧасовойПоясСмещением(
		СмещениеСтандартногоВремени(
			ЧасовойПоясСеанса()));
КонецФункции

////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////
// Создает новую запись календаря.
//
// Параметры:
//  ПараметрыЗаписи - Структура - содержит параметры создаваемой записи.
//
// Выполняет создание новой записи календаря на основе переданных параметров.
//
Процедура СоздатьЗаписьКалендаря(ПараметрыЗаписи) Экспорт
	НоваяЗапись = Справочники.cbr_Календарь.СоздатьЭлемент();
	НоваяЗапись.ДатаНачала = ПараметрыЗаписи.ДатаНачала;
	НоваяЗапись.ДатаОкончания = ПараметрыЗаписи.ДатаОкончания;
	НоваяЗапись.Автор = Пользователи.ТекущийПользователь();
	НоваяЗапись.Сотрудник = ПараметрыЗаписи.Сотрудник;
	НоваяЗапись.Описание = ПараметрыЗаписи.Описание;
	НоваяЗапись.Состояние = ПредопределенноеЗначение("Перечисление.cbr_СостояниеЗаписиРабочегоКалендаря.Запланированна");
	
	НоваяЗапись.Записать();
КонецПроцедуры

// Сохраняет изменения в записях календаря.
//
// Параметры:
//  ИзмененныеЗаписиКалендаря - Массив - содержит измененные записи календаря.
//
// Выполняет запись изменений в объекты записей календаря.
//
Процедура СохранитьЗаписиКалендаря(ИзмененныеЗаписиКалендаря) Экспорт
	Для каждого ЗаписьКалендаря из  ИзмененныеЗаписиКалендаря Цикл
		ОбъектИзменений = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
		ОбъектИзменений.ДатаНачала = ЗаписьКалендаря.ДатаНачала;
		ОбъектИзменений.ДатаОкончания = ЗаписьКалендаря.ДатаОкончания;
		ОбъектИзменений.Записать();
	КонецЦикла;
КонецПроцедуры

// Формирует массив структур элементов планировщика на основе события.
//
// Параметры:
//  НастройкиОтображения - Структура - содержит настройки для отображения календаря.
//  ЗаписиКалендаря - Массив - содержит записи календаря, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив - содержит структуры элементов планировщика.
Функция ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря = Неопределено) Экспорт

	ПериодОтображения = cbr_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = cbr_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл

		ОтображаемаяДатаНачала = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);

		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица, НастройкиОтображения.ОтображатьДействующиеЗадачи,
			НастройкиОтображения.ЗадачаФильтр, ЗаписиКалендаря);

		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;

	КонецЦикла;

	СтруктурыЭлементов = Новый Массив;

	Для Каждого ЗаписьКалендаря Из СобытияПоЧасам Цикл
		СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
			ЗаписьКалендаря, НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени, НастройкиОтображения.ФизЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктурыЭлементов, СтруктурыЭлементовЗаписи);
	КонецЦикла;

	Возврат СтруктурыЭлементов;

КонецФункции

// Формирует структуры интервалов фона планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Структуры интервалов планировщика.
//
Функция ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения) Экспорт

	ИнтервалыФонаПланировщика = Новый Массив;

	Если Не НастройкиОтображения.ОтображатьСобытия Тогда
		Возврат ИнтервалыФонаПланировщика;
	КонецЕсли;

	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);

	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		СтруктураИнтервалаФона = ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения);
		ИнтервалыФонаПланировщика.Добавить(СтруктураИнтервалаФона);
	КонецЦикла;

	Возврат ИнтервалыФонаПланировщика;

КонецФункции

// Формирует структуры элементов планировщика по записи календаря.
// 
// Параметры:
//  ЗаписьКалендаря - СтрокаТаблицыЗначений,
//                    СправочникОбъект.ЗаписиРабочегоКалендаря,
//                    СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
//  ИспользоватьНапоминания - Булево, Неопределено - Использовать напоминания.
//  ОтключеноОтображениеВремени - Булево, Неопределено - Отключено отображение времени.
//  ОтображаемыеФизЛица - Массив из СправочникСсылка.ФизическиеЛица, Неопределено - Отображаемые физ лица.
// 
// Возвращаемое значение:
//  Массив из Структура - Структуры элементов планировщика по записи календаря.
//
Функция СтруктурыЭлементовЗаписи(ЗаписьКалендаря, ИспользоватьНапоминания, ОтключеноОтображениеВремени,
	ОтображаемыеФизЛица) Экспорт

	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;

	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
		ОтключеноОтображениеВремени = НастройкаОтображениеВремениЭлементов
			= ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;

	Если ТипЗнч(ЗаписьКалендаря) = Тип("СтрокаТаблицыЗначений") Тогда
		УстановленоНапоминание = ЗаписьКалендаря.УстановленоНапоминание;

		Сотрудник = ЗаписьКалендаря.Сотрудник;

	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникОбъект.cbr_Календарь") Тогда

		Сотрудник = ЗаписьКалендаря.Сотрудник;
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.cbr_Календарь") Тогда
		//Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря);

		Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Сотрудник");
	Иначе
		УстановленоНапоминание = Ложь;

		Сотрудник = Неопределено;
	КонецЕсли;

	ЭлементПланировщика = Новый ЭлементПланировщика;

	ЭлементПланировщика.Начало = ЗаписьКалендаря.ДатаНачала;
	ЭлементПланировщика.Конец = ЗаписьКалендаря.ДатаОкончания;
	ЭлементПланировщика.Текст =  ?(ЗначениеЗаполнено(ЗаписьКалендаря.Текст), ЗаписьКалендаря.Текст, "") + Символы.ПС
		+ ЗаписьКалендаря.Описание;

	ЭлементПланировщика.Значение =  cbr_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветТабличногоДокумента(ЗаписьКалендаря.ТипЗаписиКалендаря);
	ЭлементПланировщика.ЦветТекста = Новый Цвет(0, 0, 0);
	ЭлементПланировщика.ЦветРамки = ПолучитьЦветРамкиЭлементаПланировщика(ЭлементПланировщика.ЦветФона);

	Если ИспользоватьНапоминания И ОтключеноОтображениеВремени И УстановленоНапоминание Тогда
		ДатаНачалаСобытияСтрокой = Формат(ЗаписьКалендаря.ДатаНачала, "ДФ=HH:mm");
		//ЭлементПланировщика.Текст = ДатаНачалаСобытияСтрокой + " " + ЭлементПланировщика.Текст;
	КонецЕсли;

	СтруктурыЭлементов = Новый Массив;

	УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", Сотрудник);
	СтруктураЭлемента = ЭлементПланировщика.Выгрузить();
	СтруктурыЭлементов.Добавить(СтруктураЭлемента);
	Возврат СтруктурыЭлементов;

КонецФункции

// Формирует структуру элемента планировщика на основе данных о занятости.
//
// Параметры:
//  Занятость - объект, содержащий информацию о занятости.
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, для которого формируется элемент планировщика.
//                  Если не указано, используется физическое лицо из объекта Занятость.
//
// Возвращаемое значение:
//  Структура - структура элемента планировщика с данными о занятости.
//
Функция ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, ФизическоеЛицо = Неопределено) Экспорт

	ЭлементПланировщика = Новый ЭлементПланировщика;

	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = Занятость.ФизическоеЛицо;
	КонецЕсли;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", ФизическоеЛицо);

	ЭлементПланировщика.Начало = Занятость.ДатаНачала;
	ЭлементПланировщика.Конец = Занятость.ДатаОкончания;
	ЭлементПланировщика.ЦветТекста =  Новый Цвет(0, 0, 0);
	ЭлементПланировщика.Текст = Строка(Занятость.Занят);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветЗанятости(Занятость);

	Возврат ЭлементПланировщика.Выгрузить();

КонецФункции

// Формирует структуру настроек отображения планировщика.
//
Функция ПолучитьНастройкиОтображения() Экспорт
//	
	НастройкиОтображения = Новый Структура;
	
	// Период отображения
	НастройкиОтображения.Вставить(
		"ПериодОтображения", ПолучитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря"));
	
	// Физ. лица
	ФизЛица = Новый Массив;
	ФизЛица.Добавить( Пользователи.АвторизованныйПользователь());
	НастройкиОтображения.Вставить(
		"ФизЛица", ФизЛица);
	
	// Представления измерений
	ПредставленияИзмерений = Новый Соответствие;
	НастройкиОтображения.Вставить(
		"ПредставленияИзмерений", ПредставленияИзмерений);
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДатаСеанса());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата", ОтображаемаяДата);
	
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты", ВыделенныеДаты);
	
	// Отображать события
	НастройкиОтображения.Вставить(
		"ОтображатьСобытия", Истина);
	
	// Отображать общую занятость
	НастройкиОтображения.Вставить(
		"ОтображатьОбщуюЗанятость", Ложь);
	
	// Исключения занятости
	ИсключенияЗанятости = Новый Массив;
	НастройкиОтображения.Вставить(
		"ИсключенияЗанятости", ИсключенияЗанятости);
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания", ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов", НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени", НастройкаОтображениеВремениЭлементов
		= ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	// Отображать помеченные на удаление
	НастройкиОтображения.Вставить(
		"ОтображатьПомеченныеНаУдаление", ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаление"));
	
	// Цвет календаря подпись
	НастройкиОтображения.Вставить(
		"ЦветКалендаряПодпись", Новый Цвет(0, 0, 0));
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить(
		"ЦветКалендаряФонШапки", Новый Цвет(255, 255, 255));
	
	// Отображать время с
	НастройкиОтображения.Вставить(
		"ОтображатьВремяС", ПолучитьПерсональнуюНастройку("ОтображатьВремяС"));
	
	// Отображать время по
	НастройкиОтображения.Вставить(
		"ОтображатьВремяПо", ПолучитьПерсональнуюНастройку("ОтображатьВремяПо"));
	
	// Отображать скрытые элементы
	НастройкиОтображения.Вставить(
		"ОтображатьСкрытыеЭлементы", Истина);
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить(
		"РазмерЯчейкиВремени", ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени"));
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня", Новый Цвет(255, 248, 220));
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя", Новый Цвет(255, 255, 255));
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись", Новый Цвет(255, 248, 220));
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись", Новый Цвет(135, 206, 235));
	
	// Цвет рамки текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветРамкиТекущаяЗапись", Новый Цвет(135, 206, 235));
	
	// Отобразить текущую запись.
	НастройкиОтображения.Вставить(
		"ОтобразитьТекущуюЗапись", Ложь);
	
	// Ссылка текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьСсылка", Справочники.cbr_Календарь.ПустаяСсылка());
	
	// Дата начала текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаНачала", Дата(1, 1, 1));
	
	// Дата окончания текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаОкончания", Дата(1, 1, 1));
	
	// Текущая запись на весь день.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьВесьДень", Ложь);
	
	// Запрет создания.
	НастройкиОтображения.Вставить(
		"ЗапретСоздания", Ложь);
	
	// Запрет изменения.
	НастройкиОтображения.Вставить(
		"ЗапретИзменения", Ложь);
	
	// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ПланДняСкрытьПустые", Ложь);  
		
		// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ОтображатьДействующиеЗадачи", Ложь);
	НастройкиОтображения.Вставить(
		"ЗадачаФильтр", Ложь);
	Возврат НастройкиОтображения;

КонецФункции

// Процедура отображает события физ. лица в календаре на указанный период
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт

	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Если НастройкиОтображения.ОтобразитьТекущуюЗапись Тогда
		cbr_КаленарьКлиентСервер.ОтобразитьТекущуюЗапись(
			Планировщик, НастройкиОтображения);
	КонецЕсли;

	cbr_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);

КонецПроцедуры

// Отображает календарь в соответствии с заданной задачей.
//
// Параметры:
//  Планировщик - объект планировщика, который необходимо отобразить.
//  НастройкиОтображения - Структура - содержит настройки отображения календаря.
//
// Выполняет загрузку данных планировщика и применяет настройки отображения.
//
Процедура ОтобразитьКалендарьПоЗадаче(Планировщик, НастройкиОтображения) Экспорт

	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	cbr_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);

КонецПроцедуры

// Процедура заполняет таблицу плана дня
//
// Параметры:
//  ДеревоПланДня - ДеревоЗначений - План дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ОтобразитьПланДня(ДеревоПланДня, НастройкиОтображения) Экспорт

	ДеревоПланДня.Строки.Очистить();

	ПериодОтображения = cbr_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = cbr_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьФизЛицо = НастройкиОтображения.ФизЛица.Количество() <> 1;
	
	// Получение отображаемых данных.
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица, НастройкиОтображения.ОтображатьДействующиеЗадачи,
			НастройкиОтображения.ЗадачаФильтр);
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
	КонецЦикла;
	
	// Отображение плана дня.
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);

		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			// Отображение строки дня.
			СобытияДняПоЧасам.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;

			Для Каждого Событие Из СобытияПоЧасам Цикл

				Если НастройкиОтображения.ОтобразитьТекущуюЗапись И Событие.Ссылка
					= НастройкиОтображения.ТекущаяЗаписьСсылка Тогда
					Продолжить;
				КонецЕсли;

				Если Событие.ДатаНачала < КонецТекущегоДняНедели И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
				КонецЕсли;

			КонецЦикла;

			Если НастройкиОтображения.ПланДняСкрытьПустые Тогда
				Если СобытияДняПоЧасам.Количество() = 0 Тогда
					НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			СобытияДняПоЧасам.Сортировать("ДатаНачала, Наименование");

			КоличествоСобытий = СобытияДняПоЧасам.Количество();
			ДополнительноеПредставлениеДня = "";
			Если НачалоТекущегоДняНедели = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДополнительноеПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) + 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Завтра'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 2 * 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Позавчера'");
			КонецЕсли;

			СтрокаТекущегоДня = ДеревоПланДня.Строки.Добавить();
			СтрокаТекущегоДня.ЭтоГруппа = Истина;
			СтрокаТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
			СтрокаТекущегоДня.ИндексЦвета = -1;

			ПредставлениеДня = Формат(НачалоТекущегоДняНедели, "ДФ='дддд'");
			ПредставлениеДаты = Формат(НачалоТекущегоДняНедели, "ДФ='д ММММ гггг'");
			Если ЗначениеЗаполнено(ДополнительноеПредставлениеДня) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2, %3", ДополнительноеПредставлениеДня,
					ПредставлениеДня, ПредставлениеДаты);
			Иначе
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2", ТРег(ПредставлениеДня), ПредставлениеДаты);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоСобытий) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1 (%2)", СтрокаТекущегоДня.ОписаниеКраткое,
					КоличествоСобытий);
			КонецЕсли;
			
			// Отображений событий в дне.
			Для Каждого СтрокаСобытие Из СобытияДняПоЧасам Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЭлементЗаписиКалендаря = cbr_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(СтрокаСобытие);
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, ЭлементЗаписиКалендаря);
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое = СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие,
					Не СтрокаСобытие.ВесьДень, ОтображатьФизЛицо);
				СтрокаСобытиеТекущегоДня.Цвет = СтрокаСобытие.Цвет;
			КонецЦикла;

			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Возвращает персональную настройку рабочего календаря текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт

	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ПериодОтображенияРабочегоКалендаря",
			Перечисления.cbr_ПериодОтображенияРабочегоКалендаря.Неделя);

	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьПомеченныеНаУдаление", Ложь);

	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьЛегенду", Истина);

	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьВремяС", 9);

	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьВремяПо", 6);

	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображениеВремениЭлементов",
			Перечисления.cbr_ОтображениеВремениЭлементов.ВремяНачалаИКонца);

	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ИспользоватьБыстроеРедактирование", Ложь);

	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "РазмерЯчейкиВремени", 15);

	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ТекущиеКалендариВсеКалендари", Новый Массив);

	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьПолеСотрудник", Ложь);

	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда

		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь", "ОтображатьКалендарьВЗаписиКалендаря", Истина);

	Иначе

		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"), Настройка);

	КонецЕсли;

	Возврат Значение;

КонецФункции

// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда

		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.cbr_ПериодОтображенияРабочегоКалендаря") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ПериодОтображенияРабочегоКалендаря", Значение);
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда

		Если ТипЗнч(Значение) <> Тип("Булево") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьПомеченныеНаУдаление", Значение);

	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда

		Если ТипЗнч(Значение) <> Тип("Булево") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьЛегенду", Значение);

	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда

		Если ТипЗнч(Значение) <> Тип("Число") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьВремяС", Значение);

	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда

		Если ТипЗнч(Значение) <> Тип("Число") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьВремяПо", Значение);

	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда

		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.cbr_ОтображениеВремениЭлементов") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображениеВремениЭлементов", Значение);

	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда

		Если ТипЗнч(Значение) <> Тип("Булево") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ИспользоватьБыстроеРедактирование", Значение);

	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда

		Если ТипЗнч(Значение) <> Тип("Число") Тогда

			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "РазмерЯчейкиВремени", Значение);

	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда

		Если ТипЗнч(Значение) <> Тип("Массив") Тогда

			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ТекущиеКалендариВсеКалендари", Значение);

	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда

		Если ТипЗнч(Значение) <> Тип("Булево") Тогда

			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьПолеСотрудник", Значение);

	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда

		Если ТипЗнч(Значение) <> Тип("Булево") Тогда

			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"), Настройка);

		КонецЕсли;

		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь", "ОтображатьКалендарьВЗаписиКалендаря", Значение);

	Иначе

		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"), Настройка);

	КонецЕсли;

КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
Функция УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт

	УстановленаПометкаУдаления = Ложь;

	ЗаписьОбъект = Запись.ПолучитьОбъект();
	Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда

		ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;

	КонецЕсли;

	Возврат УстановленаПометкаУдаления;

КонецФункции

// Возвращает по цвету рабочего календаря цвет для отображения
Функция ПолучитьЦветТабличногоДокумента(ТипЗаписи) Экспорт

	ЗаписьСправочника = Справочники.cbr_КалендарьЦвета.НайтиПоРеквизиту("ТипЗаписиКалендаря", ТипЗаписи);
	Если ЗаписьСправочника = Справочники.cbr_КалендарьЦвета.ПустаяСсылка() Тогда
		Возврат Новый Цвет(245, 230, 205);
	Иначе
		Цвет =  Справочники.cbr_Цвета.НайтиПоНаименованию( ЗаписьСправочника.Цвет).ЦветRGB;
		МассивЦветов = СтрРазделить(Цвет, ",", Ложь);
		Возврат Новый Цвет(МассивЦветов[0], МассивЦветов[1], МассивЦветов[2]);
	КонецЕсли;
КонецФункции

// Формирует таблицу занятости.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сформировать таблицу занятости:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица.
//   * ДатаНачала - Дата.
//   * ДатаОкончания - Дата.
//   * Занят - Булево.
//
Функция СформироватьТаблицуЗанятости() Экспорт

	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");

	Возврат ТаблицаЗанятости;

КонецФункции

// Получает данные планировщика, при необходимость сохраняя измененную настройку.
//
Функция ПолучитьДанныеПланировщика(Знач НастройкиОтображения, Знач ИзмененнаяНастройка) Экспорт

	СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);

	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения);
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);

	Возврат ДанныеПланировщика;

КонецФункции

// Получает данные планировщика, необходимые для обновления данных о записях календаря.
//
Функция ОбновитьДанныеПланировщика(Знач НастройкиОтображения, Знач ЗаписиКалендаря = Неопределено) Экспорт

	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	Если ЗаписиКалендаря <> Неопределено Тогда
		ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	КонецЕсли;
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);

	Возврат ДанныеПланировщика;

КонецФункции

// Сохраняет измененную настройку отображения.
//
Процедура СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка) Экспорт

	Если Не ЗначениеЗаполнено(ИзмененнаяНастройка) Тогда
		Возврат;
	КонецЕсли;

	Если ИзмененнаяНастройка = "ПериодОтображения" Тогда
		УстановитьПерсональнуюНастройку(
			"ПериодОтображенияРабочегоКалендаря", НастройкиОтображения.ПериодОтображения);
	КонецЕсли;

КонецПроцедуры

// Устанавливает условное оформление плана дня на форме.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных	 - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеПланДня(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();

	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Элемент дня.
	Элемент = УсловноеОформление.Элементы.Добавить();

	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", Новый Цвет(255, 255, 255));
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", Новый Цвет(0, 0, 0));
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
	// Элемент текущего дня.
	Элемент = УсловноеОформление.Элементы.Добавить();

	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ДатаДень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСегодня");

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", Новый Цвет(254, 254, 230));
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", Новый Цвет(0, 0, 0));

КонецПроцедуры

// Формирует таблицу занятости
// 
// Параметры:
//  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица.
//  ДатаНачала - Дата.
//  ДатаОкончания - Дата.
//  ОтобразитьЗанятостьВДне - Булево.
//  ИсключенияЗанятости - Массив.
//  ТолькоИтоги - Булево.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. РаботаСРабочимКалендаремСервер.СформироватьТаблицуЗанятости.
//
Функция ПолучитьТаблицуЗанятости(Знач ФизЛица, ДатаНачала, ДатаОкончания, ОтобразитьЗанятостьВДне = Истина,
	ИсключенияЗанятости = Неопределено, ТолькоИтоги = Ложь) Экспорт
	
	// Формирование структуры таблицы занятости
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	
	// Если занятость в дне не отображается, то таблица занятости не заполняется
	Если Не ОтобразитьЗанятостьВДне Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;

	Если ТипЗнч(ФизЛица) = Тип("СправочникСсылка.Пользователи") Тогда

		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(ФизЛица);

	Иначе // Массив

		Если ФизЛица.Количество() = 0 Тогда
			Возврат ТаблицаЗанятости;
		КонецЕсли;

		МассивФизЛиц = ФизЛица;

	КонецЕсли;

	Если ТипЗнч(МассивФизЛиц[0]) <> Тип("СправочникСсылка.Пользователи") Тогда
		ВызватьИсключение НСтр("ru = 'ПолучитьТаблицуЗанятости выполняет получение занятости только по пользователям.'");
	КонецЕсли;

	Возврат ТаблицаЗанятости;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Формирует пустую таблицу событий.
//
Функция СформироватьТаблицуСобытий()

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("ВесьДень");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	ТаблицаСобытий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСобытий.Колонки.Добавить("ТипЗаписиКалендаря");
	ТаблицаСобытий.Колонки.Добавить("Состояние");
	ТаблицаСобытий.Колонки.Добавить("Текст");
	ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание", Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Колонки.Добавить("Сотрудник");
	ТаблицаСобытий.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаСобытий.Колонки.Добавить("Предмет");
	ТаблицаСобытий.Колонки.Добавить("Связанная");
	ТаблицаСобытий.Колонки.Добавить("Описание");
	ТаблицаСобытий.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаСобытий;

КонецФункции

// Получает настройку отображения времени элементов.
//
// Возвращаемое значение:
//  ОтображениеВремениЭлементовПланировщика - Настройка отображения времени элементов
//
Функция ПолучитьНастройкуОтображениеВремениЭлементов()

	ОтображениеВремениЭлементов = ПолучитьПерсональнуюНастройку("ОтображениеВремениЭлементов");

	Если ОтображениеВремениЭлементов = Перечисления.cbr_ОтображениеВремениЭлементов.НеОтображать Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.cbr_ОтображениеВремениЭлементов.ВремяНачала Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачала;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.cbr_ОтображениеВремениЭлементов.ВремяНачалаИКонца Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Иначе
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	КонецЕсли;

	Возврат НастройкаОтображениеВремениЭлементов;

КонецФункции

// Загружает данные планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)

	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	Планировщик.НачалоПериодаОтображения = Неопределено;
	Планировщик.КонецПериодаОтображения = Неопределено;

	ПериодОтображения = cbr_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = cbr_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// События
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		
		// Получение отображаемых данных
		СобытияПоЧасам = СформироватьТаблицуСобытий();
		Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
			ОтображаемаяДатаНачала = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
					ПериодОтображения, ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.НачалоПериодаОтображения) Тогда
				Планировщик.НачалоПериодаОтображения = Мин(
					Планировщик.НачалоПериодаОтображения, ОтображаемаяДатаНачала);
			Иначе
				Планировщик.НачалоПериодаОтображения = ОтображаемаяДатаНачала;
			КонецЕсли;

			ОтображаемаяДатаОкончания = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
					ПериодОтображения, ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.КонецПериодаОтображения) Тогда
				Планировщик.КонецПериодаОтображения = Мин(
					Планировщик.КонецПериодаОтображения, ОтображаемаяДатаОкончания);
			Иначе
				Планировщик.КонецПериодаОтображения = ОтображаемаяДатаОкончания;
			КонецЕсли;

			СобытияНаДату =  ПолучитьТаблицуСобытий(
				ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
				НастройкиОтображения.ФизЛица, НастройкиОтображения.ОтображатьДействующиеЗадачи,
				НастройкиОтображения.ЗадачаФильтр);
			Для Каждого Событие Из СобытияНаДату Цикл
				НоваяСтрока = СобытияПоЧасам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение элементов планировщика - События
		Для Каждого Событие Из СобытияПоЧасам Цикл
			СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
				Событие, НастройкиОтображения.ИспользоватьНапоминания, НастройкиОтображения.ОтключеноОтображениеВремени,
				НастройкиОтображения.ФизЛица);
			Для Каждого СтруктураЭлемента Из СтруктурыЭлементовЗаписи Цикл
				Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтображатьПомеченныеНаУдаление,
	ФизЛица, ОтображатьДействующиеЗадачи, ЗадачаФильтр, ЗаписиКалендаря = Неопределено)
	
	//КалендариФизЛиц = КалендариФизЛиц(ФизЛица);
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_Календарь.Ссылка КАК Ссылка,
	|	cbr_Календарь.Наименование КАК Наименование,
	|	cbr_Календарь.ДатаНачала КАК ДатаНачала,
	|	cbr_Календарь.ДатаОкончания КАК ДатаОкончания,
	|	cbr_Календарь.ВесьДень КАК ВесьДень,
	|	cbr_Календарь.ПометкаУдаления КАК ПометкаУдаления,
	|	cbr_Календарь.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря,
	|	cbr_Календарь.Состояние КАК Состояние,
	|	cbr_Календарь.Сотрудник КАК Сотрудник,
	|	cbr_Календарь.Предмет КАК Предмет,
	|	cbr_Календарь.Связанная КАК Связанная,
	|	cbr_Календарь.ДатаНачала < &ТекущаяДата
	|		И cbr_Календарь.ДатаОкончания > &ТекущаяДата КАК Вхождение,
	|	(ВЫРАЗИТЬ(cbr_Задача.Наименование КАК СТРОКА(15))) + "" "" КАК Текст,
	|	cbr_Календарь.Описание КАК Описание
	|ИЗ
	|	Справочник.cbr_Календарь КАК cbr_Календарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.cbr_Задача КАК cbr_Задача
	|		ПО cbr_Календарь.Предмет = cbr_Задача.Ссылка";
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Если ЗадачаФильтр <> Ложь Тогда
		Запрос.Текст = Запрос.Текст + "
									  |ГДЕ
									  |	cbr_Задача.Ссылка = &ЗадачаФильтр";
		Запрос.УстановитьПараметр("ЗадачаФильтр", ЗадачаФильтр);
	Иначе
		Запрос.Текст = Запрос.Текст + "
									  |ГДЕ
									  |	cbr_Календарь.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", ФизЛица);
	КонецЕсли;

	Если Не ОтображатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
									  |	И cbr_Календарь.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (ОтображатьДействующиеЗадачи И Выборка.Вхождение) Или ОтображатьДействующиеЗадачи = Ложь Тогда
			НоваяСтрока = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		СтрокаСобытия.УстановленоНапоминание = Ложь;
	КонецЦикла;

	ТаблицаСобытий.Сортировать("ДатаНачала");

	Возврат ТаблицаСобытий;

КонецФункции

// Формирует текстовое описание события
Функция СформироватьТекстовоеОписаниеСобытия(Событие, ВключатьВремяВОписание, ОтображатьФизЛицо)

	Описание = Новый Массив;

	Если ВключатьВремяВОписание Тогда
		Описание.Добавить(СтрШаблон("%1 - %2", Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм"), Формат(Событие.ДатаОкончания,
			"ДФ=ЧЧ:мм")));
	КонецЕсли;

	Если ОтображатьФизЛицо Тогда
		Описание.Добавить(СтрШаблон("%1,", Событие.Сотрудник));
	КонецЕсли;

	Описание.Добавить(Событие.Наименование);

	Возврат СтрСоединить(Описание, " ");

КонецФункции

// Вносит занятость в таблицу занятости
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, ФизЛицо, Знач ДатаНачала, Знач ДатаОкончания, Занят,
	ДатаНачалаТаблицы, ДатаОкончанияТаблицы)

	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;

	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;

	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;

	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
	ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	МассивЗанятости = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	СтрокиКУдалению = Новый Массив;

	Для Каждого СтрокаЗанятости Из МассивЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда

			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;

			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;

			СтрокиКУдалению.Добавить(СтрокаЗанятости);

		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;

	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;

	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);

КонецПроцедуры

// Корректирует дубли и пересечение в таблице занятости
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)

	ТребуетсяВнестиКоррективы = Истина;

	Пока ТребуетсяВнестиКоррективы Цикл

		ТребуетсяВнестиКоррективы = Ложь;

		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();

		ТаблицаЗанятости.Очистить();

		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл

			ВнестиЗаписьВТаблицуЗанятости = Истина;

			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл

				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;

				Если СтрокаЗанятости.ФизическоеЛицо = ВнесеннаяСтрокаЗанятости.ФизическоеЛицо
					И СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала И СтрокаЗанятости.Занят
					= ВнесеннаяСтрокаЗанятости.Занят Тогда

					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(ВнесеннаяСтрокаЗанятости.ДатаНачала,
						СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(ВнесеннаяСтрокаЗанятости.ДатаОкончания,
						СтрокаЗанятости.ДатаОкончания);

					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если Не ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);

		КонецЦикла;

	КонецЦикла;

	ТаблицаЗанятости.Сортировать("ФизическоеЛицо, ДатаНачала");

КонецПроцедуры

// Проверяет совпадение строк занятости
Функция ЗанятостиСовпадают(Занятость1, Занятость2)

	Возврат Занятость1.ФизическоеЛицо = Занятость2.ФизическоеЛицо И Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания И Занятость1.Занят = Занятость2.Занят;

КонецФункции

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент - ЭлементПланировщика - Элемент планировщика.
//  Измерение - Любой - Измерение планировщика.
//  ЗначениеИзмерения - Любой - Значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)

	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");

	СоответствиеИзмерений = Новый Соответствие;
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);

	Элемент.Загрузить(СтруктураЭлемента);

КонецПроцедуры

// Формирует таблицу общей занятости по переданной таблице занятости.
//
Функция СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания)

	ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();

	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл

		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят, ДатаНачала, ДатаОкончания);

	КонецЦикла;

	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ПодВопросомВремя Из МассивЗанятогоВремени Цикл

		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ПодВопросомВремя.ДатаНачала, ПодВопросомВремя.ДатаОкончания, ПодВопросомВремя.Занят, ДатаНачала,
			ДатаОкончания);

	КонецЦикла;

	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЗанятоеВремя Из МассивЗанятогоВремени Цикл

		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ЗанятоеВремя.ДатаНачала, ЗанятоеВремя.ДатаОкончания, ЗанятоеВремя.Занят, ДатаНачала, ДатаОкончания);

	КонецЦикла;

	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ОтсутствуетВремя Из МассивЗанятогоВремени Цикл

		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ОтсутствуетВремя.ДатаНачала, ОтсутствуетВремя.ДатаОкончания, ОтсутствуетВремя.Занят, ДатаНачала,
			ДатаОкончания);

	КонецЦикла;

	Возврат ТаблицаОбщейЗанятости;

КонецФункции

// Формирует таблицу занятости планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица занятости планировщика.
//
Функция ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения)
//	
	ПериодОтображения = cbr_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = cbr_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтобразитьЗанятостьВДне = cbr_КаленарьКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);

	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл

		ОтображаемаяДатаНачала = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);

		ОтображаемаяДатаОкончания = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);

		ТаблицаЗанятостиНаДату = ПолучитьТаблицуЗанятости(
			НастройкиОтображения.ФизЛица, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтобразитьЗанятостьВДне,
			НастройкиОтображения.ИсключенияЗанятости);
		Для Каждого Занятость Из ТаблицаЗанятостиНаДату Цикл
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Занятость);
		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаЗанятости;

КонецФункции

// Формирует структуру интервала фона планировщика.
//
// Параметры:
//  Занятость - Структура - Занятость.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Структура - Интервал фона планировщика
//
Функция ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения)

	СтруктураИнтервалаФона = Новый Структура;
	СтруктураИнтервалаФона.Вставить("Начало", Занятость.ДатаНачала);
	СтруктураИнтервалаФона.Вставить("Конец", Занятость.ДатаОкончания);
	СтруктураИнтервалаФона.Вставить("Цвет", ПолучитьЦветЗанятости(Занятость));
	СтруктураИнтервалаФона.Вставить("ФизическоеЛицо", Занятость.ФизическоеЛицо);

	Возврат СтруктураИнтервалаФона;

КонецФункции

// Возвращает цвет занятости.
//
// Параметры:
//  Занятость - Структура - Занятость.
//
// Возвращаемое значение:
//  Цвет - Цвет занятости.
//
Функция ПолучитьЦветЗанятости(Занятость)
	Возврат Новый Цвет(255, 255, 255);
КонецФункции

// Возвращает пустую структуру данных планировщика.
//
// Возвращаемое значение:
//  Структура - Структура данных планировщика.
//
Функция ПолучитьСтруктуруДанныхПланировщика()

	ДанныеПланировщика = Новый Структура;
	ДанныеПланировщика.Вставить("Элементы", Новый Массив);
	ДанныеПланировщика.Вставить("ИнтервалыФона", Новый Массив);

	Возврат ДанныеПланировщика;

КонецФункции

// Определяет, для каких записей календаря у текущего пользователя установлены напоминания.
//
// Возвращаемое значение:
//  Соответствие - содержит записи календаря с информацией о напоминаниях для текущего пользователя.
//                 Ключ     - СправочникСсылка.ЗаписиРабочегоКалендаря - запись календаря.
//                 Значение - Булево - признак наличия напоминания у текущего пользователя.
//
Функция ЗаписиКалендаряСНапоминаниямиТекущегоПользователя()

	ЗаписиКалендаряСНапоминаниями = Новый Соответствие;

	Возврат ЗаписиКалендаряСНапоминаниями;

КонецФункции

// Возвращает цвет рамки элемента календаря.
//
// Параметры:
//  ЦветФона	 - Цвет	 - Цвет фона элемента планировщика.
// 
// Возвращаемое значение:
//  Цвет - Цвет рамки записи календаря.
//
Функция ПолучитьЦветРамкиЭлементаПланировщика(ЦветФона)
	Возврат Новый Цвет(195, 185, 165);
КонецФункции
#КонецОбласти