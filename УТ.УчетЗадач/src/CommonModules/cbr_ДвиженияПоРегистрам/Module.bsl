#Область ПрограммныйИнтерфейс
// Движение по регистру сведений cbr_ИсполнителиЗадач
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Исполнитель - СправочникСсылка.Пользователи
//	ЗадачаВзята - Булево
Процедура ДвижениеИсполнителиЗадач(Ссылка, Исполнитель, ЗадачаВзята = Ложь) Экспорт
	ЗаписьСделана = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель,
	|	cbr_ИсполнителиЗадачСрезПоследних.ЗадачаВзята
	|ИЗ
	|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК cbr_ИсполнителиЗадачСрезПоследних";

	Запрос.УстановитьПараметр("Задача", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	НачатьТранзакцию();
	Попытка
		Если Не РезультатЗапроса.Пустой() Тогда
			Если Выборка.Следующий() Тогда
				Если Исполнитель <> Выборка.Исполнитель Тогда
					РегистрыСведений.cbr_ИсполнителиЗадач.ЗаписатьИсполнителя(Ссылка, Исполнитель, ЗадачаВзята);
					ЗаписьСделана = Истина;
				КонецЕсли;
				Если Исполнитель = Выборка.Исполнитель И Не Выборка.ЗадачаВзята И ЗадачаВзята Тогда
					РегистрыСведений.cbr_ИсполнителиЗадач.ИзменениеПоследнейЗаписи(Ссылка, Исполнитель, ЗадачаВзята);
					ЗаписьСделана = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				РегистрыСведений.cbr_ИсполнителиЗадач.ЗаписатьИсполнителя(Ссылка, Исполнитель, ЗадачаВзята);
				ЗаписьСделана = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗаписьСделана Тогда
			Запись = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьМенеджерЗаписи();

			Запись.Дата = ТекущаяДатаСеанса();
			Запись.АвторСобытия = Пользователи.АвторизованныйПользователь();
			Запись.Задача = Ссылка;
			Запись.Событие = СтрШаблон("Исполнителем выбран(а) %1", Исполнитель);

			Запись.Записать();

			Если ЗадачаВзята Тогда
				Запись = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьМенеджерЗаписи();

				Запись.Дата = ТекущаяДатаСеанса();
				Запись.АвторСобытия = Пользователи.АвторизованныйПользователь();
				Запись.Задача = Ссылка;
				Запись.Событие = "Задача принята исполнителем";

				Запись.Записать();
			КонецЕсли;

			Подписка = ПредопределенноеЗначение("Перечисление.cbr_ПодпискаДляТриггера.СменаИсполнителя");
			cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Ссылка);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_СвязанныеЗадачи
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	НовыеСвязи - Массив Из ДокументСсылка.cbr_Задача
Процедура ДвижениеСвязанныеЗадачи(Ссылка, НовыеСвязи) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_СвязанныеЗадачи.Задача2 КАК Задача
	|ИЗ
	|	РегистрСведений.cbr_СвязанныеЗадачи КАК cbr_СвязанныеЗадачи
	|ГДЕ
	|	cbr_СвязанныеЗадачи.Задача1 = &ОсновнаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	cbr_СвязанныеЗадачи.Задача1
	|ИЗ
	|	РегистрСведений.cbr_СвязанныеЗадачи КАК cbr_СвязанныеЗадачи
	|ГДЕ
	|	cbr_СвязанныеЗадачи.Задача2 = &ОсновнаяЗадача";

	Запрос.УстановитьПараметр("ОсновнаяЗадача", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ЗадачиКУдалению = Новый Массив;

	Пока Выборка.Следующий() Цикл
		СоответствующаяЗапись = НовыеСвязи.Найти(Выборка.Задача);

		Если СоответствующаяЗапись <> Неопределено Тогда
			НовыеСвязи.Удалить(СоответствующаяЗапись);
		Иначе
			ЗадачиКУдалению.Добавить(Выборка.Задача);
		КонецЕсли;
	КонецЦикла;

	НачатьТранзакцию();

	Попытка
		Набор = РегистрыСведений.cbr_СвязанныеЗадачи.СоздатьНаборЗаписей();
		Набор.Записывать = Истина;
		Набор.Отбор.Задача2.Установить(Ссылка);
		Набор.Прочитать();

		Для Каждого СтрокаНабора Из Набор Цикл
			Если ЗадачиКУдалению.Найти(СтрокаНабора.Задача1) <> Неопределено Тогда
				Набор.Удалить(СтрокаНабора);
			КонецЕсли;
		КонецЦикла;

		Набор.Отбор.Сбросить();
		Набор.Отбор.Задача1.Установить(Ссылка);
		Набор.Прочитать();

		Для Каждого СтрокаНабора Из Набор Цикл
			Если ЗадачиКУдалению.Найти(СтрокаНабора.Задача2) <> Неопределено Тогда
				Набор.Удалить(СтрокаНабора);
			КонецЕсли;
		КонецЦикла;

		Для Каждого Задача Из НовыеСвязи Цикл
			НоваяЗапись = Набор.Добавить();
			НоваяЗапись.Задача1 = Ссылка;
			НоваяЗапись.Задача2 = Задача;
			НоваяЗапись.Период = ТекущаяДатаСеанса();
		КонецЦикла;

		Набор.Записать();

		Набор = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьНаборЗаписей();
		Набор.Записывать = Истина;

		Если НовыеСвязи.Количество() > 0 Или ЗадачиКУдалению.Количество() > 0 Тогда
			Для Каждого Задача Из НовыеСвязи Цикл
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Задача = Задача;
				НоваяЗапись.АвторСобытия = Пользователи.АвторизованныйПользователь();
				НоваяЗапись.Дата = ТекущаяДатаСеанса();
				НоваяЗапись.Событие = "Изменены связанные задачи";
			КонецЦикла;

			Для Каждого Задача Из ЗадачиКУдалению Цикл
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Задача = Задача;
				НоваяЗапись.АвторСобытия = Пользователи.АвторизованныйПользователь();
				НоваяЗапись.Дата = ТекущаяДатаСеанса();
				НоваяЗапись.Событие = "Изменены связанные задачи";
			КонецЦикла;

			НоваяЗапись = Набор.Добавить();
			НоваяЗапись.Задача = Ссылка;
			НоваяЗапись.АвторСобытия = Пользователи.АвторизованныйПользователь();
			НоваяЗапись.Дата = ТекущаяДатаСеанса();
			НоваяЗапись.Событие = "Изменены связанные задачи";

			Набор.Записать(РежимЗамещения.Слияние);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_ВопросыПоЗадачам
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Адресат - СправочникСсылка.Пользователи
//	Текст - Строка
//	Ответ - Булево
Процедура ДвижениеВопросыПоЗадачам(Ссылка, Адресат, Текст, Ответ = Ложь) Экспорт
	ТекстСобытия = Неопределено;
	ВидВопроса = Неопределено;

	Если Ответ Тогда
		ВидВопроса = Перечисления.cbr_ВидыВопросов.Ответ;

		ТекстСобытия = "Дан ответ ";
	Иначе
		ВидВопроса = Перечисления.cbr_ВидыВопросов.Вопрос;

		ТекстСобытия = "Задан вопрос ";
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		МенеджерЗаписи = РегистрыСведений.cbr_ВопросыПоЗадачам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Адресат = Адресат;
		МенеджерЗаписи.Задача = Ссылка;
		МенеджерЗаписи.Отправитель = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.ТекстВопроса = Текст;
		МенеджерЗаписи.ВидВопроса = ВидВопроса;
		МенеджерЗаписи.Записать();

		МенеджерЗаписи = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = Ссылка;
		МенеджерЗаписи.АвторСобытия = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Событие = ТекстСобытия + СтрШаблон("пользователю %1", Адресат);
		МенеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_КомментарииЗадач
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Комментарий - ХранилищеЗначения
Процедура ДвижениеКомментарииЗадач(Ссылка, Комментарий) Экспорт
	НачатьТранзакцию();

	Попытка
		МенеджерЗаписи = РегистрыСведений.cbr_КомментарииЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Автор = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Задача = Ссылка;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();

		МенеджерЗаписи = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = Ссылка;
		МенеджерЗаписи.АвторСобытия = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Событие = "Оставлен комментарий по задаче";
		МенеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_ЧасыТрудозатрат
// Параметры:
//	Ссылка - ДокументСсылка.cbr_ТрудозатратыПоЗадаче
//	Часы - Число
//	Дата - Дата
//	Основание - ДокументСсылка.cbr_Задача
// Возвращаемое значение:
//	Булево - Истина соответствует ошибке, ложь - Успешной записи
Функция ДвижениеЧасыТрудозатрат(Ссылка, Часы, Дата, Основание) Экспорт
	НачатьТранзакцию();
	Попытка
		Набор = РегистрыНакопления.cbr_ЧасыТрудозатрат.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Ссылка);
		Набор.Прочитать();

		Событие = "Введены трудозатраты ";
		Если Набор.Количество() > 0 Тогда
			СтараяЗапись = Набор[0];
			Событие = СтрШаблон("Изменены трудозатраты с %1 ", СтараяЗапись.Часы);
		КонецЕсли;

		Набор.Очистить();
		Набор.Записывать = Истина;
		Движение = Набор.Добавить();
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		Движение.Часы = Часы;
		Набор.Записать(РежимЗамещения.Замещение);

		МенеджерЗаписи = РегистрыСведений.cbr_СобытияПоЗадачам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = Основание;
		МенеджерЗаписи.АвторСобытия = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
		МенеджерЗаписи.Событие = Событие + СтрШаблон("на %1 часов, документ: %2", Часы, Ссылка);
		МенеджерЗаписи.Записать();

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(cbr_ЧасыТрудозатрат.Часы) КАК Часы,
		|	cbr_ТрудозатратыПоЗадаче.Основание
		|ПОМЕСТИТЬ вт_ЧасыПоЗадаче
		|ИЗ
		|	Документ.cbr_ТрудозатратыПоЗадаче КАК cbr_ТрудозатратыПоЗадаче
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.cbr_ЧасыТрудозатрат КАК cbr_ЧасыТрудозатрат
		|		ПО cbr_ЧасыТрудозатрат.Регистратор = cbr_ТрудозатратыПоЗадаче.Ссылка
		|		И cbr_ТрудозатратыПоЗадаче.Основание = &Задача
		|СГРУППИРОВАТЬ ПО
		|	cbr_ТрудозатратыПоЗадаче.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ЧасыПоЗадаче.Часы,
		|	cbr_ОценкаЧасовСрезПоследних.До,
		|	cbr_ОценкаЧасовСрезПоследних.ТипОценки
		|ИЗ
		|	вт_ЧасыПоЗадаче КАК вт_ЧасыПоЗадаче
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК
		|			cbr_ОценкаЧасовСрезПоследних
		|		ПО вт_ЧасыПоЗадаче.Основание = cbr_ОценкаЧасовСрезПоследних.Задача
		|ГДЕ
		|	cbr_ОценкаЧасовСрезПоследних.Согласовано";

		Запрос.УстановитьПараметр("Задача", Основание);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Если Выборка.ТипОценки <> ПредопределенноеЗначение("Перечисление.cbr_ТипОценкиЧасов.ПоФакту") Тогда
				ЧасыИтог = 	Выборка.До - Выборка.Часы;
				Если ЧасыИтог < 0 Тогда
					ВызватьИсключение ("");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецПопытки;

	Возврат Ложь;
КонецФункции
#КонецОбласти