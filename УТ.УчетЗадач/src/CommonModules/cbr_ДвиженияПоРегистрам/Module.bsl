#Область ПрограммныйИнтерфейс
// Движение по регистру сведений cbr_ИсполнителиЗадач
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Исполнитель - СправочникСсылка.Пользователи
//	ЗадачаВзята - Булево
Процедура ДвижениеИсполнителиЗадач(Ссылка, Исполнитель, ЗадачаВзята = Ложь) Экспорт
	ЗаписьСделана = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель,
	|	cbr_ИсполнителиЗадачСрезПоследних.ЗадачаВзята
	|ИЗ
	|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК cbr_ИсполнителиЗадачСрезПоследних";

	Запрос.УстановитьПараметр("Задача", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	НачатьТранзакцию();
	Попытка
		Если Не РезультатЗапроса.Пустой() Тогда
			Если Выборка.Следующий() Тогда
				Если Исполнитель <> Выборка.Исполнитель Тогда
					РегистрыСведений.cbr_ИсполнителиЗадач.ЗаписатьИсполнителя(Ссылка, Исполнитель, ЗадачаВзята);
					ЗаписьСделана = Истина;
				КонецЕсли;
				Если Исполнитель = Выборка.Исполнитель И Не Выборка.ЗадачаВзята И ЗадачаВзята Тогда
					РегистрыСведений.cbr_ИсполнителиЗадач.ИзменениеПоследнейЗаписи(Ссылка, Исполнитель, ЗадачаВзята);
					ЗаписьСделана = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				РегистрыСведений.cbr_ИсполнителиЗадач.ЗаписатьИсполнителя(Ссылка, Исполнитель, ЗадачаВзята);
				ЗаписьСделана = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗаписьСделана Тогда
			Событие = СтрШаблон("Исполнителем выбран(а) %1", Исполнитель);
			РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьСобытие(Ссылка, Событие);

			Если ЗадачаВзята Тогда
				Событие = "Задача принята исполнителем";
				РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьСобытие(Ссылка, Событие);
			КонецЕсли;

			Подписка = ПредопределенноеЗначение("Перечисление.cbr_ПодпискаДляТриггера.СменаИсполнителя");
			cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Ссылка);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_СвязанныеЗадачи
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	НовыеСвязи - Массив Из ДокументСсылка.cbr_Задача
Процедура ДвижениеСвязанныеЗадачи(Ссылка, НовыеСвязи) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_СвязанныеЗадачи.Задача2 КАК Задача
	|ИЗ
	|	РегистрСведений.cbr_СвязанныеЗадачи КАК cbr_СвязанныеЗадачи
	|ГДЕ
	|	cbr_СвязанныеЗадачи.Задача1 = &ОсновнаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	cbr_СвязанныеЗадачи.Задача1
	|ИЗ
	|	РегистрСведений.cbr_СвязанныеЗадачи КАК cbr_СвязанныеЗадачи
	|ГДЕ
	|	cbr_СвязанныеЗадачи.Задача2 = &ОсновнаяЗадача";

	Запрос.УстановитьПараметр("ОсновнаяЗадача", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ЗадачиКУдалению = Новый Массив;

	Пока Выборка.Следующий() Цикл
		СоответствующаяЗапись = НовыеСвязи.Найти(Выборка.Задача);

		Если СоответствующаяЗапись <> Неопределено Тогда
			НовыеСвязи.Удалить(СоответствующаяЗапись);
		Иначе
			ЗадачиКУдалению.Добавить(Выборка.Задача);
		КонецЕсли;
	КонецЦикла;

	НачатьТранзакцию();

	Попытка
		РегистрыСведений.cbr_СвязанныеЗадачи.УдалитьСвязиДляЗадачи(Ссылка, ЗадачиКУдалению);
		РегистрыСведений.cbr_СвязанныеЗадачи.ЗаписатьСвязиДляЗадачи(Ссылка, НовыеСвязи);

		Если НовыеСвязи.Количество() > 0 Или ЗадачиКУдалению.Количество() > 0 Тогда
			События = Новый Массив;
			
			Для Каждого Задача Из НовыеСвязи Цикл
				Событие = Новый Структура;
				Событие.Вставить("Событие", "Изменены связанные задачи");
				Событие.Вставить("Задача", Задача);
				События.Добавить(Событие);
			КонецЦикла;

			Для Каждого Задача Из ЗадачиКУдалению Цикл
				Событие = Новый Структура;
				Событие.Вставить("Событие", "Изменены связанные задачи");
				Событие.Вставить("Задача", Задача);
				События.Добавить(Событие);
			КонецЦикла;

			Событие = Новый Структура;
			Событие.Вставить("Событие", "Изменены связанные задачи");
			Событие.Вставить("Задача", Ссылка);
			События.Добавить(Событие);

			РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьНаборСобытий(События);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_ВопросыПоЗадачам
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Адресат - СправочникСсылка.Пользователи
//	Текст - Строка
//	Ответ - Булево
Процедура ДвижениеВопросыПоЗадачам(Ссылка, Адресат, Текст, Ответ = Ложь) Экспорт
	ТекстСобытия = Неопределено;
	ВидВопроса = Неопределено;

	Если Ответ Тогда
		ВидВопроса = Перечисления.cbr_ВидыВопросов.Ответ;
		ТекстСобытия = "Дан ответ ";
	Иначе
		ВидВопроса = Перечисления.cbr_ВидыВопросов.Вопрос;
		ТекстСобытия = "Задан вопрос ";
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		РегистрыСведений.cbr_ВопросыПоЗадачам.ЗаписатьВопрос(Ссылка, Адресат, Текст, ВидВопроса);

		Событие = ТекстСобытия + СтрШаблон("пользователю %1", Адресат);
		РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьСобытие(Ссылка, Событие);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_КомментарииЗадач
// Параметры:
//	Ссылка - ДокументСсылка.cbr_Задача
//	Комментарий - ХранилищеЗначения
Процедура ДвижениеКомментарииЗадач(Ссылка, Комментарий) Экспорт
	НачатьТранзакцию();

	Попытка
		РегистрыСведений.cbr_КомментарииЗадач.ЗаписатьКомментарий(Ссылка, Комментарий);

		Событие = "Оставлен комментарий по задаче";
		РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьСобытие(Ссылка, Событие);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Движение по регистру сведений cbr_ЧасыТрудозатрат
// Параметры:
//	Ссылка - ДокументСсылка.cbr_ТрудозатратыПоЗадаче
//	Часы - Число
//	Дата - Дата
//	Основание - ДокументСсылка.cbr_Задача
// Возвращаемое значение:
//	Булево - Истина соответствует ошибке, ложь - Успешной записи
Функция ДвижениеЧасыТрудозатрат(Ссылка, Часы, Дата, Основание) Экспорт
	НачатьТранзакцию();
	Попытка
		ЧасыПредыдущейЗаписи = РегистрыНакопления.cbr_ЧасыТрудозатрат.ЗаписатьТрудозатраты(Ссылка, Дата, Основание,
			Часы);

		Событие = "Введены трудозатраты ";
		Если ЧасыПредыдущейЗаписи > 0 Тогда
			Событие = СтрШаблон("Изменены трудозатраты с %1 ", ЧасыПредыдущейЗаписи);
		КонецЕсли;
		Событие = Событие + СтрШаблон("на %1 часов, документ: %2", Часы, Ссылка);
		РегистрыСведений.cbr_СобытияПоЗадачам.ЗаписатьСобытие(Основание, Событие);

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(cbr_ЧасыТрудозатрат.Часы) КАК Часы,
		|	cbr_ТрудозатратыПоЗадаче.Основание
		|ПОМЕСТИТЬ вт_ЧасыПоЗадаче
		|ИЗ
		|	Документ.cbr_ТрудозатратыПоЗадаче КАК cbr_ТрудозатратыПоЗадаче
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.cbr_ЧасыТрудозатрат КАК cbr_ЧасыТрудозатрат
		|		ПО cbr_ЧасыТрудозатрат.Регистратор = cbr_ТрудозатратыПоЗадаче.Ссылка
		|		И cbr_ТрудозатратыПоЗадаче.Основание = &Задача
		|СГРУППИРОВАТЬ ПО
		|	cbr_ТрудозатратыПоЗадаче.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ЧасыПоЗадаче.Часы,
		|	cbr_ОценкаЧасовСрезПоследних.До,
		|	cbr_ОценкаЧасовСрезПоследних.ТипОценки
		|ИЗ
		|	вт_ЧасыПоЗадаче КАК вт_ЧасыПоЗадаче
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК
		|			cbr_ОценкаЧасовСрезПоследних
		|		ПО вт_ЧасыПоЗадаче.Основание = cbr_ОценкаЧасовСрезПоследних.Задача
		|ГДЕ
		|	cbr_ОценкаЧасовСрезПоследних.Согласовано";

		Запрос.УстановитьПараметр("Задача", Основание);
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Если Выборка.ТипОценки <> ПредопределенноеЗначение("Перечисление.cbr_ТипОценкиЧасов.ПоФакту") Тогда
				ЧасыИтог = 	Выборка.До - Выборка.Часы;
				Если ЧасыИтог < 0 Тогда
					ВызватьИсключение ("");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецПопытки;

	Возврат Ложь;
КонецФункции
#КонецОбласти