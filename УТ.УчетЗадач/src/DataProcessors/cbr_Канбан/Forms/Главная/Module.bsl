#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)		
	ПолучитьВыбраннуюДоску();
	ОтобразитьДоску();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбраннаяДоскаПриИзменении(Элемент)
	ОтобразитьДоску();
	СохранитьИзменениеВыбраннойДоски();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКолонку(Команда)
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Возврат;
	КонецЕсли;
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	Если СозданныеКолонки.Количество() Тогда
		СтруктураФормы.Вставить("Номер", СозданныеКолонки[СозданныеКолонки.Количество() - 1].Номер + 1);
	Иначе
		СтруктураФормы.Вставить("Номер", 1);
	КонецЕсли;
	
	СтруктураФормы.Вставить("БезНастроек", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВызоваКонструктора", ЭтотОбъект);

	ОткрытьФорму("Обработка.cbr_Канбан.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокументаУпрощенная",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОтобразитьДоску();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьДоску()
	// Очистка
	ТЗКолонки = СозданныеКолонки.Выгрузить();

	МассивИменЭлементов = ТЗКолонки.ВыгрузитьКолонку("Элемент");
	МассивИменРеквизитов = ТЗКолонки.ВыгрузитьКолонку("РеквизитКолонки");

	МассивИменКоманд1 = ТЗКолонки.ВыгрузитьКолонку("КомандаНастройки");
	МассивИменКоманд2 = ТЗКолонки.ВыгрузитьКолонку("КомандаВЛево");
	МассивИменКоманд3 = ТЗКолонки.ВыгрузитьКолонку("КомандаВПраво");
	МассивИменКоманд4 = ТЗКолонки.ВыгрузитьКолонку("КомандаСкопировать");
	МассивИменКоманд5 = ТЗКолонки.ВыгрузитьКолонку("КомандаУдалить");

	cbr_ЭлементыФормы.УдлЭлементы(ЭтотОбъект, МассивИменЭлементов);
	cbr_ЭлементыФормы.УдлРеквизиты(ЭтотОбъект, МассивИменРеквизитов);

	cbr_ЭлементыФормы.УдлКоманды(ЭтотОбъект, МассивИменКоманд1);
	cbr_ЭлементыФормы.УдлКоманды(ЭтотОбъект, МассивИменКоманд2);
	cbr_ЭлементыФормы.УдлКоманды(ЭтотОбъект, МассивИменКоманд3);
	cbr_ЭлементыФормы.УдлКоманды(ЭтотОбъект, МассивИменКоманд4);
	cbr_ЭлементыФормы.УдлКоманды(ЭтотОбъект, МассивИменКоманд5);

	СозданныеКолонки.Очистить();
	
	// Проверка на пустую доску
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Возврат;
	КонецЕсли;
	
	// Создание объектов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователейКолонокКанБан.Номер КАК Номер,
	|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки КАК НастройкиКолонки,
	|	cbr_НастройкиПользователейКолонокКанБан.Наименование КАК Наименование,
	|	cbr_НастройкиПользователейКолонокКанБан.Цвет КАК Цвет,
	|	cbr_Цвета.ЦветRGB КАК ЦветRGB
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_НастройкиПользователейКолонокКанБан.Цвет = cbr_Цвета.Ссылка
	|ГДЕ
	|	cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска
	|	И cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	  ЗапросПриоритета = Новый Запрос;
	ЗапросПриоритета.Текст = 
	"ВЫБРАТЬ
	|	cbr_Приоритеты.Приоритет КАК Приоритет,
	|	cbr_Приоритеты.Ссылка КАК Ссылка,
	|	cbr_Цвета.ЦветRGB КАК ЦветRGB
	|ИЗ
	|	Справочник.cbr_Приоритеты КАК cbr_Приоритеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_Приоритеты.Цвет = cbr_Цвета.Ссылка";
	
	РезультатЗапросаПриоритета = ЗапросПриоритета.Выполнить();
	ДанныеПриоритета = РезультатЗапросаПриоритета.Выбрать();
	
	ТекстЗапросаДС = "ВЫБРАТЬ
	|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель,
	|	cbr_СтатусыЗадачСрезПоследних.Статус,
	|	cbr_Задача.Дата,
	|	cbr_Задача.Номер,
	|	cbr_Задача.Ссылка,
	|	cbr_Задача.Наименование,
	|	cbr_Задача.ОписаниеЗадачи,
	|	cbr_Задача.ВидЗадачи,
	|	cbr_Задача.Постановщик,
	|	cbr_Задача.Приоритет,
	|	cbr_Задача.Автор,
	|	cbr_Задача.ГлавнаяЗадача,
	|	cbr_Задача.УчетВремени,
	|	cbr_Задача.КонтрольВремени,
	|	cbr_Задача.Наблюдатели.(
	|		Ссылка,
	|		НомерСтроки,
	|		Пользователь),
	|	cbr_Задача.Метки.(
	|		Ссылка,
	|		НомерСтроки,
	|		Метка),
	|	cbr_Задача.МоментВремени,
	|	cbr_Задача.Представление,
	|	cbr_ПросроченныеДействияПоЗадачам.Этап КАК ПросроченоеДействие,
	|	cbr_ПросроченныеДействияПоЗадачам.Пользователь КАК ПользовательПросроченныхДействий,
	|	cbr_ДедлайнЗадачСрезПоследних.Дедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.Согласовано КАК СогласованоДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.Отказ КАК ОтказДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.КомментарийОтказа КАК КомментарийОтказаДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.КомментарийОценки КАК КомментарийДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.ПричинаПереноса КАК ПричинаПереносаДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.Согласующий КАК СогласующийДедлайн,
	|	cbr_ДедлайнЗадачСрезПоследних.Согласовант КАК СогласовантДедлайн,
	|	cbr_ОценкаЧасовСрезПоследних.От,
	|	cbr_ОценкаЧасовСрезПоследних.До,
	|	cbr_ОценкаЧасовСрезПоследних.Длительность,
	|	cbr_ОценкаЧасовСрезПоследних.Согласовано,
	|	cbr_ОценкаЧасовСрезПоследних.Отказ,
	|	cbr_ОценкаЧасовСрезПоследних.Согласующий,
	|	cbr_ОценкаЧасовСрезПоследних.Согласовант,
	|	cbr_ОценкаЧасовСрезПоследних.ТипОценки,
	|	cbr_ОценкаЧасовСрезПоследних.КомментарийОтказа,
	|	cbr_ОценкаЧасовСрезПоследних.КомментарийОценки,
	|	"""" КАК Пустая,
	|	"""" КАК ЦветПриоритета
	|ИЗ
	|	Документ.cbr_Задача КАК cbr_Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних КАК cbr_ИсполнителиЗадачСрезПоследних
	|		ПО cbr_Задача.Ссылка = cbr_ИсполнителиЗадачСрезПоследних.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_СтатусыЗадач.СрезПоследних КАК cbr_СтатусыЗадачСрезПоследних
	|		ПО cbr_Задача.Ссылка = cbr_СтатусыЗадачСрезПоследних.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ПросроченныеДействияПоЗадачам КАК cbr_ПросроченныеДействияПоЗадачам
	|		ПО cbr_ПросроченныеДействияПоЗадачам.Задача = cbr_Задача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ДедлайнЗадач.СрезПоследних КАК cbr_ДедлайнЗадачСрезПоследних
	|		ПО cbr_ДедлайнЗадачСрезПоследних.Задача = cbr_Задача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ОценкаЧасов.СрезПоследних КАК cbr_ОценкаЧасовСрезПоследних
	|		ПО cbr_Задача.Ссылка = cbr_ОценкаЧасовСрезПоследних.Задача";

	СтруктураКолонок = Новый Структура;   
	СтруктураКолонок.Вставить("ЦветПриоритета", "ЦветПриоритета");
	СтруктураКолонок.Вставить("Исполнитель", "Исполнитель");
	СтруктураКолонок.Вставить("Наименование", "Наименование");
	СтруктураКолонок.Вставить("Пустая", "Пустая");

	КартинкаУдаления = БиблиотекаКартинок.Удалить;
	СвойствоКнопокУдаления = Новый Структура;
	СвойствоКнопокУдаления.Вставить("Картинка", КартинкаУдаления);
	СвойствоКнопокУдаления.Вставить("Отображение", ОтображениеКнопки.Картинка);

	КартинкаНастроек = БиблиотекаКартинок.НастроитьСостоянияОригиналаПервичногоДокумента;
	СвойствоКнопокНастройки = Новый Структура;
	СвойствоКнопокНастройки.Вставить("Картинка", КартинкаНастроек);
	СвойствоКнопокНастройки.Вставить("Отображение", ОтображениеКнопки.Картинка);

	КартинкаСкопировать = БиблиотекаКартинок.СкопироватьЭлементСписка;
	СвойствоКнопокСкопировать = Новый Структура;
	СвойствоКнопокСкопировать.Вставить("Картинка", КартинкаСкопировать);
	СвойствоКнопокСкопировать.Вставить("Отображение", ОтображениеКнопки.Картинка);

	КартинкаВЛево = БиблиотекаКартинок.ПереместитьВлево;
	СвойствоКнопокВЛево = Новый Структура;
	СвойствоКнопокВЛево.Вставить("Картинка", КартинкаВЛево);
	СвойствоКнопокВЛево.Вставить("Отображение", ОтображениеКнопки.Картинка);

	КартинкаВПраво = БиблиотекаКартинок.ПереместитьВправо;
	СвойствоКнопокВПраво = Новый Структура;
	СвойствоКнопокВПраво.Вставить("Картинка", КартинкаВПраво);
	СвойствоКнопокВПраво.Вставить("Отображение", ОтображениеКнопки.Картинка);

	СтруктураСвойствДС = Новый Структура;
	СтруктураСвойствДС.Вставить("ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет);

	Пока Выборка.Следующий() Цикл
		Индекс = Выборка.Номер;

		НоваяСтр = СозданныеКолонки.Добавить();
		НоваяСтр.Элемент = "ГруппаКолонки" + Индекс;
		НоваяСтр.КомандаНастройки = "НастройкиКолонки" + Индекс;
		НоваяСтр.Наименование = Выборка.Наименование;
		Если СозданныеКолонки.Количество() <> 1 Тогда
			НоваяСтр.КомандаВЛево = "КолонкуВЛево" + Индекс;
		КонецЕсли;
		Если СозданныеКолонки.Количество() <> Выборка.Количество() Тогда
			НоваяСтр.КомандаВПраво = "КолонкуВПраво" + Индекс;
		КонецЕсли;
		НоваяСтр.КомандаСкопировать = "СкопироватьКолонку" + Индекс;
		НоваяСтр.РеквизитКолонки = "Колонка" + Индекс;
		НоваяСтр.КомандаУдалить = "УдалитьКолонку" + Индекс;
		НоваяСтр.Номер = Число(Индекс);
		НоваяСтр.Цвет = Выборка.Цвет;
		
		// Общая Группа 
		ГруппаКолонки = cbr_ЭлементыФормы.СздГруппаОбычная(ЭтотОбъект, "ГруппаКолонки" + Индекс,
			Элементы.ГруппаОсновногоБлока, Выборка.Наименование, 1);
		
		// кнопки
		ГруппаКнопок = cbr_ЭлементыФормы.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаКнопок" + Индекс,
			ГруппаКолонки);

		cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "НастройкиКолонки" + Индекс, "Настройки",
			"ОткрытьКонструкторКолонки");
		cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "СкопироватьКолонку" + Индекс, "Скопировать",
			"СкопироватьКолонку");
		cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "УдалитьКолонку" + Индекс, "Удалить",
			"УдалитьКолонку");
		Если СозданныеКолонки.Количество() <> 1 Тогда
			cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "КолонкуВЛево" + Индекс, "КолонкуВЛево",
				"КолонкуПереместитьВЛево");
		КонецЕсли;
		Если СозданныеКолонки.Количество() <> Выборка.Количество() Тогда
			cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "КолонкуВПраво" + Индекс, "КолонкуВПраво",
				"КолонкуПереместитьВПраво");
		КонецЕсли;
				
		Если СозданныеКолонки.Количество() <> 1 Тогда
		
			cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "КолонкуВЛевоКнопка" + Индекс,
				ГруппаКнопок, "КолонкуВЛево", "КолонкуВЛево" + Индекс, , СвойствоКнопокВЛево);
		КонецЕсли;

		cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "НастройкиКолонкиКнопка" + Индекс,
			ГруппаКнопок, "Настройки", "НастройкиКолонки" + Индекс, , СвойствоКнопокНастройки);
		
		cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "СкопироватьКолонкуКнопка" + Индекс,
			ГруппаКнопок, "Скопировать", "СкопироватьКолонку" + Индекс, , СвойствоКнопокСкопировать);
		 cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "УдалитьКолонкуКнопка" + Индекс,
			ГруппаКнопок, "Удалить", "УдалитьКолонку" + Индекс, , СвойствоКнопокУдаления);
		Если СозданныеКолонки.Количество() <> Выборка.Количество() Тогда
			
			cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "КолонкуВПравоКнопка" + Индекс,
				ГруппаКнопок, "КолонкуВПраво", "КолонкуВПраво" + Индекс, , СвойствоКнопокВПраво);
			КонецЕсли;
			
		// Декорация надпись
		НовыйЭлемент = Элементы.Добавить("Черта" + Индекс, Тип("ДекорацияФормы"), ГруппаКолонки);   
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;  
		НовыйЭлемент.Ширина =  26;  
		НовыйЭлемент.Высота =  1;  
		Шрифт = Новый Шрифт(, 1);  
		НовыйЭлемент.Шрифт = Шрифт;
        НовыйЭлемент.АвтоМаксимальнаяВысота = Ложь;
		Если ЗначениеЗаполнено(Выборка.ЦветRGB)  Тогда
			Фон = СтрРазделить(Выборка.ЦветRGB, ",");
			ЦветФонаЭлемента = 	Новый Цвет(Фон[0], Фон[1], Фон[2]);
			НовыйЭлемент.ЦветФона = ЦветФонаЭлемента;
		КонецЕсли;
	
		// Таблица	
		cbr_ЭлементыФормы.СздДинамическийСписок(ЭтотОбъект, "Колонка" + Индекс, ГруппаКолонки,
			ТекстЗапросаДС, , "Документ.cbr_Задача", СтруктураКолонок, СтруктураСвойствДС);

		ЭтотОбъект["Колонка" + Индекс].КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.НастройкиКолонки.Получить());
		
		 ДанныеПриоритета.Сбросить();
		Пока ДанныеПриоритета.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ДанныеПриоритета.ЦветRGB) Тогда
				Продолжить;
			КонецЕсли;
			
			// ЭлементОформления = УсловноеОформление.Элементы.Добавить();  

			ЭлементОформления = ЭтотОбъект["Колонка" + Индекс].УсловноеОформление.Элементы.Добавить();
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДанныеПриоритета.Ссылка;
			ЭлементОтбора.Использование = Истина;

			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЦветПриоритета");
			ОформляемоеПоле.Использование = Истина;

			ЦветПриоритета = СтрРазделить(ДанныеПриоритета.ЦветRGB, ",");

			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(ЦветПриоритета[0],
				ЦветПриоритета[1], ЦветПриоритета[2]));
			ЭлементОформления.Использование = Истина;

		КонецЦикла;

		ИзменитьЗаголовокГруппыДС("Колонка" + Индекс);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторКолонки(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	СтруктураФормы =  СтруктураФормыКонструктора(Команда.Имя);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВызоваКонструктора", ЭтотОбъект);
	ОткрытьФорму("Обработка.cbr_Канбан.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонку(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	СкопироватьКолонкуНаСервере(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКолонку(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "УдалитьКолонку", ""));
	УдалитьКолонкуНаСервере(Номер);
КонецПроцедуры

&НаКлиенте
Процедура КолонкуПереместитьВЛево(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "КолонкуВЛево", ""));
	ПоменятьМестамиКолонки(Номер, -1);
КонецПроцедуры

&НаКлиенте
Процедура КолонкуПереместитьВПраво(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "КолонкуВПраво", ""));
	ПоменятьМестамиКолонки(Номер, 1);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКолонкиПользователя()
	Пользователь = Пользователи.АвторизованныйПользователь();

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Если Не Набор.Количество() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_НастройкиПользователейКолонокКанБан.Номер,
		|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки,
		|	cbr_НастройкиПользователейКолонокКанБан.Наименование
		|ИЗ
		|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
		|ГДЕ
		|	cbr_НастройкиПользователейКолонокКанБан.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска";

		Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			Запись.Доска = ВыбраннаяДоска;
			Запись.Пользователь = Пользователь;
			Запись.Наименование = Выборка.Наименование;
			Запись.Номер = Выборка.Номер;
			Запись.НастройкиКолонки = Выборка.НастройкиКолонки;
		КонецЦикла;

	КонецЕсли;

	Набор.Записать();
КонецПроцедуры

&НаСервере
Процедура ПоменятьМестамиКолонки(Номер, ДвижениеНомера)
	Запись1 = Неопределено;
	Запись2 = Неопределено;
	Пользователь = Пользователи.АвторизованныйПользователь();
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер = Номер Тогда
			Запись1 = Запись;
		КонецЕсли;
		Если Запись.Номер = Номер + ДвижениеНомера Тогда
			Запись2 = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(Запись1);
	Набор.Удалить(Запись2);

	НоваяЗапись1 = Набор.Добавить();
	НоваяЗапись1.Пользователь = Пользователь;
	НоваяЗапись1.Доска = ВыбраннаяДоска;
	НоваяЗапись1.Наименование = Запись1.Наименование;
	НоваяЗапись1.НастройкиКолонки = Запись1.НастройкиКолонки;
	НоваяЗапись1.Номер = Запись2.Номер;

	НоваяЗапись2 = Набор.Добавить();
	НоваяЗапись2.Пользователь = Пользователь;
	НоваяЗапись2.Доска = ВыбраннаяДоска;
	НоваяЗапись2.Наименование = Запись2.Наименование;
	НоваяЗапись2.НастройкиКолонки = Запись2.НастройкиКолонки;
	НоваяЗапись2.Номер = Запись1.Номер;

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуНаСервере(Номер)
	
	ЗаписьУдаления = Неопределено;
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер - 1;
		КонецЕсли;
		Если Запись.Номер = Номер  Тогда
			ЗаписьУдаления = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(ЗаписьУдаления);
	
	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура СкопироватьКолонкуНаСервере(КомандаИмя)
	Номер = Число(СтрЗаменить(КомандаИмя, "СкопироватьКолонку", ""));
	ИмяКолонки = "Колонка" + Номер;
	МассивСтрок = СозданныеКолонки.НайтиСтроки(Новый структура("КомандаСкопировать", КомандаИмя));

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер + 1;
		КонецЕсли;
	КонецЦикла;

	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.Доска = ВыбраннаяДоска;
	НоваяЗапись.Номер =  Номер + 1;
	НоваяЗапись.Наименование = МассивСтрок[0].Наименование;
	НоваяЗапись.НастройкиКолонки = Новый ХранилищеЗначения(ЭтотОбъект[ИмяКолонки].КомпоновщикНастроек.ПолучитьНастройки());
	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Функция СтруктураФормыКонструктора(КомандаИмя)
	ИмяКолонки = "Колонка" + СтрЗаменить(КомандаИмя, "НастройкиКолонки", "");
	МассивСтрок = СозданныеКолонки.НайтиСтроки(Новый структура("КомандаНастройки", КомандаИмя));
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	СтруктураФормы.Вставить("Наименование", МассивСтрок[0].Наименование);
	СтруктураФормы.Вставить("Номер",МассивСтрок[0].Номер); 
	СтруктураФормы.Вставить("Цвет",МассивСтрок[0].Цвет);
	НовыйКНДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКНДанных.ЗагрузитьНастройки(ЭтотОбъект[ИмяКолонки].КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураФормы.Вставить("НастройкиКолонки", НовыйКНДанных);
	Возврат СтруктураФормы;
КонецФункции

&НаСервере
Процедура ПолучитьВыбраннуюДоску()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователяКанБан.Доска
	|ПОМЕСТИТЬ вт_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователяКанБан КАК cbr_НастройкиПользователяКанБан
	|ГДЕ
	|	cbr_НастройкиПользователяКанБан.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	cbr_Доски.Ссылка,
	|	вт_ДанныеРегистра.Доска
	|ИЗ
	|	вт_ДанныеРегистра КАК вт_ДанныеРегистра
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.cbr_Доски КАК cbr_Доски
	|		ПО cbr_Доски.ДоскаПоУмолчанию";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Доска) Тогда
			ВыбраннаяДоска = Выборка.Доска;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ВыбраннаяДоска = Выборка.Ссылка;
		Иначе
			ВыбраннаяДоска = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	cbr_НастройкиПользователейКолонокКанБан.Доска
		|ИЗ
		|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
		|ГДЕ
		|	cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Запрос.УстановитьПараметр("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ВыбраннаяДоска = Выборка.Доска;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеВыбраннойДоски()
	Набор = РегистрыСведений.cbr_НастройкиПользователяКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Запись.Доска = ВыбраннаяДоска;
	Иначе
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователи.АвторизованныйПользователь();
		Запись.Доска = ВыбраннаяДоска;
	КонецЕсли;
	Набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВызоваКонструктора(Результат, ДополнительныеПараметры) Экспорт
	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокДС(ИмяРеквизита)
	Схема = Элементы[ИмяРеквизита].ПолучитьИсполняемуюСхемуКомпоновкиДанных();

	Настройки = Элементы[ИмяРеквизита].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат  Результат.Количество();
КонецФункции

&НаСервере
Процедура ИзменитьЗаголовокГруппыДС(ИмяРеквизита)
	КоличествоСтрок = КоличествоСтрокДС(ИмяРеквизита);
	
	ГруппаСписка = Элементы["ГруппаКолонки" + СтрЗаменить(ИмяРеквизита, "Колонка", "")];
	СтарыйЗаголовок = ГруппаСписка.Заголовок;
	НовыйЗаголовок = СтрРазделить(СтарыйЗаголовок, " ")[0] + " (" + Строка(КоличествоСтрок) + ")";
	ГруппаСписка.Заголовок = НовыйЗаголовок;
КонецПроцедуры
#КонецОбласти