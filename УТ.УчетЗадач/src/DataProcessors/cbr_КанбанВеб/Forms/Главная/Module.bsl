#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолучитьНастройкиКанБан();
	ОтобразитьДоску();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоскаДокументСформирован(Элемент)
	ПодключитьОбработчикОжидания("ПолучитьИОбработатьДанные", 1, Ложь);
	ПодключитьОбработчикОжидания("ОбновитьДоскуПользователя", АвтообновлениеДоски, Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСобытийДоски
&НаКлиенте
Процедура ПолучитьИОбработатьДанные() Экспорт
	ОкноДокумента = Элементы.Доска.Документ.defaultView;
	Если ОкноДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ОкноДокумента.queueHead < ОкноДокумента.queueTail Тогда
		Данные = ПрочитатьДанные(ОкноДокумента.getEvent(ОкноДокумента.queueHead + 1));
		ОкноДокумента.queueHead = ОкноДокумента.queueHead + 1;
		Если Данные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Событие = Данные.Получить("Name");
		Номер = Данные.Получить("Id");
		Если Событие = "ВЛево" Тогда
			ПроверитьКолонкиПользователя();
			ПоменятьМестамиКолонки(Число(Номер), -1);

		ИначеЕсли Событие = "Настройки" Тогда
			ПроверитьКолонкиПользователя();
			ОткрытьНастройки(Номер);

		ИначеЕсли Событие = "Скопировать" Тогда
			ПроверитьКолонкиПользователя();
			СкопироватьКолонкуНаСервере(Число(Номер));

		ИначеЕсли Событие = "Удалить" Тогда
			ПроверитьКолонкиПользователя();
			УдалитьКолонкуНаСервере(Число(Номер));

		ИначеЕсли Событие = "ВПраво" Тогда
			ПроверитьКолонкиПользователя();
			ПоменятьМестамиКолонки(Число(Номер), 1);

		ИначеЕсли Событие = "ИзменениеДоски" Тогда
			ДоскаИзВыбора = ПолучитьСсылкуДоски(Номер);
			Если ДоскаИзВыбора <> ВыбраннаяДоска Тогда
				ВыбраннаяДоска = ДоскаИзВыбора;
				ОтобразитьДоску();
			КонецЕсли;
			СохранитьИзменениеВыбраннойДоски();
		ИначеЕсли Событие = "ДобавитьКолонку" Тогда
			Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
				Возврат;
			КонецЕсли;
			ДобавитьКолонку();

		ИначеЕсли Событие = "СоздатьЗадачу" Тогда
			ОткрытьФормуСозданияЗадачи();
		ИначеЕсли Событие = "НастройкиДоски" Тогда
			ОткрытьФормуНастройкиДоски();	
		ИначеЕсли Событие = "Обновить" Тогда
			ОтобразитьДоску();
		Иначе
			ОткрытьФормуЗадачи(Номер);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиДоски()
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБанСНастройками", ЭтотОбъект);
	ОткрытьФорму("Обработка.cbr_КанбанВеб.Форма.НастройкиКанБанДоски", , , , , , ОповещениеОЗакрытииФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Номер)
	СтруктураФормы =  СтруктураФормыКонструктора(Число(Номер));

	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);
	ОткрытьФорму("Обработка.cbr_КанбанВеб.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытииФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку()
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	Если СозданныеКолонки.Количество() Тогда
		СтруктураФормы.Вставить("Номер", СозданныеКолонки[СозданныеКолонки.Количество() - 1].Номер + 1);
	Иначе
		СтруктураФормы.Вставить("Номер", 1);
	КонецЕсли;

	СтруктураФормы.Вставить("БезНастроек", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);

	ОткрытьФорму("Обработка.cbr_КанбанВеб.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияЗадачи()
	ОповещениеПослеСозданияЗадачи = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);
	Если cbr_ОбработчикиФормыЗадачиВызовСервера.ЕстьПользовательскиеНастройки() Тогда
		ПараметрыФормы = Новый Структура("УпрощеннаяФорма", Истина);
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , ОповещениеПослеСозданияЗадачи,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", , , , , , ОповещениеПослеСозданияЗадачи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗадачи(Номер)
	Ссылка = ПолучитьСсылкуЗадачи(Номер);
	ПараметрыФормы = Новый Структура("Ключ", Ссылка);
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , ОповещениеОЗакрытииФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуЗадачи(Номер)
	ГУИД = Новый УникальныйИдентификатор(Номер);
	Возврат Документы.cbr_Задача.ПолучитьСсылку(ГУИД);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуДоски(Номер)
	Если ЗначениеЗаполнено(Номер) Тогда
		ГУИД = Новый УникальныйИдентификатор(Номер);
		Возврат Справочники.cbr_Доски.ПолучитьСсылку(ГУИД);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьДанные(СтрокаДанных)
	Результат = ПрочитатьСтроку(СтрокаДанных);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Возврат ПрочитатьСтроку(Результат);
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьСтроку(СтрокаДанных)

	Результат = Неопределено;

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаДанных);
		Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат Результат;
КонецФункции
#КонецОбласти

#Область ОтображениеДоски

&НаКлиенте
Процедура ОбновитьДоскуПользователя() Экспорт
	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДоску()
	// Очистка
	Доска = Неопределено;
	СозданныеКолонки.Очистить();
	
	// Проверка на пустую доску
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКанбан = РеквизитФормыВЗначение("Объект");

	ШаблонДоски = ОбъектКанбан.ПолучитьМакет("Доска").ПолучитьТекст();
	
	// Добавление стилей
	ШаблонСтили = ОбъектКанбан.ПолучитьМакет("Стили").ПолучитьТекст();
	СтилиКлассыМеток = КлассыМеток();
	ШаблонСтили = СтрЗаменить(ШаблонСтили, "&КлассыМеток", СтилиКлассыМеток);
	ШаблонДоски = СтрЗаменить(ШаблонДоски, "&Стили", ШаблонСтили);
	
	// Добавление Скриптов
	ШаблонСкрипта = ОбъектКанбан.ПолучитьМакет("Скрипт").ПолучитьТекст();
	ШаблонДоски = СтрЗаменить(ШаблонДоски, "&Скрипт", ШаблонСкрипта);
	
	// Добавление выподающего списка досок
	ВыборДосок = ВыпадающийСписокДосок(ВыбраннаяДоска);
	ШаблонДоски = СтрЗаменить(ШаблонДоски, "&Доски", ВыборДосок);
	
	// Шаблоны кнопок колонок
	ШаблонКнопкиВЛево = ОбъектКанбан.ПолучитьМакет("КнопкаВЛево").ПолучитьТекст();
	ШаблонКнопкиВПраво = ОбъектКанбан.ПолучитьМакет("КнопкаВПраво").ПолучитьТекст();
	
	// Иконки 
	ШаблонИконкиГруппы = ОбъектКанбан.ПолучитьМакет("ИконкаГруппыИлиРоли").ПолучитьТекст();
	ШаблонИконкиПользователя = ОбъектКанбан.ПолучитьМакет("ИконкаПользователя").ПолучитьТекст();
	
	// Шаблоны основных элементов
	ШаблонИсполнительПользователь = ОбъектКанбан.ПолучитьМакет("ИсполнительПользователь").ПолучитьТекст();
	ШаблонКолонки = ОбъектКанбан.ПолучитьМакет("Колонка").ПолучитьТекст();
	ШаблонЗадачи = ОбъектКанбан.ПолучитьМакет("Задача").ПолучитьТекст();

	// Создание колонок с задачами
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователейКолонокКанБан.Номер КАК Номер,
	|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки КАК НастройкиКолонки,
	|	cbr_НастройкиПользователейКолонокКанБан.Наименование КАК Наименование,
	|	cbr_НастройкиПользователейКолонокКанБан.Цвет КАК Цвет,
	|	cbr_Цвета.ЦветRGB КАК ЦветRGB,
	|	cbr_Цвета.ЦветТекстаRGB
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_НастройкиПользователейКолонокКанБан.Цвет = cbr_Цвета.Ссылка
	|ГДЕ
	|	cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска
	|	И cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	СформированныеКолонки = "";

	Пока Выборка.Следующий() Цикл

		ЗаписатьВТЗСозданныеКолонки(Выборка.Номер, Выборка.Наименование, Выборка.Цвет);
		
		Настройки = Выборка.НастройкиКолонки.Получить();
		ТаблицаЗадач = ПолучитьТаблицуЗадач(ОбъектКанбан, Настройки);
		
		СформированныеЗадачи = "";

		Для Каждого Задача Из ТаблицаЗадач Цикл
			ЗадачаКомпонент = СформироватьЗадачуДоски(ШаблонЗадачи, ШаблонИсполнительПользователь,
				ШаблонИконкиПользователя, ШаблонИконкиГруппы, Задача, Акцентирование);
			СформированныеЗадачи = СформированныеЗадачи + ЗадачаКомпонент;
		КонецЦикла;

		ПараметрыКолонки = Новый Структура();
		ПараметрыКолонки.Вставить("КнопкаВЛево", СозданныеКолонки.Количество() > 1);
		ПараметрыКолонки.Вставить("КнопкаВПраво", СозданныеКолонки.Количество() = Выборка.Количество());
		ПараметрыКолонки.Вставить("Наименование", Выборка.Наименование);
		ПараметрыКолонки.Вставить("Количество", ТаблицаЗадач.Количество());
		ПараметрыКолонки.Вставить("СформированныеЗадачи", СформированныеЗадачи);
		ПараметрыКолонки.Вставить("ЦветRGB", Выборка.ЦветRGB);
		ПараметрыКолонки.Вставить("ЦветТекстаRGB", Выборка.ЦветТекстаRGB);
		ПараметрыКолонки.Вставить("Номер", Выборка.Номер);
		
		ТекКолонка = СформироватьКолонкуДоски(ШаблонКолонки, ШаблонКнопкиВЛево, ШаблонКнопкиВПраво, ПараметрыКолонки);

		СформированныеКолонки = СформированныеКолонки + ТекКолонка;
	КонецЦикла;
	ШаблонДоски = СтрЗаменить(ШаблонДоски, "&Колонки", СформированныеКолонки);
	Доска = ШаблонДоски;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпадающийСписокДосок(ТекДоска)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_Доски.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(cbr_Доски.Ссылка) КАК УИД,
	|	cbr_Доски.Наименование
	|ИЗ
	|	Справочник.cbr_Доски КАК cbr_Доски
	|
	|УПОРЯДОЧИТЬ ПО
	|	cbr_Доски.ДоскаПоУмолчанию УБЫВ";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДоски = РезультатЗапроса.Выбрать();
	ВыборДосок = "";
	Пока ВыборкаДоски.Следующий() Цикл
		Если ВыборкаДоски.Ссылка = ТекДоска Тогда
			ВыборДосок = ВыборДосок + "<option value=" + Символ(34) + ВыборкаДоски.УИД + Символ(34) + " selected>"
				+ ВыборкаДоски.Наименование + "</option>";
		Иначе
			ВыборДосок = ВыборДосок + "<option value=" + Символ(34) + ВыборкаДоски.УИД + Символ(34) + ">"
				+ ВыборкаДоски.Наименование + "</option>";
		КонецЕсли;
	КонецЦикла;
	Возврат ВыборДосок;
КонецФункции	

&НаСервереБезКонтекста
Функция КлассыМеток()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_МеткиЗадач.Код,
	|	cbr_Цвета.ЦветRGB,
	|	cbr_Цвета.ЦветТекстаRGB
	|ИЗ
	|	Справочник.cbr_МеткиЗадач КАК cbr_МеткиЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_МеткиЗадач.Цвет = cbr_Цвета.Ссылка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	СтилиКлассыМеток = "";
	Пока Выборка.Следующий() Цикл
		СтилиКлассыМеток = СтилиКлассыМеток + ".task-metka-" + Выборка.Код + "{ background: rgb(" + Выборка.ЦветRGB
			+ "); color: rgb(" + Выборка.ЦветТекстаRGB + ");}";			
	КонецЦикла;
	Возврат СтилиКлассыМеток;
КонецФункции

&НаСервере
Процедура ЗаписатьВТЗСозданныеКолонки(Индекс, Наименование, Цвет)
	НоваяСтр = СозданныеКолонки.Добавить();
	НоваяСтр.Наименование = Наименование;
	НоваяСтр.Номер = Число(Индекс);
	НоваяСтр.Цвет = Цвет;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуЗадач(ОбъектКанбан, Настройки)
	
		Схема = ОбъектКанбан.ПолучитьМакет("СхемаКомпоновкиКолонки");
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		ТипВыгрузки = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
		НастройкиКомпоновкиДанных = Схема.НастройкиПоУмолчанию;

		СкопироватьОтборКомпоновщика(НастройкиКомпоновкиДанных.Отбор.Элементы, Настройки.Отбор.Элементы);
		ЗаполнитьЗначенияСвойств(НастройкиКомпоновкиДанных.Порядок, Настройки.Порядок);
		Для Каждого ЭлементаПорядка Из Настройки.Порядок.Элементы Цикл
			НовыйЭлементПорядка = НастройкиКомпоновкиДанных.Порядок.Элементы.Добавить(Тип(
				"ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементПорядка, ЭлементаПорядка);
		КонецЦикла;

		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновкиДанных, , , ТипВыгрузки);

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

		ТаблицаЗадач = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗадач);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Возврат ТаблицаЗадач;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьЗадачуДоски(ШаблонЗадачи, ШаблонИсполнительПользователь, ШаблонИконкиПользователя, ШаблонИконкиГруппы, Задача, Акцентирование)
	ЗадачаКомпонент = СтрЗаменить(ШаблонЗадачи, "&Название", Задача.Наименование);
	ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Постановщик", Задача.Постановщик);
	Если ЗначениеЗаполнено(Задача.Дедлайн) Тогда
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Дедлайн", "до " + Формат(Задача.Дедлайн, "ДФ=дд.ММ"));
	Иначе
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Дедлайн", "");
	КонецЕсли;

	Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Фото = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Исполнитель, "Фотография");
				// Басе64 = Base64Строка(Фото.Получить());
		Если Фото.Получить() = Неопределено Тогда
			Исполнитель = ШаблонИконкиПользователя + "<div>" + ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
						Строка(Задача.Исполнитель)) + "</div>";
		Иначе
			СсылкаНаФото = ПолучитьНавигационнуюСсылку(Задача.Исполнитель, "Фотография");
			Исполнитель = СтрЗаменить(ШаблонИсполнительПользователь, "&Басе64", СсылкаНаФото);
			Исполнитель = СтрЗаменить(Исполнитель, "&Исполнитель", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
						Строка(Задача.Исполнитель)));
		КонецЕсли;
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Исполнитель", Исполнитель);
	ИначеЕсли ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.cbr_Роли") Или ТипЗнч(Задача.Исполнитель) = Тип(
		"СправочникСсылка.cbr_ГруппыДоступаКЗадачам") Тогда
		Исполнитель = ШаблонИконкиГруппы + "<div>" + Задача.Исполнитель + "</div>";
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Исполнитель", Исполнитель);
	Иначе
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Исполнитель", "");
	КонецЕсли;

	Если Задача.Приоритет = ПредопределенноеЗначение("Перечисление.cbr_ПриоритетыЗадач.Низкий") Тогда
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КлассПриоритета", "task-box-priority-1");
	ИначеЕсли Задача.Приоритет = ПредопределенноеЗначение("Перечисление.cbr_ПриоритетыЗадач.Обычный") Тогда
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КлассПриоритета", "task-box-priority-2");
	ИначеЕсли Задача.Приоритет = ПредопределенноеЗначение("Перечисление.cbr_ПриоритетыЗадач.Высокий") Тогда
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КлассПриоритета", "task-box-priority-3");
	Иначе
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КлассПриоритета", "task-box-priority-0");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.ПросроченоеДействие) и Акцентирование Тогда
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&МигающийСтиль", "task-blinking-border");
	Иначе
		ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&МигающийСтиль", "");
	КонецЕсли;
	ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КлассМетки", "task-metka-"+Задача.КодМетки);
	ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Метка", Задача.Метка);
	ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&УИД", Задача.УИД);
	Возврат ЗадачаКомпонент;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьКолонкуДоски(ШаблонКолонки, ШаблонКнопкиВЛево, ШаблонКнопкиВПраво, ПараметрыКолонки)
	ТекКолонка = СтрЗаменить(ШаблонКолонки, "&НазваниеКолонки", ПараметрыКолонки.Наименование);
	Если ПараметрыКолонки.КнопкаВЛево Тогда
		ТекКолонка = СтрЗаменить(ТекКолонка, "&КнопкаВЛево", ШаблонКнопкиВЛево);
	Иначе
		ТекКолонка = СтрЗаменить(ТекКолонка, "&КнопкаВЛево", "");
	КонецЕсли;

	Если ПараметрыКолонки.КнопкаВПраво Тогда
		ТекКолонка = СтрЗаменить(ТекКолонка, "&КнопкаВПраво", "");
	Иначе
		ТекКолонка = СтрЗаменить(ТекКолонка, "&КнопкаВПраво", ШаблонКнопкиВПраво);
	КонецЕсли;

	ТекКолонка = СтрЗаменить(ТекКолонка, "&Количество", ПараметрыКолонки.Количество);
	ТекКолонка = СтрЗаменить(ТекКолонка, "&Задачи", ПараметрыКолонки.СформированныеЗадачи);

	Если ЗначениеЗаполнено(ПараметрыКолонки.ЦветRGB) Тогда
		ТекКолонка = СтрЗаменить(ТекКолонка, "&Цвет", ПараметрыКолонки.ЦветRGB);
	Иначе
		ТекКолонка = СтрЗаменить(ТекКолонка, "&Цвет", "251,237,158");
	КонецЕсли;
	ТекКолонка = СтрЗаменить(ТекКолонка, "&Номер", ПараметрыКолонки.Номер);

	Если ЗначениеЗаполнено(ПараметрыКолонки.ЦветТекстаRGB) Тогда
		ТекКолонка = СтрЗаменить(ТекКолонка, "&ТекстаЦвет", ПараметрыКолонки.ЦветТекстаRGB);
	Иначе
		ТекКолонка = СтрЗаменить(ТекКолонка, "&ТекстаЦвет", "0,0,0");
	КонецЕсли;
	Возврат ТекКолонка;
КонецФункции
#КонецОбласти

#Область ПроцедурыИФункцииСобытий1С
&НаСервереБезКонтекста
Процедура СкопироватьОтборКомпоновщика(Приемник, Источник)
	Для Каждого ЭлементОтбора Из Источник Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(Приемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);
		Иначе
			НоваяГруппа = Приемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НоваяГруппа, ЭлементОтбора);
			СкопироватьОтборКомпоновщика(НоваяГруппа.Элементы, ЭлементОтбора.Элементы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКолонкиПользователя()
	Пользователь = Пользователи.АвторизованныйПользователь();

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Если Не Набор.Количество() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_НастройкиПользователейКолонокКанБан.Номер,
		|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки,
		|	cbr_НастройкиПользователейКолонокКанБан.Наименование,
		|	cbr_НастройкиПользователейКолонокКанБан.Цвет
		|ИЗ
		|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
		|ГДЕ
		|	cbr_НастройкиПользователейКолонокКанБан.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска";

		Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			Запись.Доска = ВыбраннаяДоска;
			Запись.Пользователь = Пользователь;
			Запись.Наименование = Выборка.Наименование;
			Запись.Номер = Выборка.Номер;
			Запись.НастройкиКолонки = Выборка.НастройкиКолонки;
			Запись.Цвет = Выборка.Цвет;
		КонецЦикла;

	КонецЕсли;

	Набор.Записать();
КонецПроцедуры

&НаСервере
Процедура ПоменятьМестамиКолонки(Номер, ДвижениеНомера)
	Запись1 = Неопределено;
	Запись2 = Неопределено;
	Пользователь = Пользователи.АвторизованныйПользователь();
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер = Номер Тогда
			Запись1 = Запись;
		КонецЕсли;
		Если Запись.Номер = Номер + ДвижениеНомера Тогда
			Запись2 = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(Запись1);
	Набор.Удалить(Запись2);

	НоваяЗапись1 = Набор.Добавить();
	НоваяЗапись1.Пользователь = Пользователь;
	НоваяЗапись1.Доска = ВыбраннаяДоска;
	НоваяЗапись1.Наименование = Запись1.Наименование;
	НоваяЗапись1.НастройкиКолонки = Запись1.НастройкиКолонки;
	НоваяЗапись1.Цвет = Запись1.Цвет;
	НоваяЗапись1.Номер = Запись2.Номер;

	НоваяЗапись2 = Набор.Добавить();
	НоваяЗапись2.Пользователь = Пользователь;
	НоваяЗапись2.Доска = ВыбраннаяДоска;
	НоваяЗапись2.Наименование = Запись2.Наименование;
	НоваяЗапись2.НастройкиКолонки = Запись2.НастройкиКолонки;
	НоваяЗапись2.Цвет = Запись2.Цвет;
	НоваяЗапись2.Номер = Запись1.Номер;

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуНаСервере(Номер)

	ЗаписьУдаления = Неопределено;
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();

	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер - 1;
			Продолжить;
		КонецЕсли;
		Если Запись.Номер = Номер Тогда
			ЗаписьУдаления = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(ЗаписьУдаления);

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура СкопироватьКолонкуНаСервере(Номер)

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();

	Наименование = Неопределено;
	Цвет = Неопределено;
	НастройкиКолонки = Неопределено;
	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер = Номер Тогда
			Наименование = Запись.Наименование;
			Цвет = Запись.Цвет;
			НастройкиКолонки = Запись.НастройкиКолонки;
			Продолжить;
		КонецЕсли;
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер + 1;
		КонецЕсли;
	КонецЦикла;

	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.Доска = ВыбраннаяДоска;
	НоваяЗапись.Номер =  Номер + 1;
	НоваяЗапись.Наименование = Наименование;
	НоваяЗапись.Цвет = Цвет;
	НоваяЗапись.НастройкиКолонки = НастройкиКолонки;

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Функция СтруктураФормыКонструктора(Номер)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки,
	|	cbr_НастройкиПользователейКолонокКанБан.Наименование,
	|	cbr_НастройкиПользователейКолонокКанБан.Цвет,
	|	cbr_НастройкиПользователейКолонокКанБан.Пользователь,
	|	cbr_НастройкиПользователейКолонокКанБан.Номер,
	|	cbr_НастройкиПользователейКолонокКанБан.Доска
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
	|ГДЕ
	|	cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска
	|	И cbr_НастройкиПользователейКолонокКанБан.Номер = &Номер
	|	И cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	СтруктураФормы.Вставить("Номер", Номер);
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураФормы.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураФормы.Вставить("Цвет", ВыборкаДетальныеЗаписи.Цвет);
		НовыйКНДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		НовыйКНДанных.ЗагрузитьНастройки(ВыборкаДетальныеЗаписи.НастройкиКолонки.Получить());
		СтруктураФормы.Вставить("НастройкиКолонки", НовыйКНДанных);
	КонецЕсли;
	Возврат СтруктураФормы;
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиКанБан()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователяКанБан.Доска КАК ДоскаПользователя,
	|	cbr_НастройкиПользователяКанБан.АвтообновлениеДоски,
	|	cbr_НастройкиПользователяКанБан.Акцентирование
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователяКанБан КАК cbr_НастройкиПользователяКанБан
	|ГДЕ
	|	cbr_НастройкиПользователяКанБан.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	cbr_Доски.Ссылка
	|ИЗ
	|	Справочник.cbr_Доски КАК cbr_Доски
	|
	|УПОРЯДОЧИТЬ ПО
	|	cbr_Доски.ДоскаПоУмолчанию УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатЗапроса[0].Выбрать();

	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ДоскаПользователя) Тогда
			ВыбраннаяДоска = Выборка.ДоскаПользователя;			
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.АвтообновлениеДоски) Тогда
			АвтообновлениеДоски = Выборка.АвтообновлениеДоски;	
		КонецЕсли;	
		Акцентирование = Выборка.Акцентирование;
	КонецЕсли;
	
	Если АвтообновлениеДоски = 0 тогда
		АвтообновлениеДоски=60;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Выборка = РезультатЗапроса[1].Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				ВыбраннаяДоска = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеВыбраннойДоски()
	Пользователь = Пользователи.АвторизованныйПользователь();
	РегистрыСведений.cbr_НастройкиПользователяКанБан.ИзменениеНастроекДоска(Пользователь, ВыбраннаяДоска);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВызоваОбновитьКанБан(Результат, ДополнительныеПараметры) Экспорт
	ОтобразитьДоску();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВызоваОбновитьКанБанСНастройками(Результат, ДополнительныеПараметры) Экспорт
	ПолучитьНастройкиКанБан();
	ОтобразитьДоску();
КонецПроцедуры
#КонецОбласти
#КонецОбласти