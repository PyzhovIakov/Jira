#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолучитьВыбраннуюДоску();
	ОтобразитьДоску();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбраннаяДоскаПриИзменении(Элемент)
	ОтобразитьДоску();
	СохранитьИзменениеВыбраннойДоски();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКолонку(Команда)
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Возврат;
	КонецЕсли;
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	Если СозданныеКолонки.Количество() Тогда
		СтруктураФормы.Вставить("Номер", СозданныеКолонки[СозданныеКолонки.Количество() - 1].Номер + 1);
	Иначе
		СтруктураФормы.Вставить("Номер", 1);
	КонецЕсли;

	СтруктураФормы.Вставить("БезНастроек", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);

	ОткрытьФорму("Обработка.cbr_КанбанВеб.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	ОповещениеПослеСозданияЗадачи = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);
	Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
		ПараметрыФормы = Новый Структура("УпрощеннаяФорма", Истина);
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , ОповещениеПослеСозданияЗадачи,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", , , , , , ОповещениеПослеСозданияЗадачи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОтобразитьДоску();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьДоску()
	// Очистка
	Доска = Неопределено;
	
	// Проверка на пустую доску
	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Возврат;
	КонецЕсли;
	
	// Стили
	ОбъектКанбан = РеквизитФормыВЗначение("Объект");
	ШаблонСтили = ОбъектКанбан.ПолучитьМакет("Стили").ПолучитьТекст();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Цвета.ЦветRGB,
		|	cbr_Цвета.ЦветТекстаRGB,
		|	cbr_Приоритеты.Ссылка,
		|	cbr_Приоритеты.Код
		|ИЗ
		|	Справочник.cbr_Приоритеты КАК cbr_Приоритеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
		|		ПО cbr_Приоритеты.Цвет = cbr_Цвета.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПриоритетов = РезультатЗапроса.Выгрузить();
	ТекстСтилей = "";
	Для Каждого Приоритет Из ТаблицаПриоритетов Цикл
		ТекстСтилей = ТекстСтилей + "#Приоритет" + Приоритет.Код + "{background: rgb(" + Приоритет.ЦветRGB
			+ "); color: rgb(" + Приоритет.ЦветТекстаRGB + ");  border: rgb(" + Приоритет.ЦветТекстаRGB
			+ ") 1px solid;} " + "#Приоритет" + Приоритет.Код + ":hover{background: #e7e6e6;}";
	КонецЦикла;
	ШаблонСтили = СтрЗаменить(ШаблонСтили, "&СтилиПриоритетов", ТекстСтилей);
	
	// Создание объектов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователейКолонокКанБан.Номер КАК Номер,
	|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки КАК НастройкиКолонки,
	|	cbr_НастройкиПользователейКолонокКанБан.Наименование КАК Наименование,
	|	cbr_НастройкиПользователейКолонокКанБан.Цвет КАК Цвет,
	|	cbr_Цвета.ЦветRGB КАК ЦветRGB,
	|	cbr_Цвета.ЦветТекстаRGB
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_НастройкиПользователейКолонокКанБан.Цвет = cbr_Цвета.Ссылка
	|ГДЕ
	|	cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска
	|	И cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	ШаблонДоски = ОбъектКанбан.ПолучитьМакет("Доска").ПолучитьТекст();
	ШаблонДоски = СтрЗаменить(ШаблонДоски, "&Стили", ШаблонСтили);

	ШаблонКолонки = ОбъектКанбан.ПолучитьМакет("Колонка").ПолучитьТекст();
	ШаблонЗадачи = ОбъектКанбан.ПолучитьМакет("Задача").ПолучитьТекст();
	СформированныеКолонки = "";
	
	Пока Выборка.Следующий() Цикл

		Индекс = Выборка.Номер;
		НоваяСтр = СозданныеКолонки.Добавить();
		НоваяСтр.Наименование = Выборка.Наименование;
		НоваяСтр.Номер = Число(Индекс);
		НоваяСтр.Цвет = Выборка.Цвет;
		Настройки = Выборка.НастройкиКолонки.Получить();
		
		Схема = ОбъектКанбан.ПолучитьМакет("СхемаКомпоновкиКолонки");
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		ТипВыгрузки = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
		НастройкиКомпоновкиДанных = Схема.НастройкиПоУмолчанию;
		
		СкопироватьОтборКомпоновщика(НастройкиКомпоновкиДанных.Отбор.Элементы, Настройки.Отбор.Элементы);
		ЗаполнитьЗначенияСвойств(НастройкиКомпоновкиДанных.Порядок, Настройки.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиКомпоновкиДанных.Структура[0].Порядок, Настройки.Порядок);
		Для Каждого ЭлементаПорядка Из Настройки.Порядок.Элементы Цикл
			НовыйЭлементПорядка = НастройкиКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементПорядка, ЭлементаПорядка);
		КонецЦикла;
		НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы.Очистить();
		Для Каждого ЭлементаПорядка Из Настройки.Порядок.Элементы Цикл
			НовыйЭлементПорядка = 
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементПорядка, ЭлементаПорядка);
		КонецЦикла;
			
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновкиДанных, , , ТипВыгрузки);

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		
		ТаблицаЗадач = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗадач);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
			
		СформированныеЗадачи = "";

		Для Каждого Задача Из ТаблицаЗадач Цикл
			ЗадачаКомпонент = СтрЗаменить(ШаблонЗадачи, "&Название", Задача.Наименование);
			ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Постановщик", Задача.Постановщик);
			ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Дедлайн", Задача.Дедлайн);
			ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&Исполнитель", Задача.Исполнитель);
			ЗадачаКомпонент = СтрЗаменить(ЗадачаКомпонент, "&КодПриоритета", Задача.КодПриоритета);
			СформированныеЗадачи = СформированныеЗадачи + ЗадачаКомпонент;
		КонецЦикла;
		 
		ТекКолонка = СтрЗаменить(ШаблонКолонки, "&НазваниеКолонки", Выборка.Наименование); 
		ТекКолонка = СтрЗаменить(ТекКолонка, "&Количество", ТаблицаЗадач.Количество()); 
		ТекКолонка = СтрЗаменить(ТекКолонка, "&Задачи", СформированныеЗадачи); 	
		ТекКолонка = СтрЗаменить(ТекКолонка, "&Цвет", Выборка.ЦветRGB);
		ТекКолонка = СтрЗаменить(ТекКолонка, "&ТекстаЦвет", Выборка.ЦветТекстаRGB);
		СформированныеКолонки = СформированныеКолонки + ТекКолонка;
	КонецЦикла;
		ШаблонДоски = СтрЗаменить(ШаблонДоски, "Колонки", СформированныеКолонки);
		Доска = ШаблонДоски;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьОтборКомпоновщика(Приемник, Источник) 
	Для Каждого ЭлементОтбора Из Источник Цикл
       Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
           ЗаполнитьЗначенияСвойств(Приемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);        
       Иначе
           НоваяГруппа = Приемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
           ЗаполнитьЗначенияСвойств(НоваяГруппа, ЭлементОтбора);
           СкопироватьОтборКомпоновщика(НоваяГруппа.Элементы, ЭлементОтбора.Элементы);
       КонецЕсли;
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторКолонки(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	СтруктураФормы =  СтруктураФормыКонструктора(Команда.Имя);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВызоваОбновитьКанБан", ЭтотОбъект);
	ОткрытьФорму("Обработка.cbr_Канбан.Форма.КонструкторКолонки", СтруктураФормы, , , , , ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонку(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	СкопироватьКолонкуНаСервере(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКолонку(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "УдалитьКолонку", ""));
	УдалитьКолонкуНаСервере(Номер);
КонецПроцедуры

&НаКлиенте
Процедура КолонкуПереместитьВЛево(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "КолонкуВЛево", ""));
	ПоменятьМестамиКолонки(Номер, -1);
КонецПроцедуры

&НаКлиенте
Процедура КолонкуПереместитьВПраво(Команда) Экспорт
	ПроверитьКолонкиПользователя();
	Номер = Число(СтрЗаменить(Команда.Имя, "КолонкуВПраво", ""));
	ПоменятьМестамиКолонки(Номер, 1);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКолонкиПользователя()
	Пользователь = Пользователи.АвторизованныйПользователь();

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Если Не Набор.Количество() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_НастройкиПользователейКолонокКанБан.Номер,
		|	cbr_НастройкиПользователейКолонокКанБан.НастройкиКолонки,
		|	cbr_НастройкиПользователейКолонокКанБан.Наименование
		|ИЗ
		|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
		|ГДЕ
		|	cbr_НастройкиПользователейКолонокКанБан.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И cbr_НастройкиПользователейКолонокКанБан.Доска = &Доска";

		Запрос.УстановитьПараметр("Доска", ВыбраннаяДоска);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			Запись.Доска = ВыбраннаяДоска;
			Запись.Пользователь = Пользователь;
			Запись.Наименование = Выборка.Наименование;
			Запись.Номер = Выборка.Номер;
			Запись.НастройкиКолонки = Выборка.НастройкиКолонки;
		КонецЦикла;

	КонецЕсли;

	Набор.Записать();
КонецПроцедуры

&НаСервере
Процедура ПоменятьМестамиКолонки(Номер, ДвижениеНомера)
	Запись1 = Неопределено;
	Запись2 = Неопределено;
	Пользователь = Пользователи.АвторизованныйПользователь();
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();

	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер = Номер Тогда
			Запись1 = Запись;
		КонецЕсли;
		Если Запись.Номер = Номер + ДвижениеНомера Тогда
			Запись2 = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(Запись1);
	Набор.Удалить(Запись2);

	НоваяЗапись1 = Набор.Добавить();
	НоваяЗапись1.Пользователь = Пользователь;
	НоваяЗапись1.Доска = ВыбраннаяДоска;
	НоваяЗапись1.Наименование = Запись1.Наименование;
	НоваяЗапись1.НастройкиКолонки = Запись1.НастройкиКолонки;
	НоваяЗапись1.Цвет = Запись1.Цвет;
	НоваяЗапись1.Номер = Запись2.Номер;

	НоваяЗапись2 = Набор.Добавить();
	НоваяЗапись2.Пользователь = Пользователь;
	НоваяЗапись2.Доска = ВыбраннаяДоска;
	НоваяЗапись2.Наименование = Запись2.Наименование;
	НоваяЗапись2.НастройкиКолонки = Запись2.НастройкиКолонки;
	НоваяЗапись2.Цвет = Запись2.Цвет;
	НоваяЗапись2.Номер = Запись1.Номер;

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуНаСервере(Номер)

	ЗаписьУдаления = Неопределено;
	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();

	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер - 1;
			Продолжить;
		КонецЕсли;
		Если Запись.Номер = Номер Тогда
			ЗаписьУдаления = Запись;
		КонецЕсли;
	КонецЦикла;

	Набор.Удалить(ЗаписьУдаления);

	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Процедура СкопироватьКолонкуНаСервере(КомандаИмя)
	Номер = Число(СтрЗаменить(КомандаИмя, "СкопироватьКолонку", ""));
	ИмяКолонки = "Колонка" + Номер;
	МассивСтрок = СозданныеКолонки.НайтиСтроки(Новый структура("КомандаСкопировать", КомандаИмя));

	Набор = РегистрыСведений.cbr_НастройкиПользователейКолонокКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Доска.Установить(ВыбраннаяДоска);
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		Если Запись.Номер >= Номер + 1 Тогда
			Запись.Номер = Запись.Номер + 1;
		КонецЕсли;
	КонецЦикла;

	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.Доска = ВыбраннаяДоска;
	НоваяЗапись.Номер =  Номер + 1;
	НоваяЗапись.Наименование = МассивСтрок[0].Наименование;
	НоваяЗапись.Цвет = МассивСтрок[0].Цвет;
	НоваяЗапись.НастройкиКолонки = Новый ХранилищеЗначения(ЭтотОбъект[ИмяКолонки].КомпоновщикНастроек.ПолучитьНастройки());
	Набор.Записать();

	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Функция СтруктураФормыКонструктора(КомандаИмя)
	ИмяКолонки = "Колонка" + СтрЗаменить(КомандаИмя, "НастройкиКолонки", "");
	МассивСтрок = СозданныеКолонки.НайтиСтроки(Новый структура("КомандаНастройки", КомандаИмя));
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить("Доска", ВыбраннаяДоска);
	СтруктураФормы.Вставить("Наименование", МассивСтрок[0].Наименование);
	СтруктураФормы.Вставить("Номер", МассивСтрок[0].Номер);
	СтруктураФормы.Вставить("Цвет", МассивСтрок[0].Цвет);
	НовыйКНДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКНДанных.ЗагрузитьНастройки(ЭтотОбъект[ИмяКолонки].КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураФормы.Вставить("НастройкиКолонки", НовыйКНДанных);
	Возврат СтруктураФормы;
КонецФункции

&НаСервере
Процедура ПолучитьВыбраннуюДоску()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_НастройкиПользователяКанБан.Доска
	|ПОМЕСТИТЬ вт_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.cbr_НастройкиПользователяКанБан КАК cbr_НастройкиПользователяКанБан
	|ГДЕ
	|	cbr_НастройкиПользователяКанБан.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	cbr_Доски.Ссылка,
	|	вт_ДанныеРегистра.Доска
	|ИЗ
	|	вт_ДанныеРегистра КАК вт_ДанныеРегистра
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.cbr_Доски КАК cbr_Доски
	|		ПО cbr_Доски.ДоскаПоУмолчанию";

	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Доска) Тогда
			ВыбраннаяДоска = Выборка.Доска;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ВыбраннаяДоска = Выборка.Ссылка;
		Иначе
			ВыбраннаяДоска = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыбраннаяДоска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	cbr_НастройкиПользователейКолонокКанБан.Доска
		|ИЗ
		|	РегистрСведений.cbr_НастройкиПользователейКолонокКанБан КАК cbr_НастройкиПользователейКолонокКанБан
		|ГДЕ
		|	cbr_НастройкиПользователейКолонокКанБан.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Запрос.УстановитьПараметр("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ВыбраннаяДоска = Выборка.Доска;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеВыбраннойДоски()
	Набор = РегистрыСведений.cbr_НастройкиПользователяКанБан.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Запись.Доска = ВыбраннаяДоска;
	Иначе
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователи.АвторизованныйПользователь();
		Запись.Доска = ВыбраннаяДоска;
	КонецЕсли;
	Набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВызоваОбновитьКанБан(Результат, ДополнительныеПараметры) Экспорт
	ОтобразитьДоску();
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокДС(ИмяРеквизита)
	Схема = Элементы[ИмяРеквизита].ПолучитьИсполняемуюСхемуКомпоновкиДанных();

	Настройки = Элементы[ИмяРеквизита].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат Результат.Количество();
КонецФункции

&НаСервере
Процедура ИзменитьЗаголовокГруппыДС(ИмяРеквизита)
	КоличествоСтрок = КоличествоСтрокДС(ИмяРеквизита);

	ГруппаСписка = Элементы["ГруппаКолонки" + СтрЗаменить(ИмяРеквизита, "Колонка", "")];
	СтарыйЗаголовок = ГруппаСписка.Заголовок;
	НовыйЗаголовок = СтарыйЗаголовок + " (" + Строка(КоличествоСтрок) + ")";
	ГруппаСписка.Заголовок = НовыйЗаголовок;
КонецПроцедуры
#КонецОбласти