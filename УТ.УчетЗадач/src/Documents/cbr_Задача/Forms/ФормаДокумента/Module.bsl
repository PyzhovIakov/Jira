#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОписаниеЗадачи = Новый ХранилищеЗначения(ОписаниеЗадачиДокумент);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработатьЗначенияПараметровФормы();
	
	ОтобразитьИерархиюЗадач();

	ЗаполнитьТаблицуПрисоединенных();

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеЗадачиДокумент = ДокОбъект.ОписаниеЗадачи.Получить();

	Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.ПриСозданииНаСервереФормыЗадачи");
	cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Объект.Ссылка);

	Если Не Объект.ЧекЛист.Количество() > 0 Тогда
		Элементы.ГруппаЧекЛист.Скрыть();
	Иначе
		Элементы.ГруппаЧекЛист.Показать();
	КонецЕсли;

	ИнициализироватьМетки();
	
	ИнициализироватьКалендарь();
	
	ОбновитьСписокВыбораПриоритета();
	
	ОбновитьВидимостьЭлементов();
	
	ОбновитьТекущиеЭтапыЗадачи();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	Если Исполнитель = Объект.ГлавныйМенеджер ИЛИ Исполнитель = Объект.Постановщик Тогда
		cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель, Истина);
	Иначе
		cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель);	
	КонецЕсли;

	Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.ПослеЗаписиНаСервереФормаЗадачи");
	cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьАвтообновлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда

		Если Источник = УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Количество() <> 0 Тогда
				ТекущаяЗаписьКалендаря = Параметр[0];
				ТекущаяДатаНачала = Неопределено;
			КонецЕсли;
		КонецЕсли;

		ОбновитьОтображениеКлиент(Параметр);

	КонецЕсли;

	Если ИмяСобытия = "Запись_ДоступноеВремяФизЛица" Или ИмяСобытия = "Запись_ЗанятостьФизЛица" Или 
	ИмяСобытия = "Запись_Мероприятие" Или ИмяСобытия = "Запись_Отсутствие" 
	Или ИмяСобытия = "Закрытие_НастройкиСинхронизацииКалендаря" Тогда

		ОбновитьОтображениеКлиент();

	КонецЕсли;

	Если ИмяСобытия = "Запись_НастройкиКалендаря" Тогда
		ОбновитьОтображениеКлиент( , , Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ТекущийСтатус = cbr_ОбработчикиФормыЗадачиСервер.СтатусВыбраннойЗадачи(Объект.Ссылка);
	
	Если ТекущийСтатус <> Неопределено Тогда
		ЭтоНовая = ТекущийСтатус.Новая;
		ТекущийПользователь = ПользователиКлиент.АвторизованныйПользователь();
		
		Если ЗначениеЗаполнено(ЭтоНовая) И ЭтоНовая И (ТекущийПользователь = Объект.Автор Или ТекущийПользователь = Объект.Постановщик) Тогда
			Оповещение = Новый ОписаниеОповещения("ВРаботуПослеЗакрытияВопроса", ЭтотОбъект);
	
			ПоказатьВопрос(Оповещение, "Отправить задачу в работу?", РежимДиалогаВопрос.ДаНет, 0,
				КодВозвратаДиалога.Да, "");    
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	Объект.Постановщик = Неопределено;
	Объект.ГлавныйМенеджер = Неопределено;
	ВидимостьСвязанныхСРолями();
	ОбновитьВидимостьОсновногоМенеджера();
	ОбновитьИсполнителяИзВидаЗадачи();
	ДобавитьНаблюдателяОтИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Введите вид Задачи");
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ПостановщикНачалоВыбораНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикПриИзменении(Элемент)
	ПостановщикПриИзмененииНаСервере();
	ОбновитьВидимостьОсновногоМенеджера();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВремениПриИзменении(Элемент)
	КонтрольВремениПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	cbr_КалендарьКлиент.ОбработкаВыбораЭлемента(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, ЗначенияИзмерений, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент)
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	ОбновитьДанныеКалендаря("ПериодОтображения");
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйМенеджерПриИзменении(Элемент)
	ГлавныйМенеджерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	ДобавитьНаблюдателяОтИсполнителя();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрисоединенныхФайлов

&НаКлиенте
Процедура ТаблицаПрисоединенныхФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ТаблицаПрисоединенныхФайлов.ТекущиеДанные;
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыбратьСвязанныеЗадачи(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаПодбораСвязанных", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВопросы(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	Оповещение = Новый ОписаниеОповещения("ПослеЗаданногоВопроса", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.cbr_ФормаСпискаВопросовПоЗадаче", ПараметрыФормы, , , , , Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаВопрос(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.cbr_ФормаОтветаНаВопросПоЗадаче", ПараметрыФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлавнуюЗадачу(Команда)
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораГлавнойЗадачи", ЭтотОбъект);

	СписокЗапрещенных = СписокПодчиненных();
	СписокЗапрещенных.Добавить(Объект.ГлавнаяЗадача);
	ПараметрыФормы = Новый Структура("СписокЗапрещенных", СписокЗапрещенных);

	ОткрытьФорму("Документ.cbr_Задача.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытииФормыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗадачу(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	ПараметрыФормы.Вставить("УчетВремени", Объект.УчетВремени);
	ПараметрыФормы.Вставить("КонтрольВремени", Объект.КонтрольВремени);

	ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеЗакрытияЗадачи", ЭтотОбъект);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаЗакрытияЗадачи", ПараметрыФормы, , , , , ОбработкаПослеВзятияЗадачи,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОценку(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаСозданияСогласованияОценкиЗадачи", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтветаСогласованияОценки", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиТрудозатраты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	ОткрытьФорму("Документ.cbr_ТрудозатратыПоЗадаче.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗадачу(Команда) Экспорт
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Постановщик", Объект.Постановщик);
	ПараметрыФормы.Вставить("ГлавныйМенеджер", Объект.ГлавныйМенеджер);
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ПараметрыФормы.Вставить("Автор", Объект.Автор);
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьВидимостьКнопок", ЭтотОбъект);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтклоненияЗадачи", ПараметрыФормы, , , , , Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГлавнуюЗадачу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите задачу");

		Возврат;
	КонецЕсли;

	Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
		ПараметрыФормы = Новый Структура("ИсточникПараметров,Исполнитель,УпрощеннаяФорма", Объект.Ссылка, Объект.Постановщик, Истина);
		ФормаДок = ПолучитьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы);
		ФормаДок.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Иначе
		ПараметрыФормы = Новый Структура("ИсточникПараметров,Исполнитель", Объект.Ссылка, Объект.Постановщик);
		ФормаДок = ПолучитьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;

	ДанныеФормы = ФормаДок.Объект;

	СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы);
	ПараметрыДоп = Новый Структура("ФормаДок", ФормаДок);

	НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияГлавнойЗадачи", ЭтотОбъект, ПараметрыДоп);
	ФормаДок.ОписаниеОповещенияОЗакрытии = НовыйОповещение;

	ФормаДок.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодчиненнуюЗадачу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запишите задачу";
		Сообщение.Сообщить();
	Иначе
		Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
			ПараметрыФормы = Новый Структура("ГлавнаяЗадача,ИсточникПараметров,Исполнитель,УпрощеннаяФорма", Объект.Ссылка,
				Объект.Ссылка, Объект.Постановщик, Истина);
			НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияПодчиненнойЗадачи", ЭтотОбъект);

			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , НовыйОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПараметрыФормы = Новый Структура("ГлавнаяЗадача,ИсточникПараметров,Исполнитель", Объект.Ссылка,
				Объект.Ссылка, Объект.Постановщик);
			НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияПодчиненнойЗадачи", ЭтотОбъект);

			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , НовыйОповещение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СброситьГлавнуюЗадачу(Команда)
	Объект.ГлавнаяЗадача = Неопределено;
	Записать();
	ОтобразитьИерархиюЗадач();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомментарии(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ЗадачаИсточник", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.cbr_КомментарииЗадач", ПараметрыФормы, , Новый УникальныйИдентификатор);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ задачи");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДедлайн(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаСозданияСогласованияДедлайна", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтветаСогласованияДедлайна", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИерархиюВНовомОкне(Команда)
	ПараметрыФормы = Новый Структура("ТаблицаПодчиненности", ТаблицаПодчиненности);
	ОткрытьФорму("ОбщаяФорма.cbr_ИерархияЗадачОбщая", ПараметрыФормы, , Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗадачу(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
 		ВзятьЗадачуНаСервере();
		ОбновитьВидимостьЭлементов();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Проведите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайл(Команда)
	РаботаСФайламиСлужебныйКлиент.ДобавитьФайлИзФайловойСистемы(Объект.Ссылка, ЭтотОбъект);
	ЗаполнитьТаблицуПрисоединенных();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	ВыделенныеСтроки = ВыделенныеСтрокиФайлов();
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуПрисоединенныхКлиент", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.УдалитьДанныеФайлов(Оповещение, ВыделенныеСтроки, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура МеткаЕще(Команда)
	ВызовВыбораМеток();
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюИзменить(Команда)
	ВызовВыбораМеток();
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюОчистить(Команда)
	ОчисткаМетокНаФормеНаСервере();
	Объект.Метка = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВКалендарь(Команда)
	ОписаниеДок = ОписаниеЗадачиДокумент.ПолучитьТекст();
	cbr_КалендарьКлиент.СоздатьЗаписьКалендаряЗадача(Объект.Ссылка, Исполнитель, ОписаниеДок);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителяИзГруппы(Команда)
	ПользователиГруппы = ПользователиГруппыДоступа();
	ПараметрыФормы = Новый Структура("СоставГруппы", ПользователиГруппы);
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораИсполнителя", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Пользователи.Форма.cbr_ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытииФормыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолнуюФорму(Команда)
	ПереключениеВидаФормы(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВышестоящуюВРаботу(Команда)
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		ОписаниеОповещенияОВозврате = Новый ОписаниеОповещения("ПослеВозвратаВышестоящей", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещенияОВозврате, , "Введите причину возврата в работу", 0, Истина);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Вышестоящая задача не указана");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОЗадаче(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Задача", Объект.Ссылка);
		ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаУведомлениеПользователей", ПараметрыФормы, , , , ,
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите задачу");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаИсполнение(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Подписка = ПредопределенноеЗначение("Перечисление.cbr_ПодпискаДляТриггера.КнопкаОтправитьНаИсполнение");
		cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Объект.Ссылка);
		ОбновитьВидимостьЭлементов();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Проведите документ.");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область РаботаСИерархией
&НаСервере
Функция СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы)
	НовыйИД = Новый УникальныйИдентификатор;
	НоваяСсылка = Документы.cbr_Задача.ПолучитьСсылку(НовыйИД);
	Док = Документы.cbr_Задача.СоздатьДокумент();
	Док.УстановитьСсылкуНового(НоваяСсылка);
	ЗначениеВДанныеФормы(Док, ДанныеФормы);
	Возврат НоваяСсылка;
КонецФункции

&НаКлиенте
Процедура ПослеСозданияГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФормаДок.Объект.Ссылка) Тогда
		Объект.ГлавнаяЗадача = ДополнительныеПараметры.ФормаДок.Объект.Ссылка;
		Записать();
		ОтобразитьИерархиюЗадач();
		ОбновитьВидимостьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияПодчиненнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ГлавнаяЗадача = Результат;
		Записать();
		ОтобразитьИерархиюЗадач();
		ОбновитьВидимостьЭлементов();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Метки
&НаСервере 
Процедура ИнициализироватьМетки()
	Элементы.ГруппаВыбораМетки.Видимость = Ложь;
	
	Если (Не cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() И Не ЗначениеЗаполнено(Объект.Ссылка))
		Или Не ЗначениеЗаполнено(Объект.Метка) Тогда

		Выборка = ПолучениеВыборкиМеток();
		Пока Выборка.Следующий() Цикл
			cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект, "МеткаКоманда" + Выборка.Код, Выборка.Наименование,
				"ПрисвоитьЗначениеМетке");

			НоваяКнопка = cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "МеткаКоманда" + Выборка.Код, Элементы.Метки,
				Выборка.Наименование, "МеткаКоманда" + Выборка.Код);
			Элементы.Переместить(Элементы["МеткаКоманда" + Выборка.Код], Элементы.Метки, Элементы.МеткаЕще);
			НоваяКнопка.Фигура = ФигураКнопки.Овал;
			Цвет = Выборка.ЦветRGB;
			Если ЗначениеЗаполнено(Цвет) Тогда
				Фон = СтрРазделить(Цвет, ",");
				НоваяКнопка.ЦветФона = Новый Цвет(Фон[0], Фон[1], Фон[2]);
			КонецЕсли;

			Цвет = Выборка.ЦветТекстаRGB;
			Если ЗначениеЗаполнено(Цвет) Тогда
				Фон = СтрРазделить(Цвет, ",");
				НоваяКнопка.ЦветТекста = Новый Цвет(Фон[0], Фон[1], Фон[2]);
			КонецЕсли;

			СтрокаТаблицы = ТаблицаМеток.Добавить();
			СтрокаТаблицы.Команда = "МеткаКоманда" + Выборка.Код;
			СтрокаТаблицы.Код = Выборка.Код;

		КонецЦикла;
	Иначе
		ПослеВыбораМеткиНаСервере(Объект.Метка);
		Элементы.МеткаЕще.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьЗначениеМетке(Команда) Экспорт
	ПараметрыМетки = Новый Структура("Команда", Команда.Имя);
	СтрокаМетки = ТаблицаМеток.НайтиСтроки(ПараметрыМетки);
	ПрисвоитьЗначениеМеткеНаСервере(СтрокаМетки[0].Код);
КонецПроцедуры

&НаСервере
Функция ПолучениеВыборкиМеток()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(cbr_МеткиЗадач.Наименование) > 5
	|			ТОГДА ЛЕВ(cbr_МеткиЗадач.Наименование, 5)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(cbr_МеткиЗадач.Наименование)
	|	КОНЕЦ КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(cbr_МеткиЗадач.Код) КАК Код,
	|	cbr_МеткиЗадач.Цвет,
	|	cbr_Цвета.ЦветRGB,
	|	cbr_Цвета.ЦветТекстаRGB
	|ИЗ
	|	Справочник.cbr_МеткиЗадач КАК cbr_МеткиЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_МеткиЗадач.Цвет = cbr_Цвета.Ссылка
	|ГДЕ
	|	cbr_МеткиЗадач.ВидимостьНаФорме = ИСТИНА";

	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеМеткеНаСервере(КодМетки)
	Метка = Справочники.cbr_МеткиЗадач.НайтиПоКоду(КодМетки);
	Объект.Метка = Метка;
	ПослеВыбораМеткиНаСервере(Метка);
	Элементы.МеткаЕще.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВызовВыбораМеток()
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораМетки", ЭтотОбъект);
	ОткрытьФорму("Справочник.cbr_МеткиЗадач.ФормаВыбора", , , , , , ОписаниеОповещенияОЗакрытииФормыВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораМетки(Результат, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПослеВыбораМеткиНаСервере(Результат);
	Объект.Метка = Результат;
	Элементы.МеткаЕще.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораМеткиНаСервере(МеткаСсылка)
	Для Каждого СтрокаМетки Из ТаблицаМеток Цикл
		ИмяКоманды = СтрокаМетки.Команда;
		Элементы.Удалить(Элементы[ИмяКоманды]);
	КонецЦикла;
	ТаблицаМеток.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_Цвета.ЦветRGB,
	|	cbr_Цвета.ЦветТекстаRGB,
	|	cbr_МеткиЗадач.Наименование
	|ИЗ
	|	Справочник.cbr_МеткиЗадач КАК cbr_МеткиЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Цвета КАК cbr_Цвета
	|		ПО cbr_МеткиЗадач.Цвет = cbr_Цвета.Ссылка
	|ГДЕ
	|	cbr_МеткиЗадач.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", МеткаСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Элементы.ГруппаВыбораМетки.Видимость = Истина;
	Если Выборка.Следующий() Тогда
		Элементы.ВыборМетки.Заголовок = Выборка.Наименование;
		Если ЗначениеЗаполнено(Выборка.ЦветRGB) Тогда
			Фон = СтрРазделить(Выборка.ЦветRGB, ",");
			Элементы.ВыборМетки.ЦветФона = Новый Цвет(Фон[0], Фон[1], Фон[2]);
		Иначе
			Элементы.ВыборМетки.ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ЦветТекстаRGB) Тогда
			Фон = СтрРазделить(Выборка.ЦветТекстаRGB, ",");
			Элементы.ВыборМетки.ЦветТекстаЗаголовка = Новый Цвет(Фон[0], Фон[1], Фон[2]);
		Иначе
			Элементы.ВыборМетки.ЦветТекстаЗаголовка = Новый Цвет(0, 0, 0);
		КонецЕсли;
	КонецЕсли;

	Элемент = Элементы.Найти("ВыборМеткиКнопка");
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаМетокНаФорме(Команда) Экспорт
	ОчисткаМетокНаФормеНаСервере();
	Объект.Метка = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ОчисткаМетокНаФормеНаСервере()
	Элементы.ГруппаВыбораМетки.Видимость = Ложь;

	Элемент = Элементы.Найти("ВыборМеткиКнопка");
	Если Элемент = Неопределено Тогда
		cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "ВыборМеткиКнопка", Элементы.Метки, "Метки", "МеткаЕще", 2);
	Иначе
		Элемент.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеМетокНаФорме(Команда) Экспорт
	ВызовВыбораМеток();
КонецПроцедуры

#КонецОбласти

#Область СхемаПодчиненности
&НаСервере
Функция СписокПодчиненных()
	ПодчиненныеЗадачи = Новый Массив;

	ДеревоПодчиненных = РеквизитФормыВЗначение("ДеревоПодчиненныхЗадач");
	ПараметрыОтбораПоиска = Новый Структура("Ссылка", Объект.Ссылка);
	Строки = ДеревоПодчиненных.Строки.НайтиСтроки(ПараметрыОтбораПоиска, Истина);

	ЗаполнитьСписокПодчиненныхРекурсивно(Строки, ПодчиненныеЗадачи);

	Возврат ПодчиненныеЗадачи;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПодчиненныхРекурсивно(СтрокиДерева, Список)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Список.Добавить(СтрокаДерева.Ссылка);
		ЗаполнитьСписокПодчиненныхРекурсивно(СтрокаДерева.Строки, Список);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИерархиюЗадач()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ТаблицаПодчиненности.Видимость = Ложь;
		Элементы.ДекорацияОткрытьИерархию.Видимость = Ложь;
		Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Задача.Ссылка
		|ИЗ
		|	Документ.cbr_Задача КАК cbr_Задача
		|ГДЕ
		|	cbr_Задача.ГлавнаяЗадача = &Задача";

		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

		Если ВыборкаДетальныеЗаписи.Количество() > 0 Или ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
			Элементы.ТаблицаПодчиненности.Видимость = Истина;
			Элементы.ДекорацияОткрытьИерархию.Видимость = Истина;
			Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Истина;

			СформироватьДеревоДокументов();
			ЗаполнитьСхему();
		Иначе
			Элементы.ТаблицаПодчиненности.Видимость = Ложь;
			Элементы.ДекорацияОткрытьИерархию.Видимость = Ложь;
			Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоДокументов()
	ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Очистить();

	КореньЦепочки = ВерхнийУзелИерархии(Объект.Ссылка);

	НоваяСтрока = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Ссылка = КореньЦепочки;
	НоваяСтрока.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Наименование");
	НоваяСтрока.Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Проведен");
	НоваяСтрока.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "ПометкаУдаления");

	ВывестиПодчиненныеОбъекты(КореньЦепочки, НоваяСтрока);
КонецПроцедуры

&НаСервере
Функция ВерхнийУзелИерархии(Знач ОбъектНачала)
	Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	Пока ЗначениеЗаполнено(Вышестоящая) Цикл
		ОбъектНачала = Вышестоящая;
		Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	КонецЦикла;

	Возврат ОбъектНачала;
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеОбъекты(ОбъектНачала, ДеревоПодчиненных)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_Задача.Ссылка,
	|	cbr_Задача.Проведен,
	|	cbr_Задача.ПометкаУдаления,
	|	cbr_Задача.Наименование КАК Представление
	|ИЗ
	|	Документ.cbr_Задача КАК cbr_Задача
	|ГДЕ
	|	cbr_Задача.ГлавнаяЗадача = &ГлавнаяЗадача";

	Запрос.УстановитьПараметр("ГлавнаяЗадача", ОбъектНачала);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДеревоПодчиненных.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Проведен = Выборка.Проведен;
		НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
		НоваяСтрока.Представление = Выборка.Представление;

		ВывестиПодчиненныеОбъекты(Выборка.Ссылка, НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСхему()
	ТаблицаПодчиненности.Очистить();

	Макет = ПолучитьОбщийМакет("СтруктураПодчиненности");

	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныхЗадач.ПолучитьЭлементы(), Макет);
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева, Макет, УровниРекурсии = 1)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		// Вывод коннекторов
		Для Уровень = 1 По УровниРекурсии Цикл
			Если УровниРекурсии > Уровень Тогда
				Если ВыводитьВертикальныйКоннектор(УровниРекурсии - Уровень + 1, СтрокаДерева) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
				КонецЕсли;
			Иначе
				Если СтрокиДерева.Количество() > 1 И (СтрокиДерева.Индекс(СтрокаДерева) <> (СтрокиДерева.Количество()
					- 1)) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("КоннекторВерхПраво");
				КонецЕсли;
			КонецЕсли;
			
			Область.Параметры.Документ = СтрокаДерева.Ссылка;

			Если Уровень = 1 Тогда
				ТаблицаПодчиненности.Вывести(Область);
			Иначе
				ТаблицаПодчиненности.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;

		ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, Ложь, Истина);
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева, Макет, УровниРекурсии + 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыводитьВертикальныйКоннектор(УровеньВверх, СтрокаДерева)
	ТекущаяСтрока = СтрокаДерева;

	Для инд = 1 По УровеньВверх Цикл
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		Если инд = УровеньВверх Тогда
			ИскомыйРодитель = ТекущаяСтрока;
		ИначеЕсли инд = (УровеньВверх - 1) Тогда
			ИскомаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Если ИскомыйРодитель = Неопределено Тогда
		ПодчиненныеЭлементыРодителя = ДеревоПодчиненныхЗадач.ПолучитьЭлементы();
	Иначе
		ПодчиненныеЭлементыРодителя = ИскомыйРодитель.ПолучитьЭлементы();
	КонецЕсли;

	Возврат ПодчиненныеЭлементыРодителя.Индекс(ИскомаяСтрока) < (ПодчиненныеЭлементыРодителя.Количество() - 1);
КонецФункции

&НаСервере
Процедура ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, ЭтоТекущийОбъект = Ложь, ЭтоПодчиненный = Неопределено)

	МетаданныеОбъекта = СтрокаДерева.Ссылка.Метаданные();
	ЭтоДокумент       = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);

	ЕстьПодчиненныеСуммарно = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Количество() > 0;
	ЕстьПодчиненные = ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		И СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
	
	// Вывод картинки
	Если СтрокаДерева.Проведен Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторНиз");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ПометкаУдаления Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторНиз",
					"СправочникПВХПомеченНаУдалениеКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоНиз",
					"СправочникПВХПомеченНаУдалениеКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоВерх",
					"СправочникПВХПомеченНаУдалениеКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторНиз", "СправочникПВХКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоНиз", "СправочникПВХКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоВерх", "СправочникПВХКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЭтоТекущийОбъект Тогда
		ТаблицаПодчиненности.Вывести(ОбластьКартинка);
	Иначе
		ТаблицаПодчиненности.Присоединить(ОбластьКартинка);
	КонецЕсли;
	
	// Вывод объекта
	ОбластьОбъект = Макет.ПолучитьОбласть(?(ЭтоТекущийОбъект, "ТекущийОбъект", "Объект"));
	ОбластьОбъект.Параметры.ПредставлениеОбъекта = СтрокаДерева.Представление;
	ОбластьОбъект.Параметры.Объект = СтрокаДерева.Ссылка;

	Если СтрокаДерева.Ссылка = Объект.Ссылка Тогда
		ОбластьОбъект.Области[0].Шрифт = Новый Шрифт(ОбластьОбъект.Области[0].Шрифт, , , Истина);
	КонецЕсли;

	ТаблицаПодчиненности.Присоединить(ОбластьОбъект);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовСервер
&НаСервере
Процедура ПостановщикНачалоВыбораНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_ВидыЗадач.Партнер
	|ИЗ
	|	Справочник.cbr_ВидыЗадач КАК cbr_ВидыЗадач
	|ГДЕ
	|	cbr_ВидыЗадач.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗадачи);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Если ВыборкаДетальныеЗаписи.Партнер Тогда
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		Иначе
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПостановщикПриИзмененииНаСервере()
	Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.ГлавныйМенеджер = Объект.Постановщик;
	ИначеЕсли ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Партнеры") Тогда
		ГлавныйМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Постановщик, "ОсновнойМенеджер");
		КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Постановщик, "CRM_ОсновноеКонтактноеЛицо");
		Если ЗначениеЗаполнено(ГлавныйМенеджер) Тогда
			Объект.ГлавныйМенеджер = ГлавныйМенеджер;
		Иначе
			Объект.ГлавныйМенеджер = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Объект.КонтактноеЛицо = КонтактноеЛицо;
		Иначе
			Объект.КонтактноеЛицо = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ГлавныйМенеджер = Неопределено;
		Объект.КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	cbr_ОбработчикиФормыЗадачиСервер.ДобавитьНаблюдателяОтМенеджера(ЭтотОбъект);
КонецПроцедуры

#Область Календарь

&НаСервере
Процедура ИнициализироватьКалендарь()
	НастройкиОтображения = cbr_КалендарьСервер.ПолучитьНастройкиОтображения();
	ПериодОтображения =  НастройкиОтображения.ПериодОтображения;
	ОбновитьОтображениеКалендарь();

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКалендарь()

	ОбновитьНастройкиОтображения();
	cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтображения()
	НастройкиОтображения.ОтображаемаяДата = ТекущаяДатаСеанса();
	НастройкиОтображения.ЗадачаФильтр = Объект.Ссылка;
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	НастройкиОтображения.ОтображатьДействующиеЗадачи = Ложь;

	УстановитьТекущуюСтраницу(Элементы, ПериодОтображения);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	ОтображаемаяДата =  ТекущаяДата();

	ОбновитьНастройкиОтображения();
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеКалендаря(ИзмененнаяНастройка = Неопределено)

	cbr_КалендарьКлиент.ОбновитьОтображениеПланировщика(
			Планировщик, НастройкиОтображения, ИзмененнаяНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКлиент(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройки = Ложь)

	ДатаСегодня = НачалоДня(ТекущаяДата());
	cbr_КалендарьКлиент.ОбновитьЗаписиКалендаряВПланировщике(
	Планировщик, НастройкиОтображения, Параметр);
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСервер(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройки = Ложь)

	НастройкиОтображения = cbr_КалендарьСервер.ПолучитьНастройкиОтображения();
	НастройкиОтображения.ФизЛица.Очистить();
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	НастройкиОтображения.ОтображатьДействующиеЗадачи = Ложь;
	УстановитьТекущуюСтраницу(Элементы, ПериодОтображения);
	cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);

	ИспользоватьБыстроеРедактирование = cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
					"ИспользоватьБыстроеРедактирование");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Элементы, ПериодОтображения)
	Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланировщик;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура") И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработкаАвтообновления", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ВидимостьЭлементов
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	ВидимостьСвязанныхСРолями();
	ВидимостьКнопокСообщений();
	ВидимостьСброситьГлавную();
	ОбновитьВидимостьОсновногоМенеджера();
	ВидимостьКнопкиВопроса();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОсновногоМенеджера()
	Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Партнеры") Тогда
		Элементы.ГлавныйМенеджер.Видимость = Истина;
		Элементы.КонтактноеЛицо.Видимость = Истина;
	Иначе
		Элементы.ГлавныйМенеджер.Видимость = Ложь;
		Элементы.КонтактноеЛицо.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьСброситьГлавную()
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		Элементы.ГлавнаяЗадача.Видимость = Истина;
		Элементы.СброситьГлавнуюЗадачу.Видимость = Истина;
	Иначе
		Элементы.ГлавнаяЗадача.Видимость = Ложь;
		Элементы.СброситьГлавнуюЗадачу.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьСвязанныхСРолями()
	КонтрольВремениВидаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗадачи, "КонтрольВремени");

	Если ЗначениеЗаполнено(КонтрольВремениВидаЗадачи) Тогда
		Если КонтрольВремениВидаЗадачи Тогда
			Объект.КонтрольВремени = КонтрольВремениВидаЗадачи;
			Объект.УчетВремени = КонтрольВремениВидаЗадачи;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА cbr_Задача.ГлавныйМенеджер = &ТекущийПользователь
		|		ИЛИ cbr_Задача.Постановщик = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМенеджер,
		|	cbr_Задача.Ссылка КАК Задача,
		|	cbr_Задача.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	cbr_Задача.КонтрольВремени КАК КонтрольВремени,
		|	cbr_Задача.УчетВремени КАК УчетВремени,
		|	ВЫБОР
		|		КОГДА cbr_Задача.Автор = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоАвтор
		|ПОМЕСТИТЬ вт_ДанныеДокумента
		|ИЗ
		|	Документ.cbr_Задача КАК cbr_Задача
		|ГДЕ
		|	cbr_Задача.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ЭтоИсполнитель,
		|	ЕСТЬNULL(cbr_ИсполнителиЗадачСрезПоследних.ЗадачаВзята, ЛОЖЬ) КАК ЗадачаВзята,
		|	cbr_ИсполнителиЗадачСрезПоследних.Задача КАК Задача,
		|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ вт_Исполнитель
		|ИЗ
		|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Ссылка) КАК cbr_ИсполнителиЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_СтатусыЗадачСрезПоследних.Задача КАК Задача,
		|	cbr_СтатусыЗадачСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ вт_Статус
		|ИЗ
		|	РегистрСведений.cbr_СтатусыЗадач.СрезПоследних(, Задача = &Ссылка) КАК cbr_СтатусыЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Статус.Задача КАК Задача,
		|	ЕСТЬNULL(cbr_СтатусыЗадач.Закрыт, ЛОЖЬ) КАК Закрыта,
		|	ЕСТЬNULL(cbr_СтатусыЗадач.Новый, ЛОЖЬ) КАК Новая
		|ПОМЕСТИТЬ вт_ЗначенияСтатусов
		|ИЗ
		|	вт_Статус КАК вт_Статус
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_СтатусыЗадач КАК cbr_СтатусыЗадач
		|		ПО вт_Статус.Статус = cbr_СтатусыЗадач.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Исполнитель.Задача КАК Задача,
		|	вт_Исполнитель.ЗадачаВзята КАК ЗадачаВзята,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_РолиПользователи.Пользователь = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ДоступПоРоли,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ГруппыДоступаКЗадачамПользователи.Пользователь = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ДоступЧленаГруппы,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ГруппыДоступаКЗадачам.Руководитель = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ДоступРуководителя,
		|	вт_Исполнитель.Исполнитель КАК Исполнитель,
		|	вт_Исполнитель.ЭтоИсполнитель КАК ЭтоИсполнитель
		|ПОМЕСТИТЬ вт_ЗначенияИсполнителя
		|ИЗ
		|	вт_Исполнитель КАК вт_Исполнитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_ГруппыДоступаКЗадачам.Пользователи КАК cbr_ГруппыДоступаКЗадачамПользователи
		|		ПО вт_Исполнитель.Исполнитель = cbr_ГруппыДоступаКЗадачамПользователи.Ссылка
		|		И cbr_ГруппыДоступаКЗадачамПользователи.Пользователь = &ТекущийПользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Роли.Пользователи КАК cbr_РолиПользователи
		|		ПО вт_Исполнитель.Исполнитель = cbr_РолиПользователи.Ссылка
		|		И cbr_РолиПользователи.Пользователь = &ТекущийПользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_ГруппыДоступаКЗадачам КАК cbr_ГруппыДоступаКЗадачам
		|		ПО вт_Исполнитель.Исполнитель = cbr_ГруппыДоступаКЗадачам.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_ОценкаЧасовСрезПоследних.Задача КАК Задача,
		|	ЕСТЬNULL(cbr_ОценкаЧасовСрезПоследних.Согласовано, ЛОЖЬ) КАК Согласовано,
		|	ЕСТЬNULL(cbr_ОценкаЧасовСрезПоследних.Отказ, ЛОЖЬ) КАК Отказ,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ОценкаЧасовСрезПоследних.Согласующий = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ЭтоСогласующий,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ОценкаЧасовСрезПоследних.Согласовант = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ) КАК ЭтоСогласовант,
		|	ВЫБОР
		|		КОГДА cbr_ОценкаЧасовСрезПоследних.Задача ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаписьСогласование
		|ПОМЕСТИТЬ вт_Согласование
		|ИЗ
		|	РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &Ссылка) КАК cbr_ОценкаЧасовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_ДедлайнЗадачСрезПоследних.Задача КАК Задача,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА cbr_ДедлайнЗадачСрезПоследних.Задача ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ, ЛОЖЬ) КАК ЗаписьДедлайн,
		|	ЕСТЬNULL(cbr_ДедлайнЗадачСрезПоследних.Отказ, ЛОЖЬ) КАК ОтказДедлайн,
		|	ЕСТЬNULL(cbr_ДедлайнЗадачСрезПоследних.Согласовано, ЛОЖЬ) КАК СогласованоДедлайн
		|ПОМЕСТИТЬ вт_Дедлайн
		|ИЗ
		|	РегистрСведений.cbr_ДедлайнЗадач.СрезПоследних(, Задача = &Ссылка) КАК cbr_ДедлайнЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Ссылка КАК Задача,
		|	cbr_СтатусыЗадачСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ вт_СтатусГлавной
		|ИЗ
		|	РегистрСведений.cbr_СтатусыЗадач.СрезПоследних(, Задача В
		|		(ВЫБРАТЬ
		|			вт_ДанныеДокумента.ГлавнаяЗадача
		|		ИЗ
		|			вт_ДанныеДокумента КАК вт_ДанныеДокумента)) КАК cbr_СтатусыЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(cbr_СтатусыЗадач.Закрыт, ЛОЖЬ) КАК ГлавнаяЗакрыта,
		|	вт_СтатусГлавной.Задача КАК Задача
		|ПОМЕСТИТЬ вт_ЗначенияСтатусовГлавной
		|ИЗ
		|	вт_СтатусГлавной КАК вт_СтатусГлавной
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_СтатусыЗадач КАК cbr_СтатусыЗадач
		|		ПО вт_СтатусГлавной.Статус = cbr_СтатусыЗадач.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_ЗначенияИсполнителя.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполнитель,
		|	ЕСТЬNULL(вт_ЗначенияИсполнителя.ДоступЧленаГруппы
		|	ИЛИ вт_ЗначенияИсполнителя.ДоступПоРоли, ЛОЖЬ) КАК НазначитьИсполнителя,
		|	ЕСТЬNULL(вт_ЗначенияИсполнителя.ДоступРуководителя, ЛОЖЬ) КАК НазначитьИсполнителяИзГруппы,
		|	ЕСТЬNULL(вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И НЕ вт_ЗначенияИсполнителя.ЗадачаВзята
		|	И НЕ вт_ДанныеДокумента.ЭтоМенеджер, ЛОЖЬ) КАК ВзятьЗадачу,
		|	ЕСТЬNULL(НЕ ЕСТЬNULL(вт_ЗначенияСтатусов.Закрыта, ЛОЖЬ)
		|	И (вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И НЕ вт_ЗначенияИсполнителя.ЗадачаВзята
		|	И НЕ вт_ДанныеДокумента.ЭтоМенеджер
		|	ИЛИ вт_ЗначенияИсполнителя.ДоступРуководителя), ЛОЖЬ) КАК ОтклонитьЗадачу,
		|	ЕСТЬNULL((вт_ДанныеДокумента.ЭтоМенеджер
		|	ИЛИ вт_ДанныеДокумента.ЭтоАвтор)
		|	И ЕСТЬNULL(вт_ЗначенияСтатусов.Новая, ЛОЖЬ), ЛОЖЬ) КАК ОтправитьНаИсполнение,
		|	ЕСТЬNULL(вт_ДанныеДокумента.УчетВремени
		|	И вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята
		|	И НЕ вт_ЗначенияСтатусов.Закрыта
		|	И (НЕ вт_ДанныеДокумента.КонтрольВремени
		|	ИЛИ вт_ДанныеДокумента.КонтрольВремени
		|	И вт_Согласование.ЭтоСогласовант
		|	И вт_Согласование.Согласовано), ЛОЖЬ) КАК ВвестиТрудозатраты,
		|	ЕСТЬNULL(НЕ вт_ДанныеДокумента.Задача ЕСТЬ NULL
		|	И вт_ДанныеДокумента.КонтрольВремени
		|	И НЕ ЕСТЬNULL(вт_ЗначенияСтатусов.Закрыта, ЛОЖЬ)
		|	И (НЕ вт_Согласование.Задача ЕСТЬ NULL
		|	И (вт_ДанныеДокумента.ЭтоМенеджер
		|	ИЛИ вт_Согласование.ЭтоСогласующий)
		|	И НЕ ЕСТЬNULL(вт_Согласование.Согласовано, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(вт_Согласование.Отказ, ЛОЖЬ)
		|	ИЛИ (вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята
		|	ИЛИ вт_Согласование.ЭтоСогласовант)
		|	И (вт_Согласование.Задача ЕСТЬ NULL
		|	ИЛИ ЕСТЬNULL(вт_Согласование.Отказ, ЛОЖЬ))
		|	ИЛИ вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята
		|	И НЕ вт_Согласование.ЭтоСогласовант
		|	И вт_Согласование.Согласовано), ЛОЖЬ) КАК СогласоватьОценку,
		|	ЕСТЬNULL(НЕ вт_ДанныеДокумента.Задача ЕСТЬ NULL
		|	И НЕ ЕСТЬNULL(вт_ЗначенияСтатусов.Закрыта, ЛОЖЬ)
		|	И ((вт_ДанныеДокумента.ЭтоМенеджер
		|	ИЛИ вт_Согласование.ЭтоСогласующий)
		|	И НЕ вт_Дедлайн.Задача ЕСТЬ NULL
		|	И НЕ ЕСТЬNULL(вт_Дедлайн.ОтказДедлайн, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(вт_Дедлайн.СогласованоДедлайн, ЛОЖЬ)
		|	ИЛИ (вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И вт_Согласование.ЭтоСогласовант
		|	ИЛИ вт_Согласование.ЭтоСогласовант)
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята
		|	И НЕ (НЕ вт_Дедлайн.Задача ЕСТЬ NULL
		|	И НЕ ЕСТЬNULL(вт_Дедлайн.ОтказДедлайн, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(вт_Дедлайн.СогласованоДедлайн, ЛОЖЬ))
		|	И ЕСТЬNULL(вт_Согласование.Согласовано, ЛОЖЬ)), ЛОЖЬ) КАК СогласоватьДедлайн,
		|	ЕСТЬNULL(вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И НЕ ЕСТЬNULL(вт_ЗначенияСтатусов.Закрыта, ЛОЖЬ)
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята, ЛОЖЬ) КАК ЗакрытьЗадачу,
		|	ЕСТЬNULL(вт_ЗначенияСтатусовГлавной.ГлавнаяЗакрыта
		|	И вт_ЗначенияИсполнителя.ЭтоИсполнитель
		|	И вт_ЗначенияИсполнителя.ЗадачаВзята, ЛОЖЬ) КАК ВернутьВышестоящуюВРаботу,
		|	вт_ЗначенияИсполнителя.ЭтоИсполнитель КАК СогласованиеИсполнителя
		|ИЗ
		|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ЗначенияСтатусов КАК вт_ЗначенияСтатусов
		|		ПО вт_ДанныеДокумента.Задача = вт_ЗначенияСтатусов.Задача
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ЗначенияИсполнителя КАК вт_ЗначенияИсполнителя
		|		ПО вт_ДанныеДокумента.Задача = вт_ЗначенияИсполнителя.Задача
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_Согласование КАК вт_Согласование
		|		ПО вт_ДанныеДокумента.Задача = вт_Согласование.Задача
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_Дедлайн КАК вт_Дедлайн
		|		ПО вт_ДанныеДокумента.Задача = вт_Дедлайн.Задача
		|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ЗначенияСтатусовГлавной КАК вт_ЗначенияСтатусовГлавной
		|		ПО вт_ДанныеДокумента.Задача = вт_ЗначенияСтатусовГлавной.Задача";
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Исполнитель = Выборка.Исполнитель;
		КонецЕсли;
		СогласованиеИсполнителя = Выборка.СогласованиеИсполнителя;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправитьНаИсполнение",
			"Видимость", Выборка.ОтправитьНаИсполнение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
			Выборка.ВвестиТрудозатраты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость",
			Выборка.СогласоватьОценку);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьДедлайн", "Видимость",
			Выборка.СогласоватьДедлайн);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителяИзГруппы",
			"Видимость", Выборка.НазначитьИсполнителяИзГруппы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
			Выборка.ОтклонитьЗадачу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВзятьЗадачу", "Видимость",
			Выборка.ВзятьЗадачу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВзятьЗадачу", "Видимость",
			Выборка.НазначитьИсполнителя);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВернутьВышестоящуюВРаботу",
			"Видимость", Выборка.ВернутьВышестоящуюВРаботу);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость",
			Выборка.ЗакрытьЗадачу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКнопок(Результат, ДополнительныеПараметры) Экспорт
	ВидимостьСвязанныхСРолями();
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопкиВопроса()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|		КОГДА cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Вопрос)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ) КАК КоличествоВопросов,
	|	cbr_ВопросыПоЗадачам.Задача
	|ИЗ
	|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
	|ГДЕ
	|	cbr_ВопросыПоЗадачам.Задача = &Задача
	|СГРУППИРОВАТЬ ПО
	|	cbr_ВопросыПоЗадачам.Задача";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() И Выборка.КоличествоВопросов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость",
			Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСообщений()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Вопрос)
	|		И cbr_ВопросыПоЗадачам.Адресат = &Адресат
	|			ТОГДА 1
	|	КОНЕЦ), 0) КАК КоличествоВопросов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Ответ)
	|		И cbr_ВопросыПоЗадачам.Отправитель = &Отправитель
	|			ТОГДА -1
	|	КОНЕЦ), 0) КАК КоличествоОтветов,
	|	cbr_ВопросыПоЗадачам.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
	|ГДЕ
	|	cbr_ВопросыПоЗадачам.Задача = &Задача
	|СГРУППИРОВАТЬ ПО
	|	cbr_ВопросыПоЗадачам.Задача";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Адресат", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Отправитель", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() И Выборка.КоличествоВопросов + Выборка.КоличествоОтветов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСменыСостоянияЗадачи
&НаКлиенте
Процедура ПослеСогласованияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос() Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры
#КонецОбласти

&НаКлиенте 
Процедура ПослеВыбораИсполнителя(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Исполнитель = Результат;
		ДобавитьНаблюдателяОтИсполнителя();
		Записать();
		
		ОбновитьВидимостьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсполнителяИзВидаЗадачи()
	ИсполнительВидаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗадачи, "Исполнитель");
	Если ЗначениеЗаполнено(ИсполнительВидаЗадачи) И Не ЗначениеЗаполнено(Исполнитель) Тогда
		Исполнитель = ИсполнительВидаЗадачи;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНаблюдателяОтИсполнителя()
	cbr_ОбработчикиФормыЗадачиСервер.ДобавитьНаблюдателяОтИсполнителя(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПользователиГруппыДоступа()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_ГруппыДоступаКЗадачамПользователи.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.cbr_ГруппыДоступаКЗадачам.Пользователи КАК cbr_ГруппыДоступаКЗадачамПользователи
		|ГДЕ
		|	cbr_ГруппыДоступаКЗадачамПользователи.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	ПользователиГруппы = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ПользователиГруппы.Добавить(Выборка.Пользователь);
	КонецЦикла;
	
	Возврат ПользователиГруппы;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьЭлементов();
	ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаСервере
Процедура ВзятьЗадачуНаСервере()
	Исполнитель = Пользователи.АвторизованныйПользователь();
	
	cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель, Истина);
	
	ДобавитьНаблюдателяОтИсполнителя();

	Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.КнопкаВзятьЗадачу");
	cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСтрокиФайлов()
	ВыделенныеСтроки = Новый Массив;

	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаПрисоединенныхФайлов.ВыделенныеСтроки Цикл
		СтрокаСписка = ТаблицаПрисоединенныхФайлов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ВыделенныеСтроки.Добавить(СтрокаСписка.Ссылка);
	КонецЦикла;

	Возврат ВыделенныеСтроки;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуСвязанныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	Элементы.ТаблицаПрисоединенныхФайлов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПрисоединенныхКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	ЗаполнитьТаблицуПрисоединенных(Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрисоединенных(Результат = Неопределено, ДополнительныеПараметры = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
				   |	cbr_ЗадачаПрисоединенныеФайлы.Ссылка, 
				   |	cbr_ЗадачаПрисоединенныеФайлы.ПометкаУдаления, 
				   |	cbr_ЗадачаПрисоединенныеФайлы.Наименование, 
				   |	cbr_ЗадачаПрисоединенныеФайлы.ВладелецФайла, 
				   |	cbr_ЗадачаПрисоединенныеФайлы.ИндексКартинки
				   |ИЗ 
				   |      Справочник.cbr_ЗадачаПрисоединенныеФайлы
				   |КАК 
				   |      cbr_ЗадачаПрисоединенныеФайлы
				   |ГДЕ
				   |	   cbr_ЗадачаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
				   |И
				   |	   НЕ cbr_ЗадачаПрисоединенныеФайлы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	МакКоличествоЗаписей = 6;
	Если Выборка.Количество() > МакКоличествоЗаписей Тогда
		Элементы.ТаблицаПрисоединенныхФайлов.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.Авто;
		Элементы.ТаблицаПрисоединенныхФайлов.АвтоМаксимальнаяВысота = Ложь;
		Элементы.ТаблицаПрисоединенныхФайлов.МаксимальнаяВысота = 7;
	Иначе
		Элементы.ТаблицаПрисоединенныхФайлов.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
		Элементы.ТаблицаПрисоединенныхФайлов.АвтоМаксимальнаяВысота = Истина;
		Элементы.ТаблицаПрисоединенныхФайлов.МаксимальнаяВысота = 0;
	КонецЕсли;

	ТаблицаПрисоединенныхФайлов.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПрисоединенныхФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаданногоВопроса(Резкльтат, ДополнительныеПараметры) Экспорт
	ВидимостьКнопкиВопроса();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораПриоритета()
    Элементы.Приоритет.СписокВыбора.Очистить();
    Элементы.Приоритет.СписокВыбора.Добавить(Перечисления.cbr_ПриоритетыЗадач.Высокий, "Высокий",,БиблиотекаКартинок.cbr_ПриоритетВысокий);
    Элементы.Приоритет.СписокВыбора.Добавить(Перечисления.cbr_ПриоритетыЗадач.Обычный, "Обычный",,БиблиотекаКартинок.cbr_ПриоритетОбычный);
    Элементы.Приоритет.СписокВыбора.Добавить(Перечисления.cbr_ПриоритетыЗадач.Низкий,  "Низкий" ,,БиблиотекаКартинок.cbr_ПриоритетНизкий);
КонецПроцедуры


&НаСервере
Процедура ГлавныйМенеджерПриИзмененииНаСервере()
	cbr_ОбработчикиФормыЗадачиСервер.ДобавитьНаблюдателяОтМенеджера(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПереключениеВидаФормы(Упрощенный = Истина)
	Если Упрощенный Тогда
		Элементы.ФормаОткрытьПолнуюФорму.Видимость = Истина;
		
		Элементы.Переместить(Элементы.Наименование, Элементы.ГруппаНаименованиеМетки);
		Элементы.Переместить(Элементы.Метки, Элементы.ГруппаНаименованиеМетки);
		Элементы.Переместить(Элементы.Постановщик, Элементы.ГруппаПостановщикКонтактноеЛицо);
		Элементы.Переместить(Элементы.КонтактноеЛицо, Элементы.ГруппаПостановщикКонтактноеЛицо);
		Элементы.Переместить(Элементы.ГруппаФорматДокумента, Элементы.ГруппаУпрощенныйВид);
		
		Элементы.Страницы.Видимость = Ложь;
		Элементы.Группа1.Видимость = Ложь;
		Элементы.ФормаЗадачаВКалендарь.Видимость = Ложь;
		Элементы.ФормаОткрытьКомментарии.Видимость = Ложь;
		Элементы.УведомитьОЗадаче.Видимость = Ложь;
	Иначе
		Элементы.ФормаОткрытьПолнуюФорму.Видимость = Ложь;
		
		Элементы.Переместить(Элементы.Наименование, Элементы.ГруппаНаименованиеИКнопкаСвязатьЗадачу, Элементы.ГруппаСвязанныеВнешняя);
		Элементы.Переместить(Элементы.Метки, Элементы.ГруппаВидЗадачиИМетка);
		Элементы.Переместить(Элементы.Постановщик, Элементы.ГруппаОсновныхПараметров, Элементы.ГлавныйМенеджер);
		Элементы.Переместить(Элементы.КонтактноеЛицо, Элементы.ГруппаОсновныхПараметров, Элементы.Приоритет);
		Элементы.Переместить(Элементы.ГруппаФорматДокумента, Элементы.ГруппаОписания, Элементы.ГруппаЧекЛист);
		
		Элементы.Страницы.Видимость = Истина;
		Элементы.Группа1.Видимость = Истина;
		Элементы.ФормаЗадачаВКалендарь.Видимость = Истина;
		Элементы.ФормаОткрытьКомментарии.Видимость = Истина;
		Элементы.УведомитьОЗадаче.Видимость = Истина;
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВозвратаВышестоящей(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
        ПослеВозвратаВышестоящейНаСервере(Результат);
	КонецЕсли;
	
	ВидимостьСвязанныхСРолями();
КонецПроцедуры

&НаСервере
Процедура ПослеВозвратаВышестоящейНаСервере(Результат)
	Если Не Результат = Неопределено Тогда
        Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.КнопкаВернутьВышестоящуюВРаботу");
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель
			|ИЗ
			|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &ГлавнаяЗадача) КАК cbr_ИсполнителиЗадачСрезПоследних";
		
		Запрос.УстановитьПараметр("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адресат = Выборка.Исполнитель;
		
			cbr_ДвиженияПоРегистрам.ДвижениеВопросыПоЗадачам(Объект.ГлавнаяЗадача, Адресат, Результат, Ложь);
			cbr_ОбработкаТриггеровВызовСервера.ВызовТриггера(Подписка, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьСвязанныхСРолями();
КонецПроцедуры

&НаСервере
Процедура КонтрольВремениПриИзмененииНаСервере()
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Объект.КонтрольВремени;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВРаботуПослеЗакрытияВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтправитьНаИсполнение(Команды.ОтправитьНаИсполнение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗначенияПараметровФормы()
	ПараметрНаименование = Неопределено;
	Если Параметры.Свойство("НаименованиеЗадачи", ПараметрНаименование) Тогда
		Объект.Наименование = ПараметрНаименование;
	КонецЕсли;

	ПараметрГлавная = Неопределено;
	Если Параметры.Свойство("ГлавнаяЗадача", ПараметрГлавная) Тогда
		Объект.ГлавнаяЗадача = ПараметрГлавная;
	КонецЕсли;

	ПараметрИсточникПараметров = Неопределено;
	Если Параметры.Свойство("ИсточникПараметров", ПараметрИсточникПараметров) Тогда
		cbr_ОбработчикиФормыЗадачиСервер.ЗаполнитьНаследуемыеПараметры(ЭтотОбъект, ПараметрИсточникПараметров);
	КонецЕсли;

	ПараметрОписаниеЗадачи = Неопределено;
	Если Параметры.Свойство("ОписаниеЗадачи", ПараметрОписаниеЗадачи) Тогда
		ОписаниеЗадачи = ПолучитьИзВременногоХранилища(ПараметрОписаниеЗадачи);
		ОписаниеЗадачиДокумент = ОписаниеЗадачи;
	КонецЕсли;

	ПараметрМетка = Неопределено;
	Если Параметры.Свойство("Метка", ПараметрМетка) Тогда
		Объект.Метка = ПараметрМетка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЗначениеЗаполнено(ПараметрИсточникПараметров) Тогда
			cbr_ОбработчикиФормыЗадачиСервер.ЗаполнитьПользовательскиеНастройки(ЭтотОбъект);
		КонецЕсли;
		
		КонтрольВремениПриИзмененииНаСервере();
	КонецЕсли;
	
	// Заполнение из календаря
	КИсполнитель = Неопределено;
	Если Параметры.Свойство("Исполнитель", КИсполнитель) Тогда
		Исполнитель = КИсполнитель;
	КонецЕсли;
	
	Если Параметры.Свойство("УпрощеннаяФорма") Тогда
		ПереключениеВидаФормы(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбновитьТекущиеЭтапыЗадачи()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	Этапы = cbr_ОбработкаПроверкиВыполненияЭтаповКонтроляВызовСервера.ПолучитьТекущиеЭтапыЗадачи(Объект.Ссылка);
	Элементы.ДекорацияТекущиеЭтапы.Заголовок = "";
	Для Каждого Этап Из Этапы Цикл
		Элементы.ДекорацияТекущиеЭтапы.Заголовок = Элементы.ДекорацияТекущиеЭтапы.Заголовок + Этап + Символы.ПС;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти