#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОписаниеЗадачи = Новый ХранилищеЗначения(ОписаниеЗадачиДокумент);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтобразитьИерархиюЗадач();
	
	ЗаполнитьТаблицуПрисоединенных();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеЗадачиДокумент = ДокОбъект.ОписаниеЗадачи.Получить();
	
	ПараметрНаименование = Неопределено;
	Если Параметры.Свойство("НаименованиеЗадачи", ПараметрНаименование) Тогда
		Объект.Наименование = ПараметрНаименование;
	КонецЕсли;
	
	ПараметрГлавная = Неопределено;
	Если Параметры.Свойство("ГлавнаяЗадача", ПараметрГлавная) Тогда
		Объект.ГлавнаяЗадача = ПараметрГлавная;
	КонецЕсли;  		
	
	ПараметрИсточникПараметров = Неопределено;
	Если Параметры.Свойство("ИсточникПараметров", ПараметрИсточникПараметров) Тогда
		cbr_ОбработчикиФормыЗадачиСервер.ЗаполнитьНаследуемыеПараметры(ЭтотОбъект, ПараметрИсточникПараметров);
	КонецЕсли;
	
	ПараметрОписаниеЗадачи = Неопределено;
	Если Параметры.Свойство("ОписаниеЗадачи", ПараметрОписаниеЗадачи) Тогда
		ОписаниеЗадачи = ПолучитьИзВременногоХранилища(ПараметрОписаниеЗадачи);
		ОписаниеЗадачиДокумент = ОписаниеЗадачи;
	КонецЕсли;
	
	ПараметрМетка = Неопределено;
	Если Параметры.Свойство("Метка", ПараметрМетка) Тогда
		Объект.Метка = ПараметрМетка;
	КонецЕсли;

	Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.ПриСозданииНаСервереФормыЗадачи");
	cbr_ОбработкаТриггеров.ВызовТриггера(Подписка, Объект.Ссылка);

	Если Не ДокОбъект.ЧекЛист.Количество() Тогда
		Элементы.ГруппаЧекЛист.Скрыть();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ПараметрИсточникПараметров = Документы.cbr_Задача.ПустаяСсылка() Тогда
		cbr_ОбработчикиФормыЗадачиСервер.ЗаполнитьПользовательскиеНастройки(ЭтотОбъект);
	КонецЕсли;  
	
	//КДатаНачала = Неопределено;
	//Если Параметры.Свойство("ДатаНачала", КДатаНачала) Тогда
	//	Дата = Тек;
	//КонецЕсли; 
	
	ОбновитьВидимостьОсновногоМенеджера();
	
	Элементы.ГруппаВыбораМетки.Видимость = Ложь;
	
	Если (НЕ cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() И НЕ ЗначениеЗаполнено(Объект.Ссылка)) ИЛИ НЕ ЗначениеЗаполнено(Объект.Метка) Тогда

		Выборка = ПолучениеВыборкиМеток();
		Пока Выборка.Следующий() Цикл
			cbr_ЭлементыФормы.СоздатьКоманду(ЭтотОбъект,
											   "МеткаКоманда" + Выборка.Код,
											   Выборка.Наименование,
											   "ПрисвоитьЗначениеМетке");

			НоваяКнопка = cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект,
														"МеткаКоманда" + Выборка.Код,
														Элементы.Метки,
														Выборка.Наименование,
														"МеткаКоманда" + Выборка.Код);
			Элементы.Переместить(Элементы["МеткаКоманда" + Выборка.Код], Элементы.Метки, Элементы.Ещё);
			НоваяКнопка.Фигура = ФигураКнопки.Овал;
			Цвет = Выборка.ЦветRGB;
			Если ЗначениеЗаполнено(Цвет) Тогда
				Фон = СтрРазделить(Цвет, ",");
			//@skip-check new-color
				НоваяКнопка.ЦветФона = Новый Цвет(Фон[0], Фон[1], Фон[2]);
			КонецЕсли;
			
			Цвет = Выборка.ЦветТекстаRGB;
			Если ЗначениеЗаполнено(Цвет) Тогда
				Фон = СтрРазделить(Цвет, ",");
			//@skip-check new-color
				НоваяКнопка.ЦветТекста = Новый Цвет(Фон[0], Фон[1], Фон[2]);
			КонецЕсли;

			СтрокаТаблицы = ТаблицаМеток.Добавить();
			СтрокаТаблицы.Команда = "МеткаКоманда" + Выборка.Код;
			СтрокаТаблицы.Код = Выборка.Код;

		КонецЦикла;
	Иначе
		ПослеВыбораМеткиНаСервере(Объект.Метка);
		Элементы.Ещё.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение из календаря
	КИсполнитель = Неопределено;
	Если Параметры.Свойство("Исполнитель", КИсполнитель) Тогда
		Исполнитель = КИсполнитель;
	КонецЕсли;
	ИнициализироватьКалендарь();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	Объект.Постановщик = Неопределено;
	Объект.ГлавныйМенеджер = Неопределено;
	ВидимостьКнопокСогласования();
	ОбновитьВидимостьОсновногоМенеджера();
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Введите вид Задачи");
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ПостановщикНачалоВыбораНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикПриИзменении(Элемент)
	ПостановщикПриИзмененииНаСервере();
	ОбновитьВидимостьОсновногоМенеджера();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВремениПриИзменении(Элемент)
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Объект.КонтрольВремени;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрисоединенныхФайлов

&НаКлиенте
Процедура ТаблицаПрисоединенныхФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаПрисоединенныхФайлов.ТекущиеДанные;
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыбратьСвязанныеЗадачи(Команда)	
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаПодбораСвязанных", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВопросы(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	Оповещение = Новый ОписаниеОповещения("ПослеЗаданногоВопроса", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.cbr_ФормаСпискаВопросовПоЗадаче", ПараметрыФормы, , , , ,Оповещение
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура ОтветитьНаВопрос(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.cbr_ФормаОтветаНаВопросПоЗадаче", ПараметрыФормы, ЭтотОбъект , , , ,
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НазначитьИсполнителяНаСервере();
		ОбновитьВидимостьЭлементов();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлавнуюЗадачу(Команда)
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораГлавнойЗадачи", ЭтотОбъект);
	
	СписокЗапрещенных = СписокПодчиненных();
	СписокЗапрещенных.Добавить(Объект.ГлавнаяЗадача);
	ПараметрыФормы = Новый Структура("СписокЗапрещенных", СписокЗапрещенных);
	
	ОткрытьФорму("Документ.cbr_Задача.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытииФормыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗадачу(Команда)
	ЗакрытьЗадачуНаСервере();
	ОбновитьВидимостьЭлементов();
	ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОценку(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаСозданияСогласованияОценкиЗадачи", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтветаСогласованияОценки", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиТрудозатраты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.cbr_ТрудозатратыПоЗадаче.ФормаОбъекта", ПараметрыФормы, , , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗадачу(Команда) Экспорт
	ПараметрыФормы = Новый Структура("Постановщик,ГлавныйМенеджер,Основание,Автор", Объект.Постановщик, Объект.ГлавныйМенеджер, Объект.Ссылка, Объект.Автор);
	Оповещение = Новый ОписаниеОповещения("ОбновитьВидимостьКнопокСвязанныхСИсполнителемНаКлиенте", ЭтотОбъект);
	ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтклоненияЗадачи", ПараметрыФормы,,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГлавнуюЗадачу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите задачу");
		
		Возврат;
	КонецЕсли;
	
	Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
		ПараметрыФормы = Новый Структура("ИсточникПараметров,Исполнитель", Объект.Ссылка, Объект.Постановщик);
		//@skip-check use-non-recommended-method
		ФормаДок = ПолучитьФорму("Документ.cbr_Задача.Форма.ФормаДокументаУпрощенная", ПараметрыФормы);
	Иначе
		ПараметрыФормы = Новый Структура("ИсточникПараметров,Исполнитель", Объект.Ссылка, Объект.Постановщик);
		//@skip-check use-non-recommended-method
		ФормаДок = ПолучитьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
	ДанныеФормы = ФормаДок.Объект;
	
	СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы);
	ПараметрыДоп = Новый Структура("ФормаДок", ФормаДок);
	
	НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияГлавнойЗадачи", ЭтотОбъект, ПараметрыДоп);
	ФормаДок.ОписаниеОповещенияОЗакрытии = НовыйОповещение;
	
	ФормаДок.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодчиненнуюЗадачу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Запишите задачу";
		Сообщение.Сообщить();
	Иначе
		Если cbr_ОбработчикиФормыЗадачиСервер.ЕстьПользовательскиеНастройки() Тогда
			ПараметрыФормы = Новый Структура("ГлавнаяЗадача,ИсточникПараметров,Исполнитель", Объект.Ссылка, Объект.Ссылка, Объект.Постановщик);
			НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияПодчиненнойЗадачи", ЭтотОбъект);
		
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокументаУпрощенная", ПараметрыФормы, , , , , НовыйОповещение);
		Иначе
			ПараметрыФормы = Новый Структура("ГлавнаяЗадача,ИсточникПараметров,Исполнитель", Объект.Ссылка, Объект.Ссылка, Объект.Постановщик);
			НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияПодчиненнойЗадачи", ЭтотОбъект);
		
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаДокумента", ПараметрыФормы, , , , , НовыйОповещение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СброситьГлавнуюЗадачу(Команда)
	Объект.ГлавнаяЗадача = Неопределено;
	Записать();
	ОтобразитьИерархиюЗадач();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомментарии(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ЗадачаИсточник", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.cbr_КомментарииЗадач", ПараметрыФормы, , Новый УникальныйИдентификатор());
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ задачи");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДедлайн(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаСозданияСогласованияДедлайна", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.cbr_Задача.Форма.ФормаОтветаСогласованияДедлайна", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИерархиюВНовомОкне(Команда)
	ПараметрыФормы = Новый Структура("ТаблицаПодчиненности", ТаблицаПодчиненности);
	ОткрытьФорму("ОбщаяФорма.cbr_ИерархияЗадачОбщая", ПараметрыФормы, , Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗадачу(Команда)
	ВзятьЗадачуНаСервере();
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайл(Команда)
	РаботаСФайламиСлужебныйКлиент.ДобавитьФайлИзФайловойСистемы(Объект.Ссылка, ЭтотОбъект);
	ЗаполнитьТаблицуПрисоединенных();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	ВыделенныеСтроки = ВыделенныеСтрокиФайлов();
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуПрисоединенных", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.УдалитьДанныеФайлов(Оповещение, ВыделенныеСтроки, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура МеткаЕщё(Команда)
	ВызовВыбораМеток();
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюИзменить(Команда)
	ВызовВыбораМеток();	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюОчистить(Команда)
	ОчисткаМетокНаФормеНаСервере();	
	Объект.Метка = Неопределено;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область РаботаСИерархией
&НаСервере
Функция СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы)
	НовыйИД = Новый УникальныйИдентификатор();
	НоваяСсылка = Документы.cbr_Задача.ПолучитьСсылку(НовыйИД);
	Док = Документы.cbr_Задача.СоздатьДокумент();
	Док.УстановитьСсылкуНового(НоваяСсылка);
	ЗначениеВДанныеФормы(Док, ДанныеФормы);
	Возврат  НоваяСсылка; 
КонецФункции

&НаКлиенте
Процедура ПослеСозданияГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФормаДок.Объект.Ссылка) Тогда
		Объект.ГлавнаяЗадача = ДополнительныеПараметры.ФормаДок.Объект.Ссылка;
		Записать();
		ОтобразитьИерархиюЗадач();
		ОбновитьВидимостьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияПодчиненнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
		ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ГлавнаяЗадача = Результат;
		Записать();
		ОтобразитьИерархиюЗадач();
		ОбновитьВидимостьЭлементов();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Метки 
&НаКлиенте
Процедура ПрисвоитьЗначениеМетке(Команда)
	ПараметрыМетки = Новый Структура("Команда", Команда.Имя);
	СтрокаМетки = ТаблицаМеток.НайтиСтроки(ПараметрыМетки);
	ПрисвоитьЗначениеМеткеНаСервере(СтрокаМетки[0].Код);
КонецПроцедуры

&НаСервере
Функция ПолучениеВыборкиМеток()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Центр_МеткиЗадач.Наименование) КАК Наименование,
		|	Центр_МеткиЗадач.ЦветRGB,
		|	ПРЕДСТАВЛЕНИЕ(Центр_МеткиЗадач.Код) КАК Код,
		|	Центр_МеткиЗадач.ЦветТекстаRGB
		|ИЗ
		|	Справочник.cbr_МеткиЗадач КАК Центр_МеткиЗадач
		|ГДЕ
		|	Центр_МеткиЗадач.ВидимостьНаФорме = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеМеткеНаСервере(КодМетки)	
	Метка = Справочники.cbr_МеткиЗадач.НайтиПоКоду(КодМетки);
	Объект.Метка = Метка;
	ПослеВыбораМеткиНаСервере(Метка);
	Элементы.Ещё.Видимость = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ВызовВыбораМеток()
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораМетки", ЭтотОбъект);
	ОткрытьФорму("Справочник.cbr_МеткиЗадач.ФормаВыбора",,,,,,ОписаниеОповещенияОЗакрытииФормыВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораМетки(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПослеВыбораМеткиНаСервере(Результат);
	Объект.Метка = Результат;
	Элементы.Ещё.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораМеткиНаСервере(МеткаСсылка)
	Для Каждого СтрокаМетки Из ТаблицаМеток Цикл
		ИмяКоманды = СтрокаМетки.Команда;
		Элементы.Удалить(Элементы[ИмяКоманды]);
	КонецЦикла;
	
//	Элемент = Элементы.Найти("ДекорацияМетки");
//	Если Элемент <> Неопределено Тогда
//		Элементы.Удалить(Элемент);
//	КонецЕсли;
	
	ТаблицаМеток.Очистить();
	
	RGBМетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МеткаСсылка, "ЦветRGB");
	RGBТекстМетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МеткаСсылка, "ЦветТекстаRGB");
	НаименованиеМетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МеткаСсылка, "Наименование");

//	ДекорацияМетки = Элементы.Добавить("ДекорацияМетки", Тип("ДекорацияФормы"), Элементы.Метки);
//	ДекорацияМетки.Вид = ВидДекорацииФормы.Надпись;
//	ДекорацияМетки.Заголовок = НаименованиеМетки;

	Элементы.ГруппаВыбораМетки.Видимость = Истина;
	Элементы.ВыборМетки.Заголовок = НаименованиеМетки;

	Цвет = RGBМетки;
	Если ЗначениеЗаполнено(Цвет) Тогда
		Фон = СтрРазделить(Цвет, ",");
			//@skip-check new-color
		Элементы.ВыборМетки.ЦветФона = Новый Цвет(Фон[0], Фон[1], Фон[2]);
	Иначе
		//@skip-check new-color
		Элементы.ВыборМетки.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	Цвет = RGBТекстМетки;
	Если ЗначениеЗаполнено(Цвет) Тогда
		Фон = СтрРазделить(Цвет, ",");
			//@skip-check new-color
		Элементы.ВыборМетки.ЦветТекстаЗаголовка = Новый Цвет(Фон[0], Фон[1], Фон[2]);
	Иначе
		//@skip-check new-color
		Элементы.ВыборМетки.ЦветТекстаЗаголовка = Новый Цвет(0, 0, 0);
	КонецЕсли;
	
	Элемент = Элементы.Найти("ВыборМеткиКнопка");
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;					  																																	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаМетокНаФорме(Команда)
	ОчисткаМетокНаФормеНаСервере();	
	Объект.Метка = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ОчисткаМетокНаФормеНаСервере()
	Элементы.ГруппаВыбораМетки.Видимость = Ложь;
	
	Элемент = Элементы.Найти("ВыборМеткиКнопка");
	Если Элемент = Неопределено Тогда
		cbr_ЭлементыФормы.СздКнопка(ЭтотОбъект, "ВыборМеткиКнопка", Элементы.Метки, "Метки", "МеткаЕщё", 2);
	Иначе
		Элемент.Видимость = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеМетокНаФорме(Команда)
	ВызовВыбораМеток();	
КонецПроцедуры

#КонецОбласти

#Область СхемаПодчиненности
&НаСервере
Функция СписокПодчиненных() 
	ПодчиненныеЗадачи = Новый Массив;
	
	ДеревоПодчиненных = РеквизитФормыВЗначение("ДеревоПодчиненныхЗадач");
	ПараметрыОтбораПоиска = Новый Структура("Ссылка", Объект.Ссылка);
	Строки = ДеревоПодчиненных.Строки.НайтиСтроки(ПараметрыОтбораПоиска, Истина);
	
	ЗаполнитьСписокПодчиненныхРекурсивно(Строки, ПодчиненныеЗадачи);

	Возврат ПодчиненныеЗадачи;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПодчиненныхРекурсивно(СтрокиДерева, Список)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Список.Добавить(СтрокаДерева.Ссылка);
		ЗаполнитьСписокПодчиненныхРекурсивно(СтрокаДерева.Строки, Список);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИерархиюЗадач() 
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ТаблицаПодчиненности.Видимость = Ложь;
		Элементы.ДекорацияОткрытьИерархию.Видимость = Ложь;
		Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	cbr_Задача.Ссылка
			|ИЗ
			|	Документ.cbr_Задача КАК cbr_Задача
			|ГДЕ
			|	cbr_Задача.ГлавнаяЗадача = &Задача";
		
		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 ИЛИ ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
			Элементы.ТаблицаПодчиненности.Видимость = Истина;
			Элементы.ДекорацияОткрытьИерархию.Видимость = Истина;
			Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Истина;
		
			СформироватьДеревоДокументов();
			ЗаполнитьСхему();
		Иначе
			Элементы.ТаблицаПодчиненности.Видимость = Ложь;
			Элементы.ДекорацияОткрытьИерархию.Видимость = Ложь;
			Элементы.ОткрытьИерархиюВНовомОкне.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
	
&НаСервере
Процедура СформироватьДеревоДокументов()
	ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Очистить();
	
	КореньЦепочки = ВерхнийУзелИерархии(Объект.Ссылка);
	
	НоваяСтрока = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Ссылка = КореньЦепочки;
	НоваяСтрока.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Наименование");
	НоваяСтрока.Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Проведен");
	НоваяСтрока.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "ПометкаУдаления");
	
	ВывестиПодчиненныеОбъекты(КореньЦепочки, НоваяСтрока);
КонецПроцедуры

&НаСервере
Функция ВерхнийУзелИерархии(Знач ОбъектНачала)
	Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	Пока ЗначениеЗаполнено(Вышестоящая) Цикл
		ОбъектНачала = Вышестоящая;
		Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	КонецЦикла;
	
	Возврат ОбъектНачала;
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеОбъекты(ОбъектНачала, ДеревоПодчиненных)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Задача.Ссылка,
		|	cbr_Задача.Проведен,
		|	cbr_Задача.ПометкаУдаления,
		|	cbr_Задача.Наименование КАК Представление
		|ИЗ
		|	Документ.cbr_Задача КАК cbr_Задача
		|ГДЕ
		|	cbr_Задача.ГлавнаяЗадача = &ГлавнаяЗадача";
	
	Запрос.УстановитьПараметр("ГлавнаяЗадача", ОбъектНачала);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДеревоПодчиненных.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Проведен = Выборка.Проведен;
		НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
		НоваяСтрока.Представление = Выборка.Представление;
	
		//@skip-check query-in-loop
		ВывестиПодчиненныеОбъекты(Выборка.Ссылка, НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСхему()
	ТаблицаПодчиненности.Очистить();
	
	Макет = ПолучитьОбщийМакет("СтруктураПодчиненности");
	
	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныхЗадач.ПолучитьЭлементы(), Макет);
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева, Макет, УровниРекурсии = 1)
	//@skip-check bsl-legacy-check-for-each-statetement-collection
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		//ЭтоИсходныйОбъект = (СтрокаДерева.Ссылка = ЭтаФорма.Объект.Ссылка);
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		// Вывод коннекторов
		Для Уровень = 1 По УровниРекурсии Цикл
			Если УровниРекурсии > Уровень Тогда
				Если ВыводитьВертикальныйКоннектор(УровниРекурсии - Уровень + 1, СтрокаДерева) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
				КонецЕсли;
			Иначе 
				Если СтрокиДерева.Количество() > 1 И (СтрокиДерева.Индекс(СтрокаДерева) <> (СтрокиДерева.Количество() - 1)) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("КоннекторВерхПраво");
				КонецЕсли;	
			КонецЕсли;
			
			// Область.Параметры.Документ = ?(ЭтоИсходныйОбъект, Неопределено, СтрокаДерева.Ссылка);
			Область.Параметры.Документ = СтрокаДерева.Ссылка;
			
			Если Уровень = 1 Тогда
				ТаблицаПодчиненности.Вывести(Область);
			Иначе
				ТаблицаПодчиненности.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
		ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, Ложь, Истина);		
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева, Макет, УровниРекурсии + 1);	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыводитьВертикальныйКоннектор(УровеньВверх, СтрокаДерева)
	ТекущаяСтрока = СтрокаДерева;
	
	Для инд = 1 По УровеньВверх Цикл	
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		Если инд = УровеньВверх Тогда
			ИскомыйРодитель = ТекущаяСтрока;
		ИначеЕсли инд = (УровеньВверх - 1) Тогда
			ИскомаяСтрока = ТекущаяСтрока;
		КонецЕсли;	
	КонецЦикла;
	
	Если ИскомыйРодитель = Неопределено Тогда
		ПодчиненныеЭлементыРодителя = ДеревоПодчиненныхЗадач.ПолучитьЭлементы(); 
	Иначе
		ПодчиненныеЭлементыРодителя = ИскомыйРодитель.ПолучитьЭлементы(); 
	КонецЕсли;
	
	Возврат ПодчиненныеЭлементыРодителя.Индекс(ИскомаяСтрока) < (ПодчиненныеЭлементыРодителя.Количество() - 1);
КонецФункции

&НаСервере
Процедура ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, ЭтоТекущийОбъект = Ложь, ЭтоПодчиненный = Неопределено)
	
	МетаданныеОбъекта = СтрокаДерева.Ссылка.Метаданные();
	ЭтоДокумент       = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
	
	ЕстьПодчиненныеСуммарно = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Количество() > 0;
	ЕстьПодчиненные = ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		И СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
	
	// Вывод картинки
	Если СтрокаДерева.Проведен Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторНиз");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ПометкаУдаления Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторНиз",
					"СправочникПВХПомеченНаУдалениеКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоНиз",
					"СправочникПВХПомеченНаУдалениеКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоВерх",
					"СправочникПВХПомеченНаУдалениеКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторНиз", "СправочникПВХКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоНиз", "СправочникПВХКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоВерх", "СправочникПВХКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоТекущийОбъект Тогда
		ТаблицаПодчиненности.Вывести(ОбластьКартинка); 
	Иначе
		ТаблицаПодчиненности.Присоединить(ОбластьКартинка);
	КонецЕсли;
	
	// Вывод объекта
	ОбластьОбъект = Макет.ПолучитьОбласть(?(ЭтоТекущийОбъект, "ТекущийОбъект", "Объект"));
	ОбластьОбъект.Параметры.ПредставлениеОбъекта = СтрокаДерева.Представление;
	ОбластьОбъект.Параметры.Объект = СтрокаДерева.Ссылка;
	
	Если СтрокаДерева.Ссылка = Объект.Ссылка Тогда
		//@skip-check new-font
		ОбластьОбъект.Области[0].Шрифт = Новый Шрифт(ОбластьОбъект.Области[0].Шрифт, , , Истина);
	КонецЕсли;

	ТаблицаПодчиненности.Присоединить(ОбластьОбъект);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовСервер
&НаСервере
Процедура ПостановщикНачалоВыбораНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	cbr_ВидыЗадач.Партнер
	|ИЗ
	|	Справочник.cbr_ВидыЗадач КАК cbr_ВидыЗадач
	|ГДЕ
	|	cbr_ВидыЗадач.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗадачи);

	РезультатЗапроса = Запрос.Выполнить();	
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Если ВыборкаДетальныеЗаписи.Партнер Тогда
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		Иначе
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПостановщикПриИзмененииНаСервере()
	Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.ГлавныйМенеджер = Объект.Постановщик;
	ИначеЕсли ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Партнеры") Тогда
		ГлавныйМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Постановщик, "ОсновнойМенеджер");
		Если ЗначениеЗаполнено(ГлавныйМенеджер) Тогда
			Объект.ГлавныйМенеджер = ГлавныйМенеджер;
		Иначе
			Объект.ГлавныйМенеджер = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область Календарь

&НаСервере
Процедура ИнициализироватьКалендарь()
	СтандартнаяОбработка = Ложь;   
	ИспользоватьБыстроеРедактирование = Ложь;
	НастройкиОтображения = cbr_КалендарьСервер.ПолучитьНастройкиОтображения(); 
	ПериодОтображения =  НастройкиОтображения.ПериодОтображения;
	ОбновитьОтображениеКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКалендарь()
	
	ОбновитьНастройкиОтображения();
	cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	
КонецПроцедуры   

&НаСервере
Процедура ОбновитьНастройкиОтображения()
	
	
	НастройкиОтображения.ОтображаемаяДата = ТекущаяДата();
    НастройкиОтображения.ЗадачаФильтр = Объект.Ссылка;
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;      
	НастройкиОтображения.ОтображатьДействующиеЗадачи = Ложь; 
	
	УстановитьТекущуюСтраницу(Элементы,  ПериодОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент) 
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	ОбновитьДанныеКалендаря("ПериодОтображения");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	
	
	ОтображаемаяДата =  ТекущаяДата();
	//ВыделенныеДаты.ЗагрузитьЗначения(ОтображаемаяДата.ВыделенныеДаты);
	
	ОбновитьНастройкиОтображения();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанныеКалендаря(ИзмененнаяНастройка = Неопределено)
	
			cbr_КалендарьКлиент.ОбновитьОтображениеПланировщика(
			Планировщик, НастройкиОтображения, ИзмененнаяНастройка);	
	

КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьОтображениеКлиент(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено, ОбновитьНастройки = Ложь)
	
	ДатаСегодня = НачалоДня(ТекущаяДата());
	cbr_КалендарьКлиент.ОбновитьЗаписиКалендаряВПланировщике(
	Планировщик, НастройкиОтображения, Параметр);
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		Если Источник = УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Количество() <> 0 Тогда
				ТекущаяЗаписьКалендаря = Параметр[0];
				ТекущаяДатаНачала = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОтображениеКлиент(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДоступноеВремяФизЛица"
		Или ИмяСобытия = "Запись_ЗанятостьФизЛица"
		Или ИмяСобытия = "Запись_Мероприятие"
		Или ИмяСобытия = "Запись_Отсутствие"
		Или ИмяСобытия = "Закрытие_НастройкиСинхронизацииКалендаря" Тогда
		
		ОбновитьОтображениеКлиент();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НастройкиКалендаря" Тогда
		ОбновитьОтображениеКлиент(,, Истина);
	КонецЕсли;
	
КонецПроцедуры  


&НаСервере
Процедура ОбновитьОтображениеСервер(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено, ОбновитьНастройки = Ложь)
	
	НастройкиОтображения = cbr_КалендарьСервер.ПолучитьНастройкиОтображения();
	НастройкиОтображения.ФизЛица.Очистить();
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	НастройкиОтображения.ОтображатьДействующиеЗадачи = Ложь;
	УстановитьТекущуюСтраницу(Элементы, ПериодОтображения);
	
		
		cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
		
			ИспользоватьБыстроеРедактирование =
				cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
					"ИспользоватьБыстроеРедактирование");
		
				
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Элементы, ПериодОтображения)
	
		
			Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВКалендарь(Команда)
	cbr_КалендарьКлиент.СоздатьЗаписьКалендаряЗадача(Объект.Ссылка,Исполнитель,ЭтотОбъект.ОписаниеЗадачиДокумент.ПолучитьТекст());
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 УстановитьАвтообновлениеФормы();
КонецПроцедуры

 &НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработкаАвтообновления", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область ВидимостьЭлементов
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
	ВидимостьКнопокСообщений();
	ВидимостьЗакрытьЗадачу();
	ВидимостьКнопокСогласования();
	ВидимостьКнопкиТрудозатраты();
	ВидимостьСброситьГлавную();
	ОбновитьВидимостьОсновногоМенеджера();
	ВидимостьКнопкиВопроса();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОсновногоМенеджера()
	Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Партнеры") Тогда
		Элементы.ГлавныйМенеджер.Видимость = Истина;
	Иначе
		Элементы.ГлавныйМенеджер.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьСброситьГлавную()
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		Элементы.ГлавнаяЗадача.Видимость = Истина;
		Элементы.СброситьГлавнуюЗадачу.Видимость = Истина;
	Иначе
		Элементы.ГлавнаяЗадача.Видимость = Ложь;
		Элементы.СброситьГлавнуюЗадачу.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопкиТрудозатраты()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(cbr_ОценкаЧасовСрезПоследних.Согласовано, ЛОЖЬ) КАК Согласовано,
	|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.Пользователи КАК ЭтоПользователь,
	|	ВЫБОР
	|		КОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсполнитель
	|ИЗ
	|	РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК cbr_ОценкаЧасовСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК
	|			cbr_ИсполнителиЗадачСрезПоследних
	|		ПО cbr_ИсполнителиЗадачСрезПоследних.Задача = cbr_ОценкаЧасовСрезПоследних.Задача";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекПользователь", Пользователи.АвторизованныйПользователь());
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Если Объект.КонтрольВремени Тогда
			Если  Выборка.Согласовано И Выборка.ЭтоПользователь И Выборка.ЭтоИсполнитель Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		Иначе
			Если Объект.УчетВремени И Выборка.ЭтоПользователь И Выборка.ЭтоИсполнитель Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСогласования()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьДедлайн", "Видимость", Ложь);

	КонтрольВремениВидаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗадачи, "КонтрольВремени");
	Если ЗначениеЗаполнено(КонтрольВремениВидаЗадачи) Тогда		
		Если КонтрольВремениВидаЗадачи Тогда
			Объект.КонтрольВремени = КонтрольВремениВидаЗадачи;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр",
				Истина);
		КонецЕсли;
	КонецЕсли;
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	cbr_Задача.Ссылка КАК Задача,
		|	ВЫБОР
		|		КОГДА cbr_Задача.Постановщик ССЫЛКА Справочник.Пользователи
		|			ТОГДА cbr_Задача.Постановщик
		|		ИНАЧЕ cbr_Задача.ГлавныйМенеджер
		|	КОНЕЦ КАК Пользователь
		|ПОМЕСТИТЬ вт_Задача
		|ИЗ
		|	Документ.cbr_Задача КАК cbr_Задача
		|ГДЕ
		|	cbr_Задача.Ссылка = &Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Исполнитель,
		|	cbr_ИсполнителиЗадачСрезПоследних.Задача КАК Задача
		|ПОМЕСТИТЬ вт_Исполнитель
		|ИЗ
		|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК cbr_ИсполнителиЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Задача.Задача,
		|	вт_Задача.Пользователь,
		|	вт_Исполнитель.Исполнитель
		|ПОМЕСТИТЬ Вт_ДанныеПоЗадаче
		|ИЗ
		|	вт_Задача КАК вт_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Исполнитель КАК вт_Исполнитель
		|		ПО вт_Задача.Задача = вт_Исполнитель.Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_ОценкаЧасовСрезПоследних.Задача,
		|	cbr_ОценкаЧасовСрезПоследних.Согласовано,
		|	cbr_ОценкаЧасовСрезПоследних.Отказ,
		|	cbr_ОценкаЧасовСрезПоследних.Согласующий,
		|	cbr_ОценкаЧасовСрезПоследних.Согласовант,
		|	cbr_ОценкаЧасовСрезПоследних.КомментарийОценки
		|ПОМЕСТИТЬ вт_Согласовании
		|ИЗ
		|	РегистрСведений.cbr_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК cbr_ОценкаЧасовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	cbr_ДедлайнЗадачСрезПоследних.Задача,
		|	cbr_ДедлайнЗадачСрезПоследних.Согласующий,
		|	cbr_ДедлайнЗадачСрезПоследних.Согласовант,
		|	cbr_ДедлайнЗадачСрезПоследних.Согласовано,
		|	cbr_ДедлайнЗадачСрезПоследних.Отказ,
		|	cbr_ДедлайнЗадачСрезПоследних.КомментарийОценки
		|ПОМЕСТИТЬ вт_Дедлайн
		|ИЗ
		|	РегистрСведений.cbr_ДедлайнЗадач.СрезПоследних(, Задача = &Задача) КАК cbr_ДедлайнЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Вт_ДанныеПоЗадаче.Пользователь = &ТекущийПользователь, Ложь) КАК ЭтоСогласующий,
		|	ЕСТЬNULL(Вт_ДанныеПоЗадаче.Исполнитель = &ТекущийПользователь, Ложь) КАК ЭтоСогласовант,
		|	ЕСТЬNULL(вт_Дедлайн.Согласовано, ЛОЖЬ) КАК СогласованоДедлайн,
		|	ЕСТЬNULL(вт_Дедлайн.Отказ, ЛОЖЬ) КАК ОтказДедлайн,
		|	вт_Дедлайн.КомментарийОценки КАК КомментарийДедлайна,
		|	ЕСТЬNULL(вт_Согласовании.Согласовано, ЛОЖЬ) КАК Согласовано,
		|	ЕСТЬNULL(вт_Согласовании.Отказ, ЛОЖЬ) КАК Отказ,
		|	вт_Согласовании.КомментарийОценки,
		|	вт_Дедлайн.Задача КАК ЗаписьДедлайн,
		|	вт_Согласовании.Задача КАК ЗаписьОценка
		|ИЗ
		|	Вт_ДанныеПоЗадаче КАК Вт_ДанныеПоЗадаче
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Согласовании КАК вт_Согласовании
		|		ПО Вт_ДанныеПоЗадаче.Задача = вт_Согласовании.Задача
		|		И Вт_ДанныеПоЗадаче.Пользователь = вт_Согласовании.Согласующий
		|		И Вт_ДанныеПоЗадаче.Исполнитель = вт_Согласовании.Согласовант
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Дедлайн КАК вт_Дедлайн
		|		ПО Вт_ДанныеПоЗадаче.Задача = вт_Дедлайн.Задача
		|		И Вт_ДанныеПоЗадаче.Пользователь = вт_Дедлайн.Согласующий
		|		И Вт_ДанныеПоЗадаче.Исполнитель = вт_Дедлайн.Согласовант";

		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ЭтоСогласующий Тогда
				СогласованиеИсполнителя = Ложь;
				Если ЗначениеЗаполнено(Выборка.ЗаписьОценка) И Не Выборка.Отказ
					И Не Выборка.Согласовано Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;

				Если ЗначениеЗаполнено(Выборка.ЗаписьДедлайн)
					И Не Выборка.ОтказДедлайн И Не Выборка.СогласованоДедлайн Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьДедлайн",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
			Если Выборка.ЭтоСогласовант Тогда
				СогласованиеИсполнителя = Истина;
				УсловиеЕсли = ЗначениеЗаполнено(Выборка.ЗаписьДедлайн) И Не Выборка.ОтказДедлайн
					И Не Выборка.СогласованоДедлайн;
				Если Не УсловиеЕсли И Выборка.Согласовано Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьДедлайн",
						"Видимость", Истина);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Выборка.ЗаписьОценка) Или Выборка.Отказ Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьДедлайн", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКнопокСвязанныхСИсполнителемНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКнопокСвязанныхСИсполнителем()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Исполнитель,
	|	Центр_ИсполнителиЗадачСрезПоследних.ЗадачаВзята КАК ЗадачаВзята
	|ПОМЕСТИТЬ вт_Исполнитель
	|ИЗ
	|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачам.Руководитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРуководитель,
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачамПользователи.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПользовательГруппы,
	|	вт_Исполнитель.Исполнитель КАК Исполнитель,
	|	вт_Исполнитель.Исполнитель ССЫЛКА Справочник.cbr_ГруппыДоступаКЗадачам КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА вт_Исполнитель.Исполнитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТекПользователь,
	|	вт_Исполнитель.Исполнитель ССЫЛКА Справочник.cbr_Роли КАК ЭтоРоль,
	|	ВЫБОР
	|		КОГДА cbr_РолиПользователи.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПользовательРоли,
	|	вт_Исполнитель.ЗадачаВзята КАК ЗадачаВзята
	|ИЗ
	|	вт_Исполнитель КАК вт_Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_ГруппыДоступаКЗадачам КАК Центр_ГруппыДоступаКЗадачам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_ГруппыДоступаКЗадачам.Пользователи КАК Центр_ГруппыДоступаКЗадачамПользователи
	|			ПО Центр_ГруппыДоступаКЗадачам.Ссылка = Центр_ГруппыДоступаКЗадачамПользователи.Ссылка
	|			И Центр_ГруппыДоступаКЗадачамПользователи.Пользователь = &ТекущийПользователь
	|		ПО вт_Исполнитель.Исполнитель = Центр_ГруппыДоступаКЗадачам.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Роли КАК cbr_Роли
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.cbr_Роли.Пользователи КАК cbr_РолиПользователи
	|			ПО cbr_РолиПользователи.Ссылка = cbr_Роли.Ссылка
	|			И cbr_РолиПользователи.Пользователь = &ТекущийПользователь
	|		ПО вт_Исполнитель.Исполнитель = cbr_Роли.Ссылка";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВзятьЗадачу", "Видимость", Ложь);
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Исполнитель = Выборка.Исполнитель;
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоРуководитель Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоПользовательГруппы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
		КонецЕсли;
		Если Выборка.ЭтоРоль И Выборка.ЭтоПользовательРоли Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
		КонецЕсли;

		Если Выборка.ЭтоТекПользователь И Не Выборка.ЗадачаВзята И Не Пользователи.АвторизованныйПользователь()
			= Объект.Постановщик И Не Пользователи.АвторизованныйПользователь() = Объект.ГлавныйМенеджер Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВзятьЗадачу", "Видимость", Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьЗакрытьЗадачу()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Ложь);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекущийПользователь КАК Исполнитель
			|ИЗ
			|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК cbr_ИсполнителиЗадачСрезПоследних";
		
		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.Исполнитель Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Истина);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопкиВопроса()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА cbr_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоВопросов
		|ПОМЕСТИТЬ вт_Вопросы
		|ИЗ
		|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
		|ГДЕ
		|	cbr_ВопросыПоЗадачам.Задача = &Задача
		|	И cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Вопрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА cbr_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоОтветов
		|ПОМЕСТИТЬ вт_Ответы
		|ИЗ
		|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
		|ГДЕ
		|	cbr_ВопросыПоЗадачам.Задача = &Задача
		|	И cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Ответ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_Вопросы.КоличествоВопросов, 0) КАК КоличествоВопросов,
		|	ЕСТЬNULL(вт_Ответы.КоличествоОтветов, 0) КАК КоличествоОтветов
		|ИЗ
		|	вт_Вопросы КАК вт_Вопросы,
		|	вт_Ответы КАК вт_Ответы";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоВопросов <> Выборка.КоличествоОтветов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСообщений()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА cbr_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоВопросов
		|ПОМЕСТИТЬ вт_Вопросы
		|ИЗ
		|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
		|ГДЕ
		|	cbr_ВопросыПоЗадачам.Задача = &Задача
		|	И cbr_ВопросыПоЗадачам.Адресат = &Адресат
		|	И cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Вопрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА cbr_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоОтветов
		|ПОМЕСТИТЬ вт_Ответы
		|ИЗ
		|	РегистрСведений.cbr_ВопросыПоЗадачам КАК cbr_ВопросыПоЗадачам
		|ГДЕ
		|	cbr_ВопросыПоЗадачам.Задача = &Задача
		|	И cbr_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.cbr_ВидыВопросов.Ответ)
		|	И cbr_ВопросыПоЗадачам.Отправитель = &Отправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_Вопросы.КоличествоВопросов, 0) КАК КоличествоВопросов,
		|	ЕСТЬNULL(вт_Ответы.КоличествоОтветов, 0) КАК КоличествоОтветов
		|ИЗ
		|	вт_Вопросы КАК вт_Вопросы,
		|	вт_Ответы КАК вт_Ответы";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Адресат", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Отправитель", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоВопросов <> Выборка.КоличествоОтветов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСменыСостоянияЗадачи
&НаСервере
Процедура НазначитьИсполнителяНаСервере() 
	Исполнитель = Пользователи.АвторизованныйПользователь();
	cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗадачуНаСервере()
	Подписка = ПредопределенноеЗначение(
		"Перечисление.cbr_ПодпискаДляТриггера.КнопкаЗакрытияЗадачи");
	cbr_ОбработкаТриггеров.ВызовТриггера(Подписка, Объект.Ссылка);
	
	Если Объект.ТребуетКонтроляПоЗавершению Тогда
		ПодчиненнаяЗадача = Документы.cbr_Задача.СоздатьДокумент();
		ПодчиненнаяЗадача.Дата = ТекущаяДатаСеанса();
		ПодчиненнаяЗадача.Наименование = "Поверка задачи " + Объект.Наименование + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
		ПодчиненнаяЗадача.ВидЗадачи = Объект.ВидЗадачи;
		ПодчиненнаяЗадача.Постановщик = Объект.Постановщик;
		ПодчиненнаяЗадача.ГлавнаяЗадача = Объект.Ссылка;
		ПодчиненнаяЗадача.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Партнеры") Тогда
			Исполнитель = Объект.ГлавныйМенеджер;
		ИначеЕсли ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
			Исполнитель = Объект.Постановщик;
		КонецЕсли;
		
		cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПослеСогласованияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте 
Процедура ПослеОтветаНаВопрос() Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ВзятьЗадачуНаСервере()
	Исполнитель = Пользователи.АвторизованныйПользователь();
	cbr_ДвиженияПоРегистрам.ДвижениеИсполнителиЗадач(Объект.Ссылка, Исполнитель, Истина);
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСтрокиФайлов()
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаПрисоединенныхФайлов.ВыделенныеСтроки Цикл
		СтрокаСписка = ТаблицаПрисоединенныхФайлов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ВыделенныеСтроки.Добавить(СтрокаСписка.Ссылка);
	КонецЦикла;
	
	Возврат ВыделенныеСтроки	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуСвязанныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	Элементы.ТаблицаПрисоединенныхФайлов.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрисоединенных(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	 |	cbr_ЗадачаПрисоединенныеФайлы.Ссылка, 
	 |	cbr_ЗадачаПрисоединенныеФайлы.ПометкаУдаления, 
	 |	cbr_ЗадачаПрисоединенныеФайлы.Наименование, 
	 |	cbr_ЗадачаПрисоединенныеФайлы.ВладелецФайла, 
	 |	cbr_ЗадачаПрисоединенныеФайлы.ИндексКартинки
	 |ИЗ 
	 |      Справочник.cbr_ЗадачаПрисоединенныеФайлы
	 |КАК 
	 |      cbr_ЗадачаПрисоединенныеФайлы
	 |ГДЕ
	 |	   cbr_ЗадачаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	 |И
	 |	   НЕ cbr_ЗадачаПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 6 Тогда
		Элементы.ТаблицаПрисоединенныхФайлов.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.Авто; 
		Элементы.ТаблицаПрисоединенныхФайлов.АвтоМаксимальнаяВысота = Ложь;
		Элементы.ТаблицаПрисоединенныхФайлов.МаксимальнаяВысота = 7;
	Иначе
		Элементы.ТаблицаПрисоединенныхФайлов.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому; 
		Элементы.ТаблицаПрисоединенныхФайлов.АвтоМаксимальнаяВысота = Истина;;
		Элементы.ТаблицаПрисоединенныхФайлов.МаксимальнаяВысота = 0;
	КонецЕсли;	
		
	ТаблицаПрисоединенныхФайлов.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПрисоединенныхФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаданногоВопроса(Резкльтат, ДополнительныеПараметры) Экспорт
	ВидимостьКнопкиВопроса();
КонецПроцедуры


&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	cbr_КалендарьКлиент.ОбработкаВыбораЭлемента(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, ЗначенияИзмерений, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти