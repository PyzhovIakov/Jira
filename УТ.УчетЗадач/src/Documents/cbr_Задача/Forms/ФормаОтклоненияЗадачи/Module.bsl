
#Область ОбработчикиСобытийформы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПараметрПостановщик = Неопределено;
	Если Параметры.Свойство("Постановщик", ПараметрПостановщик) Тогда
		Постановщик = ПараметрПостановщик;
	КонецЕсли;
	
	ПараметрГлавныйМенеджер = Неопределено;
	Если Параметры.Свойство("ГлавныйМенеджер", ПараметрГлавныйМенеджер) Тогда
		ГлавныйМенеджер = ПараметрГлавныйМенеджер;
	КонецЕсли;
	
	ПараметрОснование = Неопределено;
	Если Параметры.Свойство("Основание", ПараметрОснование) Тогда
		Основание = ПараметрОснование;
	КонецЕсли;
	
	ПараметрАвтор = Неопределено;
	Если Параметры.Свойство("Автор", ПараметрАвтор) Тогда
		Автор = ПараметрАвтор;
	КонецЕсли;
	
	ПараметрИсполнительЗадачи = Неопределено;
	Если Параметры.Свойство("Исполнитель", ПараметрИсполнительЗадачи) Тогда
		ИсполнительЗадачи = ПараметрИсполнительЗадачи;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Отклонить(Команда)
	Если Не ЗначениеЗаполнено(ПричинаОтказа) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не введена причина отказа");
		Возврат;		
	КонецЕсли;
	ОтклонитьНаСервере();
	Закрыть();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОтклонитьНаСервере()   	
	
	ГруппаЗадачи = ПолучениеГруппыЗадачи();
	
	Если ГруппаЗадачи = Неопределено И ТипЗнч(Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
		Исполнитель = Постановщик;
	ИначеЕсли ГруппаЗадачи <> Неопределено И ТипЗнч(ГруппаЗадачи.ПредыдущийИсполнитель) = Тип("СправочникСсылка.cbr_ГруппыДоступаКЗадачам") Тогда
		Исполнитель = ГруппаЗадачи.ПредыдущийИсполнитель;
	ИначеЕсли ГруппаЗадачи <> Неопределено И ТипЗнч(ГруппаЗадачи.ПредыдущийИсполнитель) = Тип("СправочникСсылка.Пользователи") И ТипЗнч(Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
		Исполнитель = Постановщик;
	Иначе
		Исполнитель = ГлавныйМенеджер;
	КонецЕсли;
	
	Менеджер = РегистрыСведений.cbr_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
	Менеджер.Задача = Основание;
	Менеджер.Период = ТекущаяДатаСеанса();
	Менеджер.Исполнитель = Исполнитель;
	Менеджер.ПричинаОтказа = ПричинаОтказа;
	Менеджер.Записать();
		
	Если ГруппаЗадачи <> Неопределено И ГруппаЗадачи.Руководитель <> Неопределено Тогда
		Исполнитель = ГруппаЗадачи.Руководитель;
	КонецЕсли;
	
	УведомитьПользователя(Исполнитель);
	
КонецПроцедуры

&НаСервере
Функция ПолучениеГруппыЗадачи()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА cbr_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.cbr_ГруппыДоступаКЗадачам
	|			ТОГДА ВЫРАЗИТЬ(cbr_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Справочник.cbr_ГруппыДоступаКЗадачам).Руководитель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Руководитель,
	|	cbr_ИсполнителиЗадачСрезПоследних.Исполнитель КАК ПредыдущийИсполнитель
	|ИЗ
	|	РегистрСведений.cbr_ИсполнителиЗадач.СрезПоследних(
	|			,
	|			Задача = &Задача
	|				И  Исполнитель <> &Исполнитель ) КАК cbr_ИсполнителиЗадачСрезПоследних";

	Запрос.УстановитьПараметр("Задача", Основание);
	Запрос.УстановитьПараметр("Исполнитель", ИсполнительЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ПредыдущийИсполнитель,Руководитель", Выборка.ПредыдущийИсполнитель, Выборка.Руководитель);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УведомитьПользователя(Исполнитель)
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекстПричиныОтказа = "Назначенный исполнитель отказался от задачи. Причина: " + ПричинаОтказа;
	ПериодичностьНапоминания = ПредопределенноеЗначение(
		"Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
	
	СвойстваУведомления = Новый Структура;
	СвойстваУведомления.Вставить("Пользователь", Исполнитель);
	СвойстваУведомления.Вставить("Описание", ТекстПричиныОтказа);
	СвойстваУведомления.Вставить("СрокНапоминания", ТекущаяДата);
	СвойстваУведомления.Вставить("ВремяСобытия", ТекущаяДата);
	СвойстваУведомления.Вставить("СпособУстановкиВремениНапоминания", ПериодичностьНапоминания);
	СвойстваУведомления.Вставить("ИнтервалВремениНапоминания", 60);
	СвойстваУведомления.Вставить("Источник", Основание);
	СвойстваУведомления.Вставить("Идентификатор", "");
	
	ПринудительныеУведомления = Новый Структура;
	ПринудительныеУведомления.Вставить("База", Истина);
	ПринудительныеУведомления.Вставить("Битрикс", Ложь);
	ПринудительныеУведомления.Вставить("Телеграм", Ложь);
	ПринудительныеУведомления.Вставить("ЭлектроннаяПочта", Ложь);
	
	cbr_УведомленияПользователей.ОтправитьУведомлениеПользователю(СвойстваУведомления,
		ПринудительныеУведомления);
КонецПроцедуры
#КонецОбласти
