#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	ОтображаемаяДата = НачалоДня(ТекущаяДатаСеанса());
	ПериодОтображения = cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
		"ПериодОтображенияРабочегоКалендаря");

	ОтображатьЛегенду = cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
		"ОтображатьЛегенду");

	УстановитьВариантРаботыФормы();
	ОбновитьОтображениеСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ДатаСегодня = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());

	УстановитьДоступностьЭлементов();
	УстановитьОтображаемуюДату(ОтображаемаяДата);

	УстановитьАвтообновлениеФормы();
	
	cbr_КалендарьКлиент.ОбработкаПриАктивизации(Элементы.Планировщик, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда

		Если Источник = УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Количество() <> 0 Тогда
				ТекущаяЗаписьКалендаря = Параметр[0];
				ТекущаяДатаНачала = Неопределено;
			КонецЕсли;
		КонецЕсли;

		ОбновитьОтображениеКлиент(Параметр);

	КонецЕсли;

	Если ИмяСобытия = "Запись_ДоступноеВремяФизЛица" Или ИмяСобытия = "Запись_ЗанятостьФизЛица" Или ИмяСобытия = "Запись_Мероприятие"
		Или ИмяСобытия = "Запись_Отсутствие" Или ИмяСобытия = "Закрытие_НастройкиСинхронизацииКалендаря" Тогда

		ОбновитьОтображениеКлиент();

	КонецЕсли;

	Если ИмяСобытия = "Запись_НастройкиКалендаря" Тогда
		ОбновитьОтображениеКлиент( , , Истина);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьПериодНажатие(Элемент)

	ИзменитьВидимостьВыбораДаты();

КонецПроцедуры

&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент)

	УстановитьОтображаемуюДату(ОтображаемаяДата);

	ОбновитьДанныеКалендаря("ПериодОтображения");
	УстановитьДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)

	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	ОбновитьНастройкиОтображения();

	ОбновитьДанныеКалендаря();

КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриАктивизацииДаты(Элемент)

	Если Элемент.ВыделенныеДаты.Количество() = ВыделенныеДаты.Количество() Тогда
		Возврат;
	КонецЕсли;

	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	Если ВыделенныеДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ВыделенныеДаты.НайтиПоЗначению(ОтображаемаяДата) = Неопределено Тогда
		ОтображаемаяДата = ВыделенныеДаты[ВыделенныеДаты.Количество() - 1].Значение;
	КонецЕсли;
	ОбновитьНастройкиОтображения();

	ОбновитьДанныеКалендаря("ПериодОтображения");

КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	//ОбщегоНазначенияДокументооборотКлиент.ПриВыводеПериода(Элемент, ОформлениеПериода);

КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ЭлементПланировщика") Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Структура") Тогда
		Если (Не cbr_КаленарьКлиентСервер.ЭтоЭлементЗаписиКалендаря(ПараметрыПеретаскивания.Значение[0])) = Ложь Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ЭлементПланировщика") Тогда
		СтандартнаяОбработка = Ложь;
		cbr_КалендарьКлиент.ПеренестиЭлементыПланировщикаНаДату(
			Элементы.Планировщик, Планировщик, НастройкиОтображения, ПараметрыПеретаскивания.Значение, ВыбраннаяДата,
			УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Структура") Тогда

		Если Не cbr_КаленарьКлиентСервер.ЭтоЭлементЗаписиКалендаря(
				ПараметрыПеретаскивания.Значение[0]) Тогда
			Возврат;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		cbr_КалендарьКлиент.ПеренестиЭлементыЗаписейКалендаряНаДату(
			ПараметрыПеретаскивания.Значение, ВыбраннаяДата);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаКалендаряНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ВыбратьКалендарьСотрудника();

КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаКалендаряПриИзменении(Элемент)

	ОбновитьНастройкиОтображения();
	ЗавершениеВыбратьКалендарьСотрудникаСервер();

КонецПроцедуры

#Область ОбработчикиСобытийКалендаря

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)

	cbr_КалендарьКлиент.ОбработкаПриАктивизации(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	cbr_КалендарьКлиент.ОбработкаПередСозданием(
		Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка, ИспользоватьБыстроеРедактирование,
		ПолучениеФизлицаКалендаря(ФизЛицоКалендаря, Значения), НастройкиОтображения, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)

	cbr_КалендарьКлиент.ОбработкаВыбораЭлемента(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	//cbr_КалендарьКлиент.ОбработкаОкончанияРедактированияЭлемента(
	//	Элемент, НовыйЭлемент, ОтменаРедактирования,
	//	Планировщик, НастройкиОтображения, УникальныйИдентификатор, ФизЛицоКалендаря);
	//
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)

	cbr_КалендарьКлиент.ОбработкаПередНачаломРедактированиемЭлемента(Элемент, НовыйЭлемент, СтандартнаяОбработка,
		ФизЛицоКалендаря);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)

	cbr_КалендарьКлиент.ОбработкаПередУдалениемЭлемента(Элемент, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)

	cbr_КалендарьКлиент.ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланДня

&НаКлиенте
Процедура ПланДняПриАктивизацииСтроки(Элемент)

	cbr_КалендарьКлиент.ОбработкаАктивизацииОбластиПланДня(
		Элемент, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	cbr_КалендарьКлиент.ОбработкаВыбораПланДня(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	cbr_КалендарьКлиент.ОбработкаПередНачаломДобавленияПланДня(
		Элемент, Отказ, Копирование, Родитель, Группа, НастройкиОтображения, ФизЛицоКалендаря);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломИзменения(Элемент, Отказ)

	cbr_КалендарьКлиент.ОбработкаПередНачаломИзмененияПланДня(Элементы.ПланДня, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередУдалением(Элемент, Отказ)

	cbr_КалендарьКлиент.ОбработкаПередУдалениемПланДня(Элементы.ПланДня, ПланДня, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	cbr_КалендарьКлиент.ОбработкаНачалаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, Выполнение, НастройкиОтображения);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	cbr_КалендарьКлиент.ОбработкаПроверкиПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);

КонецПроцедуры

&НаКлиенте
Процедура ПланДняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	cbr_КалендарьКлиент.ОбработкаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтработатьПланДня(Команда)

	cbr_КалендарьКлиент.ОтработатьВыделенныеЗаписиКалендаряПланДня(Элементы.ПланДня, ПланДня);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда)

	ОбновитьОтображениеКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиКалендаря(Команда)

	ОткрытьФорму("Справочник.cbr_Календарь.Форма.НастройкиКалендаря");

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредыдущийПериод(Команда)

	УстановитьОтображаемуюДату(
		cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(
			ПериодОтображения, ОтображаемаяДата));

	ОбновитьДанныеКалендаря();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСегодня(Команда)

	УстановитьОтображаемуюДату(ОбщегоНазначенияКлиент.ДатаСеанса());

	ОбновитьДанныеКалендаря();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСледующийПериод(Команда)

	УстановитьОтображаемуюДату(
		cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(
			ПериодОтображения, ОтображаемаяДата));

	ОбновитьДанныеКалендаря();

КонецПроцедуры

&НаКлиенте
Процедура СкрытьЛегенду(Команда)

	СкрытьЛегендуСервер();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗанятость(Команда)

	Если ОтображаемаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		cbr_КалендарьКлиент.СоздатьЗанятость();
		Возврат;
	КонецЕсли;

	ДатаНачалаНовойЗаписи = ОтображаемаяДата + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	cbr_КалендарьКлиент.СоздатьЗанятость(ДатаНачалаНовойЗаписи, ДатаОкончанияНовойЗаписи, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаря(Команда)

	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		cbr_КалендарьКлиент.СоздатьЗаписьКалендаряПланДня(
			Элементы.ПланДня, НастройкиОтображения, ФизЛицоКалендаря);
	Иначе
		cbr_КалендарьКлиент.СоздатьЗаписьКалендаряПланировщик(
			НастройкиОтображения, ФизЛицоКалендаря);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучениеФизлицаКалендаря(ФизЛицоКалендаря, Значения)
	Возврат ?(ФизЛицоКалендаря = Справочники.Пользователи.ПустаяСсылка(), Значения["ФизическоеЛицо"], ФизЛицоКалендаря);
КонецФункции

&НаСервере
Процедура ЗавершениеВыбратьКалендарьСотрудникаСервер()

	cbr_КалендарьСервер.УстановитьПерсональнуюНастройку(
		"ТекущиеКалендариВсеКалендари", ФизЛицаКалендаря.ВыгрузитьЗначения());
	ОбновитьОтображениеСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	Элементы.ГруппаЛегенда.Видимость = ОтображатьЛегенду;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()

	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда

		Элементы.ГруппаОписаниеЛегенды.Доступность = Ложь;

	Иначе

		Элементы.ГруппаОписаниеЛегенды.Доступность = cbr_КаленарьКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(
			НастройкиОтображения);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкрытьЛегендуСервер()

	ОтображатьЛегенду = Ложь;
	cbr_КалендарьСервер.УстановитьПерсональнуюНастройку("ОтображатьЛегенду", Ложь);
	УстановитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()

	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура") И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработкаАвтообновления", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвтообновления()

	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура") Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	Иначе

		Если ПериодОтображения = ПредопределенноеЗначение(
			"Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда

			ОбновитьОтображениеКлиент();

		Иначе

			ОбновитьДанныеКалендаря();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)

	Элементы.ОтображаемаяДата.ВыделенныеДаты.Очистить();
	ОтображаемаяДата = НоваяОтображаемаяДата;
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	ВыделенныеДаты.ЗагрузитьЗначения(Элементы.ОтображаемаяДата.ВыделенныеДаты);

	ОбновитьНастройкиОтображения();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКлиент(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройки = Ложь)

	ДатаСегодня = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());

	Если Параметр <> Неопределено И ПериодОтображения <> ПредопределенноеЗначение(
		"Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда

		cbr_КалендарьКлиент.ОбновитьЗаписиКалендаряВПланировщике(
			Планировщик, НастройкиОтображения, Параметр);

		Возврат;

	КонецЕсли;

	СвернутыеЭлементы = cbr_КалендарьКлиент.ПолучитьСвернутыеЭлементыПланаДня(
		Элементы.ПланДня, ПланДня);
	ОбновитьОтображениеСервер(Параметр, ИзмененнаяНастройка, ОбновитьНастройки);
	cbr_КалендарьКлиент.ВосстановитьСостояниеПланаДня(
		Элементы.ПланДня, ПланДня, СвернутыеЭлементы, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);

	Если ОбновитьНастройки Тогда
		УстановитьАвтообновлениеФормы();
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеКалендаря(ИзмененнаяНастройка = Неопределено)

	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		ОбновитьОтображениеКлиент( , ИзмененнаяНастройка);
	Иначе
		cbr_КалендарьКлиент.ОбновитьОтображениеПланировщика(
			Планировщик, НастройкиОтображения, ИзмененнаяНастройка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСервер(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройки = Ложь)

	cbr_КалендарьСервер.СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);

	НастройкиОтображения = cbr_КалендарьСервер.ПолучитьНастройкиОтображения();
	НастройкиОтображения.ФизЛица.Очистить();
	Для Каждого ОчередноеФизЛицо Из ФизЛицаКалендаря Цикл
		НастройкиОтображения.ФизЛица.Добавить(ОчередноеФизЛицо.Значение);
	КонецЦикла;
	Если ФизЛицаКалендаря.Количество() = 1 Тогда
		ФизЛицоКалендаря = ФизЛицаКалендаря[0].Значение;
	Иначе
		ФизЛицоКалендаря = Неопределено;
	КонецЕсли;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	НастройкиОтображения.ОтображатьДействующиеЗадачи = ОтображатьДействуюшиеЗадачи;
	УстановитьТекущуюСтраницу(Элементы, ФизЛицаКалендаря, ПериодОтображения);

	Если ПериодОтображения = Перечисления.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня Тогда

		ПланДняЗначение = РеквизитФормыВЗначение("ПланДня");
		cbr_КалендарьСервер.ОтобразитьПланДня(ПланДняЗначение, НастройкиОтображения);
		ЗначениеВРеквизитФормы(ПланДняЗначение, "ПланДня");

	Иначе

		cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);

		ИспользоватьБыстроеРедактирование = cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
					"ИспользоватьБыстроеРедактирование");

		УстановитьВидимостьЭлементов();

	КонецЕсли;

	Если ОбновитьНастройки Тогда
		ОтображатьЛегенду = cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку("ОтображатьЛегенду");
		УстановитьВидимостьЭлементов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВариантРаботыФормы()

	Если Не ЗначениеЗаполнено(Параметры.ВариантРаботыФормы) Тогда
		Параметры.ВариантРаботыФормы = "МойКалендарь";
	КонецЕсли;

	Если Параметры.ВариантРаботыФормы = "МойКалендарь" Тогда
		КлючНазначенияИспользования = "МойКалендарь";
		Заголовок = НСтр("ru = 'Мой календарь'");
		ФизЛицоКалендаря = cbr_КалендарьСервер.ФизЛицоПользователя();
		ФизЛицаКалендаря.Добавить(ФизЛицоКалендаря);
		Элементы.ФизЛицаКалендаря.Видимость = Ложь;
		Элементы.ФормаСоздатьЗанятость.Видимость = Истина;
	ИначеЕсли Параметры.ВариантРаботыФормы = "ВсеКалендари" Тогда
		КлючНазначенияИспользования = "ВсеКалендари";
		Заголовок = НСтр("ru = 'Все календари'");
		ФизЛицаКалендаря.ЗагрузитьЗначения(cbr_КалендарьСервер.ПолучитьПерсональнуюНастройку(
			"ТекущиеКалендариВсеКалендари"));
		Если ФизЛицаКалендаря.Количество() = 0 Тогда
			ФизЛицаКалендаря.Добавить(Пользователи.АвторизованныйПользователь());
		КонецЕсли;
		Элементы.ФизЛицаКалендаря.Видимость = Истина;
		Элементы.ФормаСоздатьЗанятость.Видимость = Ложь;
	ИначеЕсли Параметры.ВариантРаботыФормы = "КалендарьСотрудника" Тогда
		КлючНазначенияИспользования = "КалендарьСотрудника";
		Заголовок = СтрШаблон(НСтр("ru = 'Календарь сотрудника %1'"), Параметры.ФизЛицо);
		ФизЛицоКалендаря = Параметры.ФизЛицо;
		ФизЛицаКалендаря.Добавить(ФизЛицоКалендаря);
		Элементы.ФизЛицаКалендаря.Видимость = Ложь;
		Элементы.ФормаСоздатьЗанятость.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОтображения()

	НастройкиОтображения.ФизЛица.Очистить();
	Для Каждого ОчередноеФизЛицо Из ФизЛицаКалендаря Цикл
		НастройкиОтображения.ФизЛица.Добавить(ОчередноеФизЛицо.Значение);
	КонецЦикла;
	Если ФизЛицаКалендаря.Количество() = 1 Тогда
		ФизЛицоКалендаря = ФизЛицаКалендаря[0].Значение;
	Иначе
		ФизЛицоКалендаря = Неопределено;
	КонецЕсли;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	НастройкиОтображения.ОтображатьДействующиеЗадачи = ОтображатьДействуюшиеЗадачи;

	УстановитьТекущуюСтраницу(Элементы, ФизЛицаКалендаря, ПериодОтображения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникиФизЛицКалендаря(ФизЛица)

	Результат = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	ПройденныеФизЛица = Новый Соответствие;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Сотрудник);
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Элементы, ФизЛицаКалендаря, ПериодОтображения)

	УказаныФизЛица = ФизЛицаКалендаря.Количество() <> 0;

	Если УказаныФизЛица И ПериодОтображения = ПредопределенноеЗначение(
		"Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланДня;
	ИначеЕсли УказаныФизЛица Тогда
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланировщик;
	Иначе
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПусто;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	cbr_КалендарьСервер.УстановитьУсловноеОформлениеПланДня(УсловноеОформление);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьВыбораДаты()

	Элементы.ГруппаДата.Видимость = Не Элементы.ГруппаДата.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьЗаголовок()

	ПредставленияПериода = "";
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		ПредставленияПериода = Формат(ОтображаемаяДата, "ДФ='MMMM yy'");

	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ТриДня")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда

		НачалоПериода = cbr_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
						ПериодОтображения, ОтображаемаяДата);
		КонецПериода = cbr_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
						ПериодОтображения, ОтображаемаяДата);
		ПредставленияПериода = СтрШаблон("%1 - %2", Формат(НачалоПериода, "ДФ=dd.MM"), Формат(КонецПериода, "ДФ=dd.MM"));

	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.cbr_ПериодОтображенияРабочегоКалендаря.День") Тогда
		ПредставленияПериода = Формат(ОтображаемаяДата, "ДФ='dd MMM yyyy'");

	КонецЕсли;

	Элементы.НадписьПериод.Заголовок = ПредставленияПериода;

КонецПроцедуры
&НаКлиенте
Процедура ОтображатьДействуюшиеЗадачиПриИзменении(Элемент)
	ОбновитьНастройкиОтображения();
	cbr_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
КонецПроцедуры
#КонецОбласти